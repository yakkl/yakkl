{"version":3,"file":"399.js","mappings":"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","sources":["webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+networks@5.7.1/node_modules/@ethersproject/networks/lib.esm/_version.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+networks@5.7.1/node_modules/@ethersproject/networks/lib.esm/index.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/_version.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/hashes.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+hash@5.7.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+hash@5.7.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+hash@5.7.0/node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+hash@5.7.0/node_modules/@ethersproject/hash/lib.esm/namehash.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/addresses.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/formatter.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/base-provider.js","webpack://yakkl-wallet/../../node_modules/.pnpm/@ethersproject+providers@5.7.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js","webpack://yakkl-wallet/../../node_modules/.pnpm/alchemy-sdk@3.5.1_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/alchemy-sdk/dist/esm/alchemy-provider-8b0c3e20.js","webpack://yakkl-wallet/../../node_modules/.pnpm/bech32@1.1.4/node_modules/bech32/index.js"],"sourcesContent":["export const version = \"networks/5.7.1\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n    return (value && typeof (value.renetwork) === \"function\");\n}\nfunction ethDefaultProvider(network) {\n    const func = function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\"ropsten\"];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: { chainId: 2, name: \"morden\" },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: { chainId: 100, name: \"xdai\" },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        }\n        else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n//# sourceMappingURL=index.js.map","export const version = \"providers/5.7.2\";\n//# sourceMappingURL=_version.js.map","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n//# sourceMappingURL=hashes.js.map","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function (arr, depth) {\n        forEach.call(arr, function (val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            }\n            else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nexport function decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1]; // first symbol has frequency 1\n    for (let i = 1; i < symbol_count; i++) {\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = (read_buffer << 8) | bytes[pos++];\n            read_width = 8;\n        }\n        return (read_buffer >> --read_width) & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for (let i = 0; i < N; i++)\n        register = (register << 1) | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while (true) {\n        let value = Math.floor((((register - low + 1) * total) - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while (end - start > 1) { // binary search\n            let mid = (start + end) >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            }\n            else {\n                start = mid;\n            }\n        }\n        if (start == 0)\n            break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while (((a ^ b) & HALF) == 0) {\n            register = (register << 1) & MASK | read_bit();\n            a = (a << 1) & MASK;\n            b = (b << 1) & MASK | 1;\n        }\n        while (a & ~b & QRTR) {\n            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n            a = (a << 1) ^ HALF;\n            b = ((b ^ HALF) << 1) | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map(x => {\n        switch (x - offset) {\n            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 1: return offset + bytes[pos_payload++];\n            default: return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nexport function read_payload(v) {\n    let pos = 0;\n    return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i) {\n    return (i & 1) ? (~i >> 1) : (i >> 1);\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for (let i = 0; i < n; i++)\n        v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = -1; i < n; i++)\n        v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = 0; i < n; i++)\n        v[i] = x += signed(next());\n    return v;\n}\nexport function read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next) {\n    let ret = [];\n    while (true) {\n        let w = next();\n        if (w == 0)\n            break;\n        ret.push(read_linear_table(w, next));\n    }\n    while (true) {\n        let w = next() - 1;\n        if (w < 0)\n            break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n    let v = [];\n    while (true) {\n        let i = next();\n        if (i == 0)\n            break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i) => {\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j) => {\n            let j_dy = j * dy;\n            return [x + j * dx, ys.map(y => y + j_dy)];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map(v => [v[0], v.slice(1)]);\n}\nexport function read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b) => a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while (true) {\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0)\n                break;\n            branches.push({ set: new Set(keys), node: read() });\n        }\n        branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = (temp / 3) | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return { branches, valid, fe0f, save, check };\n    }\n}\n//# sourceMappingURL=decoder.js.map","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { decode } from \"@ethersproject/base64\";\nimport { read_compressed_payload } from './decoder.js';\nexport function getData() {\n    return read_compressed_payload(decode(''));\n}\n//# sourceMappingURL=include.js.map","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter(cp => cp != 0xFE0F);\n}\nexport function ens_normalize_post_check(name) {\n    for (let label of name.split('.')) {\n        let cps = explode_cp(label);\n        try {\n            for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(`underscore only allowed at start`);\n                }\n            }\n            if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(`invalid label extension`);\n            }\n        }\n        catch (err) {\n            throw new Error(`Invalid label \"${label}\": ${err.message}`);\n        }\n    }\n    return name;\n}\nexport function ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while (input.length) {\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten)\n        eaten.length = 0; // clear input buffer (if needed)\n    while (pos) {\n        let cp = cps[--pos];\n        node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node)\n            break;\n        if (node.save) { // remember\n            saved = cp;\n        }\n        else if (node.check) { // check exclusion\n            if (cp === saved)\n                break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F)\n                pos--; // consume optional FE0F\n        }\n        if (node.valid) { // this is a valid emoji (so far)\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2)\n                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten)\n                eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n//# sourceMappingURL=lib.js.map","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { ens_normalize } from \"./ens-normalize/lib\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    if (comp.length === 0) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\nexport function ensNormalize(name) {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\nexport function isValidName(name) {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    }\n    catch (error) { }\n    return false;\n}\nexport function namehash(name) {\n    /* istanbul ignore if */\n    if (typeof (name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n    return hexlify(result);\n}\nexport function dnsEncode(name) {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n//# sourceMappingURL=namehash.js.map","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n//# sourceMappingURL=addresses.js.map","\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === (34 * 2)) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                    const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                    return \"sia:/\\/\" + hash;\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // This is the first filter for this event, so we want to\n                            // restrict events to events that happened no earlier than now\n                            if (event._lastBlockNumber === -2) {\n                                event._lastBlockNumber = blockNumber - 1;\n                            }\n                            // Filter from the last *known* event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild, since it is quite\n                            // likely there just haven't been any events to move the lastBlockNumber.\n                            const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            if (minFromBlock > filter.fromBlock) {\n                                filter.fromBlock = minFromBlock;\n                            }\n                            if (filter.fromBlock < 0) {\n                                filter.fromBlock = 0;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: { domain: populated.domain, types, value: populated.value }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = shallowCopy(params);\n                            params.transaction = shallowCopy(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=json-rpc-provider.js.map","import { _ as __awaiter, D as DEFAULT_ALCHEMY_API_KEY, C as CustomNetworks, a as DEFAULT_NETWORK, N as Network, I as IS_BROWSER, V as VERSION, l as logWarn, d as deepCopy, E as EthersNetwork, g as getAlchemyHttpUrl, b as getAlchemyWsUrl } from './index-1789de96.js';\nimport { getNetwork } from '@ethersproject/networks';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { fetchJson } from '@ethersproject/web';\nimport './api/utils';\nimport '@ethersproject/bignumber';\nimport 'axios';\nimport '@ethersproject/abstract-provider';\nimport '@ethersproject/wallet';\nimport '@ethersproject/contracts';\n\n/** Maximum size of a batch on the rpc provider. */\r\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\r\n/** Timeout interval before the pending batch is sent. */\r\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\r\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */\r\nclass RequestBatcher {\r\n    constructor(sendBatchFn, maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE) {\r\n        this.sendBatchFn = sendBatchFn;\r\n        this.maxBatchSize = maxBatchSize;\r\n        /**\r\n         * Array of enqueued requests along with the constructed promise handlers for\r\n         * each request.\r\n         */\r\n        this.pendingBatch = [];\r\n    }\r\n    /**\r\n     * Enqueues the provided request. The batch is immediately sent if the maximum\r\n     * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n     * is sent after 10ms.\r\n     *\r\n     * Returns a promise that resolves with the result of the request.\r\n     */\r\n    enqueueRequest(request) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const inflightRequest = {\r\n                request,\r\n                resolve: undefined,\r\n                reject: undefined\r\n            };\r\n            const promise = new Promise((resolve, reject) => {\r\n                inflightRequest.resolve = resolve;\r\n                inflightRequest.reject = reject;\r\n            });\r\n            this.pendingBatch.push(inflightRequest);\r\n            if (this.pendingBatch.length === this.maxBatchSize) {\r\n                // Send batch immediately if we are at the maximum batch size.\r\n                void this.sendBatchRequest();\r\n            }\r\n            else if (!this.pendingBatchTimer) {\r\n                // Schedule batch for next event loop + short duration\r\n                this.pendingBatchTimer = setTimeout(() => this.sendBatchRequest(), DEFAULT_REQUEST_BATCH_DELAY_MS);\r\n            }\r\n            return promise;\r\n        });\r\n    }\r\n    /**\r\n     * Sends the currently queued batches and resets the batch and timer. Processes\r\n     * the batched response results back to the original promises.\r\n     */\r\n    sendBatchRequest() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Get the current batch and clear it, so new requests\r\n            // go into the next batch\r\n            const batch = this.pendingBatch;\r\n            this.pendingBatch = [];\r\n            if (this.pendingBatchTimer) {\r\n                clearTimeout(this.pendingBatchTimer);\r\n                this.pendingBatchTimer = undefined;\r\n            }\r\n            // Get the request as an array of requests\r\n            const request = batch.map(inflight => inflight.request);\r\n            return this.sendBatchFn(request).then(result => {\r\n                // For each result, feed it to the correct Promise, depending\r\n                // on whether it was a success or error\r\n                batch.forEach((inflightRequest, index) => {\r\n                    const payload = result[index];\r\n                    if (payload.error) {\r\n                        const error = new Error(payload.error.message);\r\n                        error.code = payload.error.code;\r\n                        error.data = payload.error.data;\r\n                        inflightRequest.reject(error);\r\n                    }\r\n                    else {\r\n                        inflightRequest.resolve(payload.result);\r\n                    }\r\n                });\r\n            }, error => {\r\n                batch.forEach(inflightRequest => {\r\n                    inflightRequest.reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\n\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */\r\nclass AlchemyProvider extends JsonRpcProvider {\r\n    /** @internal */\r\n    constructor(config) {\r\n        // Normalize the API Key to a string.\r\n        const apiKey = AlchemyProvider.getApiKey(config.apiKey);\r\n        // Generate our own connection info with the correct endpoint URLs.\r\n        const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\r\n        let connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, 'http');\r\n        // If a hardcoded url was specified in the config, use that instead of the\r\n        // provided apiKey or network.\r\n        if (config.url !== undefined) {\r\n            connection.url = config.url;\r\n        }\r\n        connection.throttleLimit = config.maxRetries;\r\n        // Add user provided overrides if they exist.\r\n        if (config.connectionInfoOverrides) {\r\n            connection = Object.assign(Object.assign({}, connection), config.connectionInfoOverrides);\r\n        }\r\n        // Normalize the Alchemy named network input to the network names used by\r\n        // ethers. This allows the parent super constructor in JsonRpcProvider to\r\n        // correctly set the network.\r\n        const ethersNetwork = EthersNetwork[alchemyNetwork];\r\n        super(connection, ethersNetwork);\r\n        this.apiKey = config.apiKey;\r\n        this.maxRetries = config.maxRetries;\r\n        this.batchRequests = config.batchRequests;\r\n        // TODO: support individual headers when calling batch\r\n        const batcherConnection = Object.assign(Object.assign({}, this.connection), { headers: Object.assign(Object.assign({}, this.connection.headers), { 'Alchemy-Ethers-Sdk-Method': 'batchSend' }) });\r\n        const sendBatchFn = (requests) => {\r\n            return fetchJson(batcherConnection, JSON.stringify(requests));\r\n        };\r\n        this.batcher = new RequestBatcher(sendBatchFn);\r\n        this.modifyFormatter();\r\n    }\r\n    /**\r\n     * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n     * ethers.js. Returns the API key for an Alchemy provider.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */\r\n    static getApiKey(apiKey) {\r\n        if (apiKey == null) {\r\n            return DEFAULT_ALCHEMY_API_KEY;\r\n        }\r\n        if (apiKey && typeof apiKey !== 'string') {\r\n            throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\r\n        }\r\n        return apiKey;\r\n    }\r\n    /**\r\n     * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n     *\r\n     * This override allows the SDK to set the provider's network to values not\r\n     * yet supported by ethers.js.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */\r\n    static getNetwork(network) {\r\n        if (typeof network === 'string' && network in CustomNetworks) {\r\n            return CustomNetworks[network];\r\n        }\r\n        // Call the standard ethers.js getNetwork method for other networks.\r\n        return getNetwork(network);\r\n    }\r\n    /**\r\n     * Converts the `Networkish` input to the network enum used by Alchemy.\r\n     *\r\n     * @internal\r\n     */\r\n    static getAlchemyNetwork(network) {\r\n        if (network === undefined) {\r\n            return DEFAULT_NETWORK;\r\n        }\r\n        if (typeof network === 'number') {\r\n            throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\r\n        }\r\n        // Guaranteed that `typeof network === 'string`.\r\n        const isValidNetwork = Object.values(Network).includes(network);\r\n        if (!isValidNetwork) {\r\n            throw new Error(`Invalid network '${network}' provided. Network must be one of: ` +\r\n                `${Object.values(Network).join(', ')}.`);\r\n        }\r\n        return network;\r\n    }\r\n    /**\r\n     * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n     * the correct URLs for Alchemy.\r\n     *\r\n     * @internal\r\n     */\r\n    static getAlchemyConnectionInfo(network, apiKey, type) {\r\n        const url = type === 'http'\r\n            ? getAlchemyHttpUrl(network, apiKey)\r\n            : getAlchemyWsUrl(network, apiKey);\r\n        return {\r\n            headers: IS_BROWSER\r\n                ? {\r\n                    'Alchemy-Ethers-Sdk-Version': VERSION\r\n                }\r\n                : {\r\n                    'Alchemy-Ethers-Sdk-Version': VERSION,\r\n                    'Accept-Encoding': 'gzip'\r\n                },\r\n            allowGzip: true,\r\n            url\r\n        };\r\n    }\r\n    /**\r\n     * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n     * method is called when calling methods on the parent class `BaseProvider`.\r\n     *\r\n     * @override\r\n     */\r\n    detectNetwork() {\r\n        const _super = Object.create(null, {\r\n            detectNetwork: { get: () => super.detectNetwork }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let network = this.network;\r\n            if (network == null) {\r\n                network = yield _super.detectNetwork.call(this);\r\n                if (!network) {\r\n                    throw new Error('No network detected');\r\n                }\r\n            }\r\n            return network;\r\n        });\r\n    }\r\n    _startPending() {\r\n        logWarn('WARNING: Alchemy Provider does not support pending filters');\r\n    }\r\n    /**\r\n     * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n     * current api key is the default key.\r\n     *\r\n     * @override\r\n     */\r\n    isCommunityResource() {\r\n        return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\r\n    }\r\n    /**\r\n     * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n     * logic for sending requests to Alchemy.\r\n     *\r\n     * @param method The method name to use for the request.\r\n     * @param params The parameters to use for the request.\r\n     * @override\r\n     * @public\r\n     */\r\n    // TODO: Add headers for `perform()` override.\r\n    send(method, params) {\r\n        return this._send(method, params, 'send');\r\n    }\r\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n     *\r\n     * This method is copied over directly in order to implement custom headers\r\n     *\r\n     * @internal\r\n     */\r\n    _send(method, params, methodName, forceBatch = false) {\r\n        const request = {\r\n            method,\r\n            params,\r\n            id: this._nextId++,\r\n            jsonrpc: '2.0'\r\n        };\r\n        // START MODIFIED CODE\r\n        const connection = Object.assign({}, this.connection);\r\n        connection.headers['Alchemy-Ethers-Sdk-Method'] = methodName;\r\n        if (this.batchRequests || forceBatch) {\r\n            return this.batcher.enqueueRequest(request);\r\n        }\r\n        // END MODIFIED CODE\r\n        this.emit('debug', {\r\n            action: 'request',\r\n            request: deepCopy(request),\r\n            provider: this\r\n        });\r\n        // We can expand this in the future to any call, but for now these\r\n        // are the biggest wins and do not require any serializing parameters.\r\n        const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\r\n        if (cache && this._cache[method]) {\r\n            return this._cache[method];\r\n        }\r\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\r\n            this.emit('debug', {\r\n                action: 'response',\r\n                request,\r\n                response: result,\r\n                provider: this\r\n            });\r\n            return result;\r\n        }, error => {\r\n            this.emit('debug', {\r\n                action: 'response',\r\n                error,\r\n                request,\r\n                provider: this\r\n            });\r\n            throw error;\r\n        });\r\n        // Cache the fetch, but clear it on the next event loop\r\n        if (cache) {\r\n            this._cache[method] = result;\r\n            setTimeout(() => {\r\n                // @ts-ignore - This is done by ethers.\r\n                this._cache[method] = null;\r\n            }, 0);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Overrides the base `Formatter` class inherited from ethers to support\r\n     * returning custom fields in Ethers response types.\r\n     *\r\n     * For context, ethers has a `Formatter` class that is used to format the\r\n     * response from a JSON-RPC request. Any fields that are not defined in the\r\n     * `Formatter` class are removed from the returned response. By modifying the\r\n     * `Formatter` class in this method, we can add support for fields that are\r\n     * not defined in ethers.\r\n     */\r\n    modifyFormatter() {\r\n        this.formatter.formats['receiptLog']['removed'] = val => {\r\n            if (typeof val === 'boolean') {\r\n                return val;\r\n            }\r\n            return undefined;\r\n        };\r\n    }\r\n}\r\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */\r\nfunction getResult(payload) {\r\n    if (payload.error) {\r\n        const error = new Error(payload.error.message);\r\n        error.code = payload.error.code;\r\n        error.data = payload.error.data;\r\n        throw error;\r\n    }\r\n    return payload.result;\r\n}\n\nexport { AlchemyProvider };\n//# sourceMappingURL=alchemy-provider-8b0c3e20.js.map\n","'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"],"names":["version","logger","isRenetworkable","value","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","skip","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider","HashZero","flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","fromEntries","i","decode_arithmetic","bytes","pos","u16","symbol_count","total","acc","pos_payload","read_width","read_buffer","read_bit","N","FULL","Math","pow","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","read_payload","v","read_compressed_payload","signed","read_counts","n","next","read_ascending","read_deltas","read_member_array","lookup","vX","vN","j","read_mapped_map","ret","w","read_linear_table","read_replacement_table","read_zero_terminated_array","read_transposed","m","fill","undefined","dx","dy","ys","slice","_","j_dy","y","read_emoji_trie","sorted","sort","read","branches","keys","set","Set","node","size","temp","valid","fe0f","save","check","getData","r","VALID","IGNORED","MAPPED","EMOJI_ROOT","HYPHEN","UNDERSCORE","explode_cp","filter_fe0f","cps","filter","cp","ens_normalize_post_check","label","split","lastIndexOf","Error","every","err","message","ens_normalize","normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","pop","has","toString","toUpperCase","nfc","String","fromCodePoint","s","eaten","_a","saved","stack","find","splice","Zeros","Uint8Array","checkComponent","comp","ensNameSplit","comps","last","d","ensNormalize","toUtf8String","join","isValidName","namehash","dnsEncode","AddressZero","Formatter","constructor","this","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","strict","substring","callAddress","_block","format","author","_difficulty","gas","isZero","networkId","parseInt","replace","byzantium","object","key","checkKey","checkValue","nullValue","replaceValue","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","e","rejected","done","then","apply","MAX_CCIP_REDIRECTS","checkTopic","topic","serializeTopics","unique","Object","deserializeTopics","getEventTag","eventName","isForkEvent","warn","getTime","Date","stall","duration","setTimeout","PollableEvents","Event","tag","listener","once","_lastBlockNumber","_inflight","event","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","encode","sha2","matcherIpfs","RegExp","matchers","_parseString","_parseBytes","getIpfsLink","link","match","numPad","padded","bytesPad","ceil","encodeBytes","datas","byteCount","Resolver","resolvedAddress","formatter","supportsWildcard","_supportsEip2544","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","throwError","_fetchBytes","_getAddress","coinType","hexBytes","coinInfo","UNSUPPORTED_OPERATION","operation","words","unshift","getAddress","getAvatar","linkage","content","avatar","getText","scheme","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","metadataUrl","metadata","JSON","stringify","imageUrl","image","ipfs","getContentHash","ipns","swarm","skynet","urlSafe","base64","keyBytes","defaultFormatter","nextPollId","BaseProvider","super","_events","_emitted","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","ccipReadFetch","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","statusCode","errorMessage","SERVER_ERROR","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","poll","pollId","runners","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","minFromBlock","getLogs","all","resetEventsBlock","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","timeout","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","getTransactionCount","mined","getTransaction","getBlockWithTransactions","ti","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","method","getBalance","addressOrName","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","_getFilter","_call","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipResult","resolved","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","getBlock","getEtherPrice","getResolver","currentName","_getResolver","resolver","addrData","lookupAddress","resolverAddr","nameOrAddress","resolverAddress","NOT_IMPLEMENTED","_startEvent","_stopEvent","_addEventListener","args","stopped","eventTag","listenerCount","listeners","off","removeAllListeners","found","errorGas","spelunk","requireData","parse","checkError","body","UNPREDICTABLE_GAS_LIMIT","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","connect","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","send","accounts","sendUncheckedTransaction","fromAddress","estimate","hexlifyTransaction","ACTION_REJECTED","action","signTransaction","signMessage","messageData","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","getPayload","unlock","password","allowedTransactionKeys","networkOrReady","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","serverError","getSigner","getUncheckedSigner","listAccounts","request","id","jsonrpc","cache","connection","prepareRequest","feeData","getFeeData","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","allowExtra","allowed","DEFAULT_MAX_REQUEST_BATCH_SIZE","DEFAULT_REQUEST_BATCH_DELAY_MS","RequestBatcher","sendBatchFn","maxBatchSize","pendingBatch","enqueueRequest","inflightRequest","promise","sendBatchRequest","pendingBatchTimer","batch","inflight","index","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","throttleLimit","maxRetries","connectionInfoOverrides","assign","ethersNetwork","E","batchRequests","batcherConnection","headers","requests","batcher","modifyFormatter","D","C","isValidNetwork","includes","g","I","V","allowGzip","_super","create","get","l","_send","methodName","forceBatch","ALPHABET","ALPHABET_MAP","z","charAt","TypeError","polymodStep","pre","prefixChk","chk","c","charCodeAt","LIMIT","__decode","str","lowered","uppered","wordChars","decodeUnsafe","res","arguments","decode","convert","inBits","outBits","pad","bits","maxV","toWordsUnsafe","toWords","fromWordsUnsafe","fromWords","module","exports"],"sourceRoot":""}