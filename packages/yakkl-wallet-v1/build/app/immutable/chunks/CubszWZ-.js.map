{"version":3,"file":"CubszWZ-.js","sources":["../../../../../../src/lib/components/EmergencyKit.svelte","../../../../../../src/lib/components/EmergencyKitModal.svelte"],"sourcesContent":["<script lang=\"ts\">\n\t//\n\t// NOTE: This for the Bulk Emergency Kit. The single EmergencyKit is only for YakklAccount or yakklPrimaryAccount.\n\t//\n\n\timport { EmergencyKitManager } from '$lib/managers/EmergencyKitManager';\n\timport {\n\t\tgetProfile,\n\t\tgetPreferences,\n\t\tgetSettings,\n\t\tgetYakklCurrentlySelected,\n\t\tgetYakklContacts,\n\t\tgetYakklChats,\n\t\tgetYakklAccounts,\n\t\tgetYakklPrimaryAccounts,\n\t\tgetYakklWatchList,\n\t\tgetYakklBlockedList,\n\t\tgetYakklConnectedDomains,\n\t\tgetMiscStore,\n\t\tsetProfileStorage,\n\t\tsetPreferencesStorage,\n\t\tsetSettingsStorage,\n\t\tsetYakklCurrentlySelectedStorage,\n\t\tsetYakklContactsStorage,\n\t\tsetYakklChatsStorage,\n\t\tsetYakklAccountsStorage,\n\t\tsetYakklPrimaryAccountsStorage,\n\t\tsetYakklWatchListStorage,\n\t\tsetYakklBlockedListStorage,\n\t\tsetYakklConnectedDomainsStorage,\n\t\tprofileStore,\n\t\tyakklPreferencesStore,\n\t\tyakklSettingsStore,\n\t\tyakklCurrentlySelectedStore,\n\t\tyakklContactsStore,\n\t\tyakklChatsStore,\n\t\tyakklAccountsStore,\n\t\tyakklPrimaryAccountsStore,\n\t\tyakklWatchListStore,\n\t\tyakklBlockedListStore,\n\t\tyakklConnectedDomainsStore,\n\t\tgetYakklTokenData,\n\t\tgetYakklTokenDataCustom,\n\t\tsetYakklTokenDataStorage,\n\t\tyakklTokenDataStore,\n\t\tsetYakklTokenDataCustomStorage,\n\t\tyakklTokenDataCustomStore,\n\t\tsetYakklCombinedTokenStorage,\n\t\tyakklCombinedTokenStore,\n\t\tsetYakklWalletProvidersStorage,\n\t\tsetYakklWalletBlockchainsStorage,\n\t\tyakklWalletBlockchainsStore,\n\t\tyakklWalletProvidersStore,\n\t\tgetYakklCombinedToken,\n\t\tgetYakklWalletProviders,\n\t\tgetYakklWalletBlockchains\n\t} from '$lib/common/stores';\n\timport {\n\t\tVERSION,\n\t\ttype EmergencyKitMetaData,\n\t\tisEncryptedData,\n\t\ttype CurrentlySelectedData\n\t} from '$lib/common';\n\timport { browserSvelte, browser_ext } from '$lib/common/environment';\n\timport { decryptData } from '$lib/common/encryption';\n\timport Confirmation from './Confirmation.svelte';\n\timport { log } from '$lib/managers/Logger';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\n\tinterface Props {\n\t\tmode?: 'import' | 'export' | 'restore';\n\t\tonComplete: (success: boolean, message: string) => void;\n\t\tonCancel?: () => void;\n\t}\n\n\tlet { mode = 'export', onComplete, onCancel = () => {} }: Props = $props();\n\n\tlet file: File | null = $state(null); // File name to export to or import from\n\tlet metadata: EmergencyKitMetaData | null = $state(null);\n\tlet loading = $state(false);\n\tlet error = $state('');\n\tlet showConfirmation = $state(false);\n\n\tasync function handleFileSelect(event: Event) {\n\t\tconst target = event.target as HTMLInputElement;\n\t\tif (target.files && target.files.length > 0) {\n\t\t\tfile = target.files[0];\n\t\t\ttry {\n\t\t\t\tmetadata = await EmergencyKitManager.readBulkEmergencyKitMetadata(file);\n\t\t\t} catch (err) {\n\t\t\t\terror = 'Failed to read emergency kit metadata';\n\t\t\t\tlog.error(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function handleExport() {\n\t\tloading = true;\n\t\terror = '';\n\t\ttry {\n\t\t\tconst preferences = await getPreferences();\n\t\t\tconst settings = await getSettings();\n\t\t\tconst profile = await getProfile();\n\t\t\tconst currentlySelected = await getYakklCurrentlySelected();\n\t\t\tconst contacts = await getYakklContacts();\n\t\t\tconst chats = await getYakklChats();\n\t\t\tconst accounts = await getYakklAccounts();\n\t\t\tconst primaryAccounts = await getYakklPrimaryAccounts();\n\t\t\tconst watchList = await getYakklWatchList();\n\t\t\tconst blockedList = await getYakklBlockedList();\n\t\t\tconst connectedDomains = await getYakklConnectedDomains();\n\t\t\tconst passwordOrSaltedKey = getMiscStore();\n\t\t\tconst tokenData = await getYakklTokenData();\n\t\t\tconst tokenDataCustom = await getYakklTokenDataCustom();\n\t\t\tconst combinedTokenStore = await getYakklCombinedToken();\n\t\t\tconst walletProviders = await getYakklWalletProviders();\n\t\t\tconst walletBlockchains = await getYakklWalletBlockchains();\n\n\t\t\tif (!preferences || !settings || !profile || !currentlySelected || !passwordOrSaltedKey) {\n\t\t\t\tthrow new Error('Missing required data for export');\n\t\t\t}\n\n\t\t\tconst bulkEmergencyKit = await EmergencyKitManager.createBulkEmergencyKit(\n\t\t\t\tpreferences,\n\t\t\t\tsettings,\n\t\t\t\tprofile,\n\t\t\t\tcurrentlySelected,\n\t\t\t\tcontacts ?? [],\n\t\t\t\tchats ?? [],\n\t\t\t\taccounts ?? [],\n\t\t\t\tprimaryAccounts ?? [],\n\t\t\t\twatchList ?? [],\n\t\t\t\tblockedList ?? [],\n\t\t\t\tconnectedDomains ?? [],\n\t\t\t\tpasswordOrSaltedKey,\n\t\t\t\ttokenData ?? [],\n\t\t\t\ttokenDataCustom ?? [],\n\t\t\t\tcombinedTokenStore ?? [],\n\t\t\t\twalletProviders ?? [],\n\t\t\t\twalletBlockchains ?? []\n\t\t\t);\n\n\t\t\tconst fileName = await EmergencyKitManager.downloadBulkEmergencyKit(bulkEmergencyKit);\n\t\t\tonComplete(true, 'Emergency kit exported successfully as ' + fileName);\n\t\t} catch (err) {\n\t\t\terror = err instanceof Error ? err.message : 'Failed to export emergency kit';\n\t\t\tlog.error(err);\n\t\t\tonComplete(false, error);\n\t\t} finally {\n\t\t\tloading = false;\n\t\t}\n\t}\n\n\tasync function handleImport() {\n\t\tif (!file) {\n\t\t\terror = 'Please select a file to import';\n\t\t\treturn;\n\t\t}\n\t\tshowConfirmation = true;\n\t}\n\n\tasync function confirmImport() {\n\t\tshowConfirmation = false;\n\t\tloading = true;\n\t\terror = '';\n\t\ttry {\n\t\t\tconst passwordOrSaltedKey = getMiscStore();\n\t\t\tconst { newData, existingData } = await EmergencyKitManager.importBulkEmergencyKit(\n\t\t\t\tfile!,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t);\n\n\t\t\t// Update local storage and Svelte stores\n\t\t\tawait updateStorageAndStores(newData, existingData);\n\n\t\t\t// After successful import, send YAKKL_ACCOUNT message with the currently selected account\n\t\t\t// Come back to this later - this is more cosmetic and not needed for now.\n\t\t\t// if (browserSvelte) {\n\t\t\t//   const currentlySelected = await getYakklCurrentlySelected();\n\t\t\t//   if (currentlySelected && currentlySelected.data) {\n\t\t\t//     let accountData = currentlySelected.data;\n\t\t\t//     if (isEncryptedData(accountData)) {\n\t\t\t//       accountData = await decryptData(accountData, passwordOrSaltedKey) as CurrentlySelectedData;\n\t\t\t//     }\n\t\t\t//     const account = (accountData as CurrentlySelectedData).account;\n\n\t\t\t//     browser_ext.runtime.sendMessage({\n\t\t\t//       type: 'YAKKL_ACCOUNT',\n\t\t\t//       data: account\n\t\t\t//     }).catch((error: Error) => {\n\t\t\t//       log.error('Error sending account message', true, error);\n\t\t\t//     });\n\t\t\t//   }\n\t\t\t// }\n\n\t\t\tonComplete(true, `Emergency kit imported successfully for: ${file!.name}`);\n\t\t\tsafeLogout();\n\t\t} catch (err) {\n\t\t\terror = `Failed to import emergency kit for: ${file!.name}`;\n\t\t\tlog.error(err);\n\t\t\tonComplete(false, `Failed to import emergency kit for: ${file!.name}`);\n\t\t} finally {\n\t\t\tloading = false;\n\t\t}\n\t}\n\n\tasync function updateStorageAndStores(newData: any, existingData: any) {\n\t\t// Update this when new data stores are added to the wallet UNLESS it's not important to restore the given data store.\n\t\t// Compare with EmergencyKitManager.ts for the list of data stores that are updated.\n\t\tconst updateFunctions = [\n\t\t\t{\n\t\t\t\tkey: 'yakklPreferencesStore',\n\t\t\t\tsetStorage: setPreferencesStorage,\n\t\t\t\tstore: yakklPreferencesStore\n\t\t\t},\n\t\t\t{ key: 'yakklSettingsStore', setStorage: setSettingsStorage, store: yakklSettingsStore },\n\t\t\t{ key: 'profileStore', setStorage: setProfileStorage, store: profileStore },\n\t\t\t{\n\t\t\t\tkey: 'yakklCurrentlySelectedStore',\n\t\t\t\tsetStorage: setYakklCurrentlySelectedStorage,\n\t\t\t\tstore: yakklCurrentlySelectedStore\n\t\t\t},\n\t\t\t{ key: 'yakklContactsStore', setStorage: setYakklContactsStorage, store: yakklContactsStore },\n\t\t\t{ key: 'yakklChatsStore', setStorage: setYakklChatsStorage, store: yakklChatsStore },\n\t\t\t{ key: 'yakklAccountsStore', setStorage: setYakklAccountsStorage, store: yakklAccountsStore },\n\t\t\t{\n\t\t\t\tkey: 'yakklPrimaryAccountsStore',\n\t\t\t\tsetStorage: setYakklPrimaryAccountsStorage,\n\t\t\t\tstore: yakklPrimaryAccountsStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklWatchListStore',\n\t\t\t\tsetStorage: setYakklWatchListStorage,\n\t\t\t\tstore: yakklWatchListStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklBlockedListStore',\n\t\t\t\tsetStorage: setYakklBlockedListStorage,\n\t\t\t\tstore: yakklBlockedListStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklConnectedDomainsStore',\n\t\t\t\tsetStorage: setYakklConnectedDomainsStorage,\n\t\t\t\tstore: yakklConnectedDomainsStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklTokenDataStore',\n\t\t\t\tsetStorage: setYakklTokenDataStorage,\n\t\t\t\tstore: yakklTokenDataStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklTokenDataCustomStore',\n\t\t\t\tsetStorage: setYakklTokenDataCustomStorage,\n\t\t\t\tstore: yakklTokenDataCustomStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklCombinedTokenStore',\n\t\t\t\tsetStorage: setYakklCombinedTokenStorage,\n\t\t\t\tstore: yakklCombinedTokenStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklWalletProvidersStore',\n\t\t\t\tsetStorage: setYakklWalletProvidersStorage,\n\t\t\t\tstore: yakklWalletProvidersStore\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'yakklWalletBlockchainsStore',\n\t\t\t\tsetStorage: setYakklWalletBlockchainsStorage,\n\t\t\t\tstore: yakklWalletBlockchainsStore\n\t\t\t}\n\t\t];\n\n\t\t// Validate VERSION once before the loop\n\t\tif (typeof VERSION === 'undefined' || typeof VERSION !== 'string' || VERSION.trim() === '') {\n\t\t\tlog.error('VERSION is not properly defined.');\n\t\t\treturn;\n\t\t}\n\n\t\t// This version now updates the version of all of the data stores that have a version property.\n\t\tfor (const { key, setStorage, store } of updateFunctions) {\n\t\t\tconst data = newData[key] || existingData[key]; // Currently a placeholder for future use and existingData is not used! This is for future use if using something like a backend database.\n\t\t\tif (data) {\n\t\t\t\t// Check if data is a valid object and has a version property\n\t\t\t\tif (data && typeof data === 'object' && !Array.isArray(data)) {\n\t\t\t\t\t// Update version if it exists (either as 'version' or 'VERSION')\n\t\t\t\t\tif ('version' in data || 'VERSION' in data) {\n\t\t\t\t\t\tdata['version'] = VERSION;\n\t\t\t\t\t\tlog.info(`Updated version for ${key} to ${VERSION}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (data && typeof data === 'object' && Array.isArray(data)) {\n\t\t\t\t\tlog.warn(`${key} contains array data - version not updated`);\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(`Invalid data object for ${key}. Cannot assign version.`);\n\t\t\t\t\tcontinue; // Skip this iteration\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait setStorage(data);\n\t\t\t\t\tstore.set(data);\n\t\t\t\t} catch (error: any) {\n\t\t\t\t\tlog.error(`Failed to update ${key}:`, false, error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Previous version of the code that only updated the version of preferences\n\t\t// for (const { key, setStorage, store } of updateFunctions) {\n\t\t//   const data = newData[key] || existingData[key];\n\t\t//   if (data) {\n\t\t//     if ( key === 'yakklPreferencesStore') {\n\t\t//       if (data && typeof data === 'object' && !Array.isArray(data)) {\n\t\t//         // Keep the metadata version of the latest version\n\t\t//         if (typeof VERSION !== 'undefined' && typeof VERSION === 'string' && VERSION.trim() !== '') {\n\t\t//           data['version'] = VERSION;\n\t\t//         } else {\n\t\t//           log.error(\"VERSION is not properly defined.\");\n\t\t//         }\n\t\t//       } else {\n\t\t//         log.error(\"Invalid 'data' object. Cannot assign 'version'.\");\n\t\t//       }\n\t\t//     }\n\n\t\t//     await setStorage(data);\n\t\t//     store.set(data);\n\t\t//   }\n\t\t// }\n\t}\n</script>\n\n<div class=\"p-4\">\n\t<h2 class=\"text-2xl font-bold mb-4\">{mode === 'export' ? 'Export' : 'Import'} Emergency Kit</h2>\n\n\t{#if mode === 'export'}\n\t\t<button\n\t\t\tonclick={handleExport}\n\t\t\tclass=\"bg-blue-500 text-white px-4 py-2 rounded\"\n\t\t\tdisabled={loading}\n\t\t>\n\t\t\t{loading ? 'Exporting...' : 'Export Emergency Kit'}\n\t\t</button>\n\t{:else}\n\t\t<div class=\"mb-4\">\n\t\t\t<label for=\"importFile\" class=\"block mb-2\">Select File to Import:</label>\n\t\t\t<input\n\t\t\t\ttype=\"file\"\n\t\t\t\tid=\"importFile\"\n\t\t\t\tonchange={handleFileSelect}\n\t\t\t\taccept=\".json\"\n\t\t\t\tclass=\"w-full p-2 border rounded\"\n\t\t\t/>\n\t\t</div>\n\t\t{#if metadata}\n\t\t\t<div class=\"mb-4\">\n\t\t\t\t<h3 class=\"text-lg font-semibold\">Emergency Kit Metadata:</h3>\n\t\t\t\t<p>ID: {metadata.id}</p>\n\t\t\t\t<p>Created: {new Date(metadata.createDate).toLocaleString()}</p>\n\t\t\t\t<p>Version: {metadata.version}</p>\n\t\t\t\t<p>Type: {metadata.type}</p>\n\t\t\t\t<p>Files: {metadata.files}</p>\n\t\t\t</div>\n\t\t\t<div class=\"mb-4\">\n\t\t\t\t<h4 class=\"text-lg font-bold\">\n\t\t\t\t\tYAKKL will <span class=\"text-red-500 underline\">auto logout</span> once the import is complete!\n\t\t\t\t\tSimply login again to continue.\n\t\t\t\t</h4>\n\t\t\t</div>\n\t\t{/if}\n\t\t<button\n\t\t\tonclick={handleImport}\n\t\t\tclass=\"bg-green-500 text-white px-4 py-2 rounded\"\n\t\t\tdisabled={loading || !file}\n\t\t>\n\t\t\t{loading ? 'Importing...' : 'Import'}\n\t\t</button>\n\t\t<button onclick={onCancel} class=\"bg-red-400 text-white px-4 py-2 rounded\"> Cancel </button>\n\t{/if}\n\n\t{#if error}\n\t\t<p class=\"text-red-500 mt-4\">{error}</p>\n\t{/if}\n</div>\n\n<Confirmation\n\tbind:show={showConfirmation}\n\ttitle=\"Confirm Import\"\n\tmessage=\"Are you sure you want to continue? Doing so will override your current Smart Wallet data!\"\n\tconfirmText=\"Yes, Import\"\n\trejectText=\"Cancel\"\n\tonConfirm={confirmImport}\n/>\n","<script lang=\"ts\">\n\timport Modal from './Modal.svelte';\n\timport EmergencyKit from './EmergencyKit.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tmode?: 'import' | 'export';\n\t\tonComplete?: (success: boolean, message: string) => void;\n\t\tonCancel?: () => void;\n\t\tonClose?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tmode = 'import',\n\t\tonComplete = handleEmergencyKitComplete,\n\t\tonCancel = $bindable(() => {\n\t\t\tshow = false;\n\t\t}),\n\t\tonClose = $bindable(() => {\n\t\t\tshow = false;\n\t\t})\n\t}: Props = $props();\n\n\tfunction handleEmergencyKitComplete(success: boolean, message: string) {\n\t\tshow = false;\n\t\tonComplete?.(success, message);\n\t}\n</script>\n\n<Modal bind:show {onCancel} {onClose} title=\"Emergency Kit\">\n\t<EmergencyKit {mode} {onComplete} {onCancel} />\n</Modal>\n"],"names":["async","handleFileSelect","event","file","metadata","error","target","files","length","set","EmergencyKitManager","readBulkEmergencyKitMetadata","err","log","handleExport","_","loading","$$props","preferences","getPreferences","settings","getSettings","profile","getProfile","currentlySelected","getYakklCurrentlySelected","contacts","getYakklContacts","chats","getYakklChats","accounts","getYakklAccounts","primaryAccounts","getYakklPrimaryAccounts","watchList","getYakklWatchList","blockedList","getYakklBlockedList","connectedDomains","getYakklConnectedDomains","passwordOrSaltedKey","getMiscStore","tokenData","getYakklTokenData","tokenDataCustom","getYakklTokenDataCustom","combinedTokenStore","getYakklCombinedToken","walletProviders","getYakklWalletProviders","walletBlockchains","getYakklWalletBlockchains","Error","bulkEmergencyKit","createBulkEmergencyKit","fileName","downloadBulkEmergencyKit","onComplete","message","$.get","handleImport","__1","showConfirmation","mode","$.prop","onCancel","$.tag","$.state","confirmImport","newData","existingData","importBulkEmergencyKit","updateStorageAndStores","name","safeLogout","$.set","updateFunctions","key","setStorage","setPreferencesStorage","store","yakklPreferencesStore","setSettingsStorage","yakklSettingsStore","setProfileStorage","profileStore","setYakklCurrentlySelectedStorage","yakklCurrentlySelectedStore","setYakklContactsStorage","yakklContactsStore","setYakklChatsStorage","yakklChatsStore","setYakklAccountsStorage","yakklAccountsStore","setYakklPrimaryAccountsStorage","yakklPrimaryAccountsStore","setYakklWatchListStorage","yakklWatchListStore","setYakklBlockedListStorage","yakklBlockedListStore","setYakklConnectedDomainsStorage","yakklConnectedDomainsStore","setYakklTokenDataStorage","yakklTokenDataStore","setYakklTokenDataCustomStorage","yakklTokenDataCustomStore","setYakklCombinedTokenStorage","yakklCombinedTokenStore","setYakklWalletProvidersStorage","yakklWalletProvidersStore","setYakklWalletBlockchainsStorage","yakklWalletBlockchainsStore","$.strict_equals","VERSION","trim","data","Array","isArray","info","warn","$.set_text","text_2","id","text_4","version","text_5","type","text_6","Date","createDate","toLocaleString","$$render","consequent_1","this","$$args","EmergencyKit","button_1","disabled","consequent","alternate","consequent_2","$$value","$.template_effect","text","show","handleEmergencyKitComplete","onClose","success","_a"],"mappings":"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"}