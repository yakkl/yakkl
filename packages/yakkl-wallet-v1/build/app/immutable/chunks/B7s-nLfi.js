var __defProp=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value:value}):obj[key]=value;var __publicField=(obj,key,value)=>__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);import{l as log}from"./WDN37msH.js";class GlobalListenerManager{constructor(){__publicField(this,"contextManagers",new Map)}hasContext(context){return this.contextManagers.has(context)}registerContext(context,manager){if(!this.contextManagers.has(context)){this.contextManagers.set(context,manager)}else{log.warn(`ListenerManager for context "${context}" is already registered.`)}}addListener(context,event,handler){const manager=this.contextManagers.get(context);if(manager){manager.add(event,handler)}else{log.error(`ListenerManager for context "${context}" is not registered.`)}}removeListener(context,event,handler){const manager=this.contextManagers.get(context);if(manager){manager.remove(event,handler)}else{log.error(`ListenerManager for context "${context}" is not registered.`)}}removeAllFromContext(context){const manager=this.contextManagers.get(context);if(manager){manager.removeAll()}else{log.error(`ListenerManager for context "${context}" is not registered.`)}}removeAll(){this.contextManagers.forEach((manager,context)=>{manager.removeAll()})}}const globalListenerManager=new GlobalListenerManager;export{globalListenerManager as g};
//# sourceMappingURL=B7s-nLfi.js.map
