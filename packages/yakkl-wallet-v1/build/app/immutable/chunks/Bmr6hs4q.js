const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./ByX4oUvk.js","./B2gA1VsD.js","./BaS8d5lg.js"])))=>i.map(i=>d[i]);
var __defProp=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value:value}):obj[key]=value;var __publicField=(obj,key,value)=>__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);import{l as log,_ as __vitePreload}from"./Cb2naUpm.js";import"./WDN37msH.js";import{a as browser_ext}from"./CgCfpVku.js";import"./BaS8d5lg.js";import"./z-nmOEXa.js";import{s as setBadgeText}from"./CnIbzB-6.js";import"./Dw28gLPr.js";import"./D-aJ6pD4.js";const activeNotifications=new Set;class NotificationService{static async createNotification(options,id){if(!browser_ext)return null;try{const notificationId=id||this.DEFAULT_ID;const notificationOptions={...options,iconUrl:browser_ext.runtime.getURL(this.DEFAULT_ICON),...this.IMPORTANT_NOTIFICATIONS.some(prefix=>notificationId.startsWith(prefix))?{requireInteraction:true,priority:2,silent:false,eventTime:Date.now()}:{}};log.info("createNotification - notificationOptions:",false,notificationOptions);await browser_ext.notifications.create(notificationId,notificationOptions);activeNotifications.add(notificationId);if(this.IMPORTANT_NOTIFICATIONS.some(prefix=>notificationId.startsWith(prefix))){this.broadcastNotificationToUI(notificationId,notificationOptions)}return notificationId}catch(error){log.warn("Error creating notification:",false,error);return null}}static broadcastNotificationToUI(id,options){if(!browser_ext)return;try{browser_ext.runtime.sendMessage({type:"IMPORTANT_NOTIFICATION",notificationId:id,title:options.title,message:options.message,options:{requireInteraction:options.requireInteraction,priority:options.priority,silent:options.silent},timestamp:Date.now()}).catch(error=>{log.debug("Error broadcasting notification to UI:",false,error)})}catch(error){}}static async clear(id=this.DEFAULT_ID){if(!browser_ext)return false;try{await browser_ext.notifications.clear(id);activeNotifications.delete(id);try{browser_ext.runtime.sendMessage({type:"CLEAR_NOTIFICATION",notificationId:id,timestamp:Date.now()}).catch(()=>{})}catch(e){}return true}catch(error){log.warn("Error clearing notification:",false,{id:id,error:error});return false}}static async clearAll(){if(!browser_ext)return;const notifications=[...activeNotifications];for(const id of notifications){await this.clear(id)}}static async sendBasic(title,message,options={},id){log.info("sendBasic - title:",false,title);return await this.createNotification({type:"basic",title:title,message:message,...options},id)}static async sendList(title,message,items,options={},id){return await this.createNotification({type:"list",title:title,message:message,items:items,...options},id)}static async sendImage(title,message,imageUrl,options={},id){return await this.createNotification({type:"image",title:title,message:message,imageUrl:imageUrl,...options},id)}static async sendProgress(title,message,progress,options={},id){return await this.createNotification({type:"progress",title:title,message:message,progress:Math.max(0,Math.min(100,progress)),...options},id)}static async sendSecurityAlert(message,options={},id){var _a;log.info("sendSecurityAlert - message:",false,message);const notificationId=id||`security-alert-${Date.now()}`;const enhancedOptions={requireInteraction:true,priority:2,silent:false,iconUrl:(_a=browser_ext)==null?void 0:_a.runtime.getURL("/images/logoBullLock48x48.png"),type:"basic",...options,eventTime:Date.now()};try{const result=await this.sendBasic("🔒 Security Alert",message,enhancedOptions,notificationId);if(browser_ext&&this.IMPORTANT_NOTIFICATIONS.some(prefix=>notificationId.startsWith(prefix))){try{browser_ext.runtime.sendMessage({type:"SECURITY_ALERT",message:message,options:enhancedOptions,id:notificationId,timestamp:Date.now()}).catch(()=>{})}catch(e){}}return result}catch(error){log.warn("Failed to send security alert notification:",false,error);return null}}static async sendLockdownWarning(delayMs=3e4,options={}){const message=`YAKKL will be locked soon due to inactivity. You have ${Math.round(delayMs/1e3)} seconds remaining.`;const notificationId=`lockdown-warning-${Date.now()}`;const result=await this.sendSecurityAlert(message,{contextMessage:"Use YAKKL to prevent automatic lockdown",requireInteraction:true,priority:2,...options},notificationId);if(browser_ext){try{browser_ext.runtime.sendMessage({type:"LOCKDOWN_WARNING",message:message,timestamp:Date.now(),delayMs:delayMs}).catch(e=>{log.debug("Error sending lockdown warning message:",false,e)})}catch(e){log.debug("Error sending lockdown warning message:",false,e)}}return result}static async sendWalletLocked(options={}){return await this.sendSecurityAlert("Your YAKKL wallet has been locked due to inactivity.",{requireInteraction:false,priority:2,...options},"wallet-locked")}static async focusPopupWindowEnhanced(){var _a;try{if(!((_a=browser_ext)==null?void 0:_a.windows))return false;const windows=await browser_ext.windows.getAll({windowTypes:["popup"]});const extensionWindow=windows.find(window2=>{var _a2;return window2.type==="popup"&&((_a2=window2.tabs)==null?void 0:_a2.some(tab=>{var _a3;return(_a3=tab.url)==null?void 0:_a3.includes(browser_ext.runtime.id)}))});if(extensionWindow==null?void 0:extensionWindow.id){await browser_ext.windows.update(extensionWindow.id,{focused:true,drawAttention:true});log.info("[NotificationService] Popup window focused and attention drawn");return true}else{log.debug("[NotificationService] Extension popup window not found");return false}}catch(error){log.warn("[NotificationService] Failed to focus popup window:",false,error);return false}}static async setUrgentBadgeEnhanced(badgeText="⚠️"){var _a;try{if(!((_a=browser_ext)==null?void 0:_a.action))return;await browser_ext.action.setBadgeText({text:badgeText});await browser_ext.action.setBadgeBackgroundColor({color:"#ff0000"});try{await browser_ext.action.setIcon({path:{16:"/images/logoUrgentBullUnlock16x16.png",32:"/images/logoUrgentBullUnlock32x32.png",48:"/images/logoUrgentBullUnlock48x48.png",96:"/images/logoUrgentBullUnlock96x96.png",128:"/images/logoUrgentBullUnlock128x128.png"}})}catch(iconError){log.debug("[NotificationService] Urgent icons not found, using default")}log.info("[NotificationService] Enhanced urgent badge state set")}catch(error){log.warn("[NotificationService] Failed to set enhanced urgent badge:",false,error)}}static startBadgeCountdownEnhanced(seconds){this.clearBadgeCountdown();let timeLeft=seconds;if(typeof window!=="undefined"){this._badgeCountdownInterval=window.setInterval(async()=>{var _a;timeLeft--;if(timeLeft<=0){this.clearBadgeCountdown();await this.clearUrgentBadgeEnhanced();return}if((_a=browser_ext)==null?void 0:_a.action){try{await browser_ext.action.setBadgeText({text:timeLeft.toString()});if(timeLeft<=5){await browser_ext.action.setBadgeBackgroundColor({color:"#ff0000"})}else if(timeLeft<=10){await browser_ext.action.setBadgeBackgroundColor({color:"#ff8800"})}else{await browser_ext.action.setBadgeBackgroundColor({color:"#ffaa00"})}}catch(error){log.debug("Badge update failed:",false,error)}}},1e3);log.info("[NotificationService] Badge countdown started:",false,{seconds:seconds,intervalId:this._badgeCountdownInterval})}}static clearBadgeCountdown(){if(this._badgeCountdownInterval){clearInterval(this._badgeCountdownInterval);this._badgeCountdownInterval=null;setBadgeText("");log.info("[NotificationService] Badge countdown interval cleared")}}static async clearUrgentBadgeEnhanced(){var _a;try{if(!((_a=browser_ext)==null?void 0:_a.action))return;this.clearBadgeCountdown();await browser_ext.action.setBadgeText({text:""});await browser_ext.action.setIcon({path:{16:"/images/logoBullFav16x16.png",32:"/images/logoBullFav32x32.png",48:"/images/logoBullFav48x48.png",96:"/images/logoBullFav96x96.png",128:"/images/logoBullFav128x128.png"}});log.info("[NotificationService] Enhanced urgent badge state cleared")}catch(error){log.warn("[NotificationService] Failed to clear enhanced urgent badge:",false,error)}}static async playUrgentSoundEnhanced(){var _a;try{if((_a=browser_ext)==null?void 0:_a.runtime){browser_ext.runtime.sendMessage({type:"PLAY_URGENT_SOUND",timestamp:Date.now()}).catch(error=>{log.debug("Error sending sound request to UI:",false,error)})}log.info("[NotificationService] Enhanced urgent sound request sent")}catch(error){log.warn("[NotificationService] Failed to play enhanced urgent sound:",false,error)}}static async sendLockdownWarningEnhanced(delayMs=3e4,options={}){var _a,_b;try{const delaySeconds=Math.ceil(delayMs/1e3);log.info("[NotificationService] sendLockdownWarningEnhanced called with full attention features",false,{delayMs:delayMs,delaySeconds:delaySeconds,options:options});await this.setUrgentBadgeEnhanced(`${delaySeconds}`);const windowFocused=await this.focusPopupWindowEnhanced();const message=`YAKKL will be locked in ${delaySeconds} seconds due to inactivity. Click extension or this notification to stay active!`;const notificationId=`lockdown-warning-enhanced-${Date.now()}`;let result=null;if((_a=browser_ext)==null?void 0:_a.notifications){try{const baseNotificationOptions={type:"basic",title:"🚨 YAKKL SECURITY ALERT",message:message,priority:2,requireInteraction:true,silent:false,eventTime:Date.now(),...options};const fullNotificationOptions={...baseNotificationOptions,iconUrl:browser_ext.runtime.getURL(this.DEFAULT_ICON)};await browser_ext.notifications.create(notificationId,fullNotificationOptions);activeNotifications.add(notificationId);result=notificationId;log.info("[NotificationService] Enhanced browser notification created")}catch(err){log.warn("[NotificationService] Failed to create enhanced browser notification:",false,err)}}await this.playUrgentSoundEnhanced();if((_b=browser_ext)==null?void 0:_b.runtime){try{browser_ext.runtime.sendMessage({type:"LOCKDOWN_WARNING_ENHANCED",message:message,timestamp:Date.now(),delayMs:delayMs,delaySeconds:delaySeconds,notificationId:notificationId,windowFocused:windowFocused}).catch(error=>{log.warn("Error sending enhanced lockdown warning to UI:",false,error)})}catch(e){log.warn("Error sending enhanced lockdown warning to UI:",false,e)}}this.startBadgeCountdownEnhanced(delaySeconds);return result}catch(error){log.warn("[NotificationService] Error in sendLockdownWarningEnhanced:",false,error);throw error}}static async sendSecurityAlertEnhanced(message,options={},id){var _a;log.info("[NotificationService] sendSecurityAlertEnhanced called:",false,message);const notificationId=id||`security-alert-enhanced-${Date.now()}`;try{await this.focusPopupWindowEnhanced();await this.setUrgentBadgeEnhanced("🚨");await this.playUrgentSoundEnhanced();const enhancedOptions={requireInteraction:true,priority:2,silent:false,eventTime:Date.now(),...options};const result=await this.sendSecurityAlert(message,enhancedOptions,notificationId);if((_a=browser_ext)==null?void 0:_a.runtime){try{browser_ext.runtime.sendMessage({type:"SECURITY_ALERT_ENHANCED",message:message,options:options,id:notificationId,timestamp:Date.now()}).catch(()=>{})}catch(e){}}return result}catch(error){log.warn("[NotificationService] Failed to send enhanced security alert:",false,error);return null}}static async clearAllAlertsEnhanced(){if(this._isClearing){log.info("[NotificationService] Already clearing alerts, waiting for completion");if(this._clearingPromise){await this._clearingPromise}return}this._isClearing=true;this._clearingPromise=this._performClearAllAlertsEnhanced();try{await this._clearingPromise}finally{this._isClearing=false;this._clearingPromise=null}}static async _performClearAllAlertsEnhanced(){var _a,_b,_c;try{log.info("[NotificationService] Starting comprehensive alert clearing");this.clearBadgeCountdown();this.clearAll();if(this._urgentSoundContext){try{await this._urgentSoundContext.close();this._urgentSoundContext=null;log.info("[NotificationService] Audio context closed")}catch(error){log.debug("Audio context close error (may be normal):",false,error)}}if((_a=browser_ext)==null?void 0:_a.notifications){try{const notifications=await browser_ext.notifications.getAll();log.info(`[NotificationService] Found ${Object.keys(notifications).length} notifications to clear`);const clearPromises=Object.keys(notifications).map(id=>browser_ext.notifications.clear(id).catch(()=>{}));await Promise.all(clearPromises);activeNotifications.clear();log.info("[NotificationService] All browser notifications cleared")}catch(error){log.warn("[NotificationService] Error clearing browser notifications:",false,error)}}if((_b=browser_ext)==null?void 0:_b.action){try{await browser_ext.action.setBadgeText({text:""});await browser_ext.action.setIcon({path:{16:"/images/logoBullFav16x16.png",32:"/images/logoBullFav32x32.png",48:"/images/logoBullFav48x48.png",96:"/images/logoBullFav96x96.png",128:"/images/logoBullFav128x128.png"}});log.info("[NotificationService] Badge and icon cleared")}catch(error){log.warn("[NotificationService] Error clearing badge/icon:",false,error)}}if((_c=browser_ext)==null?void 0:_c.alarms){try{await Promise.all([browser_ext.alarms.clear("yakkl-lock-alarm").catch(()=>{}),browser_ext.alarms.clear("yakkl-lock-notification").catch(()=>{})]);log.info("[NotificationService] Alarms cleared")}catch(error){log.warn("[NotificationService] Error clearing alarms:",false,error)}}log.info("[NotificationService] All enhanced alerts cleared successfully (no UI messages sent)")}catch(error){log.warn("[NotificationService] Failed to clear enhanced alerts:",false,error);throw error}}static async clearAlertsUIOnly(){try{log.info("[NotificationService] Clearing UI-only alerts");if(typeof window!=="undefined"){const audioContext=window.__yakklAudioContext;if(audioContext&&audioContext.state!=="closed"){await audioContext.close();window.__yakklAudioContext=null;log.info("[NotificationService] Audio context closed")}if(window.__yakklTitleFlashInterval){clearInterval(window.__yakklTitleFlashInterval);window.__yakklTitleFlashInterval=null}if(window.__yakklOriginalTitle){document.title=window.__yakklOriginalTitle;window.__yakklOriginalTitle=null}if(window.__yakklCountdownInterval){clearInterval(window.__yakklCountdownInterval);window.__yakklCountdownInterval=null}try{const{hideSecurityWarning:hideSecurityWarning}=await __vitePreload(async()=>{const{hideSecurityWarning:hideSecurityWarning2}=await import("./ByX4oUvk.js");return{hideSecurityWarning:hideSecurityWarning2}},true?__vite__mapDeps([0,1,2]):void 0,import.meta.url);hideSecurityWarning()}catch(e){log.debug("Error hiding security warning:",false,e)}}log.info("[NotificationService] UI-only alerts cleared")}catch(error){log.warn("[NotificationService] Failed to clear UI-only alerts:",false,error)}}static async clearEnhanced(id=this.DEFAULT_ID){var _a;try{const result=await this.clear(id);if(id.includes("lockdown-warning")){await this.clearUrgentBadgeEnhanced();for(let i=0;i<4;i++){await this.clear(`lockdown-reminder-enhanced-${i}`)}}if((_a=browser_ext)==null?void 0:_a.runtime){try{browser_ext.runtime.sendMessage({type:"CLEAR_NOTIFICATION_ENHANCED",notificationId:id,timestamp:Date.now()}).catch(()=>{})}catch(e){}}return result}catch(error){log.warn("Error in enhanced clear:",false,{id:id,error:error});return false}}static async testEnhancedFeatures(){log.info("[NotificationService] Testing enhanced features...");try{await this.focusPopupWindowEnhanced();await this.setUrgentBadgeEnhanced("TEST");await this.playUrgentSoundEnhanced();await this.sendLockdownWarningEnhanced(15e3,{contextMessage:"This is a test of enhanced features"});log.info("[NotificationService] Enhanced features test completed")}catch(error){log.warn("[NotificationService] Enhanced features test failed:",false,error)}}}__publicField(NotificationService,"DEFAULT_ID","yakkl-notification");__publicField(NotificationService,"DEFAULT_ICON","/images/logoBullLock48x48.png");__publicField(NotificationService,"clearTimeout",null);__publicField(NotificationService,"_badgeCountdownInterval",null);__publicField(NotificationService,"_urgentSoundContext",null);__publicField(NotificationService,"_isClearing",false);__publicField(NotificationService,"_clearingPromise",null);__publicField(NotificationService,"IMPORTANT_NOTIFICATIONS",["security-alert","lockdown-warning","wallet-locked"]);async function sendNotificationMessage(title,messageText){try{if(!browser_ext)return;log.info("sendNotificationMessage - title:",false,title);log.info("sendNotificationMessage - messageText:",false,messageText);const id=await browser_ext.notifications.create("yakkl-notification",{type:"basic",iconUrl:browser_ext.runtime.getURL("/images/logoBullLock48x48.png"),title:title||"Notification",message:messageText||"Default message."});return id}catch(error){log.warn("Error sending notification message:",false,error);return null}}export{NotificationService as N,sendNotificationMessage as s};
//# sourceMappingURL=Bmr6hs4q.js.map
