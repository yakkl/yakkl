{"version":3,"file":"lYZBmhZM.js","sources":["../../../../../../src/lib/common/token-analytics.ts"],"sourcesContent":["// token-analytics.ts - Basic vs Pro token data interfaces and utilities\n\nimport type { TokenData } from './interfaces';\n\nexport interface BasicTokenAnalytics {\n\tsymbol: string;\n\tbalance: string | bigint;\n\tcurrentPrice: number;\n\tvalue: number;\n\tname: string;\n\taddress: string;\n\tdecimals: number;\n\tlogoURI?: string;\n}\n\nexport interface ProTokenAnalytics extends BasicTokenAnalytics {\n\tpriceChange24h: number;\n\tpriceChange7d: number;\n\tpriceChange30d: number;\n\tsparkline: number[];\n\tmarketCap: number;\n\tvolume24h: number;\n\tcirculatingSupply: number;\n\ttotalSupply: number;\n\tcustomAlerts: TokenAlert[];\n\tyieldOpportunities: YieldOpportunity[];\n\triskScore: number;\n\tliquidityScore: number;\n\ttaxImplications: TaxInfo;\n\tsocialSentiment: SocialSentiment;\n\ttechnicalIndicators: TechnicalIndicators;\n\tcorrelations: TokenCorrelation[];\n}\n\nexport interface TokenAlert {\n\tid: string;\n\ttype: 'price_above' | 'price_below' | 'volume_spike' | 'market_cap_change';\n\tvalue: number;\n\tisActive: boolean;\n\tcreatedAt: string;\n}\n\nexport interface YieldOpportunity {\n\tprotocol: string;\n\tapy: number;\n\ttvl: number;\n\triskLevel: 'low' | 'medium' | 'high';\n\tdescription: string;\n}\n\nexport interface TaxInfo {\n\tcostBasis?: number;\n\tunrealizedGainLoss?: number;\n\tholdingPeriod?: number;\n\ttaxLot?: TaxLot[];\n}\n\nexport interface TaxLot {\n\tpurchaseDate: string;\n\tamount: number;\n\tprice: number;\n\tcostBasis: number;\n}\n\nexport interface SocialSentiment {\n\tscore: number; // -1 to 1\n\tmentions24h: number;\n\ttrendingScore: number;\n\tnewsEvents: NewsEvent[];\n}\n\nexport interface NewsEvent {\n\ttitle: string;\n\tsummary: string;\n\tsentiment: 'positive' | 'negative' | 'neutral';\n\tsource: string;\n\tpublishedAt: string;\n}\n\nexport interface TechnicalIndicators {\n\trsi: number;\n\tmacd: {\n\t\tsignal: number;\n\t\thistogram: number;\n\t\tmacd: number;\n\t};\n\tmovingAverages: {\n\t\tma7: number;\n\t\tma25: number;\n\t\tma50: number;\n\t\tma200: number;\n\t};\n\tsupport: number[];\n\tresistance: number[];\n}\n\nexport interface TokenCorrelation {\n\tsymbol: string;\n\tcorrelation: number; // -1 to 1\n\ttimeframe: '24h' | '7d' | '30d';\n}\n\nexport interface FeatureDifferentiation {\n\tbasic: {\n\t\ttokenVisibility: 'all';\n\t\tpriceUpdates: '5min_auto';\n\t\tanalytics: 'basic_only';\n\t\tswapFees: 'standard';\n\t\tportfolioRefresh: 'manual';\n\t};\n\tpro: {\n\t\ttokenVisibility: 'all';\n\t\tpriceUpdates: 'real_time';\n\t\tanalytics: 'full_suite';\n\t\tswapFees: 'optimized';\n\t\tportfolioRefresh: 'auto_and_manual';\n\t\tmevProtection: true;\n\t\tbatchOperations: true;\n\t\tcustomGrouping: true;\n\t\tmultiCurrency: true;\n\t\tadvancedCharts: true;\n\t\tyieldFarming: true;\n\t\ttaxReporting: true;\n\t\tpriceAlerts: true;\n\t\tsocialSentiment: true;\n\t\triskAnalytics: true;\n\t};\n}\n\n/**\n * Transforms a basic TokenData to BasicTokenAnalytics\n */\nexport function toBasicAnalytics(token: TokenData): BasicTokenAnalytics {\n\treturn {\n\t\tsymbol: token.symbol,\n\t\tbalance: token.balance.toString() || '0',\n\t\tcurrentPrice: token.price?.price || 0,\n\t\tvalue: calculateTokenValue(token),\n\t\tname: token.name,\n\t\taddress: token.address,\n\t\tdecimals: token.decimals || 18,\n\t\tlogoURI: token.logoURI\n\t};\n}\n\n/**\n * Transforms a TokenData to ProTokenAnalytics (with mock enhanced data for demo)\n */\nexport function toProAnalytics(token: TokenData): ProTokenAnalytics {\n\tconst basic = toBasicAnalytics(token);\n\n\t// In a real implementation, this data would come from various APIs\n\treturn {\n\t\t...basic,\n\t\tpriceChange24h: generateMockPriceChange(),\n\t\tpriceChange7d: generateMockPriceChange(),\n\t\tpriceChange30d: generateMockPriceChange(),\n\t\tsparkline: generateMockSparkline(),\n\t\tmarketCap: generateMockMarketCap(),\n\t\tvolume24h: generateMockVolume(),\n\t\tcirculatingSupply: 1000000000,\n\t\ttotalSupply: 1000000000,\n\t\tcustomAlerts: [],\n\t\tyieldOpportunities: generateMockYieldOps(),\n\t\triskScore: Math.random() * 10,\n\t\tliquidityScore: Math.random() * 10,\n\t\ttaxImplications: {},\n\t\tsocialSentiment: generateMockSentiment(),\n\t\ttechnicalIndicators: generateMockTechnicals(),\n\t\tcorrelations: generateMockCorrelations()\n\t};\n}\n\n/**\n * Calculates the USD value of a token holding\n */\nexport function calculateTokenValue(token: TokenData): number {\n\tif (!token.balance || !token.price?.price) return 0;\n\n\tlet balanceNum: number;\n\tif (typeof token.balance === 'bigint') {\n\t\tbalanceNum = Number(token.balance) / Math.pow(10, token.decimals || 18);\n\t} else {\n\t\tbalanceNum = Number(token.balance);\n\t}\n\n\treturn balanceNum * token.price.price;\n}\n\n/**\n * Determines if a user should see Pro features\n */\nexport function shouldShowProFeatures(userPlan: string): boolean {\n\treturn userPlan !== 'basic_member';\n}\n\n// Mock data generators for demo purposes\nfunction generateMockPriceChange(): number {\n\treturn (Math.random() - 0.5) * 20; // -10% to +10%\n}\n\nfunction generateMockSparkline(): number[] {\n\tconst points = [];\n\tlet current = 100;\n\tfor (let i = 0; i < 24; i++) {\n\t\tcurrent += (Math.random() - 0.5) * 5;\n\t\tpoints.push(current);\n\t}\n\treturn points;\n}\n\nfunction generateMockMarketCap(): number {\n\treturn Math.random() * 10000000000; // Up to 10B\n}\n\nfunction generateMockVolume(): number {\n\treturn Math.random() * 1000000000; // Up to 1B\n}\n\nfunction generateMockYieldOps(): YieldOpportunity[] {\n\treturn [\n\t\t{\n\t\t\tprotocol: 'Compound',\n\t\t\tapy: 5.2,\n\t\t\ttvl: 1000000,\n\t\t\triskLevel: 'low',\n\t\t\tdescription: 'Supply tokens to earn interest'\n\t\t},\n\t\t{\n\t\t\tprotocol: 'Uniswap V3',\n\t\t\tapy: 12.8,\n\t\t\ttvl: 500000,\n\t\t\triskLevel: 'medium',\n\t\t\tdescription: 'Provide liquidity in concentrated range'\n\t\t}\n\t];\n}\n\nfunction generateMockSentiment(): SocialSentiment {\n\treturn {\n\t\tscore: (Math.random() - 0.5) * 2,\n\t\tmentions24h: Math.floor(Math.random() * 1000),\n\t\ttrendingScore: Math.random() * 100,\n\t\tnewsEvents: []\n\t};\n}\n\nfunction generateMockTechnicals(): TechnicalIndicators {\n\treturn {\n\t\trsi: Math.random() * 100,\n\t\tmacd: {\n\t\t\tsignal: Math.random() * 2 - 1,\n\t\t\thistogram: Math.random() * 2 - 1,\n\t\t\tmacd: Math.random() * 2 - 1\n\t\t},\n\t\tmovingAverages: {\n\t\t\tma7: Math.random() * 1000,\n\t\t\tma25: Math.random() * 1000,\n\t\t\tma50: Math.random() * 1000,\n\t\t\tma200: Math.random() * 1000\n\t\t},\n\t\tsupport: [Math.random() * 1000, Math.random() * 800],\n\t\tresistance: [Math.random() * 1200, Math.random() * 1500]\n\t};\n}\n\nfunction generateMockCorrelations(): TokenCorrelation[] {\n\treturn [\n\t\t{ symbol: 'ETH', correlation: 0.8, timeframe: '30d' },\n\t\t{ symbol: 'BTC', correlation: 0.6, timeframe: '30d' }\n\t];\n}\n"],"names":["toBasicAnalytics","token","_a","symbol","balance","toString","currentPrice","price","value","calculateTokenValue","name","address","decimals","logoURI","toProAnalytics","basic","priceChange24h","generateMockPriceChange","priceChange7d","priceChange30d","sparkline","generateMockSparkline","marketCap","generateMockMarketCap","volume24h","generateMockVolume","circulatingSupply","totalSupply","customAlerts","yieldOpportunities","generateMockYieldOps","riskScore","Math","random","liquidityScore","taxImplications","socialSentiment","generateMockSentiment","technicalIndicators","generateMockTechnicals","correlations","generateMockCorrelations","balanceNum","Number","pow","shouldShowProFeatures","userPlan","points","current","i","push","protocol","apy","tvl","riskLevel","description","score","mentions24h","floor","trendingScore","newsEvents","rsi","macd","signal","histogram","movingAverages","ma7","ma25","ma50","ma200","support","resistance","correlation","timeframe"],"mappings":"AAoIO,SAASA,iBAAiBC,OAA1B,IAAAC,GACC,MAAA,CACNC,OAAQF,MAAME,OACdC,QAASH,MAAMG,QAAQC,YAAc,IACrCC,eAAcJ,GAAAD,MAAMM,QAAN,UAAA,EAAAL,GAAaK,QAAS,EACpCC,MAAOC,oBAAoBR,OAC3BS,KAAMT,MAAMS,KACZC,QAASV,MAAMU,QACfC,SAAUX,MAAMW,UAAY,GAC5BC,QAASZ,MAAMY,QAEjB,CAKO,SAASC,eAAeb,OACxB,MAAAc,MAAQf,iBAAiBC,OAGxB,MAAA,IACHc,MACHC,eAAgBC,0BAChBC,cAAeD,0BACfE,eAAgBF,0BAChBG,UAAWC,wBACXC,UAAWC,wBACXC,UAAWC,qBACXC,kBAAmB,IACnBC,YAAa,IACbC,aAAc,GACdC,mBAAoBC,uBACpBC,UAAWC,KAAKC,SAAW,GAC3BC,eAAgBF,KAAKC,SAAW,GAChCE,gBAAiB,CAAC,EAClBC,gBAAiBC,wBACjBC,oBAAqBC,yBACrBC,aAAcC,2BAEhB,CAKO,SAAShC,oBAAoBR,OA5C7B,IAAAC,GA6CF,IAACD,MAAMG,YAAYF,SAAMK,QAAN,UAAA,EAAAL,GAAaK,OAAc,OAAA,EAE9C,IAAAmC,WACA,UAAOzC,MAAMG,UAAY,SAAU,CACzBsC,WAAAC,OAAO1C,MAAMG,SAAW4B,KAAKY,IAAI,GAAI3C,MAAMW,UAAY,GAAE,KAChE,CACO8B,WAAAC,OAAO1C,MAAMG,QAAO,CAG3B,OAAAsC,WAAazC,MAAMM,MAAMA,KACjC,CAKO,SAASsC,sBAAsBC,UACrC,OAAOA,WAAa,cACrB,CAGA,SAAS7B,0BACA,OAAAe,KAAKC,SAAW,IAAO,EAChC,CAEA,SAASZ,wBACR,MAAM0B,OAAS,GACf,IAAIC,QAAU,IACd,IAAA,IAASC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAChBD,UAAAhB,KAAKC,SAAW,IAAO,EACnCc,OAAOG,KAAKF,QAAO,CAEb,OAAAD,MACR,CAEA,SAASxB,wBACD,OAAAS,KAAKC,SAAW,IACxB,CAEA,SAASR,qBACD,OAAAO,KAAKC,SAAW,GACxB,CAEA,SAASH,uBACD,MAAA,CACN,CACCqB,SAAU,WACVC,IAAK,IACLC,IAAK,IACLC,UAAW,MACXC,YAAa,kCAEd,CACCJ,SAAU,aACVC,IAAK,KACLC,IAAK,IACLC,UAAW,SACXC,YAAa,2CAGhB,CAEA,SAASlB,wBACD,MAAA,CACNmB,OAAQxB,KAAKC,SAAW,IAAO,EAC/BwB,YAAazB,KAAK0B,MAAM1B,KAAKC,SAAW,KACxC0B,cAAe3B,KAAKC,SAAW,IAC/B2B,WAAY,GAEd,CAEA,SAASrB,yBACD,MAAA,CACNsB,IAAK7B,KAAKC,SAAW,IACrB6B,KAAM,CACLC,OAAQ/B,KAAKC,SAAW,EAAI,EAC5B+B,UAAWhC,KAAKC,SAAW,EAAI,EAC/B6B,KAAM9B,KAAKC,SAAW,EAAI,GAE3BgC,eAAgB,CACfC,IAAKlC,KAAKC,SAAW,IACrBkC,KAAMnC,KAAKC,SAAW,IACtBmC,KAAMpC,KAAKC,SAAW,IACtBoC,MAAOrC,KAAKC,SAAW,KAExBqC,QAAS,CAACtC,KAAKC,SAAW,IAAMD,KAAKC,SAAW,KAChDsC,WAAY,CAACvC,KAAKC,SAAW,KAAMD,KAAKC,SAAW,MAErD,CAEA,SAASQ,2BACD,MAAA,CACN,CAAEtC,OAAQ,MAAOqE,YAAa,GAAKC,UAAW,OAC9C,CAAEtE,OAAQ,MAAOqE,YAAa,GAAKC,UAAW,OAEhD"}