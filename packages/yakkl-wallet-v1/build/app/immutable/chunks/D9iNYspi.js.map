{"version":3,"file":"D9iNYspi.js","sources":["../../../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/dom/legacy/lifecycle.js"],"sourcesContent":["/** @import { ComponentContextLegacy } from '#client' */\nimport { run, run_all } from '../../../shared/utils.js';\nimport { component_context } from '../../context.js';\nimport { derived } from '../../reactivity/deriveds.js';\nimport { user_pre_effect, user_effect } from '../../reactivity/effects.js';\nimport { deep_read_state, get, untrack } from '../../runtime.js';\n\n/**\n * Legacy-mode only: Call `onMount` callbacks and set up `beforeUpdate`/`afterUpdate` effects\n * @param {boolean} [immutable]\n */\nexport function init(immutable = false) {\n\tconst context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\tconst callbacks = context.l.u;\n\tif (!callbacks) return;\n\n\tlet props = () => deep_read_state(context.s);\n\n\tif (immutable) {\n\t\tlet version = 0;\n\t\tlet prev = /** @type {Record<string, any>} */ ({});\n\n\t\t// In legacy immutable mode, before/afterUpdate only fire if the object identity of a prop changes\n\t\tconst d = derived(() => {\n\t\t\tlet changed = false;\n\t\t\tconst props = context.s;\n\t\t\tfor (const key in props) {\n\t\t\t\tif (props[key] !== prev[key]) {\n\t\t\t\t\tprev[key] = props[key];\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (changed) version++;\n\t\t\treturn version;\n\t\t});\n\n\t\tprops = () => get(d);\n\t}\n\n\t// beforeUpdate\n\tif (callbacks.b.length) {\n\t\tuser_pre_effect(() => {\n\t\t\tobserve_all(context, props);\n\t\t\trun_all(callbacks.b);\n\t\t});\n\t}\n\n\t// onMount (must run before afterUpdate)\n\tuser_effect(() => {\n\t\tconst fns = untrack(() => callbacks.m.map(run));\n\t\treturn () => {\n\t\t\tfor (const fn of fns) {\n\t\t\t\tif (typeof fn === 'function') {\n\t\t\t\t\tfn();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t});\n\n\t// afterUpdate\n\tif (callbacks.a.length) {\n\t\tuser_effect(() => {\n\t\t\tobserve_all(context, props);\n\t\t\trun_all(callbacks.a);\n\t\t});\n\t}\n}\n\n/**\n * Invoke the getter of all signals associated with a component\n * so they can be registered to the effect this function is called in.\n * @param {ComponentContextLegacy} context\n * @param {(() => void)} props\n */\nfunction observe_all(context, props) {\n\tif (context.l.s) {\n\t\tfor (const signal of context.l.s) get(signal);\n\t}\n\n\tprops();\n}\n"],"names":["init","immutable","context","callbacks","l","u","props","deep_read_state","s","version","prev","d","derived","changed","key","get","b","length","user_pre_effect","observe_all","run_all","user_effect","fns","untrack","m","map","run","fn","a","signal"],"mappings":"6KAWO,SAASA,KAAKC,UAAY,OAC1B,MAAAC,QAAA,kBAEA,MAAAC,UAAYD,QAAQE,EAAEC,EAC5B,IAAKF,UAAW,OAEhB,IAAIG,MAAQ,IAAMC,gBAAgBL,QAAQM,GAE1C,GAAIP,UAAW,CACd,IAAIQ,QAAU,EACV,IAAAC,KAAA,CAA2C,EAGzC,MAAAC,EAAIC,QAAQ,KACjB,IAAIC,QAAU,MACd,MAAMP,OAAQJ,QAAQM,EACtB,IAAA,MAAWM,OAAOR,OAAO,CACxB,GAAIA,OAAMQ,OAASJ,KAAKI,KAAM,CACxBJ,KAAAI,KAAOR,OAAMQ,KACRD,QAAA,IACf,CACA,CACG,GAAIA,QAASJ,UACN,OAAAA,UAGAH,MAAA,IAAMS,IAAIJ,EACpB,CAGK,GAAAR,UAAUa,EAAEC,OAAQ,CACvBC,gBAAgB,KACfC,YAAYjB,QAASI,OACrBc,QAAQjB,UAAUa,IAErB,CAGCK,YAAY,KACX,MAAMC,IAAMC,QAAQ,IAAMpB,UAAUqB,EAAEC,IAAIC,MAC1C,MAAO,KACN,IAAA,MAAWC,MAAML,IAAK,CACjB,UAAOK,KAAO,WAAY,CACzBA,IACT,CACA,KAKK,GAAAxB,UAAUyB,EAAEX,OAAQ,CACvBI,YAAY,KACXF,YAAYjB,QAASI,OACrBc,QAAQjB,UAAUyB,IAErB,CACA,CAQA,SAAST,YAAYjB,QAASI,OACzB,GAAAJ,QAAQE,EAAEI,EAAG,CAChB,IAAA,MAAWqB,UAAU3B,QAAQE,EAAEI,MAAOqB,OACxC,CAEQvB,OACR","x_google_ignoreList":[0]}