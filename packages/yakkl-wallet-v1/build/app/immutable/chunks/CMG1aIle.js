import{w as writable,g as get}from"./B2gA1VsD.js";import{l as log}from"./Cb2naUpm.js";import{b as browserSvelte,a as browser_ext}from"./CgCfpVku.js";const sessionToken=writable(null);const sessionExpiresAt=writable(null);let expiryTimer=null;function startExpiryCountdown(expiresAt){try{const timeout=expiresAt-Date.now();if(expiryTimer)clearTimeout(expiryTimer);if(timeout>0){expiryTimer=setTimeout(()=>{sessionToken.set(null);sessionExpiresAt.set(null);log.info("Session expired automatically")},timeout)}}catch(error){log.error("Error starting expiry countdown",false,error)}}async function storeSessionToken(token,expiresAt,override=true){if(override){sessionToken.set(token);sessionExpiresAt.set(expiresAt);startExpiryCountdown(expiresAt);return{token:token,expiresAt:expiresAt}}else{return null}}async function storeEncryptedHash(encryptedHash){try{if(browserSvelte){if(!encryptedHash){log.warn("No encrypted hash provided",false,{encryptedHash:encryptedHash});return null}const res=await browser_ext.runtime.sendMessage({type:"STORE_SESSION_HASH",payload:encryptedHash});if(res&&res.token&&res.expiresAt){storeSessionToken(res.token,res.expiresAt);log.debug("Session token stored",false,res);return{token:res.token,expiresAt:res.expiresAt}}else{log.warn("Session token storage failed",false,res);return null}}}catch(error){log.error("Error storing encrypted hash",false,error);return null}}async function verifySessionToken(token){try{if(!token){log.warn("No token provided for verification",false);return false}const currentToken=get(sessionToken);const currentExpiresAt=get(sessionExpiresAt);if(!currentToken||!currentExpiresAt){log.warn("No active session found",false);return false}if(currentToken!==token){log.warn("Token mismatch",false);return false}if(Date.now()>=currentExpiresAt){log.warn("Session expired",false);sessionToken.set(null);sessionExpiresAt.set(null);return false}return true}catch(error){log.error("Error verifying session token",false,error);return false}}export{storeSessionToken as a,sessionToken as b,sessionExpiresAt as c,storeEncryptedHash as s,verifySessionToken as v};
//# sourceMappingURL=CMG1aIle.js.map
