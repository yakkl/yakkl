{"version":3,"file":"OUz8be-y.js","sources":["../../../../../../src/lib/components/ImportPhrase.svelte","../../../../../../src/lib/components/ImportOption.svelte","../../../../../../src/lib/components/ImportOptionModal.svelte"],"sourcesContent":["<!-- ImportPhrase.svelte -->\n<script lang=\"ts\">\n\timport { browserSvelte } from '$lib/common/environment';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { createForm } from 'svelte-forms-lib';\n\timport * as yup from 'yup';\n\timport { onMount } from 'svelte';\n\timport { incrementProperty } from '$lib/utilities';\n\timport { getWallet } from '$lib/utilities/ethereum';\n\timport { deepCopy, getSymbol } from '$lib/utilities';\n\timport {\n\t\tsetSettingsStorage,\n\t\tgetSettings,\n\t\tyakklMiscStore,\n\t\tsetProfileStorage,\n\t\tsetYakklCurrentlySelectedStorage,\n\t\tsetYakklPrimaryAccountsStorage,\n\t\tgetYakklPrimaryAccounts,\n\t\tgetYakklAccounts,\n\t\tsetYakklAccountsStorage,\n\t\tgetProfile\n\t} from '$lib/common/stores';\n\timport { encryptData, decryptData } from '$lib/common/encryption';\n\timport { DEFAULT_DERIVED_PATH_ETH, DEFAULT_PERSONA, VERSION } from '$lib/common/constants';\n\timport {\n\t\tAccountTypeCategory,\n\t\taddressExist,\n\t\tisEncryptedData,\n\t\ttype CurrentlySelectedData,\n\t\ttype PrimaryAccountData,\n\t\ttype Profile,\n\t\ttype ProfileData,\n\t\ttype YakklAccount,\n\t\ttype YakklCurrentlySelected,\n\t\ttype YakklPrimaryAccount\n\t} from '$lib/common';\n\timport { dateString } from '$lib/common/datetime';\n\timport PincodeVerify from './PincodeVerify.svelte';\n\timport Modal from './Modal.svelte';\n\timport { log } from '$lib/managers/Logger';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tclassName?: string;\n\t\tonComplete?: () => void; // May want to add parameters to show what imported but not currently needed\n\t\tonCancel?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tclassName = 'text-gray-600 z-[999]',\n\t\tonComplete = () => {\n\t\t\tshowPincodeModal = false;\n\t\t\tshow = false;\n\t\t},\n\t\tonCancel = $bindable(() => {\n\t\t\tshowPincodeModal = false;\n\t\t\tshow = false;\n\t\t})\n\t}: Props = $props();\n\n\tlet currentlySelected: YakklCurrentlySelected;\n\tlet error = $state('');\n\tlet elements: NodeListOf<HTMLInputElement>;\n\tlet selected = $state('24');\n\tlet subAccounts = $state(true);\n\tlet showPincodeModal = $state(false);\n\tlet index = 0;\n\n\tasync function processSecretPhraseRecovery(secretPhrase: string) {\n\t\tif (browserSvelte) {\n\t\t\ttry {\n\t\t\t\tconst selectedWords = secretPhrase.split(' ').slice(0, parseInt(selected));\n\t\t\t\tconst yakklPrimaryAccount = await createPortfolioAccount(selectedWords.join(' '));\n\t\t\t\tonComplete();\n\n\t\t\t\t// Create subAccounts if enabled\n\t\t\t\tif (subAccounts) {\n\t\t\t\t\tlet derivedIndex = 0;\n\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tconst dPath = `${DEFAULT_DERIVED_PATH_ETH}${index}'/0/${derivedIndex}`;\n\n\t\t\t\t\t\tconst randomMnemonic = (yakklPrimaryAccount.data as PrimaryAccountData)\n\t\t\t\t\t\t\t.mnemonic as string;\n\t\t\t\t\t\tconst ethWallet = ethersv6.HDNodeWallet.fromPhrase(randomMnemonic, dPath);\n\t\t\t\t\t\tconst wallet = getWallet(ethWallet.privateKey);\n\n\t\t\t\t\t\tconst balance = await wallet.getBalance();\n\n\t\t\t\t\t\tif (balance.isZero()) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet addressDerived = wallet.address;\n\t\t\t\t\t\tincrementProperty(yakklPrimaryAccount, 'subIndex');\n\n\t\t\t\t\t\tlet yakklAccount: YakklAccount = {\n\t\t\t\t\t\t\tid: yakklPrimaryAccount.id,\n\t\t\t\t\t\t\tindex:\n\t\t\t\t\t\t\t\t(yakklPrimaryAccount.subIndex ?? 0 > 0)\n\t\t\t\t\t\t\t\t\t? (yakklPrimaryAccount.subIndex ?? 1) - 1\n\t\t\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t\t\tblockchain: currentlySelected!.shortcuts.network.blockchain,\n\t\t\t\t\t\t\tsmartContract: false,\n\t\t\t\t\t\t\taddress: addressDerived,\n\t\t\t\t\t\t\talias: '',\n\t\t\t\t\t\t\taccountType: AccountTypeCategory.SUB,\n\t\t\t\t\t\t\tname: `Account ${yakklPrimaryAccount.subIndex}`,\n\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\tprimaryAccount: yakklPrimaryAccount,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\textendedKey: ethWallet.extendedKey,\n\t\t\t\t\t\t\t\tprivateKey: ethWallet.privateKey,\n\t\t\t\t\t\t\t\tpublicKey: ethWallet.publicKey,\n\t\t\t\t\t\t\t\tpublicKeyUncompressed: ethWallet.publicKey,\n\t\t\t\t\t\t\t\tpath: dPath,\n\t\t\t\t\t\t\t\tpathIndex: ethWallet.index,\n\t\t\t\t\t\t\t\tfingerPrint: ethWallet.fingerprint,\n\t\t\t\t\t\t\t\tparentFingerPrint: ethWallet.parentFingerprint,\n\t\t\t\t\t\t\t\tchainCode: ethWallet.chainCode,\n\t\t\t\t\t\t\t\tassignedTo: []\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tquantity: balance,\n\t\t\t\t\t\t\tclass: 'Default',\n\t\t\t\t\t\t\tlevel: 'L1',\n\t\t\t\t\t\t\tisSigner: true,\n\t\t\t\t\t\t\tavatar: '',\n\t\t\t\t\t\t\ttags: [currentlySelected!.shortcuts.network.blockchain, 'sub'],\n\t\t\t\t\t\t\tincludeInPortfolio: true,\n\t\t\t\t\t\t\tconnectedDomains: [],\n\t\t\t\t\t\t\tcreateDate: dateString(),\n\t\t\t\t\t\t\tupdateDate: dateString(),\n\t\t\t\t\t\t\tversion: VERSION\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tlet yakklAccountEnc = deepCopy(yakklAccount) as YakklAccount;\n\t\t\t\t\t\tawait encryptData(yakklAccount.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\t\t\tyakklAccountEnc.data = result;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (yakklPrimaryAccount.subAccounts) {\n\t\t\t\t\t\t\tyakklPrimaryAccount.subAccounts.push(yakklAccountEnc);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet profile = await getProfile();\n\t\t\t\t\t\tif (profile) {\n\t\t\t\t\t\t\t(profile.data as ProfileData).primaryAccounts =\n\t\t\t\t\t\t\t\t(profile.data as ProfileData).primaryAccounts || [];\n\t\t\t\t\t\t\t(profile.data as ProfileData).primaryAccounts[yakklPrimaryAccount.index] =\n\t\t\t\t\t\t\t\tyakklPrimaryAccount;\n\t\t\t\t\t\t\tawait setYakklPrimaryAccountsStorage((profile.data as ProfileData).primaryAccounts);\n\n\t\t\t\t\t\t\tlet profileEnc = deepCopy(profile);\n\t\t\t\t\t\t\tawait encryptData(profile.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\t\t\t\tprofileEnc.data = result;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait setProfileStorage(profileEnc);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tderivedIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tshow = false;\n\t\t\t} catch (e) {\n\t\t\t\terror = `Your Wallet did not initialize for the following reason: ${e}`;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function createPortfolioAccount(mnemonic: string): Promise<YakklPrimaryAccount> {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tlet yakklSettings = await getSettings();\n\t\t\t\tif (!yakklSettings) {\n\t\t\t\t\tthrow 'The settings data has not been initialized. This could be due to not yet registered or data could be incomplete which requires registering again. If unable to re-register then uninstall and reinstall. No Ethereum data will be impacted.';\n\t\t\t\t}\n\n\t\t\t\tlet profile = await getProfile();\n\t\t\t\tif (!profile) {\n\t\t\t\t\tthrow 'Profile was not found.';\n\t\t\t\t}\n\n\t\t\t\tif (!profile.data || !$yakklMiscStore) {\n\t\t\t\t\tthrow 'Profile data does not appear to be encrypted. Please register or re-register. Thank you.';\n\t\t\t\t}\n\n\t\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\t\tawait decryptData(profile.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\t\tprofile.data = result as ProfileData;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t(profile.data as ProfileData).meta = {};\n\t\t\t\tlet preferences = profile.preferences;\n\n\t\t\t\tindex = (profile.data as ProfileData).accountIndex ?? 0;\n\t\t\t\tlet derivedPath = `${DEFAULT_DERIVED_PATH_ETH}${index}'/0/0`;\n\n\t\t\t\tconst mnemonicObject = ethersv6.Mnemonic.fromPhrase(mnemonic);\n\t\t\t\tconst ethWallet = ethersv6.HDNodeWallet.fromMnemonic(mnemonicObject, derivedPath);\n\n\t\t\t\t// Check if address already exists in accounts or primary accounts\n\t\t\t\tconst { exists, table } = await addressExist(ethWallet.address);\n\t\t\t\tif (exists) {\n\t\t\t\t\tthrow `The Ethereum Wallet (Portfolio Account) was not able to be created. Address already exists in ${table}. Please try again.`;\n\t\t\t\t}\n\n\t\t\t\tif (!ethWallet) {\n\t\t\t\t\tthrow 'The Ethereum Wallet (Portfolio Account) was not able to be created. Please try again.';\n\t\t\t\t}\n\n\t\t\t\tlet currentDate = dateString();\n\n\t\t\t\t(profile.data as ProfileData).accountIndex = index + 1;\n\n\t\t\t\tlet yakklAccount: YakklAccount = {\n\t\t\t\t\tid: profile.id,\n\t\t\t\t\tindex: index,\n\t\t\t\t\tblockchain: currentlySelected!.shortcuts.network.blockchain,\n\t\t\t\t\tsmartContract: false,\n\t\t\t\t\taddress: ethWallet.address,\n\t\t\t\t\talias: '',\n\t\t\t\t\taccountType: AccountTypeCategory.PRIMARY,\n\t\t\t\t\tname: `Top Level Account ${index + 1}`,\n\t\t\t\t\tdescription: '',\n\t\t\t\t\tprimaryAccount: null,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\textendedKey: ethWallet.extendedKey,\n\t\t\t\t\t\tprivateKey: ethWallet.privateKey,\n\t\t\t\t\t\tpublicKey: ethWallet.publicKey,\n\t\t\t\t\t\tpublicKeyUncompressed: ethWallet.publicKey,\n\t\t\t\t\t\tpath: ethWallet.path ? ethWallet.path : derivedPath,\n\t\t\t\t\t\tpathIndex: index,\n\t\t\t\t\t\tfingerPrint: ethWallet.fingerprint,\n\t\t\t\t\t\tparentFingerPrint: ethWallet.parentFingerprint,\n\t\t\t\t\t\tchainCode: ethWallet.chainCode,\n\t\t\t\t\t\tassignedTo: []\n\t\t\t\t\t},\n\t\t\t\t\tquantity: 0n,\n\t\t\t\t\tclass: 'Default',\n\t\t\t\t\tlevel: 'L1',\n\t\t\t\t\tisSigner: true,\n\t\t\t\t\tavatar: '',\n\t\t\t\t\ttags: [currentlySelected!.shortcuts.network.blockchain, 'primary'],\n\t\t\t\t\tincludeInPortfolio: true,\n\t\t\t\t\tconnectedDomains: [],\n\t\t\t\t\tcreateDate: currentDate,\n\t\t\t\t\tupdateDate: currentDate,\n\t\t\t\t\tversion: VERSION\n\t\t\t\t};\n\n\t\t\t\tlet yakklPrimaryAccount: YakklPrimaryAccount = {\n\t\t\t\t\tid: yakklAccount.id,\n\t\t\t\t\tname: yakklAccount.name,\n\t\t\t\t\taddress: yakklAccount.address,\n\t\t\t\t\tquantity: yakklAccount.quantity,\n\t\t\t\t\tindex: index,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tprivateKey: ethWallet.privateKey,\n\t\t\t\t\t\tpublicKey: ethWallet.publicKey,\n\t\t\t\t\t\tpath: ethWallet.path ? ethWallet.path : derivedPath,\n\t\t\t\t\t\tpathIndex: index,\n\t\t\t\t\t\tfingerPrint: ethWallet.fingerprint,\n\t\t\t\t\t\tparentFingerPrint: ethWallet.parentFingerprint,\n\t\t\t\t\t\tchainCode: ethWallet.chainCode,\n\t\t\t\t\t\textendedKey: ethWallet.extendedKey,\n\t\t\t\t\t\tmnemonic: ethWallet.mnemonic?.phrase,\n\t\t\t\t\t\tentropy: undefined,\n\t\t\t\t\t\tpassword: ethWallet.mnemonic?.password,\n\t\t\t\t\t\tpublicKeyUncompressed: ethWallet.publicKey,\n\t\t\t\t\t\twordCount: ethWallet.mnemonic?.phrase.split(' ').length,\n\t\t\t\t\t\twordListLocale: ethWallet.mnemonic?.wordlist.locale\n\t\t\t\t\t},\n\t\t\t\t\taccount: yakklAccount,\n\t\t\t\t\tsubIndex: 0,\n\t\t\t\t\tsubAccounts: [],\n\t\t\t\t\tcreateDate: yakklAccount.createDate,\n\t\t\t\t\tupdateDate: yakklAccount.updateDate,\n\t\t\t\t\tversion: VERSION\n\t\t\t\t};\n\n\t\t\t\tlet yakklPrimaryAccountEnc = deepCopy(yakklPrimaryAccount) as YakklPrimaryAccount;\n\n\t\t\t\tawait encryptData(yakklPrimaryAccount.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\tyakklPrimaryAccountEnc.data = result;\n\t\t\t\t});\n\n\t\t\t\tyakklPrimaryAccountEnc.account = yakklAccount;\n\n\t\t\t\tawait encryptData(yakklAccount.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\tyakklPrimaryAccountEnc.account.data = result;\n\t\t\t\t});\n\n\t\t\t\tlet yakklPrimaryAccounts: YakklPrimaryAccount[] = [];\n\t\t\t\tlet primaryAccountsStorage = await getYakklPrimaryAccounts();\n\n\t\t\t\tif (primaryAccountsStorage?.length > 0) {\n\t\t\t\t\tyakklPrimaryAccounts = primaryAccountsStorage;\n\t\t\t\t}\n\n\t\t\t\tif (yakklPrimaryAccountEnc) {\n\t\t\t\t\tyakklPrimaryAccounts.push(yakklPrimaryAccountEnc);\n\t\t\t\t\tawait setYakklPrimaryAccountsStorage(yakklPrimaryAccounts);\n\t\t\t\t}\n\n\t\t\t\tlet yakklAccounts: any[] = [];\n\t\t\t\tlet accountsStorage = await getYakklAccounts();\n\n\t\t\t\tif (accountsStorage?.length > 0) {\n\t\t\t\t\tyakklAccounts = accountsStorage;\n\t\t\t\t}\n\n\t\t\t\tyakklPrimaryAccountEnc.account.primaryAccount = null;\n\n\t\t\t\tyakklAccounts.push(yakklPrimaryAccountEnc.account);\n\t\t\t\tawait setYakklAccountsStorage(yakklAccounts);\n\n\t\t\t\tawait ethWallet.signMessage($yakklMiscStore).then((result) => {\n\t\t\t\t\t(profile.data as ProfileData).sig = result;\n\t\t\t\t});\n\n\t\t\t\tlet profileEnc: Profile = deepCopy(profile);\n\n\t\t\t\tawait encryptData(profileEnc.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\tprofileEnc.data = result;\n\t\t\t\t});\n\n\t\t\t\tif (profileEnc) {\n\t\t\t\t\tawait setProfileStorage(profileEnc);\n\t\t\t\t\tyakklSettings.init = currentlySelected!.shortcuts.init = true;\n\t\t\t\t\tyakklSettings.isLocked = currentlySelected!.shortcuts.isLocked = false;\n\t\t\t\t\tawait setSettingsStorage(yakklSettings);\n\n\t\t\t\t\tlet accountName = yakklAccount.name;\n\n\t\t\t\t\tlet yakklCurrentlySelected = currentlySelected;\n\n\t\t\t\t\tyakklCurrentlySelected!.version = VERSION;\n\t\t\t\t\tyakklCurrentlySelected!.id = profile.id;\n\t\t\t\t\tyakklCurrentlySelected!.persona = profile?.persona || DEFAULT_PERSONA;\n\t\t\t\t\tyakklCurrentlySelected!.preferences.locale = preferences.locale;\n\t\t\t\t\tyakklCurrentlySelected!.preferences.currency = preferences.currency;\n\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.blockchain = yakklAccount.blockchain;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.symbol = getSymbol(yakklAccount.blockchain);\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.isLocked = false;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.showTestNetworks =\n\t\t\t\t\t\tpreferences.showTestNetworks as boolean;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.profile.name = (profile.data as ProfileData).name;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.profile.email = (profile.data as ProfileData).email;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.primary = yakklPrimaryAccountEnc;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.address = yakklAccount.address;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.accountName = accountName;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.accountType = AccountTypeCategory.PRIMARY;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.alias = yakklAccount.alias;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.smartContract = false;\n\n\t\t\t\t\t(yakklCurrentlySelected!.data as CurrentlySelectedData).primaryAccount =\n\t\t\t\t\t\tyakklPrimaryAccountEnc;\n\t\t\t\t\t(yakklCurrentlySelected!.data as CurrentlySelectedData).account = yakklAccount;\n\n\t\t\t\t\tyakklCurrentlySelected!.createDate = yakklAccount.createDate;\n\t\t\t\t\tyakklCurrentlySelected!.updateDate = yakklAccount.updateDate;\n\n\t\t\t\t\tlet currentDeepCopy = deepCopy(yakklCurrentlySelected);\n\t\t\t\t\tawait setYakklCurrentlySelectedStorage(yakklCurrentlySelected!);\n\t\t\t\t\tcurrentlySelected = currentDeepCopy;\n\n\t\t\t\t\treturn yakklPrimaryAccountEnc;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Failed to create profile encryption');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('Browser environment not available');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(`Your Wallet did not initialize for the following reason: ${e}`);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tconst { form, errors, handleChange, handleSubmit, updateInitialValues } = createForm({\n\t\tinitialValues: {\n\t\t\tsecretPhrase: ''\n\t\t},\n\t\tvalidationSchema: yup.object().shape({\n\t\t\tsecretPhrase: yup.string().required('Please enter your secret recovery phrase')\n\t\t}),\n\t\tonSubmit: (data) => {\n\t\t\ttry {\n\t\t\t\tconst elements = document.querySelectorAll<HTMLInputElement>('[data-id]');\n\t\t\t\tlet secretPhrase = '';\n\t\t\t\tif (elements) {\n\t\t\t\t\telements.forEach((el) => {\n\t\t\t\t\t\tsecretPhrase += el.value + ' ';\n\t\t\t\t\t});\n\t\t\t\t\tsecretPhrase = secretPhrase.trim();\n\t\t\t\t\tconst selectedWords = secretPhrase.split(' ').slice(0, parseInt(selected));\n\t\t\t\t\tprocessSecretPhraseRecovery(selectedWords.join(' '));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Your Secret Phrase does not seem to be correct. Check the formatting. You can enter each word and it MUST BE IN ORDER -OR- paste the whole phrase after copying from your backup into any field.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlog.error(e);\n\t\t\t\terror = String(e);\n\t\t\t\tresetForm();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction resetForm() {\n\t\tupdateInitialValues({\n\t\t\tsecretPhrase: ''\n\t\t});\n\t\tconst elements = document.querySelectorAll<HTMLInputElement>('[data-id]');\n\t\telements.forEach((el) => {\n\t\t\tel.value = '';\n\t\t});\n\t}\n\n\tfunction hideShowWords() {\n\t\tlet count = parseInt(selected);\n\n\t\tlet element: HTMLElement | null;\n\t\tlet element_text: HTMLElement | null;\n\n\t\tfor (let wordCount = 13; wordCount <= 24; wordCount++) {\n\t\t\telement_text = document.getElementById(`word_text_${wordCount}`);\n\t\t\telement = document.getElementById(`word_${wordCount}`);\n\n\t\t\tif (element_text && element) {\n\t\t\t\t// Show and then toggle - this covers fringe cases\n\t\t\t\telement_text.style.display = 'block';\n\t\t\t\telement.style.display = 'block';\n\t\t\t}\n\t\t}\n\n\t\tfor (let wordCount = 24; wordCount > count; wordCount--) {\n\t\t\telement_text = document.getElementById(`word_text_${wordCount}`);\n\t\t\telement = document.getElementById(`word_${wordCount}`);\n\n\t\t\tif (element_text && element) {\n\t\t\t\tif (element_text.style.display === 'none') {\n\t\t\t\t\telement_text.style.display = 'block';\n\t\t\t\t} else {\n\t\t\t\t\telement_text.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (element.style.display === 'none') {\n\t\t\t\t\telement.style.display = 'block';\n\t\t\t\t} else {\n\t\t\t\t\telement.style.display = 'none';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet mtop: string;\n\t\tswitch (count) {\n\t\t\tcase 12:\n\t\t\t\tmtop = '-mt-[9rem]';\n\t\t\t\tbreak;\n\t\t\tcase 15:\n\t\t\t\tmtop = '-mt-[6.5rem]';\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\t\tmtop = '-mt-[4.25rem]';\n\t\t\t\tbreak;\n\t\t\tcase 21:\n\t\t\t\tmtop = '-mt-[2.5rem]';\n\t\t\t\tbreak;\n\t\t\tcase 24: // Our default\n\t\t\t\tmtop = '';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmtop = '';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tfunction toggleWordsVisibility() {\n\t\telements = document.querySelectorAll('[data-id]') as NodeListOf<HTMLInputElement>;\n\t\telements.forEach((el) => {\n\t\t\tif (el.type === 'password') {\n\t\t\t\tel.type = 'text';\n\t\t\t} else {\n\t\t\t\tel.type = 'password';\n\t\t\t}\n\t\t});\n\t}\n\n\t// Custom paste logic - Always becareful with custom paste logic and make sure not to do it on global basis unless that is desired.\n\tfunction handlePaste(e: ClipboardEvent) {\n\t\tconst data = e.clipboardData?.getData('Text');\n\t\tconst words = data?.split(' ');\n\n\t\tif (words && words.length > 1) {\n\t\t\t// If multiple words are being pasted, prevent default and handle custom logic\n\t\t\te.preventDefault();\n\t\t\tconst nodes = document.querySelectorAll<HTMLInputElement>('[data-id]');\n\t\t\tnodes.forEach((node, index) => {\n\t\t\t\tnode.value = words[index] || '';\n\t\t\t});\n\t\t}\n\t\t// Otherwise, let the default paste behavior happen\n\t}\n\n\tonMount(() => {\n\t\thideShowWords();\n\t\t// document.addEventListener('paste', handlePaste);\n\t});\n\n\tfunction handleSubaccounts() {\n\t\tsubAccounts = !subAccounts;\n\t}\n\n\tasync function verifyPincode(pincode: string) {\n\t\tshowPincodeModal = false;\n\t\tshow = true;\n\t}\n</script>\n\n<PincodeVerify bind:show={showPincodeModal} onVerified={verifyPincode} />\n\n<div class=\"relative {className}\">\n\t<Modal bind:show {onCancel} title=\"Import - Secret Recovery Phrase\" {className}>\n\t\t<div class=\"p-6 text-gray-700 dark:text-gray-200\">\n\t\t\t<p class=\"text-sm text-red-500 mb-4\">\n\t\t\t\tPlease be careful! <strong>This Secret Recovery Phrase is important!</strong>\n\t\t\t\tA bad actor could take the content of your wallet if they have access to your Private Key or\n\t\t\t\tSecret Recovery Phrase! This process will restore all of the accounts that were created by YAKKL\n\t\t\t\tonly! If you imported existing private keys from another wallet then you will need to do so again.\n\t\t\t</p>\n\t\t\t<form onsubmit={handleSubmit} class=\"space-y-4\">\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"words\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Secret Recovery Phrase Length</label\n\t\t\t\t\t>\n\t\t\t\t\t<select\n\t\t\t\t\t\tid=\"words\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\tbind:value={selected}\n\t\t\t\t\t\tonchange={hideShowWords}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"12\">12 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"15\">15 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"18\">18 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"21\">21 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"24\" selected>24 Word Secret Phrase</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<!-- svelte-ignore a11y_label_has_associated_control -->\n\t\t\t\t\t<label class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Secret Recovery Phrase Words</label\n\t\t\t\t\t>\n\t\t\t\t\t<div class=\"mt-1 grid grid-cols-2 gap-2\">\n\t\t\t\t\t\t{#each Array(parseInt(selected)) as _, index (index)}\n\t\t\t\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t\t\t\t<span class=\"w-8 text-sm text-gray-700 dark:text-gray-200\">{index + 1}.</span>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\tclass=\"flex-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\t\t\t\tdata-id={index + 1}\n\t\t\t\t\t\t\t\t\taria-label={`Word ${index + 1}`}\n\t\t\t\t\t\t\t\t\tonpaste={handlePaste}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tid=\"showWords\"\n\t\t\t\t\t\tclass=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n\t\t\t\t\t\tonclick={toggleWordsVisibility}\n\t\t\t\t\t/>\n\t\t\t\t\t<label for=\"showWords\" class=\"ml-2 block text-sm text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Show Secret Recovery Phrase Words</label\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tid=\"subaccounts\"\n\t\t\t\t\t\tclass=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n\t\t\t\t\t\tbind:checked={subAccounts}\n\t\t\t\t\t\tonchange={handleSubaccounts}\n\t\t\t\t\t/>\n\t\t\t\t\t<label for=\"subaccounts\" class=\"ml-2 block text-sm text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Recover Subportfolio Accounts</label\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"pt-5\">\n\t\t\t\t\t<div class=\"flex justify-end space-x-4\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={onCancel}>Cancel</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={resetForm}>Reset</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\t>Import</button\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{#if error}\n\t\t\t\t<p class=\"mt-4 text-sm text-red-600\">{error}</p>\n\t\t\t{/if}\n\t\t</div>\n\t</Modal>\n</div>\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { getSettings } from '$lib/common/stores';\n\timport { shouldShowProFeatures } from '$lib/common/token-analytics';\n\timport { PlanType } from '$lib/common/types';\n\timport type { Settings } from '$lib/common/interfaces';\n\timport SimpleTooltip from './SimpleTooltip.svelte';\n\n\tinterface Props {\n\t\t/// <reference types=\"svelte\" />\n\t\tshowImportWatch?: boolean;\n\t\ttitle?: string;\n\t\tonImportKey: () => void;\n\t\tonImportPhrase: () => void;\n\t\tonImportWatch: () => void;\n\t\tonRestore: () => void;\n\t}\n\n\tlet {\n\t\tshowImportWatch = false,\n\t\ttitle = 'Importing/Restoring Options',\n\t\tonImportKey,\n\t\tonImportPhrase,\n\t\tonImportWatch,\n\t\tonRestore\n\t}: Props = $props();\n\n\tlet settings: Settings | null = $state(null);\n\tlet isProUser = $state(false);\n\n\tonMount(async () => {\n\t\tsettings = await getSettings();\n\t\tisProUser = shouldShowProFeatures(settings?.plan?.type || PlanType.BASIC_MEMBER);\n\t});\n\n\tfunction handleRestore() {\n\t\tif (!isProUser) return;\n\t\tonRestore();\n\t}\n</script>\n\n<div\n\tclass=\"bg-surface-light dark:bg-surface-dark text-primary-light dark:text-primary-dark rounded-lg p-6 shadow-md\"\n>\n\t<h1 class=\"text-2xl font-bold text-center text-primary-light dark:text-primary-dark mb-4\">\n\t\t{title}\n\t</h1>\n\n\t<div class=\"space-y-4 mb-6\">\n\t\t<p class=\"text-secondary-light dark:text-secondary-dark text-center\">\n\t\t\tChoose an option to import or restore your wallet:\n\t\t</p>\n\t\t<ul class=\"list-disc list-inside text-secondary-light dark:text-secondary-dark space-y-2\">\n\t\t\t<li>Import a single account using a private key</li>\n\t\t\t<li>Import a single account using a secret phrase (12-24 words)</li>\n\t\t\t{#if showImportWatch}\n\t\t\t\t<li>Import a single watch-only address</li>\n\t\t\t{/if}\n\t\t\t<li>Restore everything from a YAKKL Emergency Kit (recover your whole wallet)</li>\n\t\t</ul>\n\t</div>\n\n\t<div class=\"space-y-3\">\n\t\t<!-- Import using Private Key -->\n\t\t<button\n\t\t\tonclick={onImportKey}\n\t\t\tclass=\"w-full py-2 px-4 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition duration-200 ease-in-out\"\n\t\t>\n\t\t\tImport using Private Key\n\t\t</button>\n\n\t\t<!-- Import Watch-Only Address (if applicable) -->\n\t\t{#if showImportWatch}\n\t\t\t<button\n\t\t\t\tonclick={onImportWatch}\n\t\t\t\tclass=\"w-full py-2 px-4 bg-amber-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition duration-200 ease-in-out\"\n\t\t\t>\n\t\t\t\tImport Watch-Only Address\n\t\t\t</button>\n\t\t{/if}\n\n\t\t<!-- Import using Secret Phrase -->\n\t\t<button\n\t\t\tonclick={onImportPhrase}\n\t\t\tclass=\"w-full py-2 px-4 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75 transition duration-200 ease-in-out\"\n\t\t>\n\t\t\tImport using Secret Phrase\n\t\t</button>\n\n\t\t<!-- Restore from Emergency Kit -->\n\t\t{#if isProUser}\n\t\t\t<button\n\t\t\t\tonclick={handleRestore}\n\t\t\t\tclass=\"w-full py-2 px-4 bg-red-600 text-white font-semibold rounded-lg shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75 transition duration-200 ease-in-out flex items-center justify-center gap-2\"\n\t\t\t>\n\t\t\t\t<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t\t</svg>\n\t\t\t\tRestore all from Emergency Kit\n\t\t\t</button>\n\t\t{:else}\n\t\t\t<SimpleTooltip content=\"Upgrade to Pro for full Emergency Kit features\">\n\t\t\t\t<button\n\t\t\t\t\tdisabled\n\t\t\t\t\tclass=\"w-full py-2 px-4 bg-gray-400 text-gray-200 font-semibold rounded-lg shadow-md cursor-not-allowed transition duration-200 ease-in-out flex items-center justify-center gap-2 relative\"\n\t\t\t\t>\n\t\t\t\t\t<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t\tRestore all from Emergency Kit\n\t\t\t\t\t<div class=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-indigo-400 to-purple-400 rounded-full flex items-center justify-center\">\n\t\t\t\t\t\t<svg class=\"w-2.5 h-2.5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</button>\n\t\t\t</SimpleTooltip>\n\t\t{/if}\n\t</div>\n</div>\n","<script lang=\"ts\">\n\timport Modal from '$lib/components/Modal.svelte';\n\timport ImportOption from '$lib/components/ImportOption.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tshowImportWatch?: boolean;\n\t\tonCancel?: () => void;\n\t\tonClose?: () => void;\n\t\tonImportKey?: () => void;\n\t\tonImportPhrase?: () => void;\n\t\tonImportWatch?: () => void;\n\t\tonRestore?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tshowImportWatch = false,\n\t\tonCancel = $bindable(() => {\n\t\t\tshow = false;\n\t\t}),\n\t\tonClose = $bindable(() => {\n\t\t\tshow = false;\n\t\t}),\n\t\tonImportKey = () => {\n\t\t\tshow = false;\n\t\t},\n\t\tonImportPhrase = () => {\n\t\t\tshow = false;\n\t\t},\n\t\tonImportWatch = () => {\n\t\t\tshow = false;\n\t\t},\n\t\tonRestore = () => {\n\t\t\tshow = false;\n\t\t}\n\t}: Props = $props();\n</script>\n\n<Modal bind:show {onCancel} {onClose} title=\"Import or Restore Wallet\">\n\t<ImportOption {showImportWatch} {onImportKey} {onImportPhrase} {onImportWatch} {onRestore} />\n</Modal>\n"],"names":["handleSubaccounts","__1","subAccounts","$.get","show","$.prop","$$props","className","onComplete","showPincodeModal","onCancel","currentlySelected","error","$.tag","$.state","elements","selected","index","async","processSecretPhraseRecovery","secretPhrase","browserSvelte","selectedWords","split","slice","parseInt","yakklPrimaryAccount","createPortfolioAccount","join","derivedIndex","dPath","DEFAULT_DERIVED_PATH_ETH","randomMnemonic","data","mnemonic","ethWallet","ethersv6.HDNodeWallet","fromPhrase","wallet","getWallet","privateKey","balance","getBalance","isZero","addressDerived","address","incrementProperty","yakklAccount","id","subIndex","blockchain","shortcuts","network","smartContract","alias","accountType","AccountTypeCategory","SUB","name","description","primaryAccount","extendedKey","publicKey","publicKeyUncompressed","path","pathIndex","fingerPrint","fingerprint","parentFingerPrint","parentFingerprint","chainCode","assignedTo","quantity","class","level","isSigner","avatar","tags","includeInPortfolio","connectedDomains","createDate","dateString","updateDate","version","VERSION","yakklAccountEnc","deepCopy","encryptData","$yakklMiscStore","then","result","push","profile","getProfile","primaryAccounts","setYakklPrimaryAccountsStorage","profileEnc","setProfileStorage","e","set","yakklSettings","getSettings","isEncryptedData","decryptData","meta","preferences","index$1","accountIndex","derivedPath","mnemonicObject","ethersv6.Mnemonic","fromMnemonic","exists","table","addressExist","currentDate","PRIMARY","_a","phrase","entropy","password","_b","wordCount","_c","length","wordListLocale","_d","wordlist","locale","account","yakklPrimaryAccountEnc","yakklPrimaryAccounts","primaryAccountsStorage","getYakklPrimaryAccounts","yakklAccounts","accountsStorage","getYakklAccounts","setYakklAccountsStorage","signMessage","sig","init","$.assign","isLocked","setSettingsStorage","accountName","yakklCurrentlySelected","persona","DEFAULT_PERSONA","currency","symbol","getSymbol","showTestNetworks","email","primary","currentDeepCopy","setYakklCurrentlySelectedStorage","Error","log","handleSubmit","updateInitialValues","createForm","initialValues","validationSchema","yup.object","shape","yup.string","required","onSubmit","document","querySelectorAll","elements2","forEach","el","value","trim","$.set","String","resetForm","hideShowWords","count","element","element_text","getElementById","style","display","toggleWordsVisibility","$.strict_equals","type","handlePaste","clipboardData","getData","words","preventDefault","nodes","node","onMount","verifyPincode","pincode","$$value","$.each","div_4","Array","_","$$array","span","textContent","set_attribute","input","$.set_attribute","this","$$args","ImportPhrase","$$render","consequent","bind_select_value","select","bind_checked","input_2","handleRestore","isProUser","showImportWatch","title","settings","shouldShowProFeatures","get","plan","PlanType","BASIC_MEMBER","consequent_1","consequent_2","alternate","onClose","onImportKey","onImportPhrase","onImportWatch","onRestore"],"mappings":"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"}