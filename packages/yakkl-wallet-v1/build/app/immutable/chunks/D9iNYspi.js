import{N as component_context,ax as user_pre_effect,ay as user_effect,a7 as untrack,az as run,aA as run_all,g as get,aB as deep_read_state,ab as derived}from"./BaS8d5lg.js";function init(immutable=false){const context=component_context;const callbacks=context.l.u;if(!callbacks)return;let props=()=>deep_read_state(context.s);if(immutable){let version=0;let prev={};const d=derived(()=>{let changed=false;const props2=context.s;for(const key in props2){if(props2[key]!==prev[key]){prev[key]=props2[key];changed=true}}if(changed)version++;return version});props=()=>get(d)}if(callbacks.b.length){user_pre_effect(()=>{observe_all(context,props);run_all(callbacks.b)})}user_effect(()=>{const fns=untrack(()=>callbacks.m.map(run));return()=>{for(const fn of fns){if(typeof fn==="function"){fn()}}}});if(callbacks.a.length){user_effect(()=>{observe_all(context,props);run_all(callbacks.a)})}}function observe_all(context,props){if(context.l.s){for(const signal of context.l.s)get(signal)}props()}export{init as i};
//# sourceMappingURL=D9iNYspi.js.map
