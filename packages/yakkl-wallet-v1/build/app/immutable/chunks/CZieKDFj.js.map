{"version":3,"file":"CZieKDFj.js","sources":["../../../../../../src/lib/extensions/chrome/iconTimer.ts","../../../../../../src/lib/common/handlers.ts"],"sourcesContent":["import type { Settings, YakklCurrentlySelected } from '$lib/common/interfaces';\nimport { getObjectFromLocalStorage, setObjectInLocalStorage } from '$lib/common/storage';\nimport { setIconLock, setIconUnlock } from '$lib/utilities';\nimport { browser_ext } from '$lib/common/environment';\nimport {\n\tSTORAGE_YAKKL_CURRENTLY_SELECTED,\n\tSTORAGE_YAKKL_SETTINGS,\n\tTIMER_ICON_CHECK_TIME\n} from '$lib/common/constants';\nimport { yakklCurrentlySelectedStore } from '$lib/common/stores';\nimport { getTimerManager } from '$lib/managers/TimerManager';\nimport { log } from '$lib/managers/Logger';\n\n// NOTE: This is used on extension UI side as well which could be a problem\n\nexport function startLockIconTimer() {\n\ttry {\n\t\tgetTimerManager().addTimer(\n\t\t\t'iconTimer_lockIcon',\n\t\t\tasync () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst yakklSettings = (await getObjectFromLocalStorage(\n\t\t\t\t\t\tSTORAGE_YAKKL_SETTINGS\n\t\t\t\t\t)) as Settings;\n\t\t\t\t\tconst yakklCurrentlySelected = (await getObjectFromLocalStorage(\n\t\t\t\t\t\tSTORAGE_YAKKL_CURRENTLY_SELECTED\n\t\t\t\t\t)) as YakklCurrentlySelected;\n\t\t\t\t\tif (yakklCurrentlySelected) {\n\t\t\t\t\t\t// This just makes sure the locks are the same\n\t\t\t\t\t\tif (yakklSettings.isLocked !== yakklCurrentlySelected.shortcuts.isLocked) {\n\t\t\t\t\t\t\tyakklCurrentlySelected.shortcuts.isLocked = yakklSettings.isLocked;\n\t\t\t\t\t\t\tawait setObjectInLocalStorage(\n\t\t\t\t\t\t\t\tSTORAGE_YAKKL_CURRENTLY_SELECTED,\n\t\t\t\t\t\t\t\tyakklCurrentlySelected\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tyakklCurrentlySelectedStore.set(yakklCurrentlySelected);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (yakklSettings.isLocked) {\n\t\t\t\t\t\tawait setIconLock();\n\t\t\t\t\t\tif (browser_ext) {\n\t\t\t\t\t\t\tawait browser_ext.runtime.sendMessage({ type: 'lockdown' });\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait setIconUnlock();\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('Error in lock icon timer interval:', false, error);\n\t\t\t\t}\n\t\t\t},\n\t\t\tTIMER_ICON_CHECK_TIME\n\t\t);\n\t\tgetTimerManager().startTimer('iconTimer_lockIcon');\n\t} catch (error: any) {\n\t\tlog.error('Error starting lock icon timer:', false, error, error?.stack);\n\t}\n}\n\nexport async function stopLockIconTimer() {\n\ttry {\n\t\tawait setIconLock();\n\t\tconst yakklSettings = (await getObjectFromLocalStorage(STORAGE_YAKKL_SETTINGS)) as Settings;\n\t\tif (yakklSettings) {\n\t\t\tgetTimerManager().removeTimer('iconTimer_lockIcon'); // Stops and clears the timer\n\t\t\tif (browser_ext) {\n\t\t\t\tawait browser_ext.runtime.sendMessage({ type: 'lockdown' });\n\t\t\t}\n\t\t}\n\t} catch (error: any) {\n\t\tlog.error('Error stopping lock icon timer:', false, error, error?.stack);\n\t}\n}\n","import { setIconLock } from '$lib/utilities/utilities';\nimport { dateString } from './datetime';\nimport type { Settings } from './interfaces';\nimport { getObjectFromLocalStorage, setObjectInLocalStorage } from './storage';\nimport { isBrowserEnv } from './environment';\nimport { stopLockIconTimer } from '$lib/extensions/chrome/iconTimer';\nimport { yakklCurrentlySelectedStore } from './stores';\nimport { get } from 'svelte/store';\nimport { log } from '$lib/managers/Logger';\n\n// Handlers / Callbacks that are not used as listeners in the extension\n\n// Originally onBeforeUnload handler\nexport async function handleLockDown() {\n\ttry {\n\t\tif (isBrowserEnv()) {\n\t\t\tlog.info('handleLockDown: Setting icon lock...', false);\n\n\t\t\tawait setIconLock();\n\t\t\tconst yakklSettings = (await getObjectFromLocalStorage('settings')) as Settings;\n\t\t\tif (yakklSettings && !yakklSettings.isLocked) {\n\t\t\t\tyakklSettings.isLocked = true;\n\t\t\t\tyakklSettings.isLockedHow = 'window_exit';\n\t\t\t\tyakklSettings.updateDate = dateString();\n\t\t\t\tawait setObjectInLocalStorage('settings', yakklSettings);\n\t\t\t\tconst yakklCurrentlySelected = get(yakklCurrentlySelectedStore);\n\t\t\t\tyakklCurrentlySelected.shortcuts.isLocked = true;\n\t\t\t\tyakklCurrentlySelectedStore.set(yakklCurrentlySelected);\n\t\t\t\tstopLockIconTimer();\n\t\t\t}\n\t\t} else {\n\t\t\tlog.info('handleLockDown: Does not believe to be in a browser environment.');\n\t\t}\n\t} catch (error) {\n\t\tlog.error('Error in lock down handler:', false, error);\n\t}\n}\n"],"names":["async","stopLockIconTimer","setIconLock","yakklSettings","getObjectFromLocalStorage","STORAGE_YAKKL_SETTINGS","getTimerManager","removeTimer","browser_ext","runtime","sendMessage","type","error","log","stack","handleLockDown","isBrowserEnv","info","isLocked","isLockedHow","updateDate","dateString","setObjectInLocalStorage","yakklCurrentlySelected","get","yakklCurrentlySelectedStore","shortcuts","set"],"mappings":"4cA0DAA,eAAsBC,oBACjB,UACGC,cACA,MAAAC,oBAAuBC,0BAA0BC,wBACvD,GAAIF,cAAe,CACFG,kBAAEC,YAAY,sBAC9B,GAAIC,YAAa,OACVA,YAAYC,QAAQC,YAAY,CAAEC,KAAM,YAAY,CAC3D,QAEOC,OACRC,IAAID,MAAM,kCAAmC,MAAOA,MAAOA,yBAAOE,MAAK,CAEzE,CC1DAd,eAAsBe,iBACjB,IACH,GAAIC,eAAgB,CACfH,IAAAI,KAAK,uCAAwC,aAE3Cf,cACA,MAAAC,oBAAuBC,0BAA0B,YACnD,GAAAD,gBAAkBA,cAAce,SAAU,CAC7Cf,cAAce,SAAW,KACzBf,cAAcgB,YAAc,cAC5BhB,cAAciB,WAAaC,mBACrBC,wBAAwB,WAAYnB,eACpC,MAAAoB,uBAAyBC,IAAIC,6BACnCF,uBAAuBG,UAAUR,SAAW,KAC5CO,4BAA4BE,IAAIJ,wBACdtB,mBAAA,CACnB,KACM,CACNY,IAAII,KAAK,mEAAkE,QAEpEL,OACJC,IAAAD,MAAM,8BAA+B,MAAOA,MAAK,CAEvD"}