{"version":3,"file":"CIbUU8ai.js","sources":["../../../../../../src/lib/components/Notification.svelte","../../../../../../src/lib/managers/UpgradeManager.ts","../../../../../../src/lib/common/member_pricing.ts","../../../../../../src/lib/components/Upgrade.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport Modal from './Modal.svelte';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\ttitle?: string;\n\t\tmessage?: string;\n\t\tonClose?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\ttitle = 'Notification',\n\t\tmessage = '',\n\t\tonClose = () => safeLogout()\n\t}: Props = $props();\n\n\tfunction handleClose() {\n\t\tshow = false; // Ensure modal closes\n\t\t// Force a small delay to ensure proper cleanup before calling onClose\n\t\tsetTimeout(() => {\n\t\t\tonClose(); // Call the provided close handler\n\t\t}, 10);\n\t}\n</script>\n\n<Modal bind:show {title}>\n\t<div class=\"p-6\">\n\t\t<div class=\"flex items-center mb-4\">\n\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t<svg\n\t\t\t\t\tclass=\"w-6 h-6 text-gray-400\"\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\"\n\t\t\t\t\t></path>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"ml-3\">\n\t\t\t\t<p class=\"text-sm text-gray-500\">{message}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"mt-4 flex justify-end\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\tonclick={handleClose}\n\t\t\t>\n\t\t\t\tClose\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</Modal>\n","import { log } from './Logger';\nimport { dateString } from '$lib/common/datetime';\nimport { getProfile, setProfileStorage, getSettings, setSettingsStorage } from '$lib/common/stores';\nimport { encryptData, decryptData } from '$lib/common/encryption';\nimport { AccessSourceType, PlanType, PromoClassificationType } from '$lib/common/types';\nimport { isEncryptedData } from '$lib/common/misc';\nimport type { ProfileData } from '$lib/common/interfaces';\n\nexport interface UpgradeRequest {\n\tuserName: string;\n\temail: string;\n\tanalytics: {\n\t\tutm_source: string;\n\t\tutm_campaign: string;\n\t\tuser_location: string;\n\t\tupgrade_date: string;\n\t\tcurrent_version: string;\n\t\tplatform: string;\n\t\tuser_agent: string;\n\t};\n\tprofileId: string;\n\tencryptionKey: string;\n}\n\nexport interface UpgradeResponse {\n\tsuccess: boolean;\n\terror?: string;\n\tcustomerId?: string;\n\tupgradeDate?: string;\n}\n\nexport type UpgradeMessage =\n\t| {\n\t\t\ttype: 'START_UPGRADE';\n\t\t\tdata: UpgradeRequest;\n\t  }\n\t| {\n\t\t\ttype: 'CANCEL_UPGRADE';\n\t  }\n\t| {\n\t\t\ttype: 'CHECK_STATUS';\n\t  };\n\nexport type UpgradeResponseMessage =\n\t| {\n\t\t\ttype: 'UPGRADE_STARTED';\n\t  }\n\t| {\n\t\t\ttype: 'UPGRADE_COMPLETED';\n\t\t\tdata: UpgradeResponse;\n\t  }\n\t| {\n\t\t\ttype: 'UPGRADE_ERROR';\n\t\t\terror: string;\n\t  }\n\t| {\n\t\t\ttype: 'UPGRADE_PROGRESS';\n\t\t\tprogress: number;\n\t\t\tstatus: string;\n\t  }\n\t| {\n\t\t\ttype: 'CANCEL_UPGRADE';\n\t  };\n\nexport class UpgradeManager {\n\tprivate static instance: UpgradeManager;\n\tprivate messagePort: MessagePort | null = null;\n\tprivate upgradeTimeout: number = 30000; // 30 seconds\n\tprivate maxRetries: number = 3;\n\tprivate currentUpgradeId: string | null = null;\n\tprivate messageHandlers: Map<string, (message: UpgradeResponseMessage) => void> = new Map();\n\n\tprivate constructor() {\n\t\tthis.initializeMessagePort();\n\t}\n\n\tstatic getInstance(): UpgradeManager {\n\t\tif (!UpgradeManager.instance) {\n\t\t\tUpgradeManager.instance = new UpgradeManager();\n\t\t}\n\t\treturn UpgradeManager.instance;\n\t}\n\n\tprivate initializeMessagePort() {\n\t\t// In a real implementation, this would set up the message port\n\t\t// For now, we'll simulate the background process\n\t}\n\n\tasync processUpgrade(request: UpgradeRequest): Promise<void> {\n\t\ttry {\n\t\t\tthis.currentUpgradeId = `upgrade-${Date.now()}`;\n\t\t\tthis.sendMessage({ type: 'UPGRADE_STARTED' });\n\n\t\t\t// Get current profile and settings\n\t\t\tconst profile = await getProfile();\n\t\t\tconst settings = await getSettings();\n\n\t\t\tif (!profile || !settings) {\n\t\t\t\tthrow new Error('Profile or settings not found');\n\t\t\t}\n\n\t\t\t// Update progress\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_PROGRESS',\n\t\t\t\tprogress: 25,\n\t\t\t\tstatus: 'Preparing upgrade data...'\n\t\t\t});\n\n\t\t\t// Make API call\n\t\t\tconst response = await this.makeApiCall(request);\n\n\t\t\tif (!response.success) {\n\t\t\t\tthrow new Error(response.error || 'Upgrade failed');\n\t\t\t}\n\n\t\t\t// Update progress\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_PROGRESS',\n\t\t\t\tprogress: 75,\n\t\t\t\tstatus: 'Updating local data...'\n\t\t\t});\n\n\t\t\t// Update local data\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tconst decryptedData = (await decryptData(\n\t\t\t\t\tprofile.data,\n\t\t\t\t\trequest.encryptionKey\n\t\t\t\t)) as ProfileData;\n\t\t\t\tdecryptedData.registered = {\n\t\t\t\t\t...decryptedData.registered,\n\t\t\t\t\tplan: {\n\t\t\t\t\t\ttype: PlanType.YAKKL_PRO,\n\t\t\t\t\t\tsource: AccessSourceType.SUBSCRIBED,\n\t\t\t\t\t\tpromo: PromoClassificationType.NONE, // These values need to be updated to the correct values - TODO: Add the correct values\n\t\t\t\t\t\ttrialEndDate: '',\n\t\t\t\t\t\tupgradeDate: ''\n\t\t\t\t\t},\n\t\t\t\t\tkey: response.customerId || `PRO-${dateString()}`,\n\t\t\t\t\tupdateDate: dateString()\n\t\t\t\t};\n\t\t\t\tprofile.data = await encryptData(decryptedData, request.encryptionKey);\n\t\t\t}\n\n\t\t\t// Update settings\n\t\t\tsettings.plan = {\n\t\t\t\ttype: PlanType.YAKKL_PRO,\n\t\t\t\tsource: AccessSourceType.SUBSCRIBED,\n\t\t\t\tpromo: PromoClassificationType.NONE, // These values need to be updated to the correct values - TODO: Add the correct values\n\t\t\t\ttrialEndDate: '',\n\t\t\t\tupgradeDate: ''\n\t\t\t};\n\t\t\tsettings.upgradeDate = dateString();\n\t\t\tsettings.updateDate = dateString();\n\n\t\t\t// Save changes\n\t\t\tawait setProfileStorage(profile);\n\t\t\tawait setSettingsStorage(settings);\n\n\t\t\t// Send completion message\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_COMPLETED',\n\t\t\t\tdata: {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tcustomerId: response.customerId,\n\t\t\t\t\tupgradeDate: dateString()\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlog.error('Error in upgrade process:', false, error);\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_ERROR',\n\t\t\t\terror: error instanceof Error ? error.message : 'An error occurred during upgrade'\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async makeApiCall(request: UpgradeRequest): Promise<UpgradeResponse> {\n\t\tlet retries = 0;\n\n\t\twhile (retries < this.maxRetries) {\n\t\t\ttry {\n\t\t\t\tconst controller = new AbortController();\n\t\t\t\tconst timeoutId = setTimeout(() => controller.abort(), this.upgradeTimeout);\n\n\t\t\t\tconst response = await fetch('https://api.yakkl.com/wallet/upgrade', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(request),\n\t\t\t\t\tsignal: controller.signal\n\t\t\t\t});\n\n\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tcustomerId: data.customerId,\n\t\t\t\t\tupgradeDate: data.upgradeDate\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\tretries++;\n\t\t\t\tif (retries === this.maxRetries) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// Wait before retrying (exponential backoff)\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, Math.pow(2, retries) * 1000));\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('Max retries exceeded');\n\t}\n\n\tprivate sendMessage(message: UpgradeResponseMessage) {\n\t\t// In a real implementation, this would send the message through the message port\n\t\t// For now, we'll notify any registered handlers\n\t\tthis.messageHandlers.forEach((handler) => handler(message));\n\t}\n\n\tregisterMessageHandler(handler: (message: UpgradeResponseMessage) => void): () => void {\n\t\tconst id = Math.random().toString(36).substr(2, 9);\n\t\tthis.messageHandlers.set(id, handler);\n\t\treturn () => this.messageHandlers.delete(id);\n\t}\n\n\tcancelUpgrade() {\n\t\tif (this.currentUpgradeId) {\n\t\t\tthis.sendMessage({ type: 'CANCEL_UPGRADE' });\n\t\t\tthis.currentUpgradeId = null;\n\t\t}\n\t}\n}\n","import {\n\tEARLY_ADOPTER_DEADLINES,\n\tFOUNDING_MEMBER_DEADLINE,\n\tYAKKL_PRO_ANNUAL_FEE\n} from './constants';\nimport { log } from '$lib/managers/Logger';\n\n/**\n * Returns the price for the current date based on EARLY_ADOPTER_USER_DEADLINES.\n * If after all deadlines, returns the last price.\n */\nexport function getEarlyAdopterPrice(now: Date = new Date()): number {\n\tfor (const offer of EARLY_ADOPTER_DEADLINES) {\n\t\tif (now < new Date(offer.date)) {\n\t\t\treturn offer.price;\n\t\t}\n\t}\n\t// If after all deadlines, return last price\n\treturn EARLY_ADOPTER_DEADLINES[EARLY_ADOPTER_DEADLINES.length - 1].price;\n}\n\n/**\n * Returns the price for the Founding Member.\n * If the current date is before the deadline, returns the price.\n * Otherwise, returns null.\n */\nexport function getFoundingMemberPrice(now: Date = new Date()): number | null {\n\tif (now < new Date(FOUNDING_MEMBER_DEADLINE)) {\n\t\treturn 100; // Return the price for Founding Member\n\t}\n\treturn null;\n}\n\n/**\n * Returns the applicable user price based on the current date.\n * Checks Founding Member price first, then Early Adopter price,\n * and finally returns the ongoing annual fee of 144 if all deadlines have passed.\n */\nexport function getMemberUpgradePrice(now: Date = new Date()): number {\n\ttry {\n\t\tconst foundingMemberPrice = getFoundingMemberPrice(now);\n\t\tif (foundingMemberPrice !== null) {\n\t\t\treturn foundingMemberPrice;\n\t\t}\n\t\tfor (const offer of EARLY_ADOPTER_DEADLINES) {\n\t\t\tif (now < new Date(offer.date)) {\n\t\t\t\treturn offer.price;\n\t\t\t}\n\t\t}\n\t\t// Ongoing annual YAKKL Pro fee\n\t\treturn YAKKL_PRO_ANNUAL_FEE;\n\t} catch (error) {\n\t\tlog.warn('Error determining available member upgrade plan level:', false, error);\n\t\treturn YAKKL_PRO_ANNUAL_FEE;\n\t}\n}\n\n/**\n * Returns the available member upgrade plan level based on the current date.\n * Checks eligibility for founding_member, early_adopter, or yakkl_pro status.\n * Returns 'yakkl_pro' as default if not found or if an error occurs.\n */\nexport function getAvailableMemberUpgradePlanLevel(\n\tnow: Date = new Date()\n): 'founding_member' | 'early_adopter' | 'yakkl_pro' {\n\ttry {\n\t\t// Check if still eligible for founding member status\n\t\tif (now < new Date(FOUNDING_MEMBER_DEADLINE)) {\n\t\t\treturn 'founding_member';\n\t\t}\n\n\t\t// Check if still eligible for early adopter status\n\t\tfor (const offer of EARLY_ADOPTER_DEADLINES) {\n\t\t\tif (now < new Date(offer.date)) {\n\t\t\t\treturn 'early_adopter';\n\t\t\t}\n\t\t}\n\n\t\t// Default to yakkl_pro if all deadlines have passed\n\t\treturn 'yakkl_pro';\n\t} catch (error) {\n\t\tlog.warn('Error determining available member upgrade plan level:', false, error);\n\t\treturn 'yakkl_pro';\n\t}\n}\n","<!-- Upgrade.svelte -->\n<script lang=\"ts\">\n\timport { createForm } from 'svelte-forms-lib';\n\timport * as yup from 'yup';\n\timport Modal from './Modal.svelte';\n\timport Login from './Login.svelte';\n\timport RegistrationPrompt from './RegistrationPrompt.svelte';\n\timport { getProfile, getSettings, yakklMiscStore } from '$lib/common/stores';\n\timport { log } from '$lib/managers/Logger';\n\timport { dateString } from '$lib/common/datetime';\n\timport ErrorNoAction from './ErrorNoAction.svelte';\n\timport Confirmation from './Confirmation.svelte';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\timport Notification from './Notification.svelte';\n\timport { UpgradeManager, type UpgradeResponseMessage } from '$lib/managers/UpgradeManager';\n\timport { canUpgrade } from '$lib/common/utils';\n\timport type { ProfileData } from '$lib/common/interfaces';\n\timport { decryptData } from '$lib/common/encryption';\n\timport { isEncryptedData } from '$lib/common';\n\timport { getAvailableMemberUpgradePlanLevel } from '$lib/common/member_pricing';\n\timport {\n\t\tcheckRegistrationStatus,\n\t\tisUserLoggedIn,\n\t\ttype RegistrationStatus\n\t} from '$lib/common/auth-utils';\n\timport { authStore, isAuthenticated, isRegistered } from '$lib/stores/auth-store';\n\timport AuthError from './AuthError.svelte';\n\timport AuthLoading from './AuthLoading.svelte';\n\timport { closeModal } from '$lib/common/stores/modal';\n\timport { getContextTypeStore } from '$lib/common/stores';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tonComplete?: () => void;\n\t\tonClose?: () => void;\n\t\tonCancel?: () => void;\n\t\topenWallet?: () => void;\n\t\tuseAuthStore?: boolean; // Optional flag to use auth store for state management\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tonComplete = $bindable(() => {}),\n\t\tonClose = $bindable(() => {\n\t\t\tsafeLogout();\n\t\t}),\n\t\tonCancel = $bindable(() => {\n\t\t\t(show = false), (showConfirmation = false), (showNotification = false), (showError = false);\n\t\t}),\n\t\topenWallet,\n\t\tuseAuthStore = false\n\t}: Props = $props();\n\n\t// Detect if we're in sidepanel context\n\tconst contextType = $state(getContextTypeStore());\n\tconst isSidepanel = $derived(\n\t\tcontextType === 'sidepanel' || (contextType?.includes?.('sidepanel') ?? false)\n\t);\n\n\t// Local state\n\tlet showError = $state(false);\n\tlet errorMessage = $state('');\n\tlet isUpgrading = $state(false);\n\tlet isProUser = $state(false);\n\tlet showConfirmation = $state(false);\n\tlet showNotification = $state(false);\n\tlet showRegistrationPrompt = $state(false);\n\tlet showLoginModal = $state(false);\n\tlet progress = $state(0);\n\tlet statusMessage = $state('');\n\tlet isInitializing = $state(false);\n\tlet retryCount = $state(0);\n\tconst maxRetries = 3;\n\tlet formValues = {\n\t\tuserName: '',\n\t\tpassword: '',\n\t\temail: ''\n\t};\n\tlet isLoggedIn = $state(false);\n\tlet registrationStatus = $state<RegistrationStatus | null>(null);\n\tlet planLevelAvailable = $state(\n\t\tgetAvailableMemberUpgradePlanLevel()?.toString()?.toUpperCase()?.replace('_', ' ') ??\n\t\t\t'YAKKL PRO'\n\t);\n\n\tconst upgradeManager = UpgradeManager.getInstance();\n\tlet unregisterHandler: (() => void) | null = null;\n\n\t// Initialize upgrade flow when modal is shown\n\t$effect(() => {\n\t\tif (show) {\n\t\t\tisInitializing = true;\n\t\t\tif (useAuthStore) {\n\t\t\t\t// Ensure auth store is initialized\n\t\t\t\tauthStore\n\t\t\t\t\t.initialize()\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tinitializeUpgradeFlow();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tlog.error('Failed to initialize auth store:', false, error);\n\t\t\t\t\t\tinitializeUpgradeFlow(); // Continue with fallback\n\t\t\t\t\t})\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tisInitializing = false;\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tinitializeUpgradeFlow().finally(() => {\n\t\t\t\t\tisInitializing = false;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t// Sync internal show state with global modal state\n\t$effect(() => {\n\t\tif (!show && isSidepanel) {\n\t\t\t// If internal show becomes false and we're in sidepanel, ensure global modal state is closed\n\t\t\tcloseModal();\n\t\t}\n\t});\n\n\t// Register message handler when component mounts\n\t$effect(() => {\n\t\tunregisterHandler = upgradeManager.registerMessageHandler(handleUpgradeMessage);\n\t\treturn () => {\n\t\t\tif (unregisterHandler) {\n\t\t\t\tunregisterHandler();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction handleUpgradeMessage(message: UpgradeResponseMessage) {\n\t\tswitch (message.type) {\n\t\t\tcase 'UPGRADE_STARTED':\n\t\t\t\tisUpgrading = true;\n\t\t\t\tprogress = 0;\n\t\t\t\tstatusMessage = 'Starting upgrade process...';\n\t\t\t\tbreak;\n\t\t\tcase 'UPGRADE_PROGRESS':\n\t\t\t\tprogress = message.progress;\n\t\t\t\tstatusMessage = message.status;\n\t\t\t\tbreak;\n\t\t\tcase 'UPGRADE_COMPLETED':\n\t\t\t\tisUpgrading = false;\n\t\t\t\tshow = false;\n\t\t\t\tshowNotification = true;\n\t\t\t\tbreak;\n\t\t\tcase 'UPGRADE_ERROR':\n\t\t\t\tisUpgrading = false;\n\t\t\t\terrorMessage = message.error;\n\t\t\t\tshowError = true;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Enhanced close handler for sidepanel context\n\tfunction handleSidepanelClose() {\n\t\tshow = false; // Ensure internal show state is false\n\t\tcloseModal(); // Close the modal\n\t\tif (!isSidepanel) {\n\t\t\tonClose();\n\t\t}\n\t\t// Don't logout in sidepanel - just close the modal\n\t}\n\n\t// Enhanced cancel handler for sidepanel context\n\tfunction handleSidepanelCancel() {\n\t\tshow = false; // Ensure internal show state is false\n\t\tcloseModal(); // Close the modal\n\t\tshowConfirmation = false;\n\t\tshowNotification = false;\n\t\tshowError = false;\n\n\t\tif (!isSidepanel) {\n\t\t\tonCancel();\n\t\t}\n\t\t// Don't logout in sidepanel - just close the modal\n\t}\n\n\t// Enhanced notification close for sidepanel context\n\tfunction handleNotificationClose() {\n\t\tshowNotification = false;\n\t\tcloseModal(); // Close the modal\n\n\t\t// Add delay to ensure proper cleanup\n\t\tsetTimeout(() => {\n\t\t\tif (!isSidepanel) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t}, 50);\n\t}\n\n\tasync function initializeUpgradeFlow() {\n\t\ttry {\n\t\t\tretryCount = 0; // Reset retry count on new initialization\n\n\t\t\t// First check registration status\n\t\t\tregistrationStatus = await checkRegistrationStatus();\n\n\t\t\tif (!registrationStatus.isRegistered) {\n\t\t\t\tshowRegistrationPrompt = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check login status\n\t\t\tisLoggedIn = useAuthStore ? $isAuthenticated : isUserLoggedIn($yakklMiscStore);\n\n\t\t\tif (!isLoggedIn) {\n\t\t\t\tshowLoginModal = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Continue with pro status check if already logged in\n\t\t\tawait checkProLevelStatus();\n\t\t} catch (error) {\n\t\t\tretryCount++;\n\t\t\tlog.error('Error initializing upgrade flow:', false, error);\n\n\t\t\t// More specific error messages\n\t\t\tif (error instanceof Error) {\n\t\t\t\terrorMessage = `Initialization failed: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = 'Failed to initialize upgrade process';\n\t\t\t}\n\n\t\t\tif (retryCount < maxRetries) {\n\t\t\t\terrorMessage += ` (Attempt ${retryCount}/${maxRetries})`;\n\t\t\t}\n\n\t\t\tshowError = true;\n\t\t}\n\t}\n\n\t// Retry initialization\n\tasync function handleInitRetry() {\n\t\tif (retryCount < maxRetries) {\n\t\t\tshowError = false;\n\t\t\terrorMessage = '';\n\t\t\tisInitializing = true;\n\t\t\ttry {\n\t\t\t\tawait initializeUpgradeFlow();\n\t\t\t} finally {\n\t\t\t\tisInitializing = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Dismiss initialization error\n\tfunction handleInitDismiss() {\n\t\tshowError = false;\n\t\terrorMessage = '';\n\t\tretryCount = 0;\n\n\t\tif (isSidepanel) {\n\t\t\tcloseModal();\n\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t}\n\t}\n\n\tasync function checkProLevelStatus() {\n\t\ttry {\n\t\t\tconst upgradeAllowed = await canUpgrade();\n\t\t\tisProUser = !upgradeAllowed;\n\t\t\tif (!upgradeAllowed) {\n\t\t\t\tshowError = true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('Error checking upgrade eligibility:', false, error);\n\t\t}\n\t}\n\n\tconst { form, handleSubmit } = createForm({\n\t\tinitialValues: formValues,\n\t\tvalidationSchema: yup.object().shape({\n\t\t\tuserName: yup.string().required('Member username is required'),\n\t\t\tpassword: yup.string().required('Password is required'),\n\t\t\temail: yup.string().email('Must be a valid email.').required('Email is required.')\n\t\t}),\n\t\tonSubmit: async (values) => {\n\t\t\tformValues = values;\n\t\t\tshowConfirmation = true;\n\t\t}\n\t});\n\n\tfunction handleLoginSuccess(\n\t\tprofile: any,\n\t\tdigest: string,\n\t\t_isMinimal: boolean,\n\t\tjwtToken?: string\n\t) {\n\t\tisLoggedIn = true;\n\t\tshowLoginModal = false;\n\n\t\t// Log JWT token availability\n\t\tif (jwtToken) {\n\t\t\tlog.debug('JWT token received in upgrade flow', false, {\n\t\t\t\thasToken: true,\n\t\t\t\tusername: profile.userName\n\t\t\t});\n\t\t}\n\n\t\t// Pre-populate form with profile data\n\t\tif (profile) {\n\t\t\tformValues.userName = profile.userName;\n\t\t\tif (profile.data?.email) {\n\t\t\t\t// Handle encrypted or unencrypted profile data\n\t\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\t\t// The digest is already set by the Login component's verify function\n\t\t\t\t\tdecryptData(profile.data, digest)\n\t\t\t\t\t\t.then((profileData) => {\n\t\t\t\t\t\t\tconst data = profileData as ProfileData;\n\t\t\t\t\t\t\tformValues.email = data.email;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tlog.warn('Error decrypting profile data:', false, error);\n\t\t\t\t\t\t\tformValues.email = '';\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tformValues.email = profile.data.email;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Continue with upgrade flow\n\t\tcheckProLevelStatus();\n\t}\n\n\tfunction handleLoginError(error: any) {\n\t\terrorMessage = typeof error === 'string' ? error : 'Authentication failed';\n\t\tshowError = true;\n\n\t\tif (isSidepanel) {\n\t\t\t// In sidepanel, just close modal on login error after delay\n\t\t\tsetTimeout(() => {\n\t\t\t\tcloseModal();\n\t\t\t\t// Don't logout - user can try again\n\t\t\t}, 2000); // Give user time to see error\n\t\t}\n\t}\n\n\tasync function onProcessUpgrade() {\n\t\ttry {\n\t\t\tconst profile = await getProfile();\n\t\t\tif (!profile) {\n\t\t\t\t// This should never happen\n\t\t\t\tlog.warn('Profile not found', false, 'Upgrade');\n\t\t\t\terrorMessage = 'Profile not found';\n\t\t\t\tshowError = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformValues = {\n\t\t\t\tuserName: '',\n\t\t\t\tpassword: '',\n\t\t\t\temail: ''\n\t\t\t};\n\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tconst profileData = (await decryptData(profile.data, $yakklMiscStore)) as ProfileData;\n\t\t\t\tformValues.userName = profile.userName;\n\t\t\t\tformValues.email = profileData.email;\n\t\t\t} else {\n\t\t\t\tformValues.userName = profile.userName;\n\t\t\t\tformValues.email = (profile.data as ProfileData).email;\n\t\t\t}\n\n\t\t\tshowConfirmation = true;\n\t\t} catch (error) {\n\t\t\tlog.warn('Error in onProcessUpgrade:', false, error);\n\t\t\terrorMessage = error instanceof Error ? error.message : 'An error occurred during upgrade';\n\t\t\tshowError = true;\n\t\t}\n\t}\n\n\tasync function processUpgrade() {\n\t\ttry {\n\t\t\tconst analyticsData = {\n\t\t\t\tutm_source: 'wallet',\n\t\t\t\tutm_campaign: 'yakkl_pro_upgrade',\n\t\t\t\tuser_location: navigator.language,\n\t\t\t\tupgrade_date: dateString(),\n\t\t\t\tcurrent_version: (await getSettings())?.version ?? 'unknown',\n\t\t\t\tplatform: (navigator as any)?.userAgentData?.platform ?? navigator?.platform ?? 'unknown',\n\t\t\t\tuser_agent: navigator?.userAgent ?? 'unknown'\n\t\t\t};\n\n\t\t\tconst planLevel = planLevelAvailable?.replace(' ', '_ ')?.toLowerCase() ?? 'yakkl_pro';\n\t\t\tanalyticsData.utm_campaign = planLevel.includes('_upgrade')\n\t\t\t\t? planLevel\n\t\t\t\t: planLevel + '_upgrade';\n\n\t\t\tawait upgradeManager.processUpgrade({\n\t\t\t\tuserName: formValues.userName,\n\t\t\t\temail: formValues.email,\n\t\t\t\tanalytics: analyticsData,\n\t\t\t\tprofileId: (await getSettings())?.id ?? '',\n\t\t\t\tencryptionKey: $yakklMiscStore\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlog.error('Error in upgrade process:', false, error);\n\t\t\terrorMessage = error instanceof Error ? error.message : 'An error occurred during upgrade';\n\t\t\tshowError = true;\n\t\t}\n\t}\n\n\tfunction onConfirm() {\n\t\tprocessUpgrade();\n\t}\n\n\t// Determine current context for registration prompt\n\tfunction getCurrentContext() {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tconst pathIncludes = window.location.pathname.includes('sidepanel');\n\t\t\treturn pathIncludes ? 'sidepanel' : 'wallet';\n\t\t}\n\t\treturn 'wallet';\n\t}\n\n\t// Update login status when miscStore changes or auth store changes\n\t$effect(() => {\n\t\tif (useAuthStore) {\n\t\t\tisLoggedIn = $isAuthenticated;\n\t\t} else {\n\t\t\tisLoggedIn = isUserLoggedIn($yakklMiscStore);\n\t\t}\n\t});\n</script>\n\n<!-- Registration Prompt -->\n<RegistrationPrompt\n\tbind:show={showRegistrationPrompt}\n\tcontext={getCurrentContext()}\n\t{openWallet}\n\tonCancel={() => {\n\t\tshowRegistrationPrompt = false;\n\t\tshow = false;\n\t\tif (isSidepanel) {\n\t\t\tcloseModal();\n\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t}\n\t}}\n/>\n\n<!-- Login Modal -->\n{#if showLoginModal}\n\t<Modal bind:show={showLoginModal} title=\"Login Required\" className=\"z-[701] text-base-content\">\n\t\t<div class=\"p-6\">\n\t\t\t<p class=\"text-center mb-4 text-gray-600\">Please login to upgrade your account</p>\n\t\t\t<Login\n\t\t\t\tonSuccess={handleLoginSuccess}\n\t\t\t\tonError={handleLoginError}\n\t\t\t\tonCancel={() => {\n\t\t\t\t\tshowLoginModal = false;\n\t\t\t\t\tshow = false;\n\t\t\t\t\tif (isSidepanel) {\n\t\t\t\t\t\tcloseModal();\n\t\t\t\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tloginButtonText=\"Login to Upgrade\"\n\t\t\t\tcancelButtonText=\"Cancel\"\n\t\t\t\t{useAuthStore}\n\t\t\t\tgenerateJWT={!useAuthStore}\n\t\t\t\tinputTextClass=\"text-base-content\"\n\t\t\t\tinputBgClass=\"bg-base-100\"\n\t\t\t/>\n\t\t</div>\n\t</Modal>\n{/if}\n\n<ErrorNoAction\n\tbind:show={showError}\n\tvalue=\"You are already using a {planLevelAvailable.toUpperCase()} level plan\"\n\ttitle=\"Congratulations!\"\n\tonClose={isSidepanel ? handleSidepanelCancel : onCancel}\n/>\n<Confirmation\n\tbind:show={showConfirmation}\n\ttitle=\"Upgrading to {planLevelAvailable.toUpperCase()}!\"\n\tmessage=\"Are you sure you want to upgrade to {planLevelAvailable.toUpperCase()}?\"\n\t{onConfirm}\n\tonCancel={isSidepanel ? handleSidepanelCancel : onCancel}\n/>\n<Notification\n\tbind:show={showNotification}\n\ttitle=\"Upgraded to {planLevelAvailable.toUpperCase()}!\"\n\tmessage=\"You are now using the {planLevelAvailable.toUpperCase()} plan. You can now access all the features of the {planLevelAvailable.toUpperCase()} plan.\"\n\tonClose={isSidepanel ? handleNotificationClose : onClose}\n/>\n\n<Modal\n\tbind:show\n\ttitle=\"Upgrade to {planLevelAvailable.toUpperCase()}\"\n\tonClose={isSidepanel ? handleSidepanelClose : onClose}\n>\n\t<div class=\"space-y-6 p-6\">\n\t\t<div class=\"text-center\">\n\t\t\t<h3 class=\"text-lg font-medium text-gray-900\">\n\t\t\t\tYAKKL Smart Wallet - {planLevelAvailable.toUpperCase()}\n\t\t\t</h3>\n\t\t\t<p class=\"mt-2 text-sm text-gray-500\">\n\t\t\t\tUnlock advanced features and enhanced security for your crypto assets.\n\t\t\t</p>\n\t\t</div>\n\n\t\t{#if isInitializing}\n\t\t\t<AuthLoading\n\t\t\t\tmessage=\"Initializing upgrade process...\"\n\t\t\t\tvariant=\"spinner\"\n\t\t\t\tsize=\"md\"\n\t\t\t\tclassName=\"py-8\"\n\t\t\t/>\n\t\t{:else if isUpgrading}\n\t\t\t<div class=\"flex flex-col items-center justify-center space-y-4\">\n\t\t\t\t<div class=\"w-full max-w-md\">\n\t\t\t\t\t<div class=\"relative pt-1\">\n\t\t\t\t\t\t<div class=\"flex mb-2 items-center justify-between\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclass=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-indigo-600 bg-indigo-200\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{statusMessage}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"text-right\">\n\t\t\t\t\t\t\t\t<span class=\"text-xs font-semibold inline-block text-indigo-600\">\n\t\t\t\t\t\t\t\t\t{progress}%\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-indigo-200\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tstyle=\"width: {progress}%\"\n\t\t\t\t\t\t\t\tclass=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500 transition-all duration-500\"\n\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<div class=\"bg-gray-50 p-4 rounded-lg\">\n\t\t\t\t<h4 class=\"font-medium text-gray-900\">Pro Features</h4>\n\t\t\t\t<ul class=\"mt-2 space-y-2 text-sm text-gray-600\">\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tAutomatic price updates with full analytics\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tParticipate in early access to new features and products\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tReduced swap fees for DeFi platforms\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tAdvanced market analytics and charting\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tFull Emergency Kit for wallet recovery\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tUnlimited accounts\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tAdvanced security features and more...\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t{#if !isLoggedIn && !showLoginModal && !showRegistrationPrompt}\n\t\t\t\t<div class=\"text-center py-8\">\n\t\t\t\t\t<p class=\"text-gray-600 mb-4\">Please login to upgrade your account</p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonclick={() => (showLoginModal = true)}\n\t\t\t\t\t\tclass=\"px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\"\n\t\t\t\t\t>\n\t\t\t\t\t\tLogin to Continue\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{:else if isLoggedIn}\n\t\t\t\t<div class=\"pt-5\">\n\t\t\t\t\t<div class=\"flex justify-end space-x-4\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={isSidepanel ? handleSidepanelCancel : onCancel}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tdisabled={isUpgrading}\n\t\t\t\t\t\t\tonclick={onProcessUpgrade}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isUpgrading ? 'Upgrading...' : 'Upgrade to Pro Level'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/if}\n\n\t\t<!-- Enhanced error handling -->\n\t\t<AuthError\n\t\t\terror={showError ? errorMessage : null}\n\t\t\tonRetry={retryCount < maxRetries && !isUpgrading && !isInitializing\n\t\t\t\t? handleInitRetry\n\t\t\t\t: undefined}\n\t\t\tonDismiss={!isUpgrading && !isInitializing ? handleInitDismiss : undefined}\n\t\t/>\n\t</div>\n</Modal>\n"],"names":["handleClose","_","show","onClose","setTimeout","$.prop","$$props","title","message","safeLogout","_UpgradeManager","constructor","__publicField","this","Map","initializeMessagePort","getInstance","instance","processUpgrade","request","currentUpgradeId","Date","now","sendMessage","type","profile","getProfile","settings","getSettings","Error","progress","status","response","makeApiCall","success","error","isEncryptedData","data","decryptedData","decryptData","encryptionKey","registered","plan","PlanType","YAKKL_PRO","source","AccessSourceType","SUBSCRIBED","promo","PromoClassificationType","NONE","trialEndDate","upgradeDate","key","customerId","dateString","updateDate","encryptData","setProfileStorage","setSettingsStorage","log","retries","maxRetries","controller","AbortController","timeoutId","abort","upgradeTimeout","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","json","Promise","resolve","Math","pow","messageHandlers","forEach","handler","registerMessageHandler","id","random","toString","substr","set","delete","cancelUpgrade","UpgradeManager","getAvailableMemberUpgradePlanLevel","FOUNDING_MEMBER_DEADLINE","offer","EARLY_ADOPTER_DEADLINES","date","warn","on_click","showLoginModal","$.set","prop","onCancel","showConfirmation","showNotification","showError","useAuthStore","contextType","$.tag_proxy","$.proxy","getContextTypeStore","isSidepanel","$.tag","$.derived","strict_equals","_a","includes","call","$.state","errorMessage","isUpgrading","isProUser","showRegistrationPrompt","statusMessage","isInitializing","retryCount","formValues","userName","password","email","isLoggedIn","registrationStatus","planLevelAvailable","_c","_b","toUpperCase","replace","upgradeManager","unregisterHandler","$.user_effect","authStore","initialize","then","initializeUpgradeFlow","catch","finally","$.get","closeModal","handleUpgradeMessage","handleSidepanelClose","handleSidepanelCancel","handleNotificationClose","checkRegistrationStatus","isRegistered","$isAuthenticated","isUserLoggedIn","$yakklMiscStore","checkProLevelStatus","$.update","handleInitRetry","handleInitDismiss","upgradeAllowed","canUpgrade","createForm","initialValues","validationSchema","yup.object","shape","yup.string","required","onSubmit","async","values","handleLoginSuccess","digest","_isMinimal","jwtToken","debug","hasToken","username","profileData","handleLoginError","$.strict_equals","onProcessUpgrade","analyticsData","utm_source","utm_campaign","user_location","navigator","language","upgrade_date","current_version","version","platform","userAgentData","user_agent","userAgent","planLevel","toLowerCase","analytics","profileId","_d","onConfirm","getCurrentContext","window","pathIncludes","location","pathname","$$value","$$render","consequent","expression_2","expression_4","expression_5","expression_7","expression_8","expression_9","expression_11","$$args","Upgrade","consequent_4","consequent_3","alternate_2","consequent_2","alternate_1","consequent_1","alternate","expression_14","expression_15","$.template_effect","$0","$.set_text","text"],"mappings":"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"}