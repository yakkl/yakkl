{"version":3,"file":"BGfGzDFG.js","sources":["../../../../../../src/lib/managers/EmergencyKitManager.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { decryptData, encryptData, isEncryptedData, VERSION, type SaltedKey } from '$lib/common';\nimport type {\n\tEmergencyKitAccountData,\n\tEmergencyKitData,\n\tEmergencyKitMetaData,\n\tEncryptedData,\n\tYakklAccount,\n\tYakklPrimaryAccount,\n\tYakklContact,\n\tYakklConnectedDomain,\n\tPreferences,\n\tSettings,\n\tProfile,\n\tYakklWatch,\n\tYakklChat,\n\tYakklBlocked,\n\tProfileData,\n\tTokenData\n} from '$lib/common';\n\ninterface BulkEmergencyKitData {\n\tmeta: EmergencyKitMetaData;\n\tdata: {\n\t\tyakklPreferencesStore: EncryptedData;\n\t\tyakklSettingsStore: EncryptedData;\n\t\tprofileStore: EncryptedData;\n\t\tyakklCurrentlySelectedStore: EncryptedData;\n\t\tyakklContactsStore: EncryptedData;\n\t\tyakklChatsStore: EncryptedData;\n\t\tyakklAccountsStore: EncryptedData;\n\t\tyakklPrimaryAccountsStore: EncryptedData;\n\t\tyakklWatchListStore: EncryptedData;\n\t\tyakklBlockedListStore: EncryptedData;\n\t\tyakklConnectedDomainsStore: EncryptedData;\n\t\tyakklTokenDataStore: EncryptedData;\n\t\tyakklTokenDataCustomStore: EncryptedData;\n\t\tyakklCombinedTokenStore: EncryptedData;\n\t\tyakklWalletProvidersStore: EncryptedData;\n\t\tyakklWalletBlockchainsStore: EncryptedData;\n\t};\n\tcs: string;\n}\n\n// import * as fs from 'fs';\n// import { promisify } from 'util';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n// import * as path from 'path';\n// ADD other cloud/edge environment imports here\n// When ready to implement S3, uncomment the following line\n// import { S3 } from 'aws-sdk';\n// import { profile } from '../models/dataModels';\nimport {\n\tAccessSourceType,\n\tPlanType,\n\tPromoClassificationType,\n\tRegisteredType\n} from '../common/types';\nimport { log } from './Logger';\n// import type { Token } from './Token';\n// Then do: npm install aws-sdk\n\n// Note: Browser extension environment - Node.js modules not available\n// File operations are handled through browser File API only\n\nexport class EmergencyKitManager {\n\tstatic async createEmergencyKit(\n\t\taccountData: EmergencyKitAccountData[],\n\t\tencryptDownload: boolean,\n\t\tpasswordOrSaltedKey: string | SaltedKey\n\t): Promise<EmergencyKitData> {\n\t\tconst createDate = new Date().toISOString();\n\t\tconst updateDate = createDate;\n\t\tconst version = VERSION; // Your versioning logic\n\t\tconst id = this.generateId(); // Generate a unique ID for the kit\n\n\t\tconst encryptedAccounts = await Promise.all(\n\t\t\taccountData.map(async (account) => {\n\t\t\t\tconst checksum = await this.createHash(JSON.stringify(account)); //encodeJSON(account)); // JSON.stringify(account));\n\t\t\t\taccount.hash = checksum;\n\t\t\t\treturn encryptDownload ? await encryptData(account, passwordOrSaltedKey) : account;\n\t\t\t})\n\t\t);\n\n\t\tconst dataToEncrypt = JSON.stringify(encryptedAccounts); //encodeJSON(encryptedAccounts);// JSON.stringify(encryptedAccounts);\n\t\tconst encryptedData = encryptDownload\n\t\t\t? await encryptData(dataToEncrypt, passwordOrSaltedKey)\n\t\t\t: { data: dataToEncrypt, iv: '', salt: '' };\n\t\tconst overallChecksum = await this.createHash(dataToEncrypt);\n\n\t\tconst meta: EmergencyKitMetaData = {\n\t\t\tid,\n\t\t\tcreateDate,\n\t\t\tupdateDate,\n\t\t\tversion,\n\t\t\ttype: 'yakkl',\n\t\t\tportfolioName: accountData[0].portfolioName,\n\t\t\tsubPortfolioName: accountData[0].subPortfolioName || '',\n\t\t\tsubPortfolioAddress: accountData[0].subPortfolioAddress || '',\n\t\t\thash: overallChecksum,\n\t\t\tfiles: ['YakklAccount'],\n\t\t\tplan: {\n\t\t\t\ttype: accountData[0].registered.plan.type,\n\t\t\t\tsource: AccessSourceType.STANDARD,\n\t\t\t\tpromo: PromoClassificationType.INFLUENCER,\n\t\t\t\ttrialEndDate: '',\n\t\t\t\tupgradeDate: ''\n\t\t\t}\n\t\t};\n\n\t\tconst emergencyKit: EmergencyKitData = {\n\t\t\tid,\n\t\t\tdata: encryptedData as EncryptedData,\n\t\t\taccounts: encryptedAccounts as EmergencyKitAccountData[],\n\t\t\tmeta,\n\t\t\tcs: overallChecksum\n\t\t};\n\n\t\treturn emergencyKit;\n\t}\n\n\tstatic async createBulkEmergencyKit(\n\t\tpreferences: Preferences,\n\t\tsettings: Settings,\n\t\tprofile: Profile,\n\t\tcurrentlySelected: any,\n\t\tcontacts: YakklContact[],\n\t\tchats: YakklChat[],\n\t\taccounts: YakklAccount[],\n\t\tprimaryAccounts: YakklPrimaryAccount[],\n\t\twatchList: YakklWatch[],\n\t\tblockedList: YakklBlocked[],\n\t\tconnectedDomains: YakklConnectedDomain[],\n\t\tpasswordOrSaltedKey: string | SaltedKey,\n\t\ttokenData: TokenData[],\n\t\ttokenDataCustom: TokenData[],\n\t\tcombinedTokenStore: TokenData[],\n\t\twalletProviders: string[],\n\t\twalletBlockchains: string[]\n\t): Promise<BulkEmergencyKitData> {\n\t\tconst createDate = new Date().toISOString();\n\t\tconst id = this.generateId();\n\n\t\tconst encryptedData: BulkEmergencyKitData['data'] = {\n\t\t\tyakklPreferencesStore: await this.encryptWithChecksum(preferences, passwordOrSaltedKey),\n\t\t\tyakklSettingsStore: await this.encryptWithChecksum(settings, passwordOrSaltedKey),\n\t\t\tprofileStore: await this.encryptWithChecksum(profile, passwordOrSaltedKey),\n\t\t\tyakklCurrentlySelectedStore: await this.encryptWithChecksum(\n\t\t\t\tcurrentlySelected,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t),\n\t\t\tyakklContactsStore: await this.encryptWithChecksum(contacts, passwordOrSaltedKey),\n\t\t\tyakklChatsStore: await this.encryptWithChecksum(chats, passwordOrSaltedKey),\n\t\t\tyakklAccountsStore: await this.encryptWithChecksum(accounts, passwordOrSaltedKey),\n\t\t\tyakklPrimaryAccountsStore: await this.encryptWithChecksum(\n\t\t\t\tprimaryAccounts,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t),\n\t\t\tyakklWatchListStore: await this.encryptWithChecksum(watchList, passwordOrSaltedKey),\n\t\t\tyakklBlockedListStore: await this.encryptWithChecksum(blockedList, passwordOrSaltedKey),\n\t\t\tyakklConnectedDomainsStore: await this.encryptWithChecksum(\n\t\t\t\tconnectedDomains,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t),\n\t\t\tyakklTokenDataStore: await this.encryptWithChecksum(tokenData, passwordOrSaltedKey),\n\t\t\tyakklTokenDataCustomStore: await this.encryptWithChecksum(\n\t\t\t\ttokenDataCustom,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t),\n\t\t\tyakklCombinedTokenStore: await this.encryptWithChecksum(\n\t\t\t\tcombinedTokenStore,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t),\n\t\t\tyakklWalletProvidersStore: await this.encryptWithChecksum(\n\t\t\t\twalletProviders,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t),\n\t\t\tyakklWalletBlockchainsStore: await this.encryptWithChecksum(\n\t\t\t\twalletBlockchains,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t)\n\t\t};\n\n\t\tlet profileData: ProfileData | null = null;\n\t\tif (isEncryptedData(profile.data)) {\n\t\t\tprofileData = await decryptData(profile.data, passwordOrSaltedKey);\n\t\t}\n\n\t\t// Update this when new data stores are added to the wallet UNLESS it's not important to restore the given data store.\n\t\t// Compare with EmergencyKit.svelte for the list of data stores that need to be updated.\n\t\tconst meta: EmergencyKitMetaData = {\n\t\t\tid,\n\t\t\tcreateDate,\n\t\t\tupdateDate: createDate,\n\t\t\tversion: VERSION,\n\t\t\ttype: 'yakkl_bulk',\n\t\t\tplan: {\n\t\t\t\ttype: profileData?.registered?.plan.type ?? PlanType.BASIC_MEMBER,\n\t\t\t\tsource: AccessSourceType.STANDARD,\n\t\t\t\tpromo: PromoClassificationType.INFLUENCER,\n\t\t\t\ttrialEndDate: '',\n\t\t\t\tupgradeDate: ''\n\t\t\t},\n\t\t\thash: await this.createHash(JSON.stringify(encryptedData)),\n\t\t\tfiles: [\n\t\t\t\t'yakklPreferencesStore',\n\t\t\t\t'yakklSettingsStore',\n\t\t\t\t'profileStore',\n\t\t\t\t'yakklCurrentlySelectedStore',\n\t\t\t\t'yakklContactsStore',\n\t\t\t\t'yakklChatsStore',\n\t\t\t\t'yakklAccountsStore',\n\t\t\t\t'yakklPrimaryAccountsStore',\n\t\t\t\t'yakklWatchListStore',\n\t\t\t\t'yakklBlockedListStore',\n\t\t\t\t'yakklConnectedDomainsStore',\n\t\t\t\t'yakklTokenDataStore',\n\t\t\t\t'yakklTokenDataCustomStore',\n\t\t\t\t'yakklCombinedTokenStore',\n\t\t\t\t'yakklWalletProvidersStore',\n\t\t\t\t'yakklWalletBlockchainsStore'\n\t\t\t]\n\t\t};\n\n\t\tprofileData = null;\n\n\t\tconst bulkEmergencyKit: BulkEmergencyKitData = {\n\t\t\tmeta,\n\t\t\tdata: encryptedData,\n\t\t\tcs: await this.createHash(JSON.stringify(meta) + JSON.stringify(encryptedData))\n\t\t};\n\n\t\treturn bulkEmergencyKit;\n\t}\n\n\tstatic async downloadEmergencyKit(\n\t\temergencyKit: EmergencyKitData,\n\t\tfilePath?: string\n\t): Promise<string> {\n\t\tif (typeof window !== 'undefined' && window.document) {\n\t\t\tconst fileName = `yakkl-emergency-kit-${emergencyKit.id}-${emergencyKit?.meta?.createDate}.json`;\n\t\t\t// Browser environment\n\t\t\tthis.downloadObjectAsJson(emergencyKit, fileName);\n\t\t\treturn fileName;\n\t\t} else {\n\t\t\tthrow new Error('Download not supported in this environment');\n\t\t}\n\t}\n\n\tstatic async downloadBulkEmergencyKit(bulkEmergencyKit: BulkEmergencyKitData): Promise<string> {\n\t\ttry {\n\t\t\tif (typeof window !== 'undefined' && window.document) {\n\t\t\t\tconst fileName = `yakkl-bulk-emergency-kit-${bulkEmergencyKit.meta.id}-${bulkEmergencyKit.meta.createDate}.json`;\n\t\t\t\t// Browser environment\n\t\t\t\tthis.downloadObjectAsJson(bulkEmergencyKit, fileName);\n\t\t\t\treturn fileName;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Download not supported in this environment');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('[ERROR]: Error downloading bulk emergency kit:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async importEmergencyKit(\n\t\tsource: File | string | { bucket: string; key: string },\n\t\tpasswordOrSaltedKey: string | SaltedKey\n\t): Promise<EmergencyKitData> {\n\t\tlet fileContent: string;\n\n\t\tif (source instanceof File) {\n\t\t\t// Browser environment\n\t\t\tfileContent = await source.text();\n\t\t} else {\n\t\t\tfileContent = this.cloudImport('source'); // Dummy implementation\n\t\t}\n\n\t\tconst emergencyKit: EmergencyKitData = JSON.parse(fileContent);\n\n\t\t// Decrypt the data if it is encrypted\n\t\tif (isEncryptedData(emergencyKit.data)) {\n\t\t\temergencyKit.accounts = await decryptData<EmergencyKitAccountData[]>(\n\t\t\t\temergencyKit.data,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t);\n\t\t}\n\n\t\treturn emergencyKit;\n\t}\n\n\tstatic async importBulkEmergencyKit(\n\t\tsource: File | string,\n\t\tpasswordOrSaltedKey: string | SaltedKey\n\t): Promise<{\n\t\tnewData: any;\n\t\texistingData: any;\n\t}> {\n\t\ttry {\n\t\t\tlet fileContent: string;\n\n\t\t\tif (source instanceof File) {\n\t\t\t\t// Browser environment\n\t\t\t\tfileContent = await source.text();\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unsupported source type');\n\t\t\t}\n\n\t\t\tconst bulkEmergencyKit: BulkEmergencyKitData = JSON.parse(fileContent);\n\n\t\t\t// Verify the overall checksum\n\t\t\tconst calculatedCS = await this.createHash(\n\t\t\t\tJSON.stringify(bulkEmergencyKit.meta) + JSON.stringify(bulkEmergencyKit.data)\n\t\t\t);\n\t\t\tif (calculatedCS !== bulkEmergencyKit.cs) {\n\t\t\t\tthrow new Error('Data integrity check failed');\n\t\t\t}\n\n\t\t\tconst newData: any = {};\n\t\t\tconst existingData: any = {};\n\n\t\t\tfor (const [key, encryptedValue] of Object.entries(bulkEmergencyKit.data)) {\n\t\t\t\tconst decryptedData = await this.decryptWithChecksumVerification(\n\t\t\t\t\tencryptedValue,\n\t\t\t\t\tpasswordOrSaltedKey\n\t\t\t\t);\n\n\t\t\t\t// Check if data already exists (you'll need to implement this check based on your data structure)\n\t\t\t\tconst dataExists = await this.checkDataExists(key, decryptedData); // Currently a placeholder for future use and is not used\n\n\t\t\t\tif (dataExists) {\n\t\t\t\t\texistingData[key] = decryptedData; // Currently a placeholder for future use and is not used\n\t\t\t\t} else {\n\t\t\t\t\tnewData[key] = decryptedData;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn { newData, existingData };\n\t\t} catch (error) {\n\t\t\tlog.error('Error importing bulk emergency kit:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async readEmergencyKitMetadata(\n\t\tsource: File | string\n\t): Promise<EmergencyKitMetaData | undefined> {\n\t\tlet fileContent: string;\n\n\t\tif (source instanceof File) {\n\t\t\t// Browser environment\n\t\t\tfileContent = await source.text();\n\t\t} else {\n\t\t\tthrow new Error('Unsupported source type');\n\t\t}\n\n\t\tconst emergencyKit: EmergencyKitData = JSON.parse(fileContent);\n\t\treturn emergencyKit.meta;\n\t}\n\n\tstatic async readBulkEmergencyKitMetadata(source: File | string): Promise<EmergencyKitMetaData> {\n\t\ttry {\n\t\t\tlet fileContent: string;\n\n\t\t\tif (source instanceof File) {\n\t\t\t\t// Browser environment\n\t\t\t\tfileContent = await source.text();\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unsupported source type');\n\t\t\t}\n\n\t\t\tconst bulkEmergencyKit: BulkEmergencyKitData = JSON.parse(fileContent);\n\t\t\treturn bulkEmergencyKit.meta;\n\t\t} catch (error) {\n\t\t\tlog.error('Error reading bulk emergency kit metadata:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Internal methods...\n\tprivate static async checkDataExists(key: string, data: any): Promise<boolean> {\n\t\t// Implement this method based on your data structure and storage mechanism\n\t\t// For example, you might check against a database or local storage\n\t\t// Return true if the data already exists, false otherwise\n\t\treturn false; // Placeholder implementation\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tprivate static cloudImport(source: File | string): string {\n\t\treturn '';\n\t}\n\n\tprivate static async createHash(data: string): Promise<string> {\n\t\tconst encoder = new TextEncoder();\n\t\tconst dataBuffer = encoder.encode(data);\n\t\tconst hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n\t\tconst hashArray = Array.from(new Uint8Array(hashBuffer));\n\t\treturn hashArray.map((byte) => byte.toString(16).padStart(2, '0')).join('');\n\t}\n\n\tprivate static async decryptWithChecksumVerification(\n\t\tencryptedData: EncryptedData,\n\t\tpasswordOrSaltedKey: string | SaltedKey\n\t): Promise<any> {\n\t\ttry {\n\t\t\tconst decryptedData = await decryptData<{ cs: string; data: any }>(\n\t\t\t\tencryptedData,\n\t\t\t\tpasswordOrSaltedKey\n\t\t\t);\n\t\t\tconst calculatedChecksum = await this.createHash(JSON.stringify(decryptedData.data));\n\n\t\t\tif (calculatedChecksum !== decryptedData.cs) {\n\t\t\t\tthrow new Error('Data integrity check failed');\n\t\t\t}\n\n\t\t\treturn decryptedData.data;\n\t\t} catch (error) {\n\t\t\tlog.error('Error decrypting data:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate static downloadObjectAsJson(exportObj: any, exportName: string) {\n\t\ttry {\n\t\t\tconst dataStr =\n\t\t\t\t'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(exportObj)); //encodeJSON(exportObj)); //JSON.stringify(exportObj));\n\t\t\tconst downloadAnchorNode = document.createElement('a');\n\t\t\tdownloadAnchorNode.setAttribute('href', dataStr);\n\t\t\tdownloadAnchorNode.setAttribute('download', exportName);\n\t\t\tdocument.body.appendChild(downloadAnchorNode); // required for Firefox\n\t\t\tdownloadAnchorNode.click();\n\t\t\tdownloadAnchorNode.remove();\n\t\t} catch (e) {\n\t\t\tlog.error(`Download failed: ${e}`);\n\t\t}\n\t}\n\n\tprivate static async encryptWithChecksum(\n\t\tdata: any,\n\t\tpasswordOrSaltedKey: string | SaltedKey\n\t): Promise<EncryptedData> {\n\t\ttry {\n\t\t\tconst jsonString = JSON.stringify(data);\n\t\t\tconst checksum = await this.createHash(jsonString);\n\t\t\tconst encryptedData = await encryptData({ cs: checksum, data }, passwordOrSaltedKey);\n\t\t\treturn encryptedData;\n\t\t} catch (error) {\n\t\t\tlog.error('Error encrypting data:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate static generateId(): string {\n\t\treturn 'xxxxxx'.replace(/x/g, () => Math.floor(Math.random() * 16).toString(16));\n\t}\n\n\t// File saving is not supported in browser extension environment\n\t// Use downloadObjectAsJson for browser-based downloads\n}\n\n// Usage:\n// Create a bulk emergency kit\n// const bulkEmergencyKit = await EmergencyKitManager.createBulkEmergencyKit(\n//   preferences,\n//   settings,\n//   profile,\n//   currentlySelected,\n//   contacts,\n//   chats,\n//   accounts,\n//   primaryAccounts,\n//   watchList,\n//   blockedList,\n//   connectedDomains,\n// );\n\n// Download the bulk emergency kit\n// await EmergencyKitManager.downloadBulkEmergencyKit(bulkEmergencyKit);\n\n// Read metadata from a bulk emergency kit file\n// const metadata = await EmergencyKitManager.readBulkEmergencyKitMetadata(file);\n\n// Import a bulk emergency kit\n// const { newData, existingData } = await .importBulkEmergencyKit(file, password);\n\n// console.log('New data:', newData);\n// console.log('Existing data:', existingData);\n\n// For a single account emergency kit\n// const singleAccountMetadata = await EmergencyKitManager.readEmergencyKitMetadata(file);\n// console.log('Single Account Emergency Kit Metadata:', singleAccountMetadata);\n\n// For a bulk emergency kit\n// const bulkMetadata = await .readBulkEmergencyKitMetadata(file);\n// console.log('Bulk Emergency Kit Metadata:', bulkMetadata);\n"],"names":["EmergencyKitManager","createEmergencyKit","accountData","encryptDownload","passwordOrSaltedKey","createDate","Date","toISOString","updateDate","version","VERSION","id","this","generateId","encryptedAccounts","Promise","all","map","async","account","checksum","createHash","JSON","stringify","hash","encryptData","dataToEncrypt","encryptedData","data","iv","salt","overallChecksum","meta","type","portfolioName","subPortfolioName","subPortfolioAddress","files","plan","registered","source","AccessSourceType","STANDARD","promo","PromoClassificationType","INFLUENCER","trialEndDate","upgradeDate","emergencyKit","accounts","cs","createBulkEmergencyKit","preferences","settings","profile","currentlySelected","contacts","chats","primaryAccounts","watchList","blockedList","connectedDomains","tokenData","tokenDataCustom","combinedTokenStore","walletProviders","walletBlockchains","yakklPreferencesStore","encryptWithChecksum","yakklSettingsStore","profileStore","yakklCurrentlySelectedStore","yakklContactsStore","yakklChatsStore","yakklAccountsStore","yakklPrimaryAccountsStore","yakklWatchListStore","yakklBlockedListStore","yakklConnectedDomainsStore","yakklTokenDataStore","yakklTokenDataCustomStore","yakklCombinedTokenStore","yakklWalletProvidersStore","yakklWalletBlockchainsStore","profileData","isEncryptedData","decryptData","_a","PlanType","BASIC_MEMBER","bulkEmergencyKit","downloadEmergencyKit","filePath","window","document","fileName","downloadObjectAsJson","Error","downloadBulkEmergencyKit","error","console","log","importEmergencyKit","fileContent","File","text","cloudImport","parse","importBulkEmergencyKit","calculatedCS","newData","existingData","key","encryptedValue","Object","entries","decryptedData","decryptWithChecksumVerification","dataExists","checkDataExists","readEmergencyKitMetadata","readBulkEmergencyKitMetadata","encoder","TextEncoder","dataBuffer","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","byte","toString","padStart","join","calculatedChecksum","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","e","jsonString","replace","Math","floor","random"],"mappings":"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"}