{"version":3,"mappings":";wYAIO,MAAMA,oBACZ,SAAAC,GACQ,SAGR,OAAAC,GACQ,eAGR,oBAAMC,CAAeC,MAChB,IACH,IAAKA,KAAM,CACH,OACNC,SAAUC,KAAKJ,UACfK,MAAO,EACPC,gBAAiBC,KACjBC,OAAQ,IACRC,QAAS,kBAAkBP,OAC5B,CAGMA,WAAME,KAAKM,sBAAsBR,MAExC,MAAMS,WAAaC,UAAU,+CAA+CV,QACtE,MAAAW,OAASF,KAAKE,OAAOC,OAAOC,KAAKJ,KAAKE,QAAQ,IAChD,IAACA,SAAWA,OAAOG,IAAMH,OAAOG,EAAE,GAAI,CACnC,UAAIC,MAAM,qDAAoD,CAE9D,OACNd,SAAUC,KAAKJ,UACfK,MAAOa,WAAWL,OAAOG,EAAE,IAC3BV,gBAAiBC,KACjBC,OAAQ,EACRC,QAAS,UAEFU,GACJC,IAAAC,MAAM,yCAA0C,MAAOF,GACpD,OACNhB,SAAUC,KAAKJ,UACfK,MAAO,EACPC,gBAAiBC,KACjBC,OAAQ,IACRC,QAAS,WAAWU,IACrB,CACD,CAGD,2BAAMT,CAAsBR,MAE3B,IAAKoB,MAAOC,QAAUrB,KAAKsB,MAAM,KAC7B,IAACF,QAAUC,OAAQ,CACtB,MAAM,IAAIN,MAAM,kBAAkBf,OAAM,CAEzC,OAAQoB,OACP,IAAK,MACGpB,KAAA,UACP,MACD,IAAK,OACGA,KAAA,UACP,MACD,IAAK,OACGA,KAAA,UACP,MACD,IAAK,OACGA,KAAA,UACP,MAEK,OAAAA,KAAKuB,QAAQ,IAAK,GAAE,EC1DtB,IAAIC,oBAA8B,WAClC,IAAIC,oBAA8BC,gCASzC,MAAMC,aAAe,IAAIC,aAAa,CACrC,CAAE3B,SAAU,IAAI4B,sBAAyBC,OAAQ,GACjD,CAAE7B,SAAU,IAAI8B,uBAA0BD,OAAQ,GAClD,CAAE7B,SAAU,IAAIL,oBAAuBkC,OAAQ,KAK1BE,eAAAC,oBAAoBZ,OAAiB,kBACtD,IACC,GAAAa,IAAIC,wBAA0B,KAAM,CACvC,MAAMxB,aAAegB,aAAa5B,eAAesB,QACjD,GAAIV,OAAQ,CACX,MAAMyB,YAAYC,GAAAH,IAAII,qBAAJ,eAAwBnC,QAAS,EACnDmC,kBAAkBC,IAAI,CACrBtC,SAAUU,OAAOV,SACjBuC,GAAI,sBACJrC,MAAOQ,OAAOR,MACdiC,sBAID,MAAMK,oBAAEA,2BAA8BC,cAAAV,UAAA,MAAAS,gDAAAE,OAAO,iBAAmC,OAAAF,2CAAA,KAAAG,4BAAA,cAAAC,KAChF,GAAIlC,OAAOR,OAASQ,OAAOR,MAAQ,EAAG,CACjBsC,oBAAAK,yBAAyBnC,OAAOR,OAChDe,IAAA6B,MAAM,mEAAoE,MAAO,CACpFC,SAAUrC,OAAOR,OACjB,CACF,CACD,KACM,CACFe,IAAAC,MAAM,eAAgB,MAAO,mCAAkC,QAE5DF,GACJC,IAAAC,MAAM,wBAAwBF,IAAG,CAEvC,CAOO,SAASgC,kBACCC,kBAAEC,UAAU,qBAE7B,CAEsBnB,eAAAoB,mBAAmB/B,OAAiB,WACxCgC,iBAAA7B,oBAAqBC,oBAAqBJ,OAC5D,CAEO,SAASgC,iBACfpD,SAAW,WACXqD,GAAK5B,gCACLL,OAAiB,WAED4B,kBAGZ,IACH,GAAIK,GAAK,EAAG,CACX,GAAIJ,kBAAkBK,UAAU,sBAAuB,CACtD,OAEDL,kBAAkBM,SACjB,qBACA,KACCvB,oBAAoBZ,SAErBiC,IAEeJ,kBAAEO,WAAW,qBAAoB,QAE1CxC,GACJC,IAAAC,MAAM,qBAAqBF,KACfiC,kBAAEC,UAAU,qBACN,CAExB","names":["KrakenPriceProvider","getAPIKey","getName","getMarketPrice","pair","provider","this","price","lastUpdated","Date","status","message","getProviderPairFormat","json","fetchJson","result","Object","keys","c","Error","parseFloat","e","log","error","token","symbol","split","replace","checkPricesProvider","checkPricesInterval","TIMER_CHECK_PRICE_INTERVAL_TIME","priceManager","PriceManager","CoinbasePriceProvider","weight","CoingeckoPriceProvider","async","checkPricesCallback","get","yakklConnectionStore","prevPrice","_a","yakklPricingStore","set","id","balanceCacheManager","__vitePreload","import","__VITE_PRELOAD__","url","updatePriceForAllEntries","debug","newPrice","stopCheckPrices","getTimerManager","stopTimer","startPricingChecks","startCheckPrices","ms","isRunning","addTimer","startTimer"],"ignoreList":[],"sources":["../../../../../../src/lib/managers/providers/price/kraken/KrakenPriceProvider.ts","../../../../../../src/lib/tokens/prices.ts"],"sourcesContent":["import { fetchJson } from '@ethersproject/web';\nimport type { PriceData, PriceProvider } from '$lib/common/interfaces';\nimport { log } from '$lib/managers/Logger';\n\nexport class KrakenPriceProvider implements PriceProvider {\n\tgetAPIKey(): string {\n\t\treturn ''; //import.meta.env.VITE_KRAKEN_API_KEY_PROD\n\t}\n\n\tgetName() {\n\t\treturn 'Kraken';\n\t}\n\n\tasync getMarketPrice(pair: string): Promise<PriceData> {\n\t\ttry {\n\t\t\tif (!pair) {\n\t\t\t\treturn {\n\t\t\t\t\tprovider: this.getName(),\n\t\t\t\t\tprice: 0,\n\t\t\t\t\tlastUpdated: new Date(),\n\t\t\t\t\tstatus: 404,\n\t\t\t\t\tmessage: `Invalid pair - ${pair}`\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tpair = await this.getProviderPairFormat(pair);\n\n\t\t\tconst json = await fetchJson(`https://api.kraken.com/0/public/Ticker?pair=${pair}`);\n\t\t\tconst result = json.result[Object.keys(json.result)[0]];\n\t\t\tif (!result || !result.c || !result.c[0]) {\n\t\t\t\tthrow new Error('Invalid JSON structure or missing data from Kraken');\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tprovider: this.getName(),\n\t\t\t\tprice: parseFloat(result.c[0]),\n\t\t\t\tlastUpdated: new Date(),\n\t\t\t\tstatus: 0,\n\t\t\t\tmessage: ''\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tlog.error('KrakenPriceProvider - getPrice - error', false, e);\n\t\t\treturn {\n\t\t\t\tprovider: this.getName(),\n\t\t\t\tprice: 0,\n\t\t\t\tlastUpdated: new Date(),\n\t\t\t\tstatus: 404,\n\t\t\t\tmessage: `Error - ${e}`\n\t\t\t};\n\t\t}\n\t}\n\n\tasync getProviderPairFormat(pair: string): Promise<string> {\n\t\t// eslint-disable-next-line prefer-const\n\t\tlet [token, symbol] = pair.split('-');\n\t\tif (!token || !symbol) {\n\t\t\tthrow new Error(`Invalid pair - ${pair}`);\n\t\t}\n\t\tswitch (token) {\n\t\t\tcase 'ETH':\n\t\t\t\tpair = 'ETHUSDC';\n\t\t\t\tbreak;\n\t\t\tcase 'WETH':\n\t\t\t\tpair = 'ETHWETH';\n\t\t\t\tbreak;\n\t\t\tcase 'WBTC':\n\t\t\t\tpair = 'WBTCUSD';\n\t\t\t\tbreak;\n\t\t\tcase 'PEPE':\n\t\t\t\tpair = 'PEPEUSD';\n\t\t\t\tbreak;\n\t\t}\n\t\treturn pair.replace('-', '');\n\t}\n}\n","// Base coingecko API\n// import { fetchJson } from \"@ethersproject/web\";\nimport { get } from 'svelte/store';\nimport { yakklPricingStore, yakklConnectionStore } from '$lib/common/stores';\nimport { PriceManager } from '$lib/managers/PriceManager';\nimport { KrakenPriceProvider } from '$lib/managers/providers/price/kraken/KrakenPriceProvider';\nimport { CoingeckoPriceProvider } from '$lib/managers/providers/price/coingecko/CoingeckoPriceProvider';\nimport { CoinbasePriceProvider } from '$lib/managers/providers/price/coinbase/CoinbasePriceProvider';\nimport { log } from '$lib/managers/Logger';\nimport { getTimerManager } from '$lib/managers/TimerManager';\nimport { TIMER_CHECK_PRICE_INTERVAL_TIME } from '$lib/common';\n\n// Use these globally if needed\nexport let checkPricesProvider: string = 'coinbase';\nexport let checkPricesInterval: number = TIMER_CHECK_PRICE_INTERVAL_TIME; // milliseconds\n\n// https://polygon.io/docs/crypto/get_v3_reference_exchanges - APIs to look at next (stocks and crypto)\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nlet providerCallback: string; // Note: If we decided to have multiple intervals running or alarms then we can add to an array\n\n// Add other providers here\n// NOTE: The original api.pro.coinbase.com is now deprecated.\nconst priceManager = new PriceManager([\n\t{ provider: new CoinbasePriceProvider(), weight: 5 },\n\t{ provider: new CoingeckoPriceProvider(), weight: 3 },\n\t{ provider: new KrakenPriceProvider(), weight: 2 }\n\t// Add other providers with their weights...\n]);\n\n// The new code is in the plugins folder - priceManager\nexport async function checkPricesCallback(symbol: string = 'ETH-USD') {\n\ttry {\n\t\tif (get(yakklConnectionStore) === true) {\n\t\t\tconst result = await priceManager.getMarketPrice(symbol);\n\t\t\tif (result) {\n\t\t\t\tconst prevPrice = get(yakklPricingStore)?.price ?? 0;\n\t\t\t\tyakklPricingStore.set({\n\t\t\t\t\tprovider: result.provider,\n\t\t\t\t\tid: 'checkPricesCallback',\n\t\t\t\t\tprice: result.price,\n\t\t\t\t\tprevPrice: prevPrice\n\t\t\t\t});\n\n\t\t\t\t// Update all cached balances with new price\n\t\t\t\tconst { balanceCacheManager } = await import('$lib/managers/BalanceCacheManager');\n\t\t\t\tif (result.price && result.price > 0) {\n\t\t\t\t\tbalanceCacheManager.updatePriceForAllEntries(result.price);\n\t\t\t\t\tlog.debug('[checkPricesCallback] Updated all cached entries with new price:', false, {\n\t\t\t\t\t\tnewPrice: result.price\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlog.error('checkPrices:', false, 'Internet connection may be down.'); // Comment this out later\n\t\t}\n\t} catch (e) {\n\t\tlog.error(`checkPricesCallback: ${e}`);\n\t}\n}\n\nfunction setProviderCallback(provider: string) {\n\tproviderCallback = provider;\n}\n\n// Use this function instead of -1 in checkPrices\nexport function stopCheckPrices() {\n\tgetTimerManager().stopTimer('prices_checkPrices');\n\tsetProviderCallback('');\n}\n\nexport async function startPricingChecks(symbol: string = 'ETH-USD') {\n\tstartCheckPrices(checkPricesProvider, checkPricesInterval, symbol);\n}\n\nexport function startCheckPrices(\n\tprovider = 'coinbase',\n\tms = TIMER_CHECK_PRICE_INTERVAL_TIME,\n\tsymbol: string = 'ETH-USD'\n): Promise<void> {\n\tstopCheckPrices();\n\tif (!providerCallback) setProviderCallback(provider);\n\n\ttry {\n\t\tif (ms > 0) {\n\t\t\tif (getTimerManager().isRunning('prices_checkPrices')) {\n\t\t\t\treturn; // Already running\n\t\t\t}\n\t\t\tgetTimerManager().addTimer(\n\t\t\t\t'prices_checkPrices',\n\t\t\t\t() => {\n\t\t\t\t\tcheckPricesCallback(symbol);\n\t\t\t\t},\n\t\t\t\tms\n\t\t\t);\n\t\t\tgetTimerManager().startTimer('prices_checkPrices');\n\t\t}\n\t} catch (e) {\n\t\tlog.error(`startCheckPrices: ${e}`);\n\t\tgetTimerManager().stopTimer('prices_checkPrices');\n\t\tsetProviderCallback('');\n\t}\n}\n\n// export async function getPrices(pairs: [string]) {\n//   // Add an array of the pricing providers\n//   // random index for the array\n//   // switch statement matching the strings in the array\n//   // default to coinbase\n//   // transpose results to abstract schema\n\n//   let pair: string;\n\n//   try {\n//     // Needs better gaits\n//     pair = pairs[0];\n//     if ( get( yakklConnectionStore ) === true ) {\n//       return await getPricesCoinbase(pair.toUpperCase());\n//     } else {\n//       console.log('Internet Connection:', 'May be offline for getPrices method.');\n//     }\n//   } catch (e) {\n//     console.log(`getPrices: ${e}`);\n//     return [];\n//   }\n// }\n\n// export async function getPricesEtherscan(\n//   assets: [string],\n//   currencies: [string]\n// ): Promise<[]> {\n//   const coinIds = assets.map((a) => a).join(\",\")\n\n//   const currencySymbols = currencies\n//     .map((c) => c.toLowerCase())\n//     .join(\",\");\n\n//   try {\n//     const json = await fetchJson(`https://api.coingecko.com/api/v3/simple/price?ids=${coinIds}&include_last_updated_at=true&vs_currencies=${currencySymbols}`);\n\n//     // TBD - May want to look at ajv json validator for future...\n\n//     return json;\n//   } catch (e) {\n//     console.log(`getPricesEtherscan: ${e}`);\n//     return [];\n//   }\n// }\n\n// TBD - TBD - TBD - Create a promise and take the errors and reject AND/OR make a call to another price provider until retrieved.\n//  The returned structure MUST the same so move from vendor specific to abstract before returning\n//  Need Binance and a few others and then we can pool and randomly pick and if an error randomly pick again but without the one that just failed\n\n// export async function getPricesCoinbase(pair: string) {\n//   try {\n//     const json = await fetchJson( `https://api.coinbase.com/api/v3/brokerage/market/products?limit=1&product_ids=${ pair }` );\n//     return json;\n//   } catch (e) {\n//     console.log(`getPricesCoinbase: ${e}`);\n//     return [];\n//   }\n// }\n\n// export async function getPricesKraken(pair: string) {\n//   try {\n//     const json = await fetchJson(`https://api.kraken.com/0/public/Ticker?pair=${pair}`);\n//     return json;\n//   } catch (e) {\n//     console.log(`getPricesKraken: ${e}`);\n//     return [];\n//   }\n// }\n\n// https://api.binance.us/api/v3/ticker/price?symbol=LTCBTC\n// https://docs.binance.us/#market-data-endpoints\n\n// export async function getPricesBinanceUS(pair: string) {\n//   try {\n//     const json = await fetchJson(`https://api.binance.us/api/v3/ticker/price?symbol=${pair.toUpperCase()}`);\n//     return json;\n//   } catch (e) {\n//     console.log(e);\n//     return [];\n//   }\n// }\n\n// export async function getPricesBitfinex(pair: string) {\n//   try {\n//     const json = await fetchJson(`https://api-pub.bitfinex.com/v2/tickers?symbols=t${pair.toUpperCase().replace('-', '')}`);\n//     return json;\n//   } catch (e) {\n//     console.log(e);\n//     return [];\n//   }\n// }\n\n// // Bitstamp has a number of nice features. This returned data show the percent of change in the last 24 hours\n// export async function getPricesBitstamp(pair: string) {\n//   try {\n//     const json = await fetchJson(`https://www.bitstamp.net/api/v2/ticker/${pair.toUpperCase().replace('-', '')}`);\n//     return json;\n//   } catch (e) {\n//     console.log(e);\n//     return [];\n//   }\n// }\n"],"file":"app/immutable/chunks/Ch26qbWO.js"}