import{c as check_target,l as legacy_api}from"../chunks/BXFaAXnq.js";import{p as push,h as tag,i as state,ae as proxy,o as onMount,f as first_child,s as sibling,c as child,t as template_effect,a as pop,e as set,g as get,F as FILENAME,b as strict_equals,$ as $document,r as reset,j as next}from"../chunks/BaS8d5lg.js";import{a as add_locations}from"../chunks/3AhEABF_.js";import{s as set_text}from"../chunks/Cmwrv3PW.js";import{i as if_block}from"../chunks/Q1yPWpQ-.js";import{e as each,i as index}from"../chunks/DraJ8LN-.js";import{a as append,f as from_html,c as comment}from"../chunks/Cm3jf07C.js";import{v as validate_store}from"../chunks/Dv9a3G0k.js";import{h as head}from"../chunks/twIkBoiu.js";import{s as set_attribute,r as remove_input_defaults,c as set_checked}from"../chunks/DTBsVM-c.js";import{d as delegate}from"../chunks/DiU70Is3.js";import{b as store_set,s as setup_stores,a as store_get}from"../chunks/CViNpZsE.js";import{l as log_if_contains_state}from"../chunks/DZ17DrFv.js";import{b as browserSvelte,a as browser_ext}from"../chunks/CgCfpVku.js";import{a9 as getObjectFromLocalStorage,b4 as STORAGE_YAKKL_CONNECTED_DOMAINS,ac as setObjectInLocalStorage,b5 as STORAGE_YAKKL_ACCOUNTS,b as yakklDappConnectRequestStore,an as DEFAULT_TITLE,aE as DEFAULT_PERSONA,ab as dateString,aR as setYakklConnectedDomainsStorage,az as setYakklAccountsStorage,g as getSettings,C as getYakklCurrentlySelected,Y as YAKKL_DAPP,ao as getYakklConnectedDomains,o as getYakklAccounts}from"../chunks/Cb2naUpm.js";import{p as page}from"../chunks/eULPtkAc.js";import{l as log}from"../chunks/WDN37msH.js";import{v as verifySessionToken,b as sessionToken}from"../chunks/CMG1aIle.js";import{C as Confirmation}from"../chunks/BWiVuumU.js";import"../chunks/DwnXGTX-.js";import{F as Failed,c as createPortManagerWithStream}from"../chunks/tXuNREEA.js";import{s as safeLogout}from"../chunks/COpD6KvM.js";async function verifyDomainConnected(domain,method){try{if(!domain){log.warn("verifyDomainConnected: Domain is null",false);return false}if(method==="eth_accounts");const connectedDomains=await getObjectFromLocalStorage(STORAGE_YAKKL_CONNECTED_DOMAINS);if(!connectedDomains){log.debug("verifyDomainConnected: No connected domains found",false);return false}const exists=connectedDomains.some(d=>d.domain===domain);log.debug("verifyDomainConnected: Domain check result",false,{domain:domain,exists:exists});return exists}catch(error){log.error("Error in verifyDomainConnected:",false,error);return false}}async function revokeDomainConnection(domain){try{const connectedDomains=await getObjectFromLocalStorage(STORAGE_YAKKL_CONNECTED_DOMAINS);if(connectedDomains){const existingDomainIndex=connectedDomains.findIndex(d=>d.domain===domain);if(existingDomainIndex!==-1){connectedDomains.splice(existingDomainIndex,1);await setObjectInLocalStorage(STORAGE_YAKKL_CONNECTED_DOMAINS,connectedDomains)}}const accounts=await getObjectFromLocalStorage(STORAGE_YAKKL_ACCOUNTS);if(accounts){let accountsModified=false;accounts.forEach(account=>{if(Array.isArray(account.connectedDomains)){const domainIndex=account.connectedDomains.indexOf(domain);if(domainIndex!==-1){account.connectedDomains.splice(domainIndex,1);accountsModified=true}}});if(accountsModified){await setObjectInLocalStorage(STORAGE_YAKKL_ACCOUNTS,accounts);log.info("Removed domain from accounts:",false,{domain:domain,accounts:accounts})}}}catch(error){log.error("Error in revokeDomainConnection:",false,error)}}_page[FILENAME]="src/routes/(dapp)/dapp/popups/accounts/+page.svelte";var on_click=(_,handleReject)=>handleReject();var on_change=(__1,toggleAddress,address)=>toggleAddress(get(address).address);var root_3=add_locations(from_html(`<div class="flex items-start gap-3 p-3 bg-base-200 rounded-lg mb-2"><input type="checkbox" class="checkbox checkbox-primary w-5 h-5 flex-shrink-0 text-2xl"/> <div class="flex flex-col"><span class="font-mono text-sm truncate"> </span> <span class="badge badge-primary text-xs mt-1">Default account</span></div></div>`),_page[FILENAME],[[479,5,[[480,6],[486,6,[[487,7],[490,7]]]]]]);var on_change_1=(__2,toggleAddress,address)=>toggleAddress(get(address).address);var root_4=add_locations(from_html(`<div class="flex items-center gap-3 p-3 bg-base-200 rounded-lg mb-2"><input type="checkbox" class="checkbox checkbox-primary w-5 h-5 flex-shrink-0 text-2xl"/> <span class="font-mono text-sm truncate"> </span></div>`),_page[FILENAME],[[495,5,[[496,6],[502,6]]]]);var on_click_1=(__3,handleReject)=>handleReject();var on_click_2=(__4,showConfirm)=>{set(showConfirm,true)};var root=add_locations(from_html(`<!> <!>  <div class="flex flex-col h-full max-h-screen overflow-hidden"><div class="p-4 border-b border-base-300 flex-shrink-0"><div class="flex items-center justify-between"><div class="flex items-center gap-2 min-w-0"><img id="dappImageId" crossorigin="anonymous" alt="Dapp logo" class="w-8 h-8 rounded-full flex-shrink-0"/> <span class="font-semibold truncate"> </span></div> <button class="btn btn-ghost btn-sm flex-shrink-0 svelte-526xh0" aria-label="Close"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg></button></div></div> <div class="flex-1 p-6 overflow-hidden flex flex-col max-w-[428px]"><div class="text-center mb-4 flex-shrink-0"><h2 class="text-xl font-bold mb-2">Select Accounts</h2> <p class="text-base-content/80"> </p></div> <div class="overflow-y-auto flex-1 min-h-0 mb-4 svelte-526xh0"></div></div> <div class="p-4 border-t border-base-300 flex-shrink-0"><div class="flex gap-4 justify-end"><button class="btn btn-outline svelte-526xh0">Reject</button> <button class="btn btn-primary svelte-526xh0">Connect</button></div></div></div>`,1),_page[FILENAME],[[433,0,[[435,1,[[436,2,[[437,3,[[438,4],[445,4]]],[447,3,[[452,4,[[458,5]]]]]]]]],[469,1,[[470,2,[[471,3],[472,3]]],[475,2]]],[511,1,[[512,2,[[513,3],[514,3]]]]]]]]);function _page($$anchor,$$props){check_target(new.target);push($$props,true,_page);const[$$stores,$$cleanup]=setup_stores();const $sessionToken=()=>(validate_store(sessionToken,"sessionToken"),store_get(sessionToken,"$sessionToken",$$stores));let currentlySelected;let yakklAccountsStore=[];let yakklConnectedDomainsStore=[];let accountsPicked=tag(state(0),"accountsPicked");let showConfirm=tag(state(false),"showConfirm");let showFailure=tag(state(false),"showFailure");let errorValue=tag(state("No domain/site name was found. Access to YAKKL® is rejected."),"errorValue");let domain=tag(state(""),"domain");let domainLogo=tag(state(""),"domainLogo");let domainTitle=tag(state(""),"domainTitle");let requestId;let pass=false;let filteredAddressesArray=tag(state(proxy([])),"filteredAddressesArray");let currentlySelectedAddress=tag(state(""),"currentlySelectedAddress");let request;let title=tag(state(proxy(DEFAULT_TITLE)),"title");let portManager=null;let stream=null;let dappInterface=null;if(browserSvelte){try{requestId=page.url.searchParams.get("requestId");store_set(yakklDappConnectRequestStore,requestId);log.info("Dapp - accounts page loading:",false,{requestId:requestId});if(requestId){pass=true}}catch(e){log.error(e);throw e}}async function getAccounts(){var _a;try{const connectedDomains=await getYakklConnectedDomains();const domainExists=connectedDomains.find(d=>strict_equals(d.domain,get(domain)));const accounts2=await getYakklAccounts();if(!accounts2||strict_equals(accounts2.length,0)){await handleReject("No accounts available. Access to YAKKL® is rejected.")}yakklAccountsStore=accounts2;set(filteredAddressesArray,accounts2.map(account=>{var _a2;const hasConnectedToDomain=Array.isArray(account.connectedDomains)&&account.connectedDomains.includes(get(domain));return{id:account.id||"",persona:account.persona||DEFAULT_PERSONA,address:account.address,name:account.name,alias:account.alias||account.address,blockchain:account.blockchain||"ethereum",chainId:((_a2=account.chainIds)==null?void 0:_a2[0])||1,selected:hasConnectedToDomain,checked:hasConnectedToDomain}}),true);if((_a=currentlySelected==null?void 0:currentlySelected.shortcuts)==null?void 0:_a.address){const matchingAccount=accounts2.find(account=>strict_equals(account.address,currentlySelected.shortcuts.address));if(matchingAccount){set(currentlySelectedAddress,matchingAccount.address,true)}}set(accountsPicked,get(filteredAddressesArray).filter(addr=>addr.selected).length,true)}catch(error){log.error("Error in getAccounts:",false,error);set(showFailure,true);set(errorValue,"Failed to load accounts. Please try again.")}}async function handleReject(message="User rejected the request."){try{set(showConfirm,false);set(showFailure,false);if(dappInterface){dappInterface.sendError({code:4001,message:message})}else if(stream){stream.write({type:"YAKKL_RESPONSE:EIP6963",jsonrpc:"2.0",id:requestId,error:{code:4001,message:message}})}}catch(e){log.error(e)}finally{if(browserSvelte){await close()}}}function toggleAddress(address){const index2=get(filteredAddressesArray).findIndex(addr=>strict_equals(addr.address,address));if(strict_equals(index2,-1,false)){const currentAddress=get(filteredAddressesArray)[index2];get(filteredAddressesArray)[index2]={...currentAddress,selected:!(currentAddress.selected??false)};set(filteredAddressesArray,[...get(filteredAddressesArray)],true)}set(accountsPicked,get(filteredAddressesArray).filter(addr=>addr.selected).length,true)}async function handleProcess(confirmed=true){var _a,_b;try{if(!get(domain)){await handleReject("No domain name is present. Access to YAKKL® is rejected.")}if(!verifySessionToken($sessionToken())){await handleReject("Session token is invalid. Login again.")}const accounts2=get(filteredAddressesArray).filter(addr=>addr.selected).map(addr=>({id:addr.id||"",persona:addr.persona||DEFAULT_PERSONA,address:addr.address,name:addr.name,alias:addr.alias,blockchain:addr.blockchain,chainId:addr.chainId}));let addresses=get(filteredAddressesArray).filter(addr=>addr.selected).map(addr=>addr.address);set(accountsPicked,accounts2.length,true);if(strict_equals(accounts2.length,0)){const isConnected=await verifyDomainConnected(get(domain));if(!isConnected){await handleReject("No accounts were selected. Access to YAKKL® is rejected.")}else{revokeDomainConnection(get(domain));await handleReject("The domain is not connected to any accounts. Access to YAKKL® is rejected.")}}if(!Array.isArray(addresses)){addresses=Object.values(addresses)}const existingDomainIndex=yakklConnectedDomainsStore.findIndex(d=>strict_equals(d.domain,get(domain)));if(strict_equals(existingDomainIndex,-1)){const newDomain={id:(currentlySelected==null?void 0:currentlySelected.id)||"",persona:(currentlySelected==null?void 0:currentlySelected.persona)||DEFAULT_PERSONA,domain:get(domain),name:get(domainTitle)||get(domain),icon:get(domainLogo),addresses:accounts2,permissions:{},chainId:((_a=currentlySelected==null?void 0:currentlySelected.shortcuts)==null?void 0:_a.chainId)||1,url:get(domain),status:"approved",revoked:{},version:(currentlySelected==null?void 0:currentlySelected.version)||"",createDate:dateString(),updateDate:dateString()};yakklConnectedDomainsStore=[...yakklConnectedDomainsStore,newDomain]}else{const existingDomain=yakklConnectedDomainsStore[existingDomainIndex];existingDomain.id=(currentlySelected==null?void 0:currentlySelected.id)||"";existingDomain.persona=(currentlySelected==null?void 0:currentlySelected.persona)||DEFAULT_PERSONA;existingDomain.name=get(domainTitle)||get(domain);existingDomain.icon=get(domainLogo);existingDomain.addresses=accounts2;existingDomain.updateDate=dateString();existingDomain.version=(currentlySelected==null?void 0:currentlySelected.version)||existingDomain.version;existingDomain.chainId=((_b=currentlySelected==null?void 0:currentlySelected.shortcuts)==null?void 0:_b.chainId)||1;existingDomain.url=get(domain);existingDomain.status="approved";yakklConnectedDomainsStore=[...yakklConnectedDomainsStore.slice(0,existingDomainIndex),existingDomain,...yakklConnectedDomainsStore.slice(existingDomainIndex+1)]}await setYakklConnectedDomainsStorage(yakklConnectedDomainsStore);for(const account of yakklAccountsStore){const accountIndex=yakklAccountsStore.findIndex(a=>strict_equals(a.address,account.address));if(strict_equals(accountIndex,-1,false)){const existingAccount=yakklAccountsStore[accountIndex];if(!Array.isArray(existingAccount.connectedDomains)){existingAccount.connectedDomains=[]}const isSelected=accounts2.some(acc=>strict_equals(acc.address,account.address));if(isSelected){if(!existingAccount.connectedDomains.includes(get(domain))){existingAccount.connectedDomains.push(get(domain))}}else{const domainIndex=existingAccount.connectedDomains.indexOf(get(domain));if(strict_equals(domainIndex,-1,false)){existingAccount.connectedDomains.splice(domainIndex,1)}}yakklAccountsStore[accountIndex]=existingAccount}}await setYakklAccountsStorage(yakklAccountsStore);if(dappInterface){log.debug("Dapp - accounts process: Sending response to dapp:",false,{requestId:requestId,addresses:addresses});dappInterface.sendResponse({id:requestId,type:"YAKKL_RESPONSE:EIP6963",jsonrpc:"2.0",result:addresses,method:dappInterface.method})}else if(stream){log.debug("Dapp - accounts process: Sending response via stream:",false,{requestId:requestId,addresses:addresses});const response={type:"YAKKL_RESPONSE:EIP6963",jsonrpc:"2.0",id:requestId,result:addresses};stream.write(response)}else{await handleReject("Request failed to send to dapp due to missing port stream. Access to YAKKL® is rejected.")}await close()}catch(error){log.error("Dapp - accounts process error:",true,error);set(errorValue,error,true)}}async function onMessageListener(event){var _a,_b;try{if(!get(domainLogo))set(domainLogo,"/images/failIcon48x48.png");if(strict_equals(event.method,"get_params")){request=event.result;if(!request||!request.data){await handleReject("No requested data was found. Access to YAKKL® is rejected.")}const requestData=request.data;if(!requestData||!requestData.metaData){await handleReject("Invalid request data. Access to YAKKL® is rejected.")}dappInterface={sendResponse:response=>{if(stream){stream.write(response)}},sendError:error=>{if(stream){stream.write({type:"YAKKL_RESPONSE:EIP6963",jsonrpc:"2.0",id:requestId,error:error})}},method:requestData.method||"eth_requestAccounts",params:requestData.params||[],origin:((_b=(_a=requestData.metaData)==null?void 0:_a.metaData)==null?void 0:_b.origin)||get(domain)};set(domainTitle,requestData.metaData.metaData.title,true);set(domain,requestData.metaData.metaData.domain,true);set(domainLogo,requestData.metaData.metaData.icon,true);set(title,get(domainTitle)||get(domain)||DEFAULT_TITLE,true);if(!requestId)requestId=(requestData==null?void 0:requestData.id)??null;if(!requestId){set(showFailure,true);set(errorValue,"No request ID was found. Access to YAKKL® is rejected.")}else{await getAccounts()}}}catch(e){log.error(e);handleReject("An error occurred while processing the request. Access to YAKKL® is rejected.")}}onMount(async()=>{try{if(browserSvelte){log.info("Dapp - accounts page mounted:",false);const settings=await getSettings();if(!settings.init||!settings.legal.termsAgreed){set(errorValue,"You must register and agree to the terms of service before using YAKKL®. Click on 'Open Wallet' to register.");set(showFailure,true);return}log.info("Dapp - accounts page getting settings:",false,settings);currentlySelected=await getYakklCurrentlySelected();log.info("Dapp - accounts page getting currently selected:",false,currentlySelected);const sessionInfo=await browser_ext.runtime.sendMessage({type:"REQUEST_SESSION_PORT",requestId:requestId});console.log(...log_if_contains_state("log","sessionInfo - debugger",sessionInfo));console.log(...log_if_contains_state("log","Received session info:",sessionInfo,sessionInfo==null?void 0:sessionInfo.portName));if(!sessionInfo||!sessionInfo.success){log.warn("Failed to verify session port. No response received. Using YAKKL_DAPP.")}portManager=createPortManagerWithStream((sessionInfo==null?void 0:sessionInfo.portName)??YAKKL_DAPP);portManager.setRequestId(requestId);const success=await portManager.createPort();if(!success){set(errorValue,"Failed to connect to session port.");set(showFailure,true);return}stream=portManager.getStream();if(!stream){set(errorValue,"Stream is not available.");set(showFailure,true);return}stream.on("data",onMessageListener);stream.write({method:"get_params",id:requestId})}}catch(e){log.error(e)}});async function close(){if(browserSvelte){try{if(portManager){await portManager.waitForIdle(1500);portManager.disconnect()}}catch(e){log.warn("Port did not go idle in time",false,e)}safeLogout()}}var fragment=root();head($$anchor2=>{template_effect(()=>$document.title=get(title))});var node=first_child(fragment);Failed(node,{title:"Failed!",get content(){return get(errorValue)},onReject:handleReject,get show(){return get(showFailure)},set show($$value){set(showFailure,$$value,true)}});var node_1=sibling(node,2);Confirmation(node_1,{get title(){return`Connect to ${get(domain)??""}`},get message(){return`This will connect ${get(domain)??""} to ${get(accountsPicked)??""} of your addresses! Do you wish to continue?`},onConfirm:handleProcess,get show(){return get(showConfirm)},set show($$value){set(showConfirm,$$value,true)}});var div=sibling(node_1,2);var div_1=child(div);var div_2=child(div_1);var div_3=child(div_2);var img=child(div_3);var span=sibling(img,2);var text=child(span,true);reset(span);reset(div_3);var button=sibling(div_3,2);button.__click=[on_click,handleReject];reset(div_2);reset(div_1);var div_4=sibling(div_1,2);var div_5=child(div_4);var p=sibling(child(div_5),2);var text_1=child(p);reset(p);reset(div_5);var div_6=sibling(div_5,2);each(div_6,21,()=>get(filteredAddressesArray),index,($$anchor2,address)=>{var fragment_1=comment();var node_2=first_child(fragment_1);{var consequent=$$anchor3=>{var div_7=root_3();var input=child(div_7);remove_input_defaults(input);input.__change=[on_change,toggleAddress,address];var div_8=sibling(input,2);var span_1=child(div_8);var text_2=child(span_1,true);reset(span_1);next(2);reset(div_8);reset(div_7);template_effect(()=>{set_checked(input,get(address).checked);set_attribute(span_1,"title",get(address).address);set_text(text_2,get(address).address)});append($$anchor3,div_7)};var alternate=$$anchor3=>{var div_9=root_4();var input_1=child(div_9);remove_input_defaults(input_1);input_1.__change=[on_change_1,toggleAddress,address];var span_2=sibling(input_1,2);var text_3=child(span_2,true);reset(span_2);reset(div_9);template_effect(()=>{set_checked(input_1,get(address).checked);set_attribute(span_2,"title",get(address).address);set_text(text_3,get(address).address)});append($$anchor3,div_9)};if_block(node_2,$$render=>{if(strict_equals(get(address).address,get(currentlySelectedAddress)))$$render(consequent);else $$render(alternate,false)})}append($$anchor2,fragment_1)});reset(div_6);reset(div_4);var div_10=sibling(div_4,2);var div_11=child(div_10);var button_1=child(div_11);button_1.__click=[on_click_1,handleReject];var button_2=sibling(button_1,2);button_2.__click=[on_click_2,showConfirm];reset(div_11);reset(div_10);reset(div);template_effect(()=>{set_attribute(img,"src",get(domainLogo));set_text(text,get(title));set_text(text_1,`Choose which accounts to connect to ${get(domain)??""}`)});append($$anchor,fragment);var $$pop=pop({...legacy_api()});$$cleanup();return $$pop}delegate(["click","change"]);export{_page as component};
//# sourceMappingURL=19.DY_l2eA4.js.map
