{"version":3,"file":"17.B0KiqF62.js","sources":["../../../../../../src/lib/stores/eip6963.ts","../../../../../../src/lib/components/EIP6963Provider.svelte"],"sourcesContent":["import { get, writable } from 'svelte/store';\nimport type { EIP6963ProviderDetail } from '$lib/managers/providers/network/ethereum_provider/eip-types';\n\n// Store for available EIP-6963 providers\nexport const eip6963Providers = writable<EIP6963ProviderDetail[]>([]);\n\n// Store for the currently selected provider\nexport const selectedEIP6963Provider = writable<EIP6963ProviderDetail | null>(null);\n\n// Function to request providers\nexport function requestEIP6963Providers() {\n\twindow.dispatchEvent(new Event('eip6963:requestProvider'));\n}\n\n// Function to select a provider\nexport function selectEIP6963Provider(provider: EIP6963ProviderDetail) {\n\tselectedEIP6963Provider.set(provider);\n}\n\n// Function to get accounts from the selected provider\nexport async function getEIP6963Accounts() {\n\tconst provider = get(selectedEIP6963Provider);\n\tif (!provider) {\n\t\tthrow new Error('No provider selected');\n\t}\n\treturn await provider.provider.request({ method: 'eth_accounts' });\n}\n\n// Function to get chain ID from the selected provider\nexport async function getEIP6963ChainId() {\n\tconst provider = get(selectedEIP6963Provider);\n\tif (!provider) {\n\t\tthrow new Error('No provider selected');\n\t}\n\treturn await provider.provider.request({ method: 'eth_chainId' });\n}\n\n// Function to request accounts from the selected provider\nexport async function requestEIP6963Accounts() {\n\tconst provider = get(selectedEIP6963Provider);\n\tif (!provider) {\n\t\tthrow new Error('No provider selected');\n\t}\n\treturn await provider.provider.request({ method: 'eth_requestAccounts' });\n}\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport {\n\t\teip6963Providers,\n\t\tselectedEIP6963Provider,\n\t\trequestEIP6963Providers,\n\t\tselectEIP6963Provider\n\t} from '$lib/stores/eip6963';\n\timport type { EIP6963ProviderDetail } from '$lib/managers/providers/network/ethereum_provider/eip-types';\n\timport { log } from '$lib/managers/Logger';\n\n\tlet accounts: string[] = [];\n\tlet chainId: string | null = null;\n\tlet networkVersion: string | null = null;\n\tlet error: string | null = null;\n\n\t// Helper function to format chainId for display\n\tfunction formatChainId(chainIdHex: string): string {\n\t\ttry {\n\t\t\t// If it's already a decimal string, return as is\n\t\t\tif (!chainIdHex.startsWith('0x')) return chainIdHex;\n\n\t\t\t// Convert hex to decimal\n\t\t\tconst decimal = parseInt(chainIdHex, 16);\n\t\t\treturn `${chainIdHex} (${decimal})`;\n\t\t} catch (e) {\n\t\t\tlog.error('Error formatting chainId', true, e);\n\t\t\treturn chainIdHex;\n\t\t}\n\t}\n\n\tasync function updateProviderState(provider: EIP6963ProviderDetail) {\n\t\ttry {\n\t\t\t// Get initial state\n\t\t\tconst [initialAccounts, initialChainId, initialNetVersion] = await Promise.all([\n\t\t\t\tprovider.provider.request({ method: 'eth_accounts' }),\n\t\t\t\tprovider.provider.request({ method: 'eth_chainId' }),\n\t\t\t\tprovider.provider.request({ method: 'net_version' })\n\t\t\t]);\n\n\t\t\tlog.debug('Initial provider state', true, {\n\t\t\t\taccounts: initialAccounts,\n\t\t\t\tchainId: initialChainId,\n\t\t\t\tnetworkVersion: initialNetVersion\n\t\t\t});\n\n\t\t\taccounts = initialAccounts as string[];\n\t\t\tchainId = initialChainId as string;\n\t\t\tnetworkVersion = initialNetVersion as string;\n\t\t} catch (e) {\n\t\t\tlog.error('Error getting initial provider state', true, e);\n\t\t}\n\t}\n\n\tasync function handleSelectProvider(provider: EIP6963ProviderDetail) {\n\t\ttry {\n\t\t\tlog.debug('Selecting provider', true, { provider: provider.info.name });\n\t\t\tselectEIP6963Provider(provider);\n\n\t\t\t// Update initial state\n\t\t\tawait updateProviderState(provider);\n\n\t\t\t// Request accounts (this will trigger permission request)\n\t\t\ttry {\n\t\t\t\tconst requestedAccounts = (await provider.provider.request({\n\t\t\t\t\tmethod: 'eth_requestAccounts'\n\t\t\t\t})) as string[];\n\t\t\t\tlog.debug('Requested accounts received', true, { accounts: requestedAccounts });\n\t\t\t\taccounts = requestedAccounts;\n\t\t\t} catch (e) {\n\t\t\t\tlog.error('Error requesting accounts', true, e);\n\t\t\t\t// Don't throw here - we still want to show the read-only state\n\t\t\t}\n\n\t\t\t// Listen for chain changes\n\t\t\tprovider.provider.on('chainChanged', (newChainId: string) => {\n\t\t\t\tlog.debug('Chain changed', true, { newChainId });\n\t\t\t\tchainId = newChainId;\n\t\t\t});\n\n\t\t\t// Listen for account changes\n\t\t\tprovider.provider.on('accountsChanged', (newAccounts: string[]) => {\n\t\t\t\tlog.debug('Accounts changed', true, { newAccounts });\n\t\t\t\taccounts = newAccounts;\n\t\t\t});\n\t\t} catch (e) {\n\t\t\terror = e instanceof Error ? e.message : 'Failed to connect to provider';\n\t\t\tlog.error('Error selecting provider', true, e);\n\t\t}\n\t}\n\n\tonMount(() => {\n\t\t// Listen for provider announcements\n\t\tconst handleAnnounce = (event: CustomEvent<EIP6963ProviderDetail>) => {\n\t\t\tconst provider = event.detail;\n\t\t\tlog.debug('Provider announced', true, { provider: provider.info.name });\n\t\t\teip6963Providers.update((providers) => {\n\t\t\t\t// Update existing provider or add new one\n\t\t\t\tconst existingIndex = providers.findIndex((p) => p.info.uuid === provider.info.uuid);\n\t\t\t\tif (existingIndex >= 0) {\n\t\t\t\t\tproviders[existingIndex] = provider;\n\t\t\t\t} else {\n\t\t\t\t\tproviders = [...providers, provider];\n\t\t\t\t}\n\t\t\t\treturn providers;\n\t\t\t});\n\n\t\t\t// If this is the selected provider, update its state\n\t\t\tif ($selectedEIP6963Provider?.info.uuid === provider.info.uuid) {\n\t\t\t\tupdateProviderState(provider);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener('eip6963:announceProvider', handleAnnounce as EventListener);\n\t\trequestEIP6963Providers();\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('eip6963:announceProvider', handleAnnounce as EventListener);\n\t\t};\n\t});\n</script>\n\n<div class=\"p-4 max-w-3xl mx-auto\">\n\t<h2 class=\"text-2xl font-semibold mb-4\">Available Wallets</h2>\n\n\t{#if $eip6963Providers.length === 0}\n\t\t<p class=\"text-gray-600\">No wallets available. Please install a compatible wallet.</p>\n\t{:else}\n\t\t<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 my-4\">\n\t\t\t{#each $eip6963Providers as provider}\n\t\t\t\t<div class=\"flex items-center p-4 border border-gray-200 rounded-lg bg-white shadow-sm\">\n\t\t\t\t\t<img src={provider.info.icon} alt={provider.info.name} class=\"w-8 h-8\" />\n\t\t\t\t\t<div class=\"ml-4 flex-grow\">\n\t\t\t\t\t\t<h3 class=\"text-base font-medium\">{provider.info.name}</h3>\n\t\t\t\t\t\t<p class=\"text-sm text-gray-500 mt-1\">ID: {provider.info.uuid}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ton:click={() => handleSelectProvider(provider)}\n\t\t\t\t\t\tclass=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\"\n\t\t\t\t\t>\n\t\t\t\t\t\tSelect\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t{/if}\n\n\t{#if $selectedEIP6963Provider}\n\t\t<div class=\"mt-8 p-4 border border-gray-200 rounded-lg bg-gray-50\">\n\t\t\t<h3 class=\"text-lg font-medium mb-2\">Connected Provider</h3>\n\t\t\t<p class=\"text-gray-700\">Name: {$selectedEIP6963Provider.info.name}</p>\n\t\t\t{#if accounts.length > 0}\n\t\t\t\t<p class=\"text-gray-700 mt-1\">Accounts: {accounts.join(', ')}</p>\n\t\t\t{/if}\n\t\t\t{#if chainId}\n\t\t\t\t<p class=\"text-gray-700 mt-1\">Chain ID: {formatChainId(chainId)}</p>\n\t\t\t{/if}\n\t\t\t{#if networkVersion}\n\t\t\t\t<p class=\"text-gray-700 mt-1\">Network Version: {networkVersion}</p>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n\n\t{#if error}\n\t\t<div class=\"mt-4 p-4 bg-red-50 text-red-700 rounded\">\n\t\t\t{error}\n\t\t</div>\n\t{/if}\n</div>\n"],"names":["eip6963Providers","writable","selectedEIP6963Provider","requestEIP6963Providers","window","dispatchEvent","Event","selectEIP6963Provider","provider","set","accounts","$.mutable_source","chainId","networkVersion","error","formatChainId","chainIdHex","startsWith","decimal","parseInt","e","log","async","updateProviderState","initialAccounts","initialChainId","initialNetVersion","Promise","all","request","method","debug","handleSelectProvider","info","name","requestedAccounts","on","newChainId","newAccounts","Error","message","onMount","handleAnnounce","event","detail","update","providers","existingIndex","findIndex","p","$.strict_equals","uuid","_a","addEventListener","removeEventListener","$.each","div_1","$eip6963Providers","icon","$.event","button","length","consequent","$$render","alternate","join","$.derived_safe_equal","consequent_1","$.template_effect","$0","$.set_text","text_4","consequent_2","consequent_3","$selectedEIP6963Provider","consequent_4","consequent_5"],"mappings":"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"}