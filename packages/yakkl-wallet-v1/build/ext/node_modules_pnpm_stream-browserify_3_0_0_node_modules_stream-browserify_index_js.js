/*! For license information please see node_modules_pnpm_stream-browserify_3_0_0_node_modules_stream-browserify_index_js.js.LICENSE.txt */
(self['webpackChunkyakkl_wallet'] = self['webpackChunkyakkl_wallet'] || []).push([
	['node_modules_pnpm_stream-browserify_3_0_0_node_modules_stream-browserify_index_js'],
	{
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js':
			(e) => {
				'use strict';
				function _inheritsLoose(e, t) {
					e.prototype = Object.create(t.prototype);
					e.prototype.constructor = e;
					e.__proto__ = t;
				}
				var t = {};
				function createErrorType(e, r, n) {
					if (!n) {
						n = Error;
					}
					function getMessage(e, t, n) {
						if (typeof r === 'string') {
							return r;
						} else {
							return r(e, t, n);
						}
					}
					var a = (function (e) {
						_inheritsLoose(NodeError, e);
						function NodeError(t, r, n) {
							return e.call(this, getMessage(t, r, n)) || this;
						}
						return NodeError;
					})(n);
					a.prototype.name = n.name;
					a.prototype.code = e;
					t[e] = a;
				}
				function oneOf(e, t) {
					if (Array.isArray(e)) {
						var r = e.length;
						e = e.map(function (e) {
							return String(e);
						});
						if (r > 2) {
							return (
								'one of '.concat(t, ' ').concat(e.slice(0, r - 1).join(', '), ', or ') + e[r - 1]
							);
						} else if (r === 2) {
							return 'one of '.concat(t, ' ').concat(e[0], ' or ').concat(e[1]);
						} else {
							return 'of '.concat(t, ' ').concat(e[0]);
						}
					} else {
						return 'of '.concat(t, ' ').concat(String(e));
					}
				}
				function startsWith(e, t, r) {
					return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
				}
				function endsWith(e, t, r) {
					if (r === undefined || r > e.length) {
						r = e.length;
					}
					return e.substring(r - t.length, r) === t;
				}
				function includes(e, t, r) {
					if (typeof r !== 'number') {
						r = 0;
					}
					if (r + t.length > e.length) {
						return false;
					} else {
						return e.indexOf(t, r) !== -1;
					}
				}
				createErrorType(
					'ERR_INVALID_OPT_VALUE',
					function (e, t) {
						return 'The value "' + t + '" is invalid for option "' + e + '"';
					},
					TypeError
				);
				createErrorType(
					'ERR_INVALID_ARG_TYPE',
					function (e, t, r) {
						var n;
						if (typeof t === 'string' && startsWith(t, 'not ')) {
							n = 'must not be';
							t = t.replace(/^not /, '');
						} else {
							n = 'must be';
						}
						var a;
						if (endsWith(e, ' argument')) {
							a = 'The '.concat(e, ' ').concat(n, ' ').concat(oneOf(t, 'type'));
						} else {
							var i = includes(e, '.') ? 'property' : 'argument';
							a = 'The "'.concat(e, '" ').concat(i, ' ').concat(n, ' ').concat(oneOf(t, 'type'));
						}
						a += '. Received type '.concat(typeof r);
						return a;
					},
					TypeError
				);
				createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
				createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (e) {
					return 'The ' + e + ' method is not implemented';
				});
				createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
				createErrorType('ERR_STREAM_DESTROYED', function (e) {
					return 'Cannot call ' + e + ' after a stream was destroyed';
				});
				createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
				createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
				createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
				createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
				createErrorType(
					'ERR_UNKNOWN_ENCODING',
					function (e) {
						return 'Unknown encoding: ' + e;
					},
					TypeError
				);
				createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
				e.exports.codes = t;
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js':
			(e, t, r) => {
				'use strict';
				var n = r('../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js');
				var a =
					Object.keys ||
					function (e) {
						var t = [];
						for (var r in e) t.push(r);
						return t;
					};
				e.exports = Duplex;
				var i = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js'
				);
				var o = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js'
				);
				r('../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js')(
					Duplex,
					i
				);
				{
					var s = a(o.prototype);
					for (var l = 0; l < s.length; l++) {
						var d = s[l];
						if (!Duplex.prototype[d]) Duplex.prototype[d] = o.prototype[d];
					}
				}
				function Duplex(e) {
					if (!(this instanceof Duplex)) return new Duplex(e);
					i.call(this, e);
					o.call(this, e);
					this.allowHalfOpen = true;
					if (e) {
						if (e.readable === false) this.readable = false;
						if (e.writable === false) this.writable = false;
						if (e.allowHalfOpen === false) {
							this.allowHalfOpen = false;
							this.once('end', onend);
						}
					}
				}
				Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
					enumerable: false,
					get: function get() {
						return this._writableState.highWaterMark;
					}
				});
				Object.defineProperty(Duplex.prototype, 'writableBuffer', {
					enumerable: false,
					get: function get() {
						return this._writableState && this._writableState.getBuffer();
					}
				});
				Object.defineProperty(Duplex.prototype, 'writableLength', {
					enumerable: false,
					get: function get() {
						return this._writableState.length;
					}
				});
				function onend() {
					if (this._writableState.ended) return;
					n.nextTick(onEndNT, this);
				}
				function onEndNT(e) {
					e.end();
				}
				Object.defineProperty(Duplex.prototype, 'destroyed', {
					enumerable: false,
					get: function get() {
						if (this._readableState === undefined || this._writableState === undefined) {
							return false;
						}
						return this._readableState.destroyed && this._writableState.destroyed;
					},
					set: function set(e) {
						if (this._readableState === undefined || this._writableState === undefined) {
							return;
						}
						this._readableState.destroyed = e;
						this._writableState.destroyed = e;
					}
				});
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_passthrough.js':
			(e, t, r) => {
				'use strict';
				e.exports = PassThrough;
				var n = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js'
				);
				r('../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js')(
					PassThrough,
					n
				);
				function PassThrough(e) {
					if (!(this instanceof PassThrough)) return new PassThrough(e);
					n.call(this, e);
				}
				PassThrough.prototype._transform = function (e, t, r) {
					r(null, e);
				};
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js':
			(e, t, r) => {
				'use strict';
				var n = r('../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js');
				e.exports = Readable;
				var a;
				Readable.ReadableState = ReadableState;
				var i = r(
					'../../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js'
				).EventEmitter;
				var o = function EElistenerCount(e, t) {
					return e.listeners(t).length;
				};
				var s = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream-browser.js'
				);
				var l = r('../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js').Buffer;
				var d =
					(typeof r.g !== 'undefined'
						? r.g
						: typeof window !== 'undefined'
							? window
							: typeof self !== 'undefined'
								? self
								: {}
					).Uint8Array || function () {};
				function _uint8ArrayToBuffer(e) {
					return l.from(e);
				}
				function _isUint8Array(e) {
					return l.isBuffer(e) || e instanceof d;
				}
				var f = r('?0685');
				var u;
				if (f && f.debuglog) {
					u = f.debuglog('stream');
				} else {
					u = function debug() {};
				}
				var c = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js'
				);
				var h = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js'
				);
				var p = r(
						'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js'
					),
					b = p.getHighWaterMark;
				var m = r(
						'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js'
					).codes,
					_ = m.ERR_INVALID_ARG_TYPE,
					y = m.ERR_STREAM_PUSH_AFTER_EOF,
					g = m.ERR_METHOD_NOT_IMPLEMENTED,
					v = m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
				var w;
				var R;
				var S;
				r('../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js')(
					Readable,
					s
				);
				var E = h.errorOrDestroy;
				var T = ['error', 'close', 'destroy', 'pause', 'resume'];
				function prependListener(e, t, r) {
					if (typeof e.prependListener === 'function') return e.prependListener(t, r);
					if (!e._events || !e._events[t]) e.on(t, r);
					else if (Array.isArray(e._events[t])) e._events[t].unshift(r);
					else e._events[t] = [r, e._events[t]];
				}
				function ReadableState(e, t, n) {
					a =
						a ||
						r(
							'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js'
						);
					e = e || {};
					if (typeof n !== 'boolean') n = t instanceof a;
					this.objectMode = !!e.objectMode;
					if (n) this.objectMode = this.objectMode || !!e.readableObjectMode;
					this.highWaterMark = b(this, e, 'readableHighWaterMark', n);
					this.buffer = new c();
					this.length = 0;
					this.pipes = null;
					this.pipesCount = 0;
					this.flowing = null;
					this.ended = false;
					this.endEmitted = false;
					this.reading = false;
					this.sync = true;
					this.needReadable = false;
					this.emittedReadable = false;
					this.readableListening = false;
					this.resumeScheduled = false;
					this.paused = true;
					this.emitClose = e.emitClose !== false;
					this.autoDestroy = !!e.autoDestroy;
					this.destroyed = false;
					this.defaultEncoding = e.defaultEncoding || 'utf8';
					this.awaitDrain = 0;
					this.readingMore = false;
					this.decoder = null;
					this.encoding = null;
					if (e.encoding) {
						if (!w)
							w = r(
								'../../node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js'
							).StringDecoder;
						this.decoder = new w(e.encoding);
						this.encoding = e.encoding;
					}
				}
				function Readable(e) {
					a =
						a ||
						r(
							'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js'
						);
					if (!(this instanceof Readable)) return new Readable(e);
					var t = this instanceof a;
					this._readableState = new ReadableState(e, this, t);
					this.readable = true;
					if (e) {
						if (typeof e.read === 'function') this._read = e.read;
						if (typeof e.destroy === 'function') this._destroy = e.destroy;
					}
					s.call(this);
				}
				Object.defineProperty(Readable.prototype, 'destroyed', {
					enumerable: false,
					get: function get() {
						if (this._readableState === undefined) {
							return false;
						}
						return this._readableState.destroyed;
					},
					set: function set(e) {
						if (!this._readableState) {
							return;
						}
						this._readableState.destroyed = e;
					}
				});
				Readable.prototype.destroy = h.destroy;
				Readable.prototype._undestroy = h.undestroy;
				Readable.prototype._destroy = function (e, t) {
					t(e);
				};
				Readable.prototype.push = function (e, t) {
					var r = this._readableState;
					var n;
					if (!r.objectMode) {
						if (typeof e === 'string') {
							t = t || r.defaultEncoding;
							if (t !== r.encoding) {
								e = l.from(e, t);
								t = '';
							}
							n = true;
						}
					} else {
						n = true;
					}
					return readableAddChunk(this, e, t, false, n);
				};
				Readable.prototype.unshift = function (e) {
					return readableAddChunk(this, e, null, true, false);
				};
				function readableAddChunk(e, t, r, n, a) {
					u('readableAddChunk', t);
					var i = e._readableState;
					if (t === null) {
						i.reading = false;
						onEofChunk(e, i);
					} else {
						var o;
						if (!a) o = chunkInvalid(i, t);
						if (o) {
							E(e, o);
						} else if (i.objectMode || (t && t.length > 0)) {
							if (
								typeof t !== 'string' &&
								!i.objectMode &&
								Object.getPrototypeOf(t) !== l.prototype
							) {
								t = _uint8ArrayToBuffer(t);
							}
							if (n) {
								if (i.endEmitted) E(e, new v());
								else addChunk(e, i, t, true);
							} else if (i.ended) {
								E(e, new y());
							} else if (i.destroyed) {
								return false;
							} else {
								i.reading = false;
								if (i.decoder && !r) {
									t = i.decoder.write(t);
									if (i.objectMode || t.length !== 0) addChunk(e, i, t, false);
									else maybeReadMore(e, i);
								} else {
									addChunk(e, i, t, false);
								}
							}
						} else if (!n) {
							i.reading = false;
							maybeReadMore(e, i);
						}
					}
					return !i.ended && (i.length < i.highWaterMark || i.length === 0);
				}
				function addChunk(e, t, r, n) {
					if (t.flowing && t.length === 0 && !t.sync) {
						t.awaitDrain = 0;
						e.emit('data', r);
					} else {
						t.length += t.objectMode ? 1 : r.length;
						if (n) t.buffer.unshift(r);
						else t.buffer.push(r);
						if (t.needReadable) emitReadable(e);
					}
					maybeReadMore(e, t);
				}
				function chunkInvalid(e, t) {
					var r;
					if (!_isUint8Array(t) && typeof t !== 'string' && t !== undefined && !e.objectMode) {
						r = new _('chunk', ['string', 'Buffer', 'Uint8Array'], t);
					}
					return r;
				}
				Readable.prototype.isPaused = function () {
					return this._readableState.flowing === false;
				};
				Readable.prototype.setEncoding = function (e) {
					if (!w)
						w = r(
							'../../node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js'
						).StringDecoder;
					var t = new w(e);
					this._readableState.decoder = t;
					this._readableState.encoding = this._readableState.decoder.encoding;
					var n = this._readableState.buffer.head;
					var a = '';
					while (n !== null) {
						a += t.write(n.data);
						n = n.next;
					}
					this._readableState.buffer.clear();
					if (a !== '') this._readableState.buffer.push(a);
					this._readableState.length = a.length;
					return this;
				};
				var k = 1073741824;
				function computeNewHighWaterMark(e) {
					if (e >= k) {
						e = k;
					} else {
						e--;
						e |= e >>> 1;
						e |= e >>> 2;
						e |= e >>> 4;
						e |= e >>> 8;
						e |= e >>> 16;
						e++;
					}
					return e;
				}
				function howMuchToRead(e, t) {
					if (e <= 0 || (t.length === 0 && t.ended)) return 0;
					if (t.objectMode) return 1;
					if (e !== e) {
						if (t.flowing && t.length) return t.buffer.head.data.length;
						else return t.length;
					}
					if (e > t.highWaterMark) t.highWaterMark = computeNewHighWaterMark(e);
					if (e <= t.length) return e;
					if (!t.ended) {
						t.needReadable = true;
						return 0;
					}
					return t.length;
				}
				Readable.prototype.read = function (e) {
					u('read', e);
					e = parseInt(e, 10);
					var t = this._readableState;
					var r = e;
					if (e !== 0) t.emittedReadable = false;
					if (
						e === 0 &&
						t.needReadable &&
						((t.highWaterMark !== 0 ? t.length >= t.highWaterMark : t.length > 0) || t.ended)
					) {
						u('read: emitReadable', t.length, t.ended);
						if (t.length === 0 && t.ended) endReadable(this);
						else emitReadable(this);
						return null;
					}
					e = howMuchToRead(e, t);
					if (e === 0 && t.ended) {
						if (t.length === 0) endReadable(this);
						return null;
					}
					var n = t.needReadable;
					u('need readable', n);
					if (t.length === 0 || t.length - e < t.highWaterMark) {
						n = true;
						u('length less than watermark', n);
					}
					if (t.ended || t.reading) {
						n = false;
						u('reading or ended', n);
					} else if (n) {
						u('do read');
						t.reading = true;
						t.sync = true;
						if (t.length === 0) t.needReadable = true;
						this._read(t.highWaterMark);
						t.sync = false;
						if (!t.reading) e = howMuchToRead(r, t);
					}
					var a;
					if (e > 0) a = fromList(e, t);
					else a = null;
					if (a === null) {
						t.needReadable = t.length <= t.highWaterMark;
						e = 0;
					} else {
						t.length -= e;
						t.awaitDrain = 0;
					}
					if (t.length === 0) {
						if (!t.ended) t.needReadable = true;
						if (r !== e && t.ended) endReadable(this);
					}
					if (a !== null) this.emit('data', a);
					return a;
				};
				function onEofChunk(e, t) {
					u('onEofChunk');
					if (t.ended) return;
					if (t.decoder) {
						var r = t.decoder.end();
						if (r && r.length) {
							t.buffer.push(r);
							t.length += t.objectMode ? 1 : r.length;
						}
					}
					t.ended = true;
					if (t.sync) {
						emitReadable(e);
					} else {
						t.needReadable = false;
						if (!t.emittedReadable) {
							t.emittedReadable = true;
							emitReadable_(e);
						}
					}
				}
				function emitReadable(e) {
					var t = e._readableState;
					u('emitReadable', t.needReadable, t.emittedReadable);
					t.needReadable = false;
					if (!t.emittedReadable) {
						u('emitReadable', t.flowing);
						t.emittedReadable = true;
						n.nextTick(emitReadable_, e);
					}
				}
				function emitReadable_(e) {
					var t = e._readableState;
					u('emitReadable_', t.destroyed, t.length, t.ended);
					if (!t.destroyed && (t.length || t.ended)) {
						e.emit('readable');
						t.emittedReadable = false;
					}
					t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark;
					flow(e);
				}
				function maybeReadMore(e, t) {
					if (!t.readingMore) {
						t.readingMore = true;
						n.nextTick(maybeReadMore_, e, t);
					}
				}
				function maybeReadMore_(e, t) {
					while (
						!t.reading &&
						!t.ended &&
						(t.length < t.highWaterMark || (t.flowing && t.length === 0))
					) {
						var r = t.length;
						u('maybeReadMore read 0');
						e.read(0);
						if (r === t.length) break;
					}
					t.readingMore = false;
				}
				Readable.prototype._read = function (e) {
					E(this, new g('_read()'));
				};
				Readable.prototype.pipe = function (e, t) {
					var r = this;
					var a = this._readableState;
					switch (a.pipesCount) {
						case 0:
							a.pipes = e;
							break;
						case 1:
							a.pipes = [a.pipes, e];
							break;
						default:
							a.pipes.push(e);
							break;
					}
					a.pipesCount += 1;
					u('pipe count=%d opts=%j', a.pipesCount, t);
					var i = (!t || t.end !== false) && e !== n.stdout && e !== n.stderr;
					var s = i ? onend : unpipe;
					if (a.endEmitted) n.nextTick(s);
					else r.once('end', s);
					e.on('unpipe', onunpipe);
					function onunpipe(e, t) {
						u('onunpipe');
						if (e === r) {
							if (t && t.hasUnpiped === false) {
								t.hasUnpiped = true;
								cleanup();
							}
						}
					}
					function onend() {
						u('onend');
						e.end();
					}
					var l = pipeOnDrain(r);
					e.on('drain', l);
					var d = false;
					function cleanup() {
						u('cleanup');
						e.removeListener('close', onclose);
						e.removeListener('finish', onfinish);
						e.removeListener('drain', l);
						e.removeListener('error', onerror);
						e.removeListener('unpipe', onunpipe);
						r.removeListener('end', onend);
						r.removeListener('end', unpipe);
						r.removeListener('data', ondata);
						d = true;
						if (a.awaitDrain && (!e._writableState || e._writableState.needDrain)) l();
					}
					r.on('data', ondata);
					function ondata(t) {
						u('ondata');
						var n = e.write(t);
						u('dest.write', n);
						if (n === false) {
							if (
								((a.pipesCount === 1 && a.pipes === e) ||
									(a.pipesCount > 1 && indexOf(a.pipes, e) !== -1)) &&
								!d
							) {
								u('false write response, pause', a.awaitDrain);
								a.awaitDrain++;
							}
							r.pause();
						}
					}
					function onerror(t) {
						u('onerror', t);
						unpipe();
						e.removeListener('error', onerror);
						if (o(e, 'error') === 0) E(e, t);
					}
					prependListener(e, 'error', onerror);
					function onclose() {
						e.removeListener('finish', onfinish);
						unpipe();
					}
					e.once('close', onclose);
					function onfinish() {
						u('onfinish');
						e.removeListener('close', onclose);
						unpipe();
					}
					e.once('finish', onfinish);
					function unpipe() {
						u('unpipe');
						r.unpipe(e);
					}
					e.emit('pipe', r);
					if (!a.flowing) {
						u('pipe resume');
						r.resume();
					}
					return e;
				};
				function pipeOnDrain(e) {
					return function pipeOnDrainFunctionResult() {
						var t = e._readableState;
						u('pipeOnDrain', t.awaitDrain);
						if (t.awaitDrain) t.awaitDrain--;
						if (t.awaitDrain === 0 && o(e, 'data')) {
							t.flowing = true;
							flow(e);
						}
					};
				}
				Readable.prototype.unpipe = function (e) {
					var t = this._readableState;
					var r = { hasUnpiped: false };
					if (t.pipesCount === 0) return this;
					if (t.pipesCount === 1) {
						if (e && e !== t.pipes) return this;
						if (!e) e = t.pipes;
						t.pipes = null;
						t.pipesCount = 0;
						t.flowing = false;
						if (e) e.emit('unpipe', this, r);
						return this;
					}
					if (!e) {
						var n = t.pipes;
						var a = t.pipesCount;
						t.pipes = null;
						t.pipesCount = 0;
						t.flowing = false;
						for (var i = 0; i < a; i++) n[i].emit('unpipe', this, { hasUnpiped: false });
						return this;
					}
					var o = indexOf(t.pipes, e);
					if (o === -1) return this;
					t.pipes.splice(o, 1);
					t.pipesCount -= 1;
					if (t.pipesCount === 1) t.pipes = t.pipes[0];
					e.emit('unpipe', this, r);
					return this;
				};
				Readable.prototype.on = function (e, t) {
					var r = s.prototype.on.call(this, e, t);
					var a = this._readableState;
					if (e === 'data') {
						a.readableListening = this.listenerCount('readable') > 0;
						if (a.flowing !== false) this.resume();
					} else if (e === 'readable') {
						if (!a.endEmitted && !a.readableListening) {
							a.readableListening = a.needReadable = true;
							a.flowing = false;
							a.emittedReadable = false;
							u('on readable', a.length, a.reading);
							if (a.length) {
								emitReadable(this);
							} else if (!a.reading) {
								n.nextTick(nReadingNextTick, this);
							}
						}
					}
					return r;
				};
				Readable.prototype.addListener = Readable.prototype.on;
				Readable.prototype.removeListener = function (e, t) {
					var r = s.prototype.removeListener.call(this, e, t);
					if (e === 'readable') {
						n.nextTick(updateReadableListening, this);
					}
					return r;
				};
				Readable.prototype.removeAllListeners = function (e) {
					var t = s.prototype.removeAllListeners.apply(this, arguments);
					if (e === 'readable' || e === undefined) {
						n.nextTick(updateReadableListening, this);
					}
					return t;
				};
				function updateReadableListening(e) {
					var t = e._readableState;
					t.readableListening = e.listenerCount('readable') > 0;
					if (t.resumeScheduled && !t.paused) {
						t.flowing = true;
					} else if (e.listenerCount('data') > 0) {
						e.resume();
					}
				}
				function nReadingNextTick(e) {
					u('readable nexttick read 0');
					e.read(0);
				}
				Readable.prototype.resume = function () {
					var e = this._readableState;
					if (!e.flowing) {
						u('resume');
						e.flowing = !e.readableListening;
						resume(this, e);
					}
					e.paused = false;
					return this;
				};
				function resume(e, t) {
					if (!t.resumeScheduled) {
						t.resumeScheduled = true;
						n.nextTick(resume_, e, t);
					}
				}
				function resume_(e, t) {
					u('resume', t.reading);
					if (!t.reading) {
						e.read(0);
					}
					t.resumeScheduled = false;
					e.emit('resume');
					flow(e);
					if (t.flowing && !t.reading) e.read(0);
				}
				Readable.prototype.pause = function () {
					u('call pause flowing=%j', this._readableState.flowing);
					if (this._readableState.flowing !== false) {
						u('pause');
						this._readableState.flowing = false;
						this.emit('pause');
					}
					this._readableState.paused = true;
					return this;
				};
				function flow(e) {
					var t = e._readableState;
					u('flow', t.flowing);
					while (t.flowing && e.read() !== null);
				}
				Readable.prototype.wrap = function (e) {
					var t = this;
					var r = this._readableState;
					var n = false;
					e.on('end', function () {
						u('wrapped end');
						if (r.decoder && !r.ended) {
							var e = r.decoder.end();
							if (e && e.length) t.push(e);
						}
						t.push(null);
					});
					e.on('data', function (a) {
						u('wrapped data');
						if (r.decoder) a = r.decoder.write(a);
						if (r.objectMode && (a === null || a === undefined)) return;
						else if (!r.objectMode && (!a || !a.length)) return;
						var i = t.push(a);
						if (!i) {
							n = true;
							e.pause();
						}
					});
					for (var a in e) {
						if (this[a] === undefined && typeof e[a] === 'function') {
							this[a] = (function methodWrap(t) {
								return function methodWrapReturnFunction() {
									return e[t].apply(e, arguments);
								};
							})(a);
						}
					}
					for (var i = 0; i < T.length; i++) {
						e.on(T[i], this.emit.bind(this, T[i]));
					}
					this._read = function (t) {
						u('wrapped _read', t);
						if (n) {
							n = false;
							e.resume();
						}
					};
					return this;
				};
				if (typeof Symbol === 'function') {
					Readable.prototype[Symbol.asyncIterator] = function () {
						if (R === undefined) {
							R = r(
								'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/async_iterator.js'
							);
						}
						return R(this);
					};
				}
				Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
					enumerable: false,
					get: function get() {
						return this._readableState.highWaterMark;
					}
				});
				Object.defineProperty(Readable.prototype, 'readableBuffer', {
					enumerable: false,
					get: function get() {
						return this._readableState && this._readableState.buffer;
					}
				});
				Object.defineProperty(Readable.prototype, 'readableFlowing', {
					enumerable: false,
					get: function get() {
						return this._readableState.flowing;
					},
					set: function set(e) {
						if (this._readableState) {
							this._readableState.flowing = e;
						}
					}
				});
				Readable._fromList = fromList;
				Object.defineProperty(Readable.prototype, 'readableLength', {
					enumerable: false,
					get: function get() {
						return this._readableState.length;
					}
				});
				function fromList(e, t) {
					if (t.length === 0) return null;
					var r;
					if (t.objectMode) r = t.buffer.shift();
					else if (!e || e >= t.length) {
						if (t.decoder) r = t.buffer.join('');
						else if (t.buffer.length === 1) r = t.buffer.first();
						else r = t.buffer.concat(t.length);
						t.buffer.clear();
					} else {
						r = t.buffer.consume(e, t.decoder);
					}
					return r;
				}
				function endReadable(e) {
					var t = e._readableState;
					u('endReadable', t.endEmitted);
					if (!t.endEmitted) {
						t.ended = true;
						n.nextTick(endReadableNT, t, e);
					}
				}
				function endReadableNT(e, t) {
					u('endReadableNT', e.endEmitted, e.length);
					if (!e.endEmitted && e.length === 0) {
						e.endEmitted = true;
						t.readable = false;
						t.emit('end');
						if (e.autoDestroy) {
							var r = t._writableState;
							if (!r || (r.autoDestroy && r.finished)) {
								t.destroy();
							}
						}
					}
				}
				if (typeof Symbol === 'function') {
					Readable.from = function (e, t) {
						if (S === undefined) {
							S = r(
								'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/from-browser.js'
							);
						}
						return S(Readable, e, t);
					};
				}
				function indexOf(e, t) {
					for (var r = 0, n = e.length; r < n; r++) {
						if (e[r] === t) return r;
					}
					return -1;
				}
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js':
			(e, t, r) => {
				'use strict';
				e.exports = Transform;
				var n = r(
						'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js'
					).codes,
					a = n.ERR_METHOD_NOT_IMPLEMENTED,
					i = n.ERR_MULTIPLE_CALLBACK,
					o = n.ERR_TRANSFORM_ALREADY_TRANSFORMING,
					s = n.ERR_TRANSFORM_WITH_LENGTH_0;
				var l = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js'
				);
				r('../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js')(
					Transform,
					l
				);
				function afterTransform(e, t) {
					var r = this._transformState;
					r.transforming = false;
					var n = r.writecb;
					if (n === null) {
						return this.emit('error', new i());
					}
					r.writechunk = null;
					r.writecb = null;
					if (t != null) this.push(t);
					n(e);
					var a = this._readableState;
					a.reading = false;
					if (a.needReadable || a.length < a.highWaterMark) {
						this._read(a.highWaterMark);
					}
				}
				function Transform(e) {
					if (!(this instanceof Transform)) return new Transform(e);
					l.call(this, e);
					this._transformState = {
						afterTransform: afterTransform.bind(this),
						needTransform: false,
						transforming: false,
						writecb: null,
						writechunk: null,
						writeencoding: null
					};
					this._readableState.needReadable = true;
					this._readableState.sync = false;
					if (e) {
						if (typeof e.transform === 'function') this._transform = e.transform;
						if (typeof e.flush === 'function') this._flush = e.flush;
					}
					this.on('prefinish', prefinish);
				}
				function prefinish() {
					var e = this;
					if (typeof this._flush === 'function' && !this._readableState.destroyed) {
						this._flush(function (t, r) {
							done(e, t, r);
						});
					} else {
						done(this, null, null);
					}
				}
				Transform.prototype.push = function (e, t) {
					this._transformState.needTransform = false;
					return l.prototype.push.call(this, e, t);
				};
				Transform.prototype._transform = function (e, t, r) {
					r(new a('_transform()'));
				};
				Transform.prototype._write = function (e, t, r) {
					var n = this._transformState;
					n.writecb = r;
					n.writechunk = e;
					n.writeencoding = t;
					if (!n.transforming) {
						var a = this._readableState;
						if (n.needTransform || a.needReadable || a.length < a.highWaterMark)
							this._read(a.highWaterMark);
					}
				};
				Transform.prototype._read = function (e) {
					var t = this._transformState;
					if (t.writechunk !== null && !t.transforming) {
						t.transforming = true;
						this._transform(t.writechunk, t.writeencoding, t.afterTransform);
					} else {
						t.needTransform = true;
					}
				};
				Transform.prototype._destroy = function (e, t) {
					l.prototype._destroy.call(this, e, function (e) {
						t(e);
					});
				};
				function done(e, t, r) {
					if (t) return e.emit('error', t);
					if (r != null) e.push(r);
					if (e._writableState.length) throw new s();
					if (e._transformState.transforming) throw new o();
					return e.push(null);
				}
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js':
			(e, t, r) => {
				'use strict';
				var n = r('../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js');
				e.exports = Writable;
				function WriteReq(e, t, r) {
					this.chunk = e;
					this.encoding = t;
					this.callback = r;
					this.next = null;
				}
				function CorkedRequest(e) {
					var t = this;
					this.next = null;
					this.entry = null;
					this.finish = function () {
						onCorkedFinish(t, e);
					};
				}
				var a;
				Writable.WritableState = WritableState;
				var i = {
					deprecate: r(
						'../../node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js'
					)
				};
				var o = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream-browser.js'
				);
				var s = r('../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js').Buffer;
				var l =
					(typeof r.g !== 'undefined'
						? r.g
						: typeof window !== 'undefined'
							? window
							: typeof self !== 'undefined'
								? self
								: {}
					).Uint8Array || function () {};
				function _uint8ArrayToBuffer(e) {
					return s.from(e);
				}
				function _isUint8Array(e) {
					return s.isBuffer(e) || e instanceof l;
				}
				var d = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js'
				);
				var f = r(
						'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js'
					),
					u = f.getHighWaterMark;
				var c = r(
						'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js'
					).codes,
					h = c.ERR_INVALID_ARG_TYPE,
					p = c.ERR_METHOD_NOT_IMPLEMENTED,
					b = c.ERR_MULTIPLE_CALLBACK,
					m = c.ERR_STREAM_CANNOT_PIPE,
					_ = c.ERR_STREAM_DESTROYED,
					y = c.ERR_STREAM_NULL_VALUES,
					g = c.ERR_STREAM_WRITE_AFTER_END,
					v = c.ERR_UNKNOWN_ENCODING;
				var w = d.errorOrDestroy;
				r('../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js')(
					Writable,
					o
				);
				function nop() {}
				function WritableState(e, t, n) {
					a =
						a ||
						r(
							'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js'
						);
					e = e || {};
					if (typeof n !== 'boolean') n = t instanceof a;
					this.objectMode = !!e.objectMode;
					if (n) this.objectMode = this.objectMode || !!e.writableObjectMode;
					this.highWaterMark = u(this, e, 'writableHighWaterMark', n);
					this.finalCalled = false;
					this.needDrain = false;
					this.ending = false;
					this.ended = false;
					this.finished = false;
					this.destroyed = false;
					var i = e.decodeStrings === false;
					this.decodeStrings = !i;
					this.defaultEncoding = e.defaultEncoding || 'utf8';
					this.length = 0;
					this.writing = false;
					this.corked = 0;
					this.sync = true;
					this.bufferProcessing = false;
					this.onwrite = function (e) {
						onwrite(t, e);
					};
					this.writecb = null;
					this.writelen = 0;
					this.bufferedRequest = null;
					this.lastBufferedRequest = null;
					this.pendingcb = 0;
					this.prefinished = false;
					this.errorEmitted = false;
					this.emitClose = e.emitClose !== false;
					this.autoDestroy = !!e.autoDestroy;
					this.bufferedRequestCount = 0;
					this.corkedRequestsFree = new CorkedRequest(this);
				}
				WritableState.prototype.getBuffer = function getBuffer() {
					var e = this.bufferedRequest;
					var t = [];
					while (e) {
						t.push(e);
						e = e.next;
					}
					return t;
				};
				(function () {
					try {
						Object.defineProperty(WritableState.prototype, 'buffer', {
							get: i.deprecate(
								function writableStateBufferGetter() {
									return this.getBuffer();
								},
								'_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.',
								'DEP0003'
							)
						});
					} catch (e) {}
				})();
				var R;
				if (
					typeof Symbol === 'function' &&
					Symbol.hasInstance &&
					typeof Function.prototype[Symbol.hasInstance] === 'function'
				) {
					R = Function.prototype[Symbol.hasInstance];
					Object.defineProperty(Writable, Symbol.hasInstance, {
						value: function value(e) {
							if (R.call(this, e)) return true;
							if (this !== Writable) return false;
							return e && e._writableState instanceof WritableState;
						}
					});
				} else {
					R = function realHasInstance(e) {
						return e instanceof this;
					};
				}
				function Writable(e) {
					a =
						a ||
						r(
							'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js'
						);
					var t = this instanceof a;
					if (!t && !R.call(Writable, this)) return new Writable(e);
					this._writableState = new WritableState(e, this, t);
					this.writable = true;
					if (e) {
						if (typeof e.write === 'function') this._write = e.write;
						if (typeof e.writev === 'function') this._writev = e.writev;
						if (typeof e.destroy === 'function') this._destroy = e.destroy;
						if (typeof e.final === 'function') this._final = e.final;
					}
					o.call(this);
				}
				Writable.prototype.pipe = function () {
					w(this, new m());
				};
				function writeAfterEnd(e, t) {
					var r = new g();
					w(e, r);
					n.nextTick(t, r);
				}
				function validChunk(e, t, r, a) {
					var i;
					if (r === null) {
						i = new y();
					} else if (typeof r !== 'string' && !t.objectMode) {
						i = new h('chunk', ['string', 'Buffer'], r);
					}
					if (i) {
						w(e, i);
						n.nextTick(a, i);
						return false;
					}
					return true;
				}
				Writable.prototype.write = function (e, t, r) {
					var n = this._writableState;
					var a = false;
					var i = !n.objectMode && _isUint8Array(e);
					if (i && !s.isBuffer(e)) {
						e = _uint8ArrayToBuffer(e);
					}
					if (typeof t === 'function') {
						r = t;
						t = null;
					}
					if (i) t = 'buffer';
					else if (!t) t = n.defaultEncoding;
					if (typeof r !== 'function') r = nop;
					if (n.ending) writeAfterEnd(this, r);
					else if (i || validChunk(this, n, e, r)) {
						n.pendingcb++;
						a = writeOrBuffer(this, n, i, e, t, r);
					}
					return a;
				};
				Writable.prototype.cork = function () {
					this._writableState.corked++;
				};
				Writable.prototype.uncork = function () {
					var e = this._writableState;
					if (e.corked) {
						e.corked--;
						if (!e.writing && !e.corked && !e.bufferProcessing && e.bufferedRequest)
							clearBuffer(this, e);
					}
				};
				Writable.prototype.setDefaultEncoding = function setDefaultEncoding(e) {
					if (typeof e === 'string') e = e.toLowerCase();
					if (
						!(
							[
								'hex',
								'utf8',
								'utf-8',
								'ascii',
								'binary',
								'base64',
								'ucs2',
								'ucs-2',
								'utf16le',
								'utf-16le',
								'raw'
							].indexOf((e + '').toLowerCase()) > -1
						)
					)
						throw new v(e);
					this._writableState.defaultEncoding = e;
					return this;
				};
				Object.defineProperty(Writable.prototype, 'writableBuffer', {
					enumerable: false,
					get: function get() {
						return this._writableState && this._writableState.getBuffer();
					}
				});
				function decodeChunk(e, t, r) {
					if (!e.objectMode && e.decodeStrings !== false && typeof t === 'string') {
						t = s.from(t, r);
					}
					return t;
				}
				Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
					enumerable: false,
					get: function get() {
						return this._writableState.highWaterMark;
					}
				});
				function writeOrBuffer(e, t, r, n, a, i) {
					if (!r) {
						var o = decodeChunk(t, n, a);
						if (n !== o) {
							r = true;
							a = 'buffer';
							n = o;
						}
					}
					var s = t.objectMode ? 1 : n.length;
					t.length += s;
					var l = t.length < t.highWaterMark;
					if (!l) t.needDrain = true;
					if (t.writing || t.corked) {
						var d = t.lastBufferedRequest;
						t.lastBufferedRequest = { chunk: n, encoding: a, isBuf: r, callback: i, next: null };
						if (d) {
							d.next = t.lastBufferedRequest;
						} else {
							t.bufferedRequest = t.lastBufferedRequest;
						}
						t.bufferedRequestCount += 1;
					} else {
						doWrite(e, t, false, s, n, a, i);
					}
					return l;
				}
				function doWrite(e, t, r, n, a, i, o) {
					t.writelen = n;
					t.writecb = o;
					t.writing = true;
					t.sync = true;
					if (t.destroyed) t.onwrite(new _('write'));
					else if (r) e._writev(a, t.onwrite);
					else e._write(a, i, t.onwrite);
					t.sync = false;
				}
				function onwriteError(e, t, r, a, i) {
					--t.pendingcb;
					if (r) {
						n.nextTick(i, a);
						n.nextTick(finishMaybe, e, t);
						e._writableState.errorEmitted = true;
						w(e, a);
					} else {
						i(a);
						e._writableState.errorEmitted = true;
						w(e, a);
						finishMaybe(e, t);
					}
				}
				function onwriteStateUpdate(e) {
					e.writing = false;
					e.writecb = null;
					e.length -= e.writelen;
					e.writelen = 0;
				}
				function onwrite(e, t) {
					var r = e._writableState;
					var a = r.sync;
					var i = r.writecb;
					if (typeof i !== 'function') throw new b();
					onwriteStateUpdate(r);
					if (t) onwriteError(e, r, a, t, i);
					else {
						var o = needFinish(r) || e.destroyed;
						if (!o && !r.corked && !r.bufferProcessing && r.bufferedRequest) {
							clearBuffer(e, r);
						}
						if (a) {
							n.nextTick(afterWrite, e, r, o, i);
						} else {
							afterWrite(e, r, o, i);
						}
					}
				}
				function afterWrite(e, t, r, n) {
					if (!r) onwriteDrain(e, t);
					t.pendingcb--;
					n();
					finishMaybe(e, t);
				}
				function onwriteDrain(e, t) {
					if (t.length === 0 && t.needDrain) {
						t.needDrain = false;
						e.emit('drain');
					}
				}
				function clearBuffer(e, t) {
					t.bufferProcessing = true;
					var r = t.bufferedRequest;
					if (e._writev && r && r.next) {
						var n = t.bufferedRequestCount;
						var a = new Array(n);
						var i = t.corkedRequestsFree;
						i.entry = r;
						var o = 0;
						var s = true;
						while (r) {
							a[o] = r;
							if (!r.isBuf) s = false;
							r = r.next;
							o += 1;
						}
						a.allBuffers = s;
						doWrite(e, t, true, t.length, a, '', i.finish);
						t.pendingcb++;
						t.lastBufferedRequest = null;
						if (i.next) {
							t.corkedRequestsFree = i.next;
							i.next = null;
						} else {
							t.corkedRequestsFree = new CorkedRequest(t);
						}
						t.bufferedRequestCount = 0;
					} else {
						while (r) {
							var l = r.chunk;
							var d = r.encoding;
							var f = r.callback;
							var u = t.objectMode ? 1 : l.length;
							doWrite(e, t, false, u, l, d, f);
							r = r.next;
							t.bufferedRequestCount--;
							if (t.writing) {
								break;
							}
						}
						if (r === null) t.lastBufferedRequest = null;
					}
					t.bufferedRequest = r;
					t.bufferProcessing = false;
				}
				Writable.prototype._write = function (e, t, r) {
					r(new p('_write()'));
				};
				Writable.prototype._writev = null;
				Writable.prototype.end = function (e, t, r) {
					var n = this._writableState;
					if (typeof e === 'function') {
						r = e;
						e = null;
						t = null;
					} else if (typeof t === 'function') {
						r = t;
						t = null;
					}
					if (e !== null && e !== undefined) this.write(e, t);
					if (n.corked) {
						n.corked = 1;
						this.uncork();
					}
					if (!n.ending) endWritable(this, n, r);
					return this;
				};
				Object.defineProperty(Writable.prototype, 'writableLength', {
					enumerable: false,
					get: function get() {
						return this._writableState.length;
					}
				});
				function needFinish(e) {
					return (
						e.ending && e.length === 0 && e.bufferedRequest === null && !e.finished && !e.writing
					);
				}
				function callFinal(e, t) {
					e._final(function (r) {
						t.pendingcb--;
						if (r) {
							w(e, r);
						}
						t.prefinished = true;
						e.emit('prefinish');
						finishMaybe(e, t);
					});
				}
				function prefinish(e, t) {
					if (!t.prefinished && !t.finalCalled) {
						if (typeof e._final === 'function' && !t.destroyed) {
							t.pendingcb++;
							t.finalCalled = true;
							n.nextTick(callFinal, e, t);
						} else {
							t.prefinished = true;
							e.emit('prefinish');
						}
					}
				}
				function finishMaybe(e, t) {
					var r = needFinish(t);
					if (r) {
						prefinish(e, t);
						if (t.pendingcb === 0) {
							t.finished = true;
							e.emit('finish');
							if (t.autoDestroy) {
								var n = e._readableState;
								if (!n || (n.autoDestroy && n.endEmitted)) {
									e.destroy();
								}
							}
						}
					}
					return r;
				}
				function endWritable(e, t, r) {
					t.ending = true;
					finishMaybe(e, t);
					if (r) {
						if (t.finished) n.nextTick(r);
						else e.once('finish', r);
					}
					t.ended = true;
					e.writable = false;
				}
				function onCorkedFinish(e, t, r) {
					var n = e.entry;
					e.entry = null;
					while (n) {
						var a = n.callback;
						t.pendingcb--;
						a(r);
						n = n.next;
					}
					t.corkedRequestsFree.next = e;
				}
				Object.defineProperty(Writable.prototype, 'destroyed', {
					enumerable: false,
					get: function get() {
						if (this._writableState === undefined) {
							return false;
						}
						return this._writableState.destroyed;
					},
					set: function set(e) {
						if (!this._writableState) {
							return;
						}
						this._writableState.destroyed = e;
					}
				});
				Writable.prototype.destroy = d.destroy;
				Writable.prototype._undestroy = d.undestroy;
				Writable.prototype._destroy = function (e, t) {
					t(e);
				};
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/async_iterator.js':
			(e, t, r) => {
				'use strict';
				var n = r('../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js');
				var a;
				function _defineProperty(e, t, r) {
					t = _toPropertyKey(t);
					if (t in e) {
						Object.defineProperty(e, t, {
							value: r,
							enumerable: true,
							configurable: true,
							writable: true
						});
					} else {
						e[t] = r;
					}
					return e;
				}
				function _toPropertyKey(e) {
					var t = _toPrimitive(e, 'string');
					return typeof t === 'symbol' ? t : String(t);
				}
				function _toPrimitive(e, t) {
					if (typeof e !== 'object' || e === null) return e;
					var r = e[Symbol.toPrimitive];
					if (r !== undefined) {
						var n = r.call(e, t || 'default');
						if (typeof n !== 'object') return n;
						throw new TypeError('@@toPrimitive must return a primitive value.');
					}
					return (t === 'string' ? String : Number)(e);
				}
				var i = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js'
				);
				var o = Symbol('lastResolve');
				var s = Symbol('lastReject');
				var l = Symbol('error');
				var d = Symbol('ended');
				var f = Symbol('lastPromise');
				var u = Symbol('handlePromise');
				var c = Symbol('stream');
				function createIterResult(e, t) {
					return { value: e, done: t };
				}
				function readAndResolve(e) {
					var t = e[o];
					if (t !== null) {
						var r = e[c].read();
						if (r !== null) {
							e[f] = null;
							e[o] = null;
							e[s] = null;
							t(createIterResult(r, false));
						}
					}
				}
				function onReadable(e) {
					n.nextTick(readAndResolve, e);
				}
				function wrapForNext(e, t) {
					return function (r, n) {
						e.then(function () {
							if (t[d]) {
								r(createIterResult(undefined, true));
								return;
							}
							t[u](r, n);
						}, n);
					};
				}
				var h = Object.getPrototypeOf(function () {});
				var p = Object.setPrototypeOf(
					((a = {
						get stream() {
							return this[c];
						},
						next: function next() {
							var e = this;
							var t = this[l];
							if (t !== null) {
								return Promise.reject(t);
							}
							if (this[d]) {
								return Promise.resolve(createIterResult(undefined, true));
							}
							if (this[c].destroyed) {
								return new Promise(function (t, r) {
									n.nextTick(function () {
										if (e[l]) {
											r(e[l]);
										} else {
											t(createIterResult(undefined, true));
										}
									});
								});
							}
							var r = this[f];
							var a;
							if (r) {
								a = new Promise(wrapForNext(r, this));
							} else {
								var i = this[c].read();
								if (i !== null) {
									return Promise.resolve(createIterResult(i, false));
								}
								a = new Promise(this[u]);
							}
							this[f] = a;
							return a;
						}
					}),
					_defineProperty(a, Symbol.asyncIterator, function () {
						return this;
					}),
					_defineProperty(a, 'return', function _return() {
						var e = this;
						return new Promise(function (t, r) {
							e[c].destroy(null, function (e) {
								if (e) {
									r(e);
									return;
								}
								t(createIterResult(undefined, true));
							});
						});
					}),
					a),
					h
				);
				var b = function createReadableStreamAsyncIterator(e) {
					var t;
					var r = Object.create(
						p,
						((t = {}),
						_defineProperty(t, c, { value: e, writable: true }),
						_defineProperty(t, o, { value: null, writable: true }),
						_defineProperty(t, s, { value: null, writable: true }),
						_defineProperty(t, l, { value: null, writable: true }),
						_defineProperty(t, d, { value: e._readableState.endEmitted, writable: true }),
						_defineProperty(t, u, {
							value: function value(e, t) {
								var n = r[c].read();
								if (n) {
									r[f] = null;
									r[o] = null;
									r[s] = null;
									e(createIterResult(n, false));
								} else {
									r[o] = e;
									r[s] = t;
								}
							},
							writable: true
						}),
						t)
					);
					r[f] = null;
					i(e, function (e) {
						if (e && e.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
							var t = r[s];
							if (t !== null) {
								r[f] = null;
								r[o] = null;
								r[s] = null;
								t(e);
							}
							r[l] = e;
							return;
						}
						var n = r[o];
						if (n !== null) {
							r[f] = null;
							r[o] = null;
							r[s] = null;
							n(createIterResult(undefined, true));
						}
						r[d] = true;
					});
					e.on('readable', onReadable.bind(null, r));
					return r;
				};
				e.exports = b;
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js':
			(e, t, r) => {
				'use strict';
				function ownKeys(e, t) {
					var r = Object.keys(e);
					if (Object.getOwnPropertySymbols) {
						var n = Object.getOwnPropertySymbols(e);
						t &&
							(n = n.filter(function (t) {
								return Object.getOwnPropertyDescriptor(e, t).enumerable;
							})),
							r.push.apply(r, n);
					}
					return r;
				}
				function _objectSpread(e) {
					for (var t = 1; t < arguments.length; t++) {
						var r = null != arguments[t] ? arguments[t] : {};
						t % 2
							? ownKeys(Object(r), !0).forEach(function (t) {
									_defineProperty(e, t, r[t]);
								})
							: Object.getOwnPropertyDescriptors
								? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r))
								: ownKeys(Object(r)).forEach(function (t) {
										Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
									});
					}
					return e;
				}
				function _defineProperty(e, t, r) {
					t = _toPropertyKey(t);
					if (t in e) {
						Object.defineProperty(e, t, {
							value: r,
							enumerable: true,
							configurable: true,
							writable: true
						});
					} else {
						e[t] = r;
					}
					return e;
				}
				function _classCallCheck(e, t) {
					if (!(e instanceof t)) {
						throw new TypeError('Cannot call a class as a function');
					}
				}
				function _defineProperties(e, t) {
					for (var r = 0; r < t.length; r++) {
						var n = t[r];
						n.enumerable = n.enumerable || false;
						n.configurable = true;
						if ('value' in n) n.writable = true;
						Object.defineProperty(e, _toPropertyKey(n.key), n);
					}
				}
				function _createClass(e, t, r) {
					if (t) _defineProperties(e.prototype, t);
					if (r) _defineProperties(e, r);
					Object.defineProperty(e, 'prototype', { writable: false });
					return e;
				}
				function _toPropertyKey(e) {
					var t = _toPrimitive(e, 'string');
					return typeof t === 'symbol' ? t : String(t);
				}
				function _toPrimitive(e, t) {
					if (typeof e !== 'object' || e === null) return e;
					var r = e[Symbol.toPrimitive];
					if (r !== undefined) {
						var n = r.call(e, t || 'default');
						if (typeof n !== 'object') return n;
						throw new TypeError('@@toPrimitive must return a primitive value.');
					}
					return (t === 'string' ? String : Number)(e);
				}
				var n = r('../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js'),
					a = n.Buffer;
				var i = r('?2e0d'),
					o = i.inspect;
				var s = (o && o.custom) || 'inspect';
				function copyBuffer(e, t, r) {
					a.prototype.copy.call(e, t, r);
				}
				e.exports = (function () {
					function BufferList() {
						_classCallCheck(this, BufferList);
						this.head = null;
						this.tail = null;
						this.length = 0;
					}
					_createClass(BufferList, [
						{
							key: 'push',
							value: function push(e) {
								var t = { data: e, next: null };
								if (this.length > 0) this.tail.next = t;
								else this.head = t;
								this.tail = t;
								++this.length;
							}
						},
						{
							key: 'unshift',
							value: function unshift(e) {
								var t = { data: e, next: this.head };
								if (this.length === 0) this.tail = t;
								this.head = t;
								++this.length;
							}
						},
						{
							key: 'shift',
							value: function shift() {
								if (this.length === 0) return;
								var e = this.head.data;
								if (this.length === 1) this.head = this.tail = null;
								else this.head = this.head.next;
								--this.length;
								return e;
							}
						},
						{
							key: 'clear',
							value: function clear() {
								this.head = this.tail = null;
								this.length = 0;
							}
						},
						{
							key: 'join',
							value: function join(e) {
								if (this.length === 0) return '';
								var t = this.head;
								var r = '' + t.data;
								while ((t = t.next)) r += e + t.data;
								return r;
							}
						},
						{
							key: 'concat',
							value: function concat(e) {
								if (this.length === 0) return a.alloc(0);
								var t = a.allocUnsafe(e >>> 0);
								var r = this.head;
								var n = 0;
								while (r) {
									copyBuffer(r.data, t, n);
									n += r.data.length;
									r = r.next;
								}
								return t;
							}
						},
						{
							key: 'consume',
							value: function consume(e, t) {
								var r;
								if (e < this.head.data.length) {
									r = this.head.data.slice(0, e);
									this.head.data = this.head.data.slice(e);
								} else if (e === this.head.data.length) {
									r = this.shift();
								} else {
									r = t ? this._getString(e) : this._getBuffer(e);
								}
								return r;
							}
						},
						{
							key: 'first',
							value: function first() {
								return this.head.data;
							}
						},
						{
							key: '_getString',
							value: function _getString(e) {
								var t = this.head;
								var r = 1;
								var n = t.data;
								e -= n.length;
								while ((t = t.next)) {
									var a = t.data;
									var i = e > a.length ? a.length : e;
									if (i === a.length) n += a;
									else n += a.slice(0, e);
									e -= i;
									if (e === 0) {
										if (i === a.length) {
											++r;
											if (t.next) this.head = t.next;
											else this.head = this.tail = null;
										} else {
											this.head = t;
											t.data = a.slice(i);
										}
										break;
									}
									++r;
								}
								this.length -= r;
								return n;
							}
						},
						{
							key: '_getBuffer',
							value: function _getBuffer(e) {
								var t = a.allocUnsafe(e);
								var r = this.head;
								var n = 1;
								r.data.copy(t);
								e -= r.data.length;
								while ((r = r.next)) {
									var i = r.data;
									var o = e > i.length ? i.length : e;
									i.copy(t, t.length - e, 0, o);
									e -= o;
									if (e === 0) {
										if (o === i.length) {
											++n;
											if (r.next) this.head = r.next;
											else this.head = this.tail = null;
										} else {
											this.head = r;
											r.data = i.slice(o);
										}
										break;
									}
									++n;
								}
								this.length -= n;
								return t;
							}
						},
						{
							key: s,
							value: function value(e, t) {
								return o(
									this,
									_objectSpread(_objectSpread({}, t), {}, { depth: 0, customInspect: false })
								);
							}
						}
					]);
					return BufferList;
				})();
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js':
			(e, t, r) => {
				'use strict';
				var n = r('../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js');
				function destroy(e, t) {
					var r = this;
					var a = this._readableState && this._readableState.destroyed;
					var i = this._writableState && this._writableState.destroyed;
					if (a || i) {
						if (t) {
							t(e);
						} else if (e) {
							if (!this._writableState) {
								n.nextTick(emitErrorNT, this, e);
							} else if (!this._writableState.errorEmitted) {
								this._writableState.errorEmitted = true;
								n.nextTick(emitErrorNT, this, e);
							}
						}
						return this;
					}
					if (this._readableState) {
						this._readableState.destroyed = true;
					}
					if (this._writableState) {
						this._writableState.destroyed = true;
					}
					this._destroy(e || null, function (e) {
						if (!t && e) {
							if (!r._writableState) {
								n.nextTick(emitErrorAndCloseNT, r, e);
							} else if (!r._writableState.errorEmitted) {
								r._writableState.errorEmitted = true;
								n.nextTick(emitErrorAndCloseNT, r, e);
							} else {
								n.nextTick(emitCloseNT, r);
							}
						} else if (t) {
							n.nextTick(emitCloseNT, r);
							t(e);
						} else {
							n.nextTick(emitCloseNT, r);
						}
					});
					return this;
				}
				function emitErrorAndCloseNT(e, t) {
					emitErrorNT(e, t);
					emitCloseNT(e);
				}
				function emitCloseNT(e) {
					if (e._writableState && !e._writableState.emitClose) return;
					if (e._readableState && !e._readableState.emitClose) return;
					e.emit('close');
				}
				function undestroy() {
					if (this._readableState) {
						this._readableState.destroyed = false;
						this._readableState.reading = false;
						this._readableState.ended = false;
						this._readableState.endEmitted = false;
					}
					if (this._writableState) {
						this._writableState.destroyed = false;
						this._writableState.ended = false;
						this._writableState.ending = false;
						this._writableState.finalCalled = false;
						this._writableState.prefinished = false;
						this._writableState.finished = false;
						this._writableState.errorEmitted = false;
					}
				}
				function emitErrorNT(e, t) {
					e.emit('error', t);
				}
				function errorOrDestroy(e, t) {
					var r = e._readableState;
					var n = e._writableState;
					if ((r && r.autoDestroy) || (n && n.autoDestroy)) e.destroy(t);
					else e.emit('error', t);
				}
				e.exports = { destroy, undestroy, errorOrDestroy };
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js':
			(e, t, r) => {
				'use strict';
				var n = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js'
				).codes.ERR_STREAM_PREMATURE_CLOSE;
				function once(e) {
					var t = false;
					return function () {
						if (t) return;
						t = true;
						for (var r = arguments.length, n = new Array(r), a = 0; a < r; a++) {
							n[a] = arguments[a];
						}
						e.apply(this, n);
					};
				}
				function noop() {}
				function isRequest(e) {
					return e.setHeader && typeof e.abort === 'function';
				}
				function eos(e, t, r) {
					if (typeof t === 'function') return eos(e, null, t);
					if (!t) t = {};
					r = once(r || noop);
					var a = t.readable || (t.readable !== false && e.readable);
					var i = t.writable || (t.writable !== false && e.writable);
					var o = function onlegacyfinish() {
						if (!e.writable) l();
					};
					var s = e._writableState && e._writableState.finished;
					var l = function onfinish() {
						i = false;
						s = true;
						if (!a) r.call(e);
					};
					var d = e._readableState && e._readableState.endEmitted;
					var f = function onend() {
						a = false;
						d = true;
						if (!i) r.call(e);
					};
					var u = function onerror(t) {
						r.call(e, t);
					};
					var c = function onclose() {
						var t;
						if (a && !d) {
							if (!e._readableState || !e._readableState.ended) t = new n();
							return r.call(e, t);
						}
						if (i && !s) {
							if (!e._writableState || !e._writableState.ended) t = new n();
							return r.call(e, t);
						}
					};
					var h = function onrequest() {
						e.req.on('finish', l);
					};
					if (isRequest(e)) {
						e.on('complete', l);
						e.on('abort', c);
						if (e.req) h();
						else e.on('request', h);
					} else if (i && !e._writableState) {
						e.on('end', o);
						e.on('close', o);
					}
					e.on('end', f);
					e.on('finish', l);
					if (t.error !== false) e.on('error', u);
					e.on('close', c);
					return function () {
						e.removeListener('complete', l);
						e.removeListener('abort', c);
						e.removeListener('request', h);
						if (e.req) e.req.removeListener('finish', l);
						e.removeListener('end', o);
						e.removeListener('close', o);
						e.removeListener('finish', l);
						e.removeListener('end', f);
						e.removeListener('error', u);
						e.removeListener('close', c);
					};
				}
				e.exports = eos;
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/from-browser.js':
			(e) => {
				e.exports = function () {
					throw new Error('Readable.from is not available in the browser');
				};
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/pipeline.js':
			(e, t, r) => {
				'use strict';
				var n;
				function once(e) {
					var t = false;
					return function () {
						if (t) return;
						t = true;
						e.apply(void 0, arguments);
					};
				}
				var a = r(
						'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js'
					).codes,
					i = a.ERR_MISSING_ARGS,
					o = a.ERR_STREAM_DESTROYED;
				function noop(e) {
					if (e) throw e;
				}
				function isRequest(e) {
					return e.setHeader && typeof e.abort === 'function';
				}
				function destroyer(e, t, a, i) {
					i = once(i);
					var s = false;
					e.on('close', function () {
						s = true;
					});
					if (n === undefined)
						n = r(
							'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js'
						);
					n(e, { readable: t, writable: a }, function (e) {
						if (e) return i(e);
						s = true;
						i();
					});
					var l = false;
					return function (t) {
						if (s) return;
						if (l) return;
						l = true;
						if (isRequest(e)) return e.abort();
						if (typeof e.destroy === 'function') return e.destroy();
						i(t || new o('pipe'));
					};
				}
				function call(e) {
					e();
				}
				function pipe(e, t) {
					return e.pipe(t);
				}
				function popCallback(e) {
					if (!e.length) return noop;
					if (typeof e[e.length - 1] !== 'function') return noop;
					return e.pop();
				}
				function pipeline() {
					for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) {
						t[r] = arguments[r];
					}
					var n = popCallback(t);
					if (Array.isArray(t[0])) t = t[0];
					if (t.length < 2) {
						throw new i('streams');
					}
					var a;
					var o = t.map(function (e, r) {
						var i = r < t.length - 1;
						var s = r > 0;
						return destroyer(e, i, s, function (e) {
							if (!a) a = e;
							if (e) o.forEach(call);
							if (i) return;
							o.forEach(call);
							n(a);
						});
					});
					return t.reduce(pipe);
				}
				e.exports = pipeline;
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js':
			(e, t, r) => {
				'use strict';
				var n = r(
					'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors-browser.js'
				).codes.ERR_INVALID_OPT_VALUE;
				function highWaterMarkFrom(e, t, r) {
					return e.highWaterMark != null ? e.highWaterMark : t ? e[r] : null;
				}
				function getHighWaterMark(e, t, r, a) {
					var i = highWaterMarkFrom(t, a, r);
					if (i != null) {
						if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
							var o = a ? r : 'highWaterMark';
							throw new n(o, i);
						}
						return Math.floor(i);
					}
					return e.objectMode ? 16 : 16 * 1024;
				}
				e.exports = { getHighWaterMark };
			},
		'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream-browser.js':
			(e, t, r) => {
				e.exports = r(
					'../../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js'
				).EventEmitter;
			},
		'../../node_modules/.pnpm/stream-browserify@3.0.0/node_modules/stream-browserify/index.js': (
			e,
			t,
			r
		) => {
			e.exports = Stream;
			var n = r('../../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js').EventEmitter;
			var a = r(
				'../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js'
			);
			a(Stream, n);
			Stream.Readable = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js'
			);
			Stream.Writable = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js'
			);
			Stream.Duplex = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js'
			);
			Stream.Transform = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js'
			);
			Stream.PassThrough = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_passthrough.js'
			);
			Stream.finished = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js'
			);
			Stream.pipeline = r(
				'../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/pipeline.js'
			);
			Stream.Stream = Stream;
			function Stream() {
				n.call(this);
			}
			Stream.prototype.pipe = function (e, t) {
				var r = this;
				function ondata(t) {
					if (e.writable) {
						if (false === e.write(t) && r.pause) {
							r.pause();
						}
					}
				}
				r.on('data', ondata);
				function ondrain() {
					if (r.readable && r.resume) {
						r.resume();
					}
				}
				e.on('drain', ondrain);
				if (!e._isStdio && (!t || t.end !== false)) {
					r.on('end', onend);
					r.on('close', onclose);
				}
				var a = false;
				function onend() {
					if (a) return;
					a = true;
					e.end();
				}
				function onclose() {
					if (a) return;
					a = true;
					if (typeof e.destroy === 'function') e.destroy();
				}
				function onerror(e) {
					cleanup();
					if (n.listenerCount(this, 'error') === 0) {
						throw e;
					}
				}
				r.on('error', onerror);
				e.on('error', onerror);
				function cleanup() {
					r.removeListener('data', ondata);
					e.removeListener('drain', ondrain);
					r.removeListener('end', onend);
					r.removeListener('close', onclose);
					r.removeListener('error', onerror);
					e.removeListener('error', onerror);
					r.removeListener('end', cleanup);
					r.removeListener('close', cleanup);
					e.removeListener('close', cleanup);
				}
				r.on('end', cleanup);
				r.on('close', cleanup);
				e.on('close', cleanup);
				e.emit('pipe', r);
				return e;
			};
		},
		'?2e0d': () => {},
		'?0685': () => {}
	}
]);
