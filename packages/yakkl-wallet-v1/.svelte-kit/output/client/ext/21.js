"use strict";(self["webpackChunkyakkl_wallet"]=self["webpackChunkyakkl_wallet"]||[]).push([[21],{1021:(e,a,t)=>{t.d(a,{balanceCacheManager:()=>s});var c=t(8718);class BalanceCacheManager{static instance=null;CACHE_KEY="yakkl_balance_cache";CACHE_DURATION=15*60*1e3;STALE_DURATION=10*60*1e3;cache=new Map;constructor(){this.loadFromStorage()}static getInstance(){if(!BalanceCacheManager.instance){BalanceCacheManager.instance=new BalanceCacheManager}return BalanceCacheManager.instance}getCachedBalance(e){const a=this.cache.get(e.toLowerCase());if(!a)return null;const t=Date.now()-a.timestamp;if(t>this.CACHE_DURATION){this.cache.delete(e.toLowerCase());this.saveToStorage();return null}return a}isStale(e){const a=this.cache.get(e.toLowerCase());if(!a)return false;const t=Date.now()-a.timestamp;return t>this.STALE_DURATION}setCachedBalance(e,a,t){const s={address:e.toLowerCase(),balance:a,timestamp:Date.now(),price:t};this.cache.set(e.toLowerCase(),s);this.saveToStorage();c.Rm.debug("[BalanceCacheManager] Cached balance for address:",false,{address:e.toLowerCase(),balance:a.toString(),price:t})}clearCache(){this.cache.clear();localStorage.removeItem(this.CACHE_KEY);c.Rm.info("[BalanceCacheManager] Cache cleared")}clearCachedBalance(e){this.cache.delete(e.toLowerCase());this.saveToStorage()}updatePriceForAllEntries(e){let a=0;for(const[t,c]of this.cache.entries()){if(c.price!==e){this.cache.set(t,{...c,price:e,timestamp:Date.now()});a++}}if(a>0){this.saveToStorage();c.Rm.info(`[BalanceCacheManager] Updated price for ${a} cached entries to ${e}`)}}getCachedAddresses(){return Array.from(this.cache.keys())}cleanupExpired(){const e=Date.now();let a=0;for(const[t,c]of this.cache.entries()){if(e-c.timestamp>this.CACHE_DURATION){this.cache.delete(t);a++}}if(a>0){this.saveToStorage();c.Rm.info(`[BalanceCacheManager] Cleaned up ${a} expired entries`)}}preloadBalances(e){const a=new Map;for(const t of e){const e=this.getCachedBalance(t);if(e){a.set(t.toLowerCase(),e)}}c.Rm.debug(`[BalanceCacheManager] Preloaded ${a.size}/${e.length} balances from cache`);return a}loadFromStorage(){try{const e=localStorage.getItem(this.CACHE_KEY);if(e){const a=JSON.parse(e);this.cache=new Map(Object.entries(a).map(([e,a])=>[e,{...a,balance:BigInt(a.balance)}]));this.cleanupExpired();c.Rm.debug(`[BalanceCacheManager] Loaded ${this.cache.size} entries from storage`)}}catch(e){c.Rm.warn("[BalanceCacheManager] Failed to load cache from storage:",false,e);this.cache=new Map}}saveToStorage(){try{const e=Object.fromEntries(Array.from(this.cache.entries()).map(([e,a])=>[e,{...a,balance:a.balance.toString()}]));localStorage.setItem(this.CACHE_KEY,JSON.stringify(e))}catch(e){c.Rm.warn("[BalanceCacheManager] Failed to save cache to storage:",false,e)}}getCacheStats(){const e=Date.now();let a=0;let t=0;let c=0;for(const s of this.cache.values()){const n=e-s.timestamp;if(n>this.CACHE_DURATION){c++}else if(n>this.STALE_DURATION){t++}else{a++}}return{totalEntries:this.cache.size,freshEntries:a,staleEntries:t,expiredEntries:c}}}const s=BalanceCacheManager.getInstance()}}]);