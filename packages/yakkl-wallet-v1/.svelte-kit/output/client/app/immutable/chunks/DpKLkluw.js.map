{"version":3,"file":"DpKLkluw.js","sources":["../../../../../../src/lib/managers/BalanceCacheManager.ts"],"sourcesContent":["import { log } from '$lib/managers/Logger';\nimport type { CachedBalanceData } from '$lib/utilities/accountData';\n\nexport class BalanceCacheManager {\n\tprivate static instance: BalanceCacheManager | null = null;\n\tprivate readonly CACHE_KEY = 'yakkl_balance_cache';\n\tprivate readonly CACHE_DURATION = 15 * 60 * 1000; // 15 minutes (increased from 5 to reduce API calls)\n\tprivate readonly STALE_DURATION = 10 * 60 * 1000; // 10 minutes (increased from 2 to reduce background refreshes)\n\tprivate cache: Map<string, CachedBalanceData> = new Map();\n\n\tprivate constructor() {\n\t\tthis.loadFromStorage();\n\t}\n\n\tpublic static getInstance(): BalanceCacheManager {\n\t\tif (!BalanceCacheManager.instance) {\n\t\t\tBalanceCacheManager.instance = new BalanceCacheManager();\n\t\t}\n\t\treturn BalanceCacheManager.instance;\n\t}\n\n\t/**\n\t * Get cached balance data for an address\n\t */\n\tpublic getCachedBalance(address: string): CachedBalanceData | null {\n\t\tconst cached = this.cache.get(address.toLowerCase());\n\t\tif (!cached) return null;\n\n\t\t// Check if cache is expired\n\t\tconst age = Date.now() - cached.timestamp;\n\t\tif (age > this.CACHE_DURATION) {\n\t\t\tthis.cache.delete(address.toLowerCase());\n\t\t\tthis.saveToStorage();\n\t\t\treturn null;\n\t\t}\n\n\t\treturn cached;\n\t}\n\n\t/**\n\t * Check if cached data is stale (older than 2 minutes)\n\t */\n\tpublic isStale(address: string): boolean {\n\t\tconst cached = this.cache.get(address.toLowerCase());\n\t\tif (!cached) return false;\n\n\t\tconst age = Date.now() - cached.timestamp;\n\t\treturn age > this.STALE_DURATION;\n\t}\n\n\t/**\n\t * Set balance data in cache\n\t */\n\tpublic setCachedBalance(address: string, balance: bigint, price: number): void {\n\t\tconst cacheData: CachedBalanceData = {\n\t\t\taddress: address.toLowerCase(),\n\t\t\tbalance,\n\t\t\ttimestamp: Date.now(),\n\t\t\tprice\n\t\t};\n\n\t\tthis.cache.set(address.toLowerCase(), cacheData);\n\t\tthis.saveToStorage();\n\n\t\tlog.debug('[BalanceCacheManager] Cached balance for address:', false, {\n\t\t\taddress: address.toLowerCase(),\n\t\t\tbalance: balance.toString(),\n\t\t\tprice\n\t\t});\n\t}\n\n\t/**\n\t * Clear all cached data\n\t */\n\tpublic clearCache(): void {\n\t\tthis.cache.clear();\n\t\tlocalStorage.removeItem(this.CACHE_KEY);\n\t\tlog.info('[BalanceCacheManager] Cache cleared');\n\t}\n\n\t/**\n\t * Clear cached data for specific address\n\t */\n\tpublic clearCachedBalance(address: string): void {\n\t\tthis.cache.delete(address.toLowerCase());\n\t\tthis.saveToStorage();\n\t}\n\n\t/**\n\t * Update price for all cached entries (called when price changes)\n\t */\n\tpublic updatePriceForAllEntries(newPrice: number): void {\n\t\tlet updated = 0;\n\n\t\tfor (const [address, data] of this.cache.entries()) {\n\t\t\t// Only update if price actually changed\n\t\t\tif (data.price !== newPrice) {\n\t\t\t\tthis.cache.set(address, {\n\t\t\t\t\t...data,\n\t\t\t\t\tprice: newPrice,\n\t\t\t\t\ttimestamp: Date.now() // Refresh timestamp since value changed\n\t\t\t\t});\n\t\t\t\tupdated++;\n\t\t\t}\n\t\t}\n\n\t\tif (updated > 0) {\n\t\t\tthis.saveToStorage();\n\t\t\tlog.info(`[BalanceCacheManager] Updated price for ${updated} cached entries to ${newPrice}`);\n\t\t}\n\t}\n\n\t/**\n\t * Get all cached addresses\n\t */\n\tpublic getCachedAddresses(): string[] {\n\t\treturn Array.from(this.cache.keys());\n\t}\n\n\t/**\n\t * Clean up expired entries\n\t */\n\tpublic cleanupExpired(): void {\n\t\tconst now = Date.now();\n\t\tlet cleaned = 0;\n\n\t\tfor (const [address, data] of this.cache.entries()) {\n\t\t\tif (now - data.timestamp > this.CACHE_DURATION) {\n\t\t\t\tthis.cache.delete(address);\n\t\t\t\tcleaned++;\n\t\t\t}\n\t\t}\n\n\t\tif (cleaned > 0) {\n\t\t\tthis.saveToStorage();\n\t\t\tlog.info(`[BalanceCacheManager] Cleaned up ${cleaned} expired entries`);\n\t\t}\n\t}\n\n\t/**\n\t * Preload balances for given addresses (returns cached data immediately)\n\t */\n\tpublic preloadBalances(addresses: string[]): Map<string, CachedBalanceData> {\n\t\tconst preloaded = new Map<string, CachedBalanceData>();\n\n\t\tfor (const address of addresses) {\n\t\t\tconst cached = this.getCachedBalance(address);\n\t\t\tif (cached) {\n\t\t\t\tpreloaded.set(address.toLowerCase(), cached);\n\t\t\t}\n\t\t}\n\n\t\tlog.debug(\n\t\t\t`[BalanceCacheManager] Preloaded ${preloaded.size}/${addresses.length} balances from cache`\n\t\t);\n\t\treturn preloaded;\n\t}\n\n\t/**\n\t * Load cache from localStorage\n\t */\n\tprivate loadFromStorage(): void {\n\t\ttry {\n\t\t\tconst stored = localStorage.getItem(this.CACHE_KEY);\n\t\t\tif (stored) {\n\t\t\t\tconst parsed = JSON.parse(stored);\n\t\t\t\tthis.cache = new Map(\n\t\t\t\t\tObject.entries(parsed).map(([address, data]: [string, any]) => [\n\t\t\t\t\t\taddress,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...data,\n\t\t\t\t\t\t\tbalance: BigInt(data.balance) // Convert balance back to BigInt\n\t\t\t\t\t\t}\n\t\t\t\t\t])\n\t\t\t\t);\n\n\t\t\t\t// Clean up expired entries on load\n\t\t\t\tthis.cleanupExpired();\n\n\t\t\t\tlog.debug(`[BalanceCacheManager] Loaded ${this.cache.size} entries from storage`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.warn('[BalanceCacheManager] Failed to load cache from storage:', false, error);\n\t\t\tthis.cache = new Map();\n\t\t}\n\t}\n\n\t/**\n\t * Save cache to localStorage\n\t */\n\tprivate saveToStorage(): void {\n\t\ttry {\n\t\t\tconst serializable = Object.fromEntries(\n\t\t\t\tArray.from(this.cache.entries()).map(([address, data]) => [\n\t\t\t\t\taddress,\n\t\t\t\t\t{\n\t\t\t\t\t\t...data,\n\t\t\t\t\t\tbalance: data.balance.toString() // Convert BigInt to string for JSON\n\t\t\t\t\t}\n\t\t\t\t])\n\t\t\t);\n\n\t\t\tlocalStorage.setItem(this.CACHE_KEY, JSON.stringify(serializable));\n\t\t} catch (error) {\n\t\t\tlog.warn('[BalanceCacheManager] Failed to save cache to storage:', false, error);\n\t\t}\n\t}\n\n\t/**\n\t * Get cache statistics\n\t */\n\tpublic getCacheStats(): {\n\t\ttotalEntries: number;\n\t\tfreshEntries: number;\n\t\tstaleEntries: number;\n\t\texpiredEntries: number;\n\t} {\n\t\tconst now = Date.now();\n\t\tlet fresh = 0;\n\t\tlet stale = 0;\n\t\tlet expired = 0;\n\n\t\tfor (const data of this.cache.values()) {\n\t\t\tconst age = now - data.timestamp;\n\t\t\tif (age > this.CACHE_DURATION) {\n\t\t\t\texpired++;\n\t\t\t} else if (age > this.STALE_DURATION) {\n\t\t\t\tstale++;\n\t\t\t} else {\n\t\t\t\tfresh++;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttotalEntries: this.cache.size,\n\t\t\tfreshEntries: fresh,\n\t\t\tstaleEntries: stale,\n\t\t\texpiredEntries: expired\n\t\t};\n\t}\n}\n\n// Export singleton instance\nexport const balanceCacheManager = BalanceCacheManager.getInstance();\n"],"names":["_BalanceCacheManager","constructor","__publicField","this","Map","loadFromStorage","getInstance","instance","getCachedBalance","address","cached","cache","get","toLowerCase","age","Date","now","timestamp","CACHE_DURATION","delete","saveToStorage","isStale","STALE_DURATION","setCachedBalance","balance","price","cacheData","set","log","debug","toString","clearCache","clear","localStorage","removeItem","CACHE_KEY","info","clearCachedBalance","updatePriceForAllEntries","newPrice","updated","data","entries","getCachedAddresses","Array","from","keys","cleanupExpired","cleaned","preloadBalances","addresses","preloaded","size","length","stored","getItem","parsed","JSON","parse","Object","map","BigInt","error","warn","serializable","fromEntries","setItem","stringify","getCacheStats","fresh","stale","expired","values","totalEntries","freshEntries","staleEntries","expiredEntries","BalanceCacheManager","balanceCacheManager"],"mappings":"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"}