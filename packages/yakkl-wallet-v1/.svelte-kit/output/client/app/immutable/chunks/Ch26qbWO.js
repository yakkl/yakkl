const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./DpKLkluw.js","./WDN37msH.js"])))=>i.map(i=>d[i]);
import{ap as fetchJson,aq as CoinbasePriceProvider,ar as TIMER_CHECK_PRICE_INTERVAL_TIME,k as yakklConnectionStore,$ as yakklPricingStore,_ as __vitePreload}from"./Cb2naUpm.js";import{g as get}from"./B2gA1VsD.js";import{P as PriceManager,C as CoingeckoPriceProvider}from"./CZAHYQZy.js";import{l as log}from"./WDN37msH.js";import{g as getTimerManager}from"./BKVO1wI8.js";import"./CgCfpVku.js";class KrakenPriceProvider{getAPIKey(){return""}getName(){return"Kraken"}async getMarketPrice(pair){try{if(!pair){return{provider:this.getName(),price:0,lastUpdated:new Date,status:404,message:`Invalid pair - ${pair}`}}pair=await this.getProviderPairFormat(pair);const json=await fetchJson(`https://api.kraken.com/0/public/Ticker?pair=${pair}`);const result=json.result[Object.keys(json.result)[0]];if(!result||!result.c||!result.c[0]){throw new Error("Invalid JSON structure or missing data from Kraken")}return{provider:this.getName(),price:parseFloat(result.c[0]),lastUpdated:new Date,status:0,message:""}}catch(e){log.error("KrakenPriceProvider - getPrice - error",false,e);return{provider:this.getName(),price:0,lastUpdated:new Date,status:404,message:`Error - ${e}`}}}async getProviderPairFormat(pair){let[token,symbol]=pair.split("-");if(!token||!symbol){throw new Error(`Invalid pair - ${pair}`)}switch(token){case"ETH":pair="ETHUSDC";break;case"WETH":pair="ETHWETH";break;case"WBTC":pair="WBTCUSD";break;case"PEPE":pair="PEPEUSD";break}return pair.replace("-","")}}let checkPricesProvider="coinbase";let checkPricesInterval=TIMER_CHECK_PRICE_INTERVAL_TIME;const priceManager=new PriceManager([{provider:new CoinbasePriceProvider,weight:5},{provider:new CoingeckoPriceProvider,weight:3},{provider:new KrakenPriceProvider,weight:2}]);async function checkPricesCallback(symbol="ETH-USD"){var _a;try{if(get(yakklConnectionStore)===true){const result=await priceManager.getMarketPrice(symbol);if(result){const prevPrice=((_a=get(yakklPricingStore))==null?void 0:_a.price)??0;yakklPricingStore.set({provider:result.provider,id:"checkPricesCallback",price:result.price,prevPrice:prevPrice});const{balanceCacheManager:balanceCacheManager}=await __vitePreload(async()=>{const{balanceCacheManager:balanceCacheManager2}=await import("./DpKLkluw.js");return{balanceCacheManager:balanceCacheManager2}},true?__vite__mapDeps([0,1]):void 0,import.meta.url);if(result.price&&result.price>0){balanceCacheManager.updatePriceForAllEntries(result.price);log.debug("[checkPricesCallback] Updated all cached entries with new price:",false,{newPrice:result.price})}}}else{log.error("checkPrices:",false,"Internet connection may be down.")}}catch(e){log.error(`checkPricesCallback: ${e}`)}}function stopCheckPrices(){getTimerManager().stopTimer("prices_checkPrices")}async function startPricingChecks(symbol="ETH-USD"){startCheckPrices(checkPricesProvider,checkPricesInterval,symbol)}function startCheckPrices(provider="coinbase",ms=TIMER_CHECK_PRICE_INTERVAL_TIME,symbol="ETH-USD"){stopCheckPrices();try{if(ms>0){if(getTimerManager().isRunning("prices_checkPrices")){return}getTimerManager().addTimer("prices_checkPrices",()=>{checkPricesCallback(symbol)},ms);getTimerManager().startTimer("prices_checkPrices")}}catch(e){log.error(`startCheckPrices: ${e}`);getTimerManager().stopTimer("prices_checkPrices")}}export{KrakenPriceProvider as K,startCheckPrices as a,startPricingChecks as b,checkPricesCallback as c,stopCheckPrices as s};
//# sourceMappingURL=Ch26qbWO.js.map
