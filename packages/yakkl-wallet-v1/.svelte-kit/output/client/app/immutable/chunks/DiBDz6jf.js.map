{"version":3,"file":"DiBDz6jf.js","sources":["../../../../../../../../node_modules/.pnpm/@floating-ui+utils@0.2.9/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../../../../../../../../node_modules/.pnpm/@floating-ui+core@1.7.1/node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../../../../../../../../node_modules/.pnpm/@floating-ui+utils@0.2.9/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","../../../../../../../../node_modules/.pnpm/@floating-ui+dom@1.7.1/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => d.overflows[0] > 0 && getSideAxis(d.placement) === initialSideAxis)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [':popover-open', ':modal'].some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return ['transform', 'translate', 'scale', 'rotate', 'perspective'].some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, arrow as arrow$1, autoPlacement as autoPlacement$1, detectOverflow as detectOverflow$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n  // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n"],"names":["sides","min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","value","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","includes","getAlignmentAxis","getAlignmentSides","rects","rtl","alignment","alignmentAxis","length","mainAlignmentSide","reference","floating","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","replace","getSideList","side","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","map","concat","expandPaddingObject","padding","getPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","sideAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","computePosition","async","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","arrow","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","centerOffset","flip","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","detectOverflowOptions","initialSideAxis","isBasePlacement","hasFallbackAxisSideDirection","push","placements","overflow","overflows","overflowsData","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","ignoreCrossAxisOverflow","d","resetPlacement","sort","a","b","_overflowsData$filter2","currentSideAxis","reduce","acc","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","_middlewareData$offse","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","enabled","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","size","_state$middlewareData","_state$middlewareData2","apply","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isTopLayer","selector","matches","e","isContainingBlock","elementOrCss","webkit","isWebKit","css","containerType","backdropFilter","willChange","contain","getContainingBlock","currentNode","getParentNode","isLastTraversableNode","CSS","supports","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","shouldAddVisualOffsets","isFixed","floatingOffsetParent","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getHTMLOffset","scroll","ignoreScrollbarX","htmlRect","topLayer","isOffsetParentAnElement","offsetRect","htmlOffset","getClientRects","Array","from","getDocumentRect","html","scrollWidth","clientWidth","scrollHeight","clientHeight","getViewportRect","visualViewportBased","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","position","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","ancestor","set","elementClippingAncestors","this","_c","clippingAncestors","firstClippingAncestor","clippingRect","accRect","getRectRelativeToOffsetParent","setLeftRTLScrollbarOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","getOffsetParentFn","getDimensionsFn","floatingDimensions","rectsAreEqual","observeMove","onMove","io","timeoutId","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","insetTop","insetRight","insetBottom","insetLeft","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","IntersectionObserver","_e","observe","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","frameId","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset$1","shift$1","flip$1","size$1","hide$1","arrow$1","limitShift$1","Map","mergedOptions","platformWithCache","computePosition$1"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}