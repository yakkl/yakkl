var __defProp=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value:value}):obj[key]=value;var __publicField=(obj,key,value)=>__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);import{w as writable}from"./B2gA1VsD.js";import{UnifiedTimerManager}from"./z-nmOEXa.js";const timerManagerStore=writable(null);const _TimerManager=class _TimerManager{constructor(){__publicField(this,"timers",new Map);__publicField(this,"unifiedManager");if(_TimerManager.instance){if(!timerManagerStore){timerManagerStore.set(this)}return _TimerManager.instance}this.unifiedManager=UnifiedTimerManager.getInstance();_TimerManager.instance=this;timerManagerStore.set(this)}static getInstance(){return _TimerManager.instance??new _TimerManager}static clearInstance(){if(this.instance){this.instance.unifiedManager.clearAll()}this.instance=null;timerManagerStore.set(null)}static resetInstance(){this.clearInstance();return this.getInstance()}addTimer(id,callback,duration){this.timers.set(id,{id:id,callback:callback,duration:duration,handleIntervalID:null});this.unifiedManager.addInterval(id,callback,duration)}hasTimer(id){return this.timers.has(id)}startTimer(id){this.unifiedManager.startInterval(id)}startTimerDelayed(id){this.unifiedManager.startInterval(id)}startTimerImmediate(id){this.unifiedManager.startInterval(id,true)}stopTimer(id){this.unifiedManager.stopInterval(id)}startAll(){this.timers.forEach((_,id)=>this.unifiedManager.startInterval(id))}stopAll(){this.timers.forEach((_,id)=>this.unifiedManager.stopInterval(id))}removeTimer(id){this.unifiedManager.removeInterval(id);this.timers.delete(id)}removeAll(){this.unifiedManager.clearAll();this.timers.clear()}isRunning(id){return this.unifiedManager.isIntervalRunning(id)}getTimeoutID(_id){return null}getRunningTimers(){return this.unifiedManager.getRunningTimers().intervals}listTimers(){return Array.from(this.timers.keys())}};__publicField(_TimerManager,"instance",null);let TimerManager=_TimerManager;const getTimerManager=()=>TimerManager.getInstance();export{TimerManager as T,getTimerManager as g};
//# sourceMappingURL=BKVO1wI8.js.map
