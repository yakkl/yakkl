{"version":3,"mappings":"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","names":["activeNotifications","Set","NotificationService","createNotification","options","id","browser_ext","notificationId","this","DEFAULT_ID","notificationOptions","iconUrl","runtime","getURL","DEFAULT_ICON","IMPORTANT_NOTIFICATIONS","some","prefix","startsWith","requireInteraction","priority","silent","eventTime","Date","now","log","info","notifications","create","add","broadcastNotificationToUI","error","warn","sendMessage","type","title","message","timestamp","catch","debug","clear","delete","e","clearAll","sendBasic","sendList","items","sendImage","imageUrl","sendProgress","progress","Math","max","min","sendSecurityAlert","enhancedOptions","_a","result","sendLockdownWarning","delayMs","round","contextMessage","sendWalletLocked","focusPopupWindowEnhanced","windows","getAll","windowTypes","extensionWindow","find","window","window2","tabs","tab","url","includes","update","focused","drawAttention","setUrgentBadgeEnhanced","badgeText","action","setBadgeText","text","setBadgeBackgroundColor","color","setIcon","path","iconError","startBadgeCountdownEnhanced","seconds","clearBadgeCountdown","timeLeft","_badgeCountdownInterval","setInterval","async","clearUrgentBadgeEnhanced","toString","intervalId","clearInterval","playUrgentSoundEnhanced","sendLockdownWarningEnhanced","delaySeconds","ceil","windowFocused","baseNotificationOptions","fullNotificationOptions","err","_b","sendSecurityAlertEnhanced","clearAllAlertsEnhanced","_isClearing","_clearingPromise","_performClearAllAlertsEnhanced","_urgentSoundContext","close","Object","keys","length","clearPromises","map","Promise","all","_c","alarms","clearAlertsUIOnly","audioContext","__yakklAudioContext","state","__yakklTitleFlashInterval","__yakklOriginalTitle","document","__yakklCountdownInterval","hideSecurityWarning","__vitePreload","import","__VITE_PRELOAD__","clearEnhanced","i","testEnhancedFeatures","__publicField","sendNotificationMessage","messageText"],"ignoreList":[],"sources":["../../../../../../src/lib/common/notifications.ts"],"sourcesContent":["import type {\n\tBasicNotificationOptions,\n\tCreateNotificationOptions,\n\tImageNotificationOptions,\n\tListNotificationOptions,\n\tNotificationOptions,\n\tProgressNotificationOptions\n} from './types';\nimport { startLockIconTimer, stopLockIconTimer } from '$lib/extensions/chrome/iconTimer';\nimport { browser_ext } from './environment';\nimport { log } from '$lib/common/logger-wrapper';\nimport type { Notifications } from 'webextension-polyfill';\nimport { setBadgeText } from '$lib/utilities';\n\nconst DEFAULT_ICON = '/images/logoBullLock48x48.png';\n\n// List of notification IDs that have been used\n// Helpful for tracking and cleaning up notifications\nconst activeNotifications = new Set<string>();\n\n// Flexible notification service class\nexport class NotificationService {\n\tprivate static readonly DEFAULT_ID = 'yakkl-notification';\n\tprivate static readonly DEFAULT_ICON = '/images/logoBullLock48x48.png';\n\tprivate static clearTimeout: number | null = null;\n\n\t// Enhanced features tracking\n\tprivate static _badgeCountdownInterval: number | null = null;\n\tprivate static _urgentSoundContext: AudioContext | null = null;\n\tprivate static _isClearing: boolean = false;\n\tprivate static _clearingPromise: Promise<void> | null = null;\n\n\t// Notifications that should be shown in-app and as browser notifications\n\tprivate static readonly IMPORTANT_NOTIFICATIONS = [\n\t\t'security-alert',\n\t\t'lockdown-warning',\n\t\t'wallet-locked'\n\t];\n\n\tprivate static async createNotification(\n\t\toptions: NotificationOptions,\n\t\tid?: string\n\t): Promise<string | null> {\n\t\tif (!browser_ext) return null;\n\n\t\ttry {\n\t\t\tconst notificationId = id || this.DEFAULT_ID;\n\t\t\tconst notificationOptions: CreateNotificationOptions = {\n\t\t\t\t...options,\n\t\t\t\ticonUrl: browser_ext.runtime.getURL(this.DEFAULT_ICON),\n\t\t\t\t// Force specific settings for important notifications\n\t\t\t\t...(this.IMPORTANT_NOTIFICATIONS.some((prefix) => notificationId.startsWith(prefix))\n\t\t\t\t\t? {\n\t\t\t\t\t\t\trequireInteraction: true,\n\t\t\t\t\t\t\tpriority: 2,\n\t\t\t\t\t\t\tsilent: false,\n\t\t\t\t\t\t\teventTime: Date.now() // Set event time to now for better visibility\n\t\t\t\t\t\t}\n\t\t\t\t\t: {})\n\t\t\t};\n\n\t\t\tlog.info('createNotification - notificationOptions:', false, notificationOptions);\n\n\t\t\t// Create the notification\n\t\t\tawait browser_ext.notifications.create(notificationId, notificationOptions);\n\n\t\t\t// Track this notification\n\t\t\tactiveNotifications.add(notificationId);\n\n\t\t\t// For important notifications, also send a message to UI contexts\n\t\t\tif (this.IMPORTANT_NOTIFICATIONS.some((prefix) => notificationId.startsWith(prefix))) {\n\t\t\t\tthis.broadcastNotificationToUI(notificationId, notificationOptions);\n\t\t\t}\n\n\t\t\treturn notificationId;\n\t\t} catch (error) {\n\t\t\tlog.warn('Error creating notification:', false, error);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Broadcast important notifications to UI contexts\n\t * This ensures they're visible even when the browser doesn't show the notification\n\t */\n\tprivate static broadcastNotificationToUI(id: string, options: CreateNotificationOptions): void {\n\t\tif (!browser_ext) return;\n\n\t\ttry {\n\t\t\tbrowser_ext.runtime\n\t\t\t\t.sendMessage({\n\t\t\t\t\ttype: 'IMPORTANT_NOTIFICATION',\n\t\t\t\t\tnotificationId: id,\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tmessage: options.message,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\trequireInteraction: options.requireInteraction,\n\t\t\t\t\t\tpriority: options.priority,\n\t\t\t\t\t\tsilent: options.silent\n\t\t\t\t\t},\n\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tlog.debug('Error broadcasting notification to UI:', false, error);\n\t\t\t\t\t// Don't throw - this is just a backup notification channel\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\t// Ignore errors - this is just a backup notification channel\n\t\t}\n\t}\n\n\t/**\n\t * Clear a notification by ID\n\t * @param id The notification ID to clear\n\t * @returns Promise that resolves when the notification is cleared\n\t */\n\tstatic async clear(id: string = this.DEFAULT_ID): Promise<boolean> {\n\t\tif (!browser_ext) return false;\n\n\t\ttry {\n\t\t\tawait browser_ext.notifications.clear(id);\n\t\t\tactiveNotifications.delete(id);\n\n\t\t\t// Also clear from UI contexts\n\t\t\ttry {\n\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\ttype: 'CLEAR_NOTIFICATION',\n\t\t\t\t\t\tnotificationId: id,\n\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t// Ignore errors\n\t\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore errors\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlog.warn('Error clearing notification:', false, { id, error });\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Clear all active notifications\n\t */\n\tstatic async clearAll(): Promise<void> {\n\t\tif (!browser_ext) return;\n\n\t\tconst notifications = [...activeNotifications];\n\t\tfor (const id of notifications) {\n\t\t\tawait this.clear(id);\n\t\t}\n\t}\n\n\t/**\n\t * Send a basic notification\n\t */\n\tstatic async sendBasic(\n\t\ttitle: string,\n\t\tmessage: string,\n\t\toptions: Partial<Omit<BasicNotificationOptions, 'type' | 'title' | 'message'>> = {},\n\t\tid?: string\n\t): Promise<string | null> {\n\t\tlog.info('sendBasic - title:', false, title);\n\n\t\treturn await this.createNotification(\n\t\t\t{\n\t\t\t\ttype: 'basic',\n\t\t\t\ttitle,\n\t\t\t\tmessage,\n\t\t\t\t...options\n\t\t\t} as BasicNotificationOptions,\n\t\t\tid\n\t\t);\n\t}\n\n\t/**\n\t * Send a list notification\n\t */\n\tstatic async sendList(\n\t\ttitle: string,\n\t\tmessage: string,\n\t\titems: Array<{ title: string; message: string }>,\n\t\toptions: Partial<Omit<ListNotificationOptions, 'type' | 'title' | 'message' | 'items'>> = {},\n\t\tid?: string\n\t): Promise<string | null> {\n\t\treturn await this.createNotification(\n\t\t\t{\n\t\t\t\ttype: 'list',\n\t\t\t\ttitle,\n\t\t\t\tmessage,\n\t\t\t\titems,\n\t\t\t\t...options\n\t\t\t} as ListNotificationOptions,\n\t\t\tid\n\t\t);\n\t}\n\n\t/**\n\t * Send an image notification\n\t */\n\tstatic async sendImage(\n\t\ttitle: string,\n\t\tmessage: string,\n\t\timageUrl: string,\n\t\toptions: Partial<\n\t\t\tOmit<ImageNotificationOptions, 'type' | 'title' | 'message' | 'imageUrl'>\n\t\t> = {},\n\t\tid?: string\n\t): Promise<string | null> {\n\t\treturn await this.createNotification(\n\t\t\t{\n\t\t\t\ttype: 'image',\n\t\t\t\ttitle,\n\t\t\t\tmessage,\n\t\t\t\timageUrl,\n\t\t\t\t...options\n\t\t\t} as ImageNotificationOptions,\n\t\t\tid\n\t\t);\n\t}\n\n\t/**\n\t * Send a progress notification\n\t */\n\tstatic async sendProgress(\n\t\ttitle: string,\n\t\tmessage: string,\n\t\tprogress: number,\n\t\toptions: Partial<\n\t\t\tOmit<ProgressNotificationOptions, 'type' | 'title' | 'message' | 'progress'>\n\t\t> = {},\n\t\tid?: string\n\t): Promise<string | null> {\n\t\treturn await this.createNotification(\n\t\t\t{\n\t\t\t\ttype: 'progress',\n\t\t\t\ttitle,\n\t\t\t\tmessage,\n\t\t\t\tprogress: Math.max(0, Math.min(100, progress)),\n\t\t\t\t...options\n\t\t\t} as ProgressNotificationOptions,\n\t\t\tid\n\t\t);\n\t}\n\n\t/**\n\t * Send a security alert with enhanced visibility\n\t */\n\tstatic async sendSecurityAlert(\n\t\tmessage: string,\n\t\toptions: Partial<Omit<BasicNotificationOptions, 'type' | 'title' | 'message'>> = {},\n\t\tid?: string\n\t): Promise<string | null> {\n\t\tlog.info('sendSecurityAlert - message:', false, message);\n\n\t\tconst notificationId = id || `security-alert-${Date.now()}`;\n\n\t\t// Ensure specific options for security alerts\n\t\tconst enhancedOptions = {\n\t\t\trequireInteraction: true, // Keep notification visible until user interacts\n\t\t\tpriority: 2 as const, // High priority\n\t\t\tsilent: false, // Play sound\n\t\t\ticonUrl: browser_ext?.runtime.getURL('/images/logoBullLock48x48.png'),\n\t\t\ttype: 'basic',\n\t\t\t...options,\n\t\t\t// Critical options that help visibility:\n\t\t\teventTime: Date.now() // Set event time to now\n\t\t};\n\n\t\ttry {\n\t\t\t// First try creating a notification through our standard method\n\t\t\tconst result = await this.sendBasic(\n\t\t\t\t'🔒 Security Alert',\n\t\t\t\tmessage,\n\t\t\t\tenhancedOptions,\n\t\t\t\tnotificationId\n\t\t\t);\n\n\t\t\t// Double ensure that the UI gets notified about this important message\n\t\t\t// This helps with visibility when the browser notification might be suppressed\n\t\t\tif (\n\t\t\t\tbrowser_ext &&\n\t\t\t\tthis.IMPORTANT_NOTIFICATIONS.some((prefix) => notificationId.startsWith(prefix))\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\t\ttype: 'SECURITY_ALERT',\n\t\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\t\toptions: enhancedOptions,\n\t\t\t\t\t\t\tid: notificationId,\n\t\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t// Ignore errors, this is just a backup\n\t\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Ignore errors in the backup notification method\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tlog.warn('Failed to send security alert notification:', false, error);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Send an imminent lockdown warning notification\n\t * @param delayMs Time in ms until lockdown occurs\n\t */\n\tstatic async sendLockdownWarning(\n\t\tdelayMs: number = 30000,\n\t\toptions: Partial<Omit<BasicNotificationOptions, 'type' | 'title' | 'message'>> = {}\n\t): Promise<string | null> {\n\t\tconst message = `YAKKL will be locked soon due to inactivity. You have ${Math.round(delayMs / 1000)} seconds remaining.`;\n\n\t\t// Create a unique ID for this lockdown warning\n\t\tconst notificationId = `lockdown-warning-${Date.now()}`;\n\n\t\t// Send notification\n\t\tconst result = await this.sendSecurityAlert(\n\t\t\tmessage,\n\t\t\t{\n\t\t\t\tcontextMessage: 'Use YAKKL to prevent automatic lockdown',\n\t\t\t\trequireInteraction: true,\n\t\t\t\tpriority: 2,\n\t\t\t\t...options\n\t\t\t},\n\t\t\tnotificationId\n\t\t);\n\n\t\t// Also send a special lockdown warning message that the UI can display prominently\n\t\tif (browser_ext) {\n\t\t\ttry {\n\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\ttype: 'LOCKDOWN_WARNING',\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t\tdelayMs: delayMs\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t// Ignore errors\n\t\t\t\t\t\tlog.debug('Error sending lockdown warning message:', false, e);\n\t\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore errors\n\t\t\t\tlog.debug('Error sending lockdown warning message:', false, e);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Send a wallet locked notification\n\t */\n\tstatic async sendWalletLocked(\n\t\toptions: Partial<Omit<BasicNotificationOptions, 'type' | 'title' | 'message'>> = {}\n\t): Promise<string | null> {\n\t\treturn await this.sendSecurityAlert(\n\t\t\t'Your YAKKL wallet has been locked due to inactivity.',\n\t\t\t{\n\t\t\t\trequireInteraction: false, // Don't need interaction for this one\n\t\t\t\tpriority: 2,\n\t\t\t\t...options\n\t\t\t},\n\t\t\t'wallet-locked'\n\t\t);\n\t}\n\n\t/**\n\t * Enhanced window focus method - brings popup to front and gets attention\n\t */\n\tprivate static async focusPopupWindowEnhanced(): Promise<boolean> {\n\t\ttry {\n\t\t\tif (!browser_ext?.windows) return false;\n\n\t\t\t// Get all windows\n\t\t\tconst windows = await browser_ext.windows.getAll({ windowTypes: ['popup'] });\n\n\t\t\t// Find our extension popup window\n\t\t\tconst extensionWindow = windows.find(\n\t\t\t\t(window) =>\n\t\t\t\t\twindow.type === 'popup' &&\n\t\t\t\t\twindow.tabs?.some((tab) => tab.url?.includes(browser_ext.runtime.id))\n\t\t\t);\n\n\t\t\tif (extensionWindow?.id) {\n\t\t\t\t// Bring window to front and focus it\n\t\t\t\tawait browser_ext.windows.update(extensionWindow.id, {\n\t\t\t\t\tfocused: true,\n\t\t\t\t\tdrawAttention: true\n\t\t\t\t});\n\n\t\t\t\tlog.info('[NotificationService] Popup window focused and attention drawn');\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tlog.debug('[NotificationService] Extension popup window not found');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to focus popup window:', false, error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Enhanced badge management - sets urgent state with countdown\n\t */\n\tprivate static async setUrgentBadgeEnhanced(badgeText: string = '⚠️'): Promise<void> {\n\t\ttry {\n\t\t\tif (!browser_ext?.action) return;\n\n\t\t\t// Set badge with warning\n\t\t\tawait browser_ext.action.setBadgeText({ text: badgeText });\n\t\t\tawait browser_ext.action.setBadgeBackgroundColor({ color: '#ff0000' });\n\n\t\t\t// Try to change icon to indicate urgency (if urgent icons exist)\n\t\t\ttry {\n\t\t\t\tawait browser_ext.action.setIcon({\n\t\t\t\t\tpath: {\n\t\t\t\t\t\t16: '/images/logoUrgentBullUnlock16x16.png',\n\t\t\t\t\t\t32: '/images/logoUrgentBullUnlock32x32.png',\n\t\t\t\t\t\t48: '/images/logoUrgentBullUnlock48x48.png',\n\t\t\t\t\t\t96: '/images/logoUrgentBullUnlock96x96.png',\n\t\t\t\t\t\t128: '/images/logoUrgentBullUnlock128x128.png'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (iconError) {\n\t\t\t\t// Fallback to default icon if urgent icons don't exist\n\t\t\t\tlog.debug('[NotificationService] Urgent icons not found, using default');\n\t\t\t}\n\n\t\t\tlog.info('[NotificationService] Enhanced urgent badge state set');\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to set enhanced urgent badge:', false, error);\n\t\t}\n\t}\n\n\t/**\n\t * Enhanced badge countdown - shows remaining time with proper cleanup\n\t */\n\tprivate static startBadgeCountdownEnhanced(seconds: number): void {\n\t\t// Clear any existing countdown first\n\t\tthis.clearBadgeCountdown();\n\n\t\tlet timeLeft = seconds;\n\n\t\tif (typeof window !== 'undefined') {\n\t\t\tthis._badgeCountdownInterval = window.setInterval(async () => {\n\t\t\t\ttimeLeft--;\n\n\t\t\t\tif (timeLeft <= 0) {\n\t\t\t\t\tthis.clearBadgeCountdown();\n\t\t\t\t\tawait this.clearUrgentBadgeEnhanced();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Update badge with remaining time\n\t\t\t\tif (browser_ext?.action) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait browser_ext.action.setBadgeText({ text: timeLeft.toString() });\n\n\t\t\t\t\t\t// Change badge color as time gets more urgent\n\t\t\t\t\t\tif (timeLeft <= 5) {\n\t\t\t\t\t\t\tawait browser_ext.action.setBadgeBackgroundColor({ color: '#ff0000' }); // Red\n\t\t\t\t\t\t} else if (timeLeft <= 10) {\n\t\t\t\t\t\t\tawait browser_ext.action.setBadgeBackgroundColor({ color: '#ff8800' }); // Orange\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait browser_ext.action.setBadgeBackgroundColor({ color: '#ffaa00' }); // Yellow\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlog.debug('Badge update failed:', false, error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 1000);\n\n\t\t\tlog.info('[NotificationService] Badge countdown started:', false, {\n\t\t\t\tseconds,\n\t\t\t\tintervalId: this._badgeCountdownInterval\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Clear badge countdown interval\n\t */\n\tprivate static clearBadgeCountdown(): void {\n\t\tif (this._badgeCountdownInterval) {\n\t\t\tclearInterval(this._badgeCountdownInterval);\n\t\t\tthis._badgeCountdownInterval = null;\n\t\t\tsetBadgeText('');\n\t\t\tlog.info('[NotificationService] Badge countdown interval cleared');\n\t\t}\n\t}\n\n\t/**\n\t * Clear enhanced urgent badge state\n\t */\n\tprivate static async clearUrgentBadgeEnhanced(): Promise<void> {\n\t\ttry {\n\t\t\tif (!browser_ext?.action) return;\n\n\t\t\t// Clear badge countdown first\n\t\t\tthis.clearBadgeCountdown();\n\n\t\t\t// Clear badge\n\t\t\tawait browser_ext.action.setBadgeText({ text: '' });\n\n\t\t\t// Restore normal icon\n\t\t\tawait browser_ext.action.setIcon({\n\t\t\t\tpath: {\n\t\t\t\t\t16: '/images/logoBullFav16x16.png',\n\t\t\t\t\t32: '/images/logoBullFav32x32.png',\n\t\t\t\t\t48: '/images/logoBullFav48x48.png',\n\t\t\t\t\t96: '/images/logoBullFav96x96.png',\n\t\t\t\t\t128: '/images/logoBullFav128x128.png'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlog.info('[NotificationService] Enhanced urgent badge state cleared');\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to clear enhanced urgent badge:', false, error);\n\t\t}\n\t}\n\n\t/**\n\t * Enhanced sound alert system with proper cleanup\n\t */\n\tprivate static async playUrgentSoundEnhanced(): Promise<void> {\n\t\ttry {\n\t\t\t// Send message to UI contexts to play sound once\n\t\t\tif (browser_ext?.runtime) {\n\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\ttype: 'PLAY_URGENT_SOUND',\n\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tlog.debug('Error sending sound request to UI:', false, error);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tlog.info('[NotificationService] Enhanced urgent sound request sent');\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to play enhanced urgent sound:', false, error);\n\t\t}\n\t}\n\n\t/**\n\t * Enhanced periodic reminders for hidden popups\n\t */\n\t// private static showPeriodicRemindersEnhanced(totalSeconds: number): void {\n\t//   const intervals = [\n\t//     Math.floor(totalSeconds * 0.75), // 75% of time remaining\n\t//     Math.floor(totalSeconds * 0.5),  // 50% of time remaining\n\t//     Math.floor(totalSeconds * 0.25), // 25% of time remaining\n\t//     5 // Final 5 second warning\n\t//   ];\n\n\t//   intervals.forEach((triggerTime, index) => {\n\t//     if (triggerTime > 0 && triggerTime < totalSeconds) {\n\t//       setTimeout(async () => {\n\t//         // Check if popup is still hidden\n\t//         const windowFocused = await this.focusPopupWindowEnhanced();\n\n\t//         if (!windowFocused && browser_ext?.notifications) {\n\t//           const timeLeft = triggerTime;\n\t//           const notificationId = `lockdown-reminder-enhanced-${index}`;\n\n\t//           // Create proper notification options\n\t//           const reminderOptions: CreateNotificationOptions = {\n\t//             type: 'basic',\n\t//             title: '⚠️ YAKKL URGENT REMINDER',\n\t//             message: `Only ${timeLeft} seconds left! Click to prevent wallet lockdown!`,\n\t//             priority: 2,\n\t//             requireInteraction: true,\n\t//             silent: false,\n\t//             eventTime: Date.now(),\n\t//             iconUrl: browser_ext.runtime.getURL(this.DEFAULT_ICON)\n\t//           };\n\n\t//           await browser_ext.notifications.create(notificationId, reminderOptions);\n\n\t//           // Add to tracking\n\t//           activeNotifications.add(notificationId);\n\n\t//           // Play sound again for urgent reminders\n\t//           if (timeLeft <= 10) {\n\t//             this.playUrgentSoundEnhanced();\n\t//           }\n\t//         }\n\t//       }, (totalSeconds - triggerTime) * 1000);\n\t//     }\n\t//   });\n\t// }\n\n\t/**\n\t * ENHANCED VERSION: Send an imminent lockdown warning with full attention features\n\t * @param delayMs Time in ms until lockdown occurs\n\t * @param options Additional notification options\n\t */\n\tstatic async sendLockdownWarningEnhanced(\n\t\tdelayMs: number = 30000,\n\t\toptions: Partial<BasicNotificationOptions> = {}\n\t): Promise<string | null> {\n\t\ttry {\n\t\t\tconst delaySeconds = Math.ceil(delayMs / 1000);\n\n\t\t\tlog.info(\n\t\t\t\t'[NotificationService] sendLockdownWarningEnhanced called with full attention features',\n\t\t\t\tfalse,\n\t\t\t\t{ delayMs, delaySeconds, options }\n\t\t\t);\n\n\t\t\t// 1. Set urgent visual state on extension icon with countdown\n\t\t\tawait this.setUrgentBadgeEnhanced(`${delaySeconds}`);\n\n\t\t\t// 2. Try to focus the popup window\n\t\t\tconst windowFocused = await this.focusPopupWindowEnhanced();\n\n\t\t\t// 3. Create enhanced browser notification\n\t\t\tconst message = `YAKKL will be locked in ${delaySeconds} seconds due to inactivity. Click extension or this notification to stay active!`;\n\t\t\tconst notificationId = `lockdown-warning-enhanced-${Date.now()}`;\n\n\t\t\tlet result: string | null = null;\n\t\t\tif (browser_ext?.notifications) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create the base notification options\n\t\t\t\t\tconst baseNotificationOptions: BasicNotificationOptions = {\n\t\t\t\t\t\ttype: 'basic',\n\t\t\t\t\t\ttitle: '🚨 YAKKL SECURITY ALERT',\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\tpriority: 2,\n\t\t\t\t\t\trequireInteraction: true,\n\t\t\t\t\t\tsilent: false,\n\t\t\t\t\t\teventTime: Date.now(),\n\t\t\t\t\t\t...options\n\t\t\t\t\t};\n\n\t\t\t\t\t// Create the full notification options with icon\n\t\t\t\t\tconst fullNotificationOptions: CreateNotificationOptions = {\n\t\t\t\t\t\t...baseNotificationOptions,\n\t\t\t\t\t\ticonUrl: browser_ext.runtime.getURL(this.DEFAULT_ICON)\n\t\t\t\t\t};\n\n\t\t\t\t\tawait browser_ext.notifications.create(notificationId, fullNotificationOptions);\n\n\t\t\t\t\tactiveNotifications.add(notificationId);\n\t\t\t\t\tresult = notificationId;\n\t\t\t\t\tlog.info('[NotificationService] Enhanced browser notification created');\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlog.warn(\n\t\t\t\t\t\t'[NotificationService] Failed to create enhanced browser notification:',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\terr\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 4. Play urgent sound\n\t\t\tawait this.playUrgentSoundEnhanced();\n\n\t\t\t// 5. Send enhanced message to UI contexts for in-app warning\n\t\t\tif (browser_ext?.runtime) {\n\t\t\t\ttry {\n\t\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\t\ttype: 'LOCKDOWN_WARNING_ENHANCED',\n\t\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t\t\tdelayMs: delayMs,\n\t\t\t\t\t\t\tdelaySeconds: delaySeconds,\n\t\t\t\t\t\t\tnotificationId: notificationId,\n\t\t\t\t\t\t\twindowFocused: windowFocused\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tlog.warn('Error sending enhanced lockdown warning to UI:', false, error);\n\t\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.warn('Error sending enhanced lockdown warning to UI:', false, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. Show periodic reminders if window isn't focused\n\t\t\t// if (!windowFocused) {\n\t\t\t//   this.showPeriodicRemindersEnhanced(delaySeconds);\n\t\t\t// }\n\n\t\t\t// 7. Start badge countdown\n\t\t\tthis.startBadgeCountdownEnhanced(delaySeconds);\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Error in sendLockdownWarningEnhanced:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * ENHANCED VERSION: Send a security alert with full attention features\n\t */\n\tstatic async sendSecurityAlertEnhanced(\n\t\tmessage: string,\n\t\toptions: Partial<BasicNotificationOptions> = {},\n\t\tid?: string\n\t): Promise<string | null> {\n\t\tlog.info('[NotificationService] sendSecurityAlertEnhanced called:', false, message);\n\n\t\tconst notificationId = id || `security-alert-enhanced-${Date.now()}`;\n\n\t\ttry {\n\t\t\t// 1. Focus popup window\n\t\t\tawait this.focusPopupWindowEnhanced();\n\n\t\t\t// 2. Set urgent badge\n\t\t\tawait this.setUrgentBadgeEnhanced('🚨');\n\n\t\t\t// 3. Play urgent sound\n\t\t\tawait this.playUrgentSoundEnhanced();\n\n\t\t\t// 4. Create enhanced notification using existing method with enhanced options\n\t\t\tconst enhancedOptions: Partial<BasicNotificationOptions> = {\n\t\t\t\trequireInteraction: true,\n\t\t\t\tpriority: 2,\n\t\t\t\tsilent: false,\n\t\t\t\teventTime: Date.now(),\n\t\t\t\t...options\n\t\t\t};\n\n\t\t\tconst result = await this.sendSecurityAlert(message, enhancedOptions, notificationId);\n\n\t\t\t// 5. Send enhanced message to UI contexts\n\t\t\tif (browser_ext?.runtime) {\n\t\t\t\ttry {\n\t\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\t\ttype: 'SECURITY_ALERT_ENHANCED',\n\t\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\t\tid: notificationId,\n\t\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t// Ignore errors, this is just a backup\n\t\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Ignore errors\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to send enhanced security alert:', false, error);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Clear all enhanced alerts with proper synchronization and debouncing\n\t */\n\tstatic async clearAllAlertsEnhanced(): Promise<void> {\n\t\t// Prevent multiple simultaneous clearing operations\n\t\tif (this._isClearing) {\n\t\t\tlog.info('[NotificationService] Already clearing alerts, waiting for completion');\n\t\t\tif (this._clearingPromise) {\n\t\t\t\tawait this._clearingPromise;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tthis._isClearing = true;\n\t\tthis._clearingPromise = this._performClearAllAlertsEnhanced();\n\n\t\ttry {\n\t\t\tawait this._clearingPromise;\n\t\t} finally {\n\t\t\tthis._isClearing = false;\n\t\t\tthis._clearingPromise = null;\n\t\t}\n\t}\n\n\t/**\n\t * Internal method to perform the actual clearing\n\t */\n\tprivate static async _performClearAllAlertsEnhanced(): Promise<void> {\n\t\ttry {\n\t\t\tlog.info('[NotificationService] Starting comprehensive alert clearing');\n\n\t\t\t// 1. Clear badge countdown interval FIRST\n\t\t\tthis.clearBadgeCountdown();\n\n\t\t\t// 2. Clear all active notifications tracking\n\t\t\tthis.clearAll();\n\n\t\t\t// 3. Clear urgent sound context EARLY (good placement!)\n\t\t\tif (this._urgentSoundContext) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this._urgentSoundContext.close();\n\t\t\t\t\tthis._urgentSoundContext = null;\n\t\t\t\t\tlog.info('[NotificationService] Audio context closed');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.debug('Audio context close error (may be normal):', false, error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 4. Clear all browser notifications (UNCOMMENTED - needed to stop notifications!)\n\t\t\tif (browser_ext?.notifications) {\n\t\t\t\ttry {\n\t\t\t\t\tconst notifications = await browser_ext.notifications.getAll();\n\t\t\t\t\tlog.info(\n\t\t\t\t\t\t`[NotificationService] Found ${Object.keys(notifications).length} notifications to clear`\n\t\t\t\t\t);\n\n\t\t\t\t\tconst clearPromises = Object.keys(notifications).map((id) =>\n\t\t\t\t\t\tbrowser_ext.notifications.clear(id).catch(() => {})\n\t\t\t\t\t);\n\t\t\t\t\tawait Promise.all(clearPromises);\n\n\t\t\t\t\t// Clear our tracking (redundant with clearAll() but ensures it's done)\n\t\t\t\t\tactiveNotifications.clear();\n\t\t\t\t\tlog.info('[NotificationService] All browser notifications cleared');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.warn('[NotificationService] Error clearing browser notifications:', false, error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. Clear badge and reset icon\n\t\t\tif (browser_ext?.action) {\n\t\t\t\ttry {\n\t\t\t\t\tawait browser_ext.action.setBadgeText({ text: '' });\n\t\t\t\t\tawait browser_ext.action.setIcon({\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t16: '/images/logoBullFav16x16.png',\n\t\t\t\t\t\t\t32: '/images/logoBullFav32x32.png',\n\t\t\t\t\t\t\t48: '/images/logoBullFav48x48.png',\n\t\t\t\t\t\t\t96: '/images/logoBullFav96x96.png',\n\t\t\t\t\t\t\t128: '/images/logoBullFav128x128.png'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tlog.info('[NotificationService] Badge and icon cleared');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.warn('[NotificationService] Error clearing badge/icon:', false, error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. Clear any pending alarms\n\t\t\tif (browser_ext?.alarms) {\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\tbrowser_ext.alarms.clear('yakkl-lock-alarm').catch(() => {}),\n\t\t\t\t\t\tbrowser_ext.alarms.clear('yakkl-lock-notification').catch(() => {})\n\t\t\t\t\t]);\n\t\t\t\t\tlog.info('[NotificationService] Alarms cleared');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.warn('[NotificationService] Error clearing alarms:', false, error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// NOTE: Removed UI messaging section to prevent feedback loops\n\t\t\t// UI contexts will be cleared via IDLE_STATUS_CHANGED messages\n\n\t\t\tlog.info(\n\t\t\t\t'[NotificationService] All enhanced alerts cleared successfully (no UI messages sent)'\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to clear enhanced alerts:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Clear alerts from UI context only (no background messages)\n\t */\n\tstatic async clearAlertsUIOnly(): Promise<void> {\n\t\ttry {\n\t\t\tlog.info('[NotificationService] Clearing UI-only alerts');\n\n\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\t// Close audio context\n\t\t\t\tconst audioContext = (window as any).__yakklAudioContext;\n\t\t\t\tif (audioContext && audioContext.state !== 'closed') {\n\t\t\t\t\tawait audioContext.close();\n\t\t\t\t\t(window as any).__yakklAudioContext = null;\n\t\t\t\t\tlog.info('[NotificationService] Audio context closed');\n\t\t\t\t}\n\n\t\t\t\t// Clear title flash\n\t\t\t\tif ((window as any).__yakklTitleFlashInterval) {\n\t\t\t\t\tclearInterval((window as any).__yakklTitleFlashInterval);\n\t\t\t\t\t(window as any).__yakklTitleFlashInterval = null;\n\t\t\t\t}\n\n\t\t\t\tif ((window as any).__yakklOriginalTitle) {\n\t\t\t\t\tdocument.title = (window as any).__yakklOriginalTitle;\n\t\t\t\t\t(window as any).__yakklOriginalTitle = null;\n\t\t\t\t}\n\n\t\t\t\t// Clear countdown timers\n\t\t\t\tif ((window as any).__yakklCountdownInterval) {\n\t\t\t\t\tclearInterval((window as any).__yakklCountdownInterval);\n\t\t\t\t\t(window as any).__yakklCountdownInterval = null;\n\t\t\t\t}\n\n\t\t\t\t// Clear in-app security warning\n\t\t\t\ttry {\n\t\t\t\t\tconst { hideSecurityWarning } = await import('$lib/common/stores/securityWarning');\n\t\t\t\t\thideSecurityWarning();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.debug('Error hiding security warning:', false, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlog.info('[NotificationService] UI-only alerts cleared');\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Failed to clear UI-only alerts:', false, error);\n\t\t}\n\t}\n\n\t/**\n\t * Enhanced clear method that also clears enhanced features\n\t */\n\tstatic async clearEnhanced(id: string = this.DEFAULT_ID): Promise<boolean> {\n\t\ttry {\n\t\t\t// Clear the standard notification\n\t\t\tconst result = await this.clear(id);\n\n\t\t\t// If this is a lockdown warning, also clear enhanced features\n\t\t\tif (id.includes('lockdown-warning')) {\n\t\t\t\tawait this.clearUrgentBadgeEnhanced();\n\n\t\t\t\t// Clear any reminder notifications\n\t\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\t\tawait this.clear(`lockdown-reminder-enhanced-${i}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Send enhanced clear message to UI\n\t\t\tif (browser_ext?.runtime) {\n\t\t\t\ttry {\n\t\t\t\t\tbrowser_ext.runtime\n\t\t\t\t\t\t.sendMessage({\n\t\t\t\t\t\t\ttype: 'CLEAR_NOTIFICATION_ENHANCED',\n\t\t\t\t\t\t\tnotificationId: id,\n\t\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t// Ignore errors\n\t\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Ignore errors\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tlog.warn('Error in enhanced clear:', false, { id, error });\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Test method for enhanced features\n\t */\n\tstatic async testEnhancedFeatures(): Promise<void> {\n\t\tlog.info('[NotificationService] Testing enhanced features...');\n\n\t\ttry {\n\t\t\t// Test window focus\n\t\t\tawait this.focusPopupWindowEnhanced();\n\n\t\t\t// Test badge\n\t\t\tawait this.setUrgentBadgeEnhanced('TEST');\n\n\t\t\t// Test sound\n\t\t\tawait this.playUrgentSoundEnhanced();\n\n\t\t\t// Test enhanced lockdown warning for 15 seconds\n\t\t\tawait this.sendLockdownWarningEnhanced(15000, {\n\t\t\t\tcontextMessage: 'This is a test of enhanced features'\n\t\t\t});\n\n\t\t\tlog.info('[NotificationService] Enhanced features test completed');\n\t\t} catch (error) {\n\t\t\tlog.warn('[NotificationService] Enhanced features test failed:', false, error);\n\t\t}\n\t}\n}\n\n// Functions to send notifications to the browser extension\n\n/**\n * Sends a ping notification to the runtime.\n */\nexport async function sendNotificationPing() {\n\ttry {\n\t\tif (!browser_ext) return;\n\n\t\tconst response = await browser_ext.runtime.sendMessage({\n\t\t\ttype: 'ping'\n\t\t});\n\n\t\tif (isResponseWithSuccess(response)) {\n\t\t\tlog.info('Ping response status:', false, response);\n\t\t} else {\n\t\t\tlog.warn('Unexpected response structure:', false, response);\n\t\t}\n\t} catch (error) {\n\t\tlog.warn('No Pong response:', false, error);\n\t}\n}\n\n/**\n * Sends a notification with a given title and message text.\n * @param {string} title - Notification title.\n * @param {string} messageText - Notification message.\n */\nexport async function sendNotificationMessage(title: string, messageText: string) {\n\ttry {\n\t\tif (!browser_ext) return;\n\n\t\tlog.info('sendNotificationMessage - title:', false, title);\n\t\tlog.info('sendNotificationMessage - messageText:', false, messageText);\n\n\t\tconst id = await browser_ext.notifications.create('yakkl-notification', {\n\t\t\ttype: 'basic',\n\t\t\ticonUrl: browser_ext.runtime.getURL('/images/logoBullLock48x48.png'),\n\t\t\ttitle: title || 'Notification',\n\t\t\tmessage: messageText || 'Default message.'\n\t\t});\n\n\t\treturn id;\n\t} catch (error) {\n\t\tlog.warn('Error sending notification message:', false, error);\n\t\treturn null;\n\t}\n}\n\n/**\n * Sends a request to start the lock icon timer.\n */\nexport async function sendNotificationStartLockIconTimer() {\n\ttry {\n\t\tif (!browser_ext) return;\n\n\t\tlog.info('sendNotificationStartLockIconTimer - starting lock icon timer:', false);\n\n\t\tstartLockIconTimer();\n\t} catch (error) {\n\t\tlog.warn('Error starting lock icon timer:', false, error);\n\t}\n}\n\n/**\n * Sends a request to stop the lock icon timer.\n */\nexport async function sendNotificationStopLockIconTimer() {\n\ttry {\n\t\tif (!browser_ext) return;\n\t\tstopLockIconTimer();\n\t} catch (error) {\n\t\tlog.warn('Error stopping lock icon timer:', false, error);\n\t}\n}\n\n/**\n * Helper function to check if a response indicates success.\n * @param {unknown} response - The response object.\n * @returns {boolean} True if the response contains a `success` property set to true.\n */\nfunction isResponseWithSuccess(response: unknown): boolean {\n\treturn (\n\t\ttypeof response === 'object' &&\n\t\tresponse !== null &&\n\t\t'success' in response &&\n\t\t(response as any).success === true\n\t);\n}\n"],"file":"app/immutable/chunks/Bmr6hs4q.js"}