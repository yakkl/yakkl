{"version":3,"mappings":"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","names":["show","$.prop","$$props","title","content","rejectText","className","onReject","this","$$args","Failed","async","getDuplex","browserSvelte","mod","__vitePreload","import","then","n","i","__VITE_PRELOAD__","url","Duplex","b","PortDuplexStream","constructor","port","stream","__publicField","onMessage","addListener","_onMessage","bind","onDisconnect","destroy","message","log","info","inflight","Math","max","push","err","error","write","msg","postMessage","on","event","handler","disconnect","isIdle","waitForIdle","timeout","start","Date","now","Promise","resolve","reject","check","Error","setTimeout","PortManagerWithStream","name","createPort","ext","isClient","getBrowserExt","browser_ext","_a","runtime","connect","CustomDuplex","super","objectMode","_read","_write","_chunk","_enc","cb","chunk","baseStream","getStream","getPort","requestId","sendMessage","type","warn","setRequestId","getRequestId","clearRequestId","createPortManagerWithStream"],"ignoreList":[],"sources":["../../../../../../src/lib/components/Failed.svelte","../../../../../../src/lib/common/duplexShim.ts","../../../../../../src/lib/managers/PortStreamManager.ts","../../../../../../src/lib/managers/PortManagerWithStream.ts"],"sourcesContent":["<script lang=\"ts\">\n\timport Modal from './Modal.svelte';\n\n\tinterface Props {\n\t\tshow: boolean;\n\t\ttitle?: string;\n\t\tcontent?: string;\n\t\trejectText?: string;\n\t\tclassName?: string;\n\t\tonReject?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\ttitle = 'Failed!',\n\t\tcontent = 'An error has occurred.',\n\t\trejectText = 'Close',\n\t\tclassName = 'z-[999]',\n\t\tonReject = () => {\n\t\t\tshow = false;\n\t\t}\n\t}: Props = $props();\n</script>\n\n<Modal bind:show {title} {className}>\n\t<div class=\"p-6\">\n\t\t<p class=\"text-sm text-gray-500\">{content}</p>\n\t\t<div class=\"mt-4 flex justify-end\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"ml-2 rounded-md border border-transparent bg-red-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\n\t\t\t\tonclick={onReject}>{rejectText}</button\n\t\t\t>\n\t\t</div>\n\t</div>\n</Modal>\n","// File: src/lib/common/duplexShim.ts\nimport { browserSvelte } from '$lib/common/environment';\n\nexport async function getDuplex(): Promise<any> {\n\tif (browserSvelte) {\n\t\tconst mod = await import('stream-browserify');\n\t\treturn mod.Duplex;\n\t} else {\n\t\tconst mod = await import('readable-stream');\n\t\treturn mod.Duplex;\n\t}\n}\n","// File: PortStreamManager.ts\nimport { log } from '$lib/common/logger-wrapper';\nimport { browser_ext } from '$lib/common/environment';\nimport type { Runtime } from 'webextension-polyfill';\nimport { getDuplex } from '$lib/common/duplexShim';\nimport type { Duplex as StreamDuplex } from 'readable-stream'; // or 'stream'\n\nexport interface LightweightDuplex {\n\twrite(chunk: any): void;\n\ton(event: string, handler: (...args: any[]) => void): void;\n\tdestroy(): void;\n\tpush?(chunk: any): boolean;\n}\nexport class PortDuplexStream {\n\tprivate port: Runtime.Port;\n\tprivate stream: LightweightDuplex;\n\tprivate inflight = 0;\n\n\tconstructor(port: Runtime.Port, stream: LightweightDuplex) {\n\t\tthis.port = port;\n\t\tthis.stream = stream;\n\n\t\tthis.port.onMessage.addListener(this._onMessage.bind(this));\n\t\tthis.port.onDisconnect.addListener(() => this.destroy());\n\t}\n\n\tprivate _onMessage(message: any) {\n\t\ttry {\n\t\t\tlog.info('PortDuplexStream _onMessage:', false, message);\n\t\t\tthis.inflight = Math.max(0, this.inflight - 1);\n\t\t\tthis.stream.push(message);\n\t\t} catch (err) {\n\t\t\tlog.error('PortDuplexStream _onMessage error', false, err);\n\t\t}\n\t}\n\n\twrite(msg: any) {\n\t\tlog.info('PortDuplexStream write:', false, msg);\n\t\tthis.inflight++;\n\t\tthis.port.postMessage(msg);\n\t}\n\n\ton(event: string, handler: (...args: any[]) => void) {\n\t\tlog.info('PortDuplexStream on:', false, event);\n\t\tthis.stream.on(event, handler);\n\t}\n\n\tdestroy() {\n\t\tlog.info('PortDuplexStream destroy:', false);\n\t\tthis.port.disconnect();\n\t\tthis.stream.destroy();\n\t}\n\n\tisIdle() {\n\t\treturn this.inflight === 0;\n\t}\n\n\tasync waitForIdle(timeout = 3000) {\n\t\tlog.info('PortDuplexStream waitForIdle:', false, timeout);\n\t\tconst start = Date.now();\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst check = () => {\n\t\t\t\tif (this.isIdle()) return resolve();\n\t\t\t\tif (Date.now() - start > timeout)\n\t\t\t\t\treturn reject(new Error('Timed out waiting for port to go idle'));\n\t\t\t\tsetTimeout(check, 50);\n\t\t\t};\n\t\t\tcheck();\n\t\t});\n\t}\n}\n\nexport async function createPortStream(channelName = 'secure'): Promise<PortDuplexStream> {\n\tconst port = browser_ext.runtime.connect({ name: channelName });\n\tconst Duplex = await getDuplex();\n\n\tclass WrappedStream extends Duplex {\n\t\tconstructor() {\n\t\t\tsuper({ objectMode: true });\n\t\t}\n\t\t_read() {}\n\t\t_write(_chunk: any, _enc: string, cb: () => void) {\n\t\t\tcb();\n\t\t}\n\t}\n\n\tconst stream = new WrappedStream() as unknown as LightweightDuplex;\n\treturn new PortDuplexStream(port, stream);\n}\n","import { getDuplex } from '$lib/common/duplexShim';\nimport { PortDuplexStream, type LightweightDuplex } from './PortStreamManager';\nimport { log } from '$lib/common/logger-wrapper';\nimport { browser_ext, isClient, getBrowserExt } from '$lib/common/environment';\nimport type { Runtime } from 'webextension-polyfill';\nimport type { DuplexOptions } from 'stream';\n\nexport class PortManagerWithStream {\n\tprivate port: Runtime.Port | null = null;\n\tprivate stream: PortDuplexStream | null = null;\n\tprivate requestId: string | null = null;\n\tprivate readonly name: string;\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tasync createPort() {\n\t\tif (this.port && this.stream) return true;\n\n\t\tconst ext = isClient ? getBrowserExt() : browser_ext;\n\t\tif (!ext || !ext.runtime?.connect) {\n\t\t\tlog.error('Extension API not available for PortManagerWithStream');\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.port = ext.runtime.connect({ name: this.name });\n\t\t\tconst Duplex = await getDuplex();\n\t\t\tclass CustomDuplex extends Duplex implements LightweightDuplex {\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper({ objectMode: true });\n\t\t\t\t}\n\n\t\t\t\t_read() {}\n\t\t\t\t_write(_chunk: any, _enc: string, cb: () => void) {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\n\t\t\t\twrite(chunk: any): void {\n\t\t\t\t\tsuper.write(chunk);\n\t\t\t\t}\n\n\t\t\t\ton(event: string, handler: (...args: any[]) => void): void {\n\t\t\t\t\tsuper.on(event, handler);\n\t\t\t\t}\n\n\t\t\t\tdestroy(): void {\n\t\t\t\t\tsuper.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst baseStream = new CustomDuplex();\n\t\t\tthis.stream = new PortDuplexStream(this.port, baseStream); // Pass both port and stream\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlog.error('Failed to create port stream', false, error);\n\t\t\tthis.port = null;\n\t\t\tthis.stream = null;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tgetStream() {\n\t\treturn this.stream;\n\t}\n\n\tgetPort() {\n\t\treturn this.port;\n\t}\n\n\tisIdle() {\n\t\treturn this.stream?.isIdle() ?? true;\n\t}\n\n\tasync waitForIdle(timeout = 3000) {\n\t\treturn this.stream?.waitForIdle(timeout);\n\t}\n\n\tdisconnect() {\n\t\ttry {\n\t\t\tif (this.port && this.requestId) {\n\t\t\t\tbrowser_ext.runtime.sendMessage({\n\t\t\t\t\ttype: 'UNREGISTER_SESSION_PORT',\n\t\t\t\t\trequestId: this.requestId\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.stream?.destroy();\n\t\t} catch (err) {\n\t\t\tlog.warn('Error destroying port stream', false, err);\n\t\t}\n\t\tthis.stream = null;\n\t\tthis.port = null;\n\t\tthis.requestId = null;\n\t}\n\n\tsetRequestId(requestId: string) {\n\t\tthis.requestId = requestId;\n\t}\n\n\tgetRequestId() {\n\t\treturn this.requestId;\n\t}\n\n\tclearRequestId() {\n\t\tthis.requestId = null;\n\t}\n}\n\nexport function createPortManagerWithStream(name: string = 'secure') {\n\treturn new PortManagerWithStream(name);\n}\n"],"file":"app/immutable/chunks/tXuNREEA.js"}