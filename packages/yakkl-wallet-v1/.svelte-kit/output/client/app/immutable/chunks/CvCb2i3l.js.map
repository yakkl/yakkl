{"version":3,"file":"CvCb2i3l.js","sources":["../../../../../../src/lib/components/TrialCountdown.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { getSettings, setSettings } from '$lib/common/stores';\n\timport { AccessSourceType } from '$lib/common/types';\n\timport { openModal } from '$lib/common/stores/modal';\n\timport { UnifiedTimerManager } from '$lib/managers/UnifiedTimerManager';\n\timport { CountdownTimer } from '$lib/managers/CountdownTimer';\n\n\tlet remaining = '';\n\tlet visible = true;\n\tlet pinned = false;\n\tlet countdownTimer: CountdownTimer | null = null;\n\tlet hideTimeoutId = 'trial-hide-timeout';\n\tconst timerManager = UnifiedTimerManager.getInstance();\n\n\tasync function updateCountdown() {\n\t\tconst settings = await getSettings();\n\t\tif (\n\t\t\t!settings ||\n\t\t\tsettings.plan.source !== AccessSourceType.TRIAL ||\n\t\t\t!settings.plan.trialEndDate\n\t\t) {\n\t\t\tvisible = false;\n\t\t\treturn;\n\t\t}\n\n\t\tpinned = settings.trialCountdownPinned ?? false;\n\n\t\tconst end = new Date(settings.plan.trialEndDate).getTime();\n\t\tconst now = Date.now();\n\t\tconst durationMs = end - now;\n\n\t\tif (durationMs <= 0) {\n\t\t\tvisible = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// Create countdown timer\n\t\tcountdownTimer = new CountdownTimer(\n\t\t\t'trial-countdown',\n\t\t\tdurationMs,\n\t\t\t(remainingSeconds) => {\n\t\t\t\tconst hours = Math.floor(remainingSeconds / 3600);\n\t\t\t\tconst minutes = Math.floor((remainingSeconds % 3600) / 60);\n\t\t\t\tconst seconds = remainingSeconds % 60;\n\t\t\t\tremaining = `${hours}h ${minutes}m ${seconds}s`;\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tvisible = false;\n\t\t\t}\n\t\t);\n\n\t\tcountdownTimer.start();\n\n\t\t// Schedule auto-hide if not pinned\n\t\tif (!pinned) {\n\t\t\ttimerManager.addTimeout(\n\t\t\t\thideTimeoutId,\n\t\t\t\t() => {\n\t\t\t\t\tvisible = false;\n\t\t\t\t},\n\t\t\t\t30000\n\t\t\t);\n\t\t\ttimerManager.startTimeout(hideTimeoutId);\n\t\t}\n\t}\n\n\tfunction handleUpgrade() {\n\t\topenModal('upgrade');\n\t}\n\n\tasync function togglePin() {\n\t\tpinned = !pinned;\n\t\tconst store = await getSettings();\n\t\tconst updated = { ...store, trialCountdownPinned: pinned };\n\t\t// Persist back\n\t\tsetSettings(updated);\n\n\t\tif (!pinned) {\n\t\t\ttimerManager.addTimeout(\n\t\t\t\thideTimeoutId,\n\t\t\t\t() => {\n\t\t\t\t\tvisible = false;\n\t\t\t\t},\n\t\t\t\t30000\n\t\t\t);\n\t\t\ttimerManager.startTimeout(hideTimeoutId);\n\t\t} else {\n\t\t\tvisible = true;\n\t\t\t// Cancel the hide timeout if we're pinning\n\t\t\ttimerManager.stopTimeout(hideTimeoutId);\n\t\t\ttimerManager.removeTimeout(hideTimeoutId);\n\t\t}\n\t}\n\n\tonMount(async () => {\n\t\tawait updateCountdown();\n\t});\n\n\tonDestroy(() => {\n\t\tif (countdownTimer) {\n\t\t\tcountdownTimer.destroy();\n\t\t\tcountdownTimer = null;\n\t\t}\n\t\ttimerManager.stopTimeout(hideTimeoutId);\n\t\ttimerManager.removeTimeout(hideTimeoutId);\n\t});\n</script>\n\n{#if visible}\n\t<div\n\t\tclass=\"fixed bottom-0 left-0 right-0 z-50 bg-yellow-300 dark:bg-yellow-800 text-yellow-900 dark:text-yellow-100 px-4 py-2 text-center text-sm font-medium flex items-center justify-between shadow-lg\"\n\t>\n\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t<span class=\"font-bold\">‚è≥ Trial ends in:</span>\n\t\t\t<span>{remaining}</span>\n\t\t</div>\n\t\t<div class=\"flex items-center space-x-3\">\n\t\t\t<button\n\t\t\t\ton:click={handleUpgrade}\n\t\t\t\tclass=\"text-xs font-semibold underline hover:text-yellow-700 dark:hover:text-yellow-300\"\n\t\t\t>\n\t\t\t\tUpgrade\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ton:click={togglePin}\n\t\t\t\ttitle=\"Pin or unpin this banner\"\n\t\t\t\tclass=\"text-xs opacity-60 hover:opacity-100\"\n\t\t\t>\n\t\t\t\tüìå\n\t\t\t</button>\n\t\t</div>\n\t</div>\n{/if}\n"],"names":["remaining","$.mutable_source","visible","pinned","countdownTimer","hideTimeoutId","timerManager","UnifiedTimerManager","getInstance","updateCountdown","settings","getSettings","$.strict_equals","plan","source","AccessSourceType","TRIAL","trialEndDate","trialCountdownPinned","end","Date","getTime","now","durationMs","CountdownTimer","remainingSeconds","hours","Math","floor","minutes","seconds","$.set","start","addTimeout","startTimeout","handleUpgrade","openModal","togglePin","store","updated","setSettings","stopTimeout","removeTimeout","onMount","async","onDestroy","destroy","$$render","consequent"],"mappings":"6nDAQK,IAAAA,UAAYC,eAAA,IACZ,IAAAC,QAAUD,eAAA,UACVE,OAAS,UACTC,eAAwC,SACxCC,cAAgB,qBACd,MAAAC,aAAeC,oBAAoBC,6BAE1BC,kBACR,MAAAC,eAAiBC,cAErB,IAAAD,UAAAE,cACDF,SAASG,KAAKC,OAAWC,iBAAiBC,MACzC,SAAAN,SAASG,KAAKI,aACd,KACDf,QAAU,aAEX,CAEAC,OAASO,SAASQ,sBAAwB,MAEpC,MAAAC,IAAA,IAAUC,KAAKV,SAASG,KAAKI,cAAcI,UAC3C,MAAAC,IAAMF,KAAKE,MACX,MAAAC,WAAaJ,IAAMG,IAErB,GAAAC,YAAc,EAAG,KACpBrB,QAAU,aAEX,CAGAE,eAAqB,IAAAoB,eACpB,kBACAD,WACCE,yBACMC,MAAQC,KAAKC,MAAMH,iBAAmB,MACtC,MAAAI,QAAUF,KAAKC,MAAOH,iBAAmB,KAAQ,IACjD,MAAAK,QAAUL,iBAAmB,GACnCM,IAAA/B,UAAA,GAAe0B,UAAUG,YAAYC,aAEhC,SACL5B,QAAU,SAIZE,eAAe4B,YAGV7B,OAAQ,CACCG,aAAA2B,WACZ5B,cACM,SACLH,QAAU,QAEX,KAEDI,aAAa4B,aAAa7B,cAC3B,CACD,UAES8B,gBACRC,UAAU,UACX,gBAEeC,YACdlC,QAAUA,OACJ,MAAAmC,YAAc3B,cACd,MAAA4B,QAAA,IAAeD,MAAOpB,qBAAsBf,QAElDqC,YAAYD,aAEPpC,OAAQ,CACCG,aAAA2B,WACZ5B,cACM,SACLH,QAAU,QAEX,KAEDI,aAAa4B,aAAa7B,mBACpB,KACNH,QAAU,MAEVI,aAAamC,YAAYpC,eACzBC,aAAaoC,cAAcrC,cAC5B,CACD,CAEAsC,QAAoBC,gBACbnC,oBAGPoC,UAAgB,QACXzC,eAAgB,CACnBA,eAAe0C,UACE1C,eAAA,IAClB,CACAE,aAAamC,YAAYpC,eACzBC,aAAaoC,cAAcrC,oXAUnBL,kCAIImC,sCAMAE,kEAhBTnC,SAAO6C,SAAAC"}