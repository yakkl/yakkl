{"version":3,"file":"CkqS9PXN.js","sources":["../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/utils/url.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/utils.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/constants.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/utils.js","../../../../../../../../node_modules/.pnpm/devalue@5.1.1/node_modules/devalue/src/base64.js","../../../../../../../../node_modules/.pnpm/devalue@5.1.1/node_modules/devalue/src/constants.js","../../../../../../../../node_modules/.pnpm/devalue@5.1.1/node_modules/devalue/src/parse.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/utils/exports.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/control.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/utils/error.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/state.svelte.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/pathname.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/client/client.js"],"sourcesContent":["import { BROWSER, DEV } from 'esm-env';\n\n/**\n * Matches a URI scheme. See https://www.rfc-editor.org/rfc/rfc3986#section-3.1\n * @type {RegExp}\n */\nexport const SCHEME = /^[a-z][a-z\\d+\\-.]+:/i;\n\nconst internal = new URL('sveltekit-internal://');\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\t// special case\n\tif (path[0] === '/' && path[1] === '/') return path;\n\n\tlet url = new URL(base, internal);\n\turl = new URL(path, url);\n\n\treturn url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/**\n * Decode pathname excluding %25 to prevent further double decoding of params\n * @param {string} pathname\n */\nexport function decode_pathname(pathname) {\n\treturn pathname.split('%25').map(decodeURI).join('%25');\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest\n\t\tparams[key] = decodeURIComponent(params[key]);\n\t}\n\n\treturn params;\n}\n\n/**\n * The error when a URL is malformed is not very helpful, so we augment it with the URI\n * @param {string} uri\n */\nexport function decode_uri(uri) {\n\ttry {\n\t\treturn decodeURI(uri);\n\t} catch (e) {\n\t\tif (e instanceof Error) {\n\t\t\te.message = `Failed to decode URI: ${uri}\\n` + e.message;\n\t\t}\n\t\tthrow e;\n\t}\n}\n\n/**\n * Returns everything up to the first `#` in a URL\n * @param {{href: string}} url_like\n */\nexport function strip_hash({ href }) {\n\treturn href.split('#')[0];\n}\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n * @param {(search_param: string) => void} search_params_callback\n * @param {boolean} [allow_hash]\n */\nexport function make_trackable(url, callback, search_params_callback, allow_hash = false) {\n\tconst tracked = new URL(url);\n\n\tObject.defineProperty(tracked, 'searchParams', {\n\t\tvalue: new Proxy(tracked.searchParams, {\n\t\t\tget(obj, key) {\n\t\t\t\tif (key === 'get' || key === 'getAll' || key === 'has') {\n\t\t\t\t\treturn (/**@type {string}*/ param) => {\n\t\t\t\t\t\tsearch_params_callback(param);\n\t\t\t\t\t\treturn obj[key](param);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// if they try to access something different from what is in `tracked_search_params_properties`\n\t\t\t\t// we track the whole url (entries, values, keys etc)\n\t\t\t\tcallback();\n\n\t\t\t\tconst value = Reflect.get(obj, key);\n\t\t\t\treturn typeof value === 'function' ? value.bind(obj) : value;\n\t\t\t}\n\t\t}),\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n\n\t/**\n\t * URL properties that could change during the lifetime of the page,\n\t * which excludes things like `origin`\n\t */\n\tconst tracked_url_properties = ['href', 'pathname', 'search', 'toString', 'toJSON'];\n\tif (allow_hash) tracked_url_properties.push('hash');\n\n\tfor (const property of tracked_url_properties) {\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\t// @ts-expect-error\n\t\t\t\treturn url[property];\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\n\t\t// @ts-ignore\n\t\ttracked.searchParams[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url.searchParams, opts);\n\t\t};\n\t}\n\n\tif ((DEV || !BROWSER) && !allow_hash) {\n\t\tdisable_hash(tracked);\n\t}\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nfunction disable_hash(url) {\n\tallow_nodejs_console_log(url);\n\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tallow_nodejs_console_log(url);\n\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Allow URL to be console logged, bypassing disabled properties.\n * @param {URL} url\n */\nfunction allow_nodejs_console_log(url) {\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\turl[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(new URL(url), opts);\n\t\t};\n\t}\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody[]} values\n */\nexport function hash(...values) {\n\tlet hash = 5381;\n\n\tfor (const value of values) {\n\t\tif (typeof value === 'string') {\n\t\t\tlet i = value.length;\n\t\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\t\tlet i = buffer.length;\n\t\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t\t} else {\n\t\t\tthrow new TypeError('value must be a string or TypedArray');\n\t\t}\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","/**\n * @param {string} text\n * @returns {ArrayBufferLike}\n */\nexport function b64_decode(text) {\n\tconst d = atob(text);\n\n\tconst u8 = new Uint8Array(d.length);\n\n\tfor (let i = 0; i < d.length; i++) {\n\t\tu8[i] = d.charCodeAt(i);\n\t}\n\n\treturn u8.buffer;\n}\n\n/**\n * @param {ArrayBuffer} buffer\n * @returns {string}\n */\nexport function b64_encode(buffer) {\n\tif (globalThis.Buffer) {\n\t\treturn Buffer.from(buffer).toString('base64');\n\t}\n\n\tconst little_endian = new Uint8Array(new Uint16Array([1]).buffer)[0] > 0;\n\n\t// The Uint16Array(Uint8Array(...)) ensures the code points are padded with 0's\n\treturn btoa(\n\t\tnew TextDecoder(little_endian ? 'utf-16le' : 'utf-16be').decode(\n\t\t\tnew Uint16Array(new Uint8Array(buffer))\n\t\t)\n\t);\n}\n\n/**\n * Like node's path.relative, but without using node\n * @param {string} from\n * @param {string} to\n */\nexport function get_relative_path(from, to) {\n\tconst from_parts = from.split(/[/\\\\]/);\n\tconst to_parts = to.split(/[/\\\\]/);\n\tfrom_parts.pop(); // get dirname\n\n\twhile (from_parts[0] === to_parts[0]) {\n\t\tfrom_parts.shift();\n\t\tto_parts.shift();\n\t}\n\n\tlet i = from_parts.length;\n\twhile (i--) from_parts[i] = '..';\n\n\treturn from_parts.concat(to_parts).join('/');\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { hash } from '../hash.js';\nimport { b64_decode } from '../utils.js';\n\nlet loading = 0;\n\n/** @type {typeof fetch} */\nconst native_fetch = BROWSER ? window.fetch : /** @type {any} */ (() => {});\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (DEV && BROWSER) {\n\tlet can_inspect_stack_trace = false;\n\n\t// detect whether async stack traces work\n\t// eslint-disable-next-line @typescript-eslint/require-await\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tvoid check_stack_trace();\n\n\t/**\n\t * @param {RequestInfo | URL} input\n\t * @param {RequestInit & Record<string, any> | undefined} init\n\t */\n\twindow.fetch = (input, init) => {\n\t\t// Check if fetch was called via load_node. the lock method only checks if it was called at the\n\t\t// same time, but not necessarily if it was called from `load`.\n\t\t// We use just the filename as the method name sometimes does not appear on the CI.\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack_array = /** @type {string} */ (new Error().stack).split('\\n');\n\t\t// We need to do a cutoff because Safari and Firefox maintain the stack\n\t\t// across events and for example traces a `fetch` call triggered from a button\n\t\t// back to the creation of the event listener and the element creation itself,\n\t\t// where at some point client.js will show up, leading to false positives.\n\t\tconst cutoff = stack_array.findIndex((a) => a.includes('load@') || a.includes('at load'));\n\t\tconst stack = stack_array.slice(0, cutoff + 2).join('\\n');\n\n\t\tconst in_load_heuristic = can_inspect_stack_trace\n\t\t\t? stack.includes('src/runtime/client/client.js')\n\t\t\t: loading;\n\n\t\t// This flag is set in initial_fetch and subsequent_fetch\n\t\tconst used_kit_fetch = init?.__sveltekit_fetch__;\n\n\t\tif (in_load_heuristic && !used_kit_fetch) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://svelte.dev/docs/kit/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else if (BROWSER) {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {URL | string} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst selector = build_selector(resource, opts);\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tlet { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(selector, { body, init, ttl: 1000 * Number(ttl) });\n\t\tconst b64 = script.getAttribute('data-b64');\n\t\tif (b64 !== null) {\n\t\t\t// Can't use native_fetch('data:...;base64,${body}')\n\t\t\t// csp can block the request\n\t\t\tbody = b64_decode(body);\n\t\t}\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn DEV ? dev_fetch(resource, opts) : window.fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {URL | string} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resource, resolved, opts) {\n\tif (cache.size > 0) {\n\t\tconst selector = build_selector(resource, opts);\n\t\tconst cached = cache.get(selector);\n\t\tif (cached) {\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Request/cache#value\n\t\t\tif (\n\t\t\t\tperformance.now() < cached.ttl &&\n\t\t\t\t['default', 'force-cache', 'only-if-cached', undefined].includes(opts?.cache)\n\t\t\t) {\n\t\t\t\treturn new Response(cached.body, cached.init);\n\t\t\t}\n\n\t\t\tcache.delete(selector);\n\t\t}\n\t}\n\n\treturn DEV ? dev_fetch(resolved, opts) : window.fetch(resolved, opts);\n}\n\n/**\n * @param {RequestInfo | URL} resource\n * @param {RequestInit & Record<string, any> | undefined} opts\n */\nexport function dev_fetch(resource, opts) {\n\tconst patched_opts = { ...opts };\n\t// This assigns the __sveltekit_fetch__ flag and makes it non-enumerable\n\tObject.defineProperty(patched_opts, '__sveltekit_fetch__', {\n\t\tvalue: true,\n\t\twritable: true,\n\t\tconfigurable: true\n\t});\n\treturn window.fetch(resource, patched_opts);\n}\n\n/**\n * Build the cache key for a given request\n * @param {URL | RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nfunction build_selector(resource, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.headers || opts?.body) {\n\t\t/** @type {import('types').StrictBody[]} */\n\t\tconst values = [];\n\n\t\tif (opts.headers) {\n\t\t\tvalues.push([...new Headers(opts.headers)].join(','));\n\t\t}\n\n\t\tif (opts.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\t\tvalues.push(opts.body);\n\t\t}\n\n\t\tselector += `[data-hash=\"${hash(...values)}\"]`;\n\t}\n\n\treturn selector;\n}\n","import { BROWSER } from 'esm-env';\n\nconst param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/**\n * Creates the regex pattern, extracts parameter names, and generates types for a route\n * @param {string} id\n */\nexport function parse_route_id(id) {\n\t/** @type {import('types').RouteParam[]} */\n\tconst params = [];\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment) => {\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: rest_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: rest_match[2],\n\t\t\t\t\t\t\t\t\toptional: false,\n\t\t\t\t\t\t\t\t\trest: true,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case — /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: optional_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: optional_match[2],\n\t\t\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\t\t\trest: false,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('x+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(String.fromCharCode(parseInt(content.slice(2), 16)));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('u+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(\n\t\t\t\t\t\t\t\t\t\t\t\tString.fromCharCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t...content\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((code) => parseInt(code, 16))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// We know the match cannot be null in the browser because manifest generation\n\t\t\t\t\t\t\t\t\t\t// would have invoked this during build and failed if we hit an invalid\n\t\t\t\t\t\t\t\t\t\t// param/matcher name with non-alphanumeric character.\n\t\t\t\t\t\t\t\t\t\tconst match = /** @type {RegExpExecArray} */ (param_pattern.exec(content));\n\t\t\t\t\t\t\t\t\t\tif (!BROWSER && !match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, matcher] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\tmatcher,\n\t\t\t\t\t\t\t\t\t\t\toptional: !!is_optional,\n\t\t\t\t\t\t\t\t\t\t\trest: !!is_rest,\n\t\t\t\t\t\t\t\t\t\t\tchained: is_rest ? i === 1 && parts[0] === '' : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn escape(content);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}/?$`\n\t\t\t\t);\n\n\treturn { pattern, params };\n}\n\nconst optional_param_regex = /\\/\\[\\[\\w+?(?:=\\w+)?\\]\\]/;\n\n/**\n * Removes optional params from a route ID.\n * @param {string} id\n * @returns The route id with optional params removed\n */\nexport function remove_optional_params(id) {\n\treturn id.replace(optional_param_regex, '');\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {import('types').RouteParam[]} params\n * @param {Record<string, import('@sveltejs/kit').ParamMatcher>} matchers\n */\nexport function exec(match, params, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst result = {};\n\n\tconst values = match.slice(1);\n\tconst values_needing_match = values.filter((value) => value !== undefined);\n\n\tlet buffered = 0;\n\n\tfor (let i = 0; i < params.length; i += 1) {\n\t\tconst param = params[i];\n\t\tlet value = values[i - buffered];\n\n\t\t// in the `[[a=b]]/.../[...rest]` case, if one or more optional parameters\n\t\t// weren't matched, roll the skipped values into the rest\n\t\tif (param.chained && param.rest && buffered) {\n\t\t\tvalue = values\n\t\t\t\t.slice(i - buffered, i + 1)\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.join('/');\n\n\t\t\tbuffered = 0;\n\t\t}\n\n\t\t// if `value` is undefined, it means this is an optional or rest parameter\n\t\tif (value === undefined) {\n\t\t\tif (param.rest) result[param.name] = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!param.matcher || matchers[param.matcher](value)) {\n\t\t\tresult[param.name] = value;\n\n\t\t\t// Now that the params match, reset the buffer if the next param isn't the [...rest]\n\t\t\t// and the next value is defined, otherwise the buffer will cause us to skip values\n\t\t\tconst next_param = params[i + 1];\n\t\t\tconst next_value = values[i + 1];\n\t\t\tif (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\n\t\t\t// There are no more params and no more values, but all non-empty values have been matched\n\t\t\tif (\n\t\t\t\t!next_param &&\n\t\t\t\t!next_value &&\n\t\t\t\tObject.keys(result).length === values_needing_match.length\n\t\t\t) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// in the `/[[a=b]]/...` case, if the value didn't satisfy the matcher,\n\t\t// keep track of the number of skipped optional parameters and continue\n\t\tif (param.optional && param.chained) {\n\t\t\tbuffered++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// otherwise, if the matcher returns `false`, the route did not match\n\t\treturn;\n\t}\n\n\tif (buffered) return;\n\treturn result;\n}\n\n/** @param {string} str */\nfunction escape(str) {\n\treturn (\n\t\tstr\n\t\t\t.normalize()\n\t\t\t// escape [ and ] before escaping other characters, since they are used in the replacements\n\t\t\t.replace(/[[\\]]/g, '\\\\$&')\n\t\t\t// replace %, /, ? and # with their encoded versions because decode_pathname leaves them untouched\n\t\t\t.replace(/%/g, '%25')\n\t\t\t.replace(/\\//g, '%2[Ff]')\n\t\t\t.replace(/\\?/g, '%3[Ff]')\n\t\t\t.replace(/#/g, '%23')\n\t\t\t// escape characters that have special meaning in regex\n\t\t\t.replace(/[.*+?^${}()|\\\\]/g, '\\\\$&')\n\t);\n}\n\nconst basic_param_pattern = /\\[(\\[)?(\\.\\.\\.)?(\\w+?)(?:=(\\w+))?\\]\\]?/g;\n\n/**\n * Populate a route ID with params to resolve a pathname.\n * @example\n * ```js\n * resolveRoute(\n *   `/blog/[slug]/[...somethingElse]`,\n *   {\n *     slug: 'hello-world',\n *     somethingElse: 'something/else'\n *   }\n * ); // `/blog/hello-world/something/else`\n * ```\n * @param {string} id\n * @param {Record<string, string | undefined>} params\n * @returns {string}\n */\nexport function resolve_route(id, params) {\n\tconst segments = get_route_segments(id);\n\treturn (\n\t\t'/' +\n\t\tsegments\n\t\t\t.map((segment) =>\n\t\t\t\tsegment.replace(basic_param_pattern, (_, optional, rest, name) => {\n\t\t\t\t\tconst param_value = params[name];\n\n\t\t\t\t\t// This is nested so TS correctly narrows the type\n\t\t\t\t\tif (!param_value) {\n\t\t\t\t\t\tif (optional) return '';\n\t\t\t\t\t\tif (rest && param_value !== undefined) return '';\n\t\t\t\t\t\tthrow new Error(`Missing parameter '${name}' in route ${id}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (param_value.startsWith('/') || param_value.endsWith('/'))\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Parameter '${name}' in route ${id} cannot start or end with a slash -- this would cause an invalid route like foo//bar`\n\t\t\t\t\t\t);\n\t\t\t\t\treturn param_value;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.filter(Boolean)\n\t\t\t.join('/')\n\t);\n}\n\n/**\n * @param {import('types').SSRNode} node\n * @returns {boolean}\n */\nexport function has_server_load(node) {\n\treturn node.server?.load !== undefined || node.server?.trailingSlash !== undefined;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\t/** @type {import('types').CSRRoute} */\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n\n/**\n * @param {import('types').CSRRouteServer} input\n * @param {import('types').CSRPageNodeLoader[]} app_nodes Will be modified if a new node is loaded that's not already in the array\n * @returns {import('types').CSRRoute}\n */\nexport function parse_server_route({ nodes, id, leaf, layouts, errors }, app_nodes) {\n\treturn {\n\t\tid,\n\t\texec: () => ({}), // dummy function; exec already happened on the server\n\t\t// By writing to app_nodes only when a loader at that index is not already defined,\n\t\t// we ensure that loaders have referential equality when they load the same node.\n\t\t// Code elsewhere in client.js relies on this referential equality to determine\n\t\t// if a loader is different and should therefore (re-)run.\n\t\terrors: errors.map((n) => (n ? (app_nodes[n] ||= nodes[n]) : undefined)),\n\t\tlayouts: layouts.map((n) => (n ? [n[0], (app_nodes[n[1]] ||= nodes[n[1]])] : undefined)),\n\t\tleaf: [leaf[0], (app_nodes[leaf[1]] ||= nodes[leaf[1]])]\n\t};\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n * @param {(value: string) => any} parse\n */\nexport function get(key, parse = JSON.parse) {\n\ttry {\n\t\treturn parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n * @param {(value: any) => string} stringify\n */\nexport function set(key, value, stringify = JSON.stringify) {\n\tconst data = stringify(value);\n\ttry {\n\t\tsessionStorage[key] = data;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","export const SNAPSHOT_KEY = 'sveltekit:snapshot';\nexport const SCROLL_KEY = 'sveltekit:scroll';\nexport const STATES_KEY = 'sveltekit:states';\nexport const PAGE_URL_KEY = 'sveltekit:pageurl';\n\nexport const HISTORY_INDEX = 'sveltekit:history';\nexport const NAVIGATION_INDEX = 'sveltekit:navigation';\n\nexport const PRELOAD_PRIORITIES = /** @type {const} */ ({\n\ttap: 1,\n\thover: 2,\n\tviewport: 3,\n\teager: 4,\n\toff: -1,\n\tfalse: -1\n});\n","import { BROWSER, DEV } from 'esm-env';\nimport { writable } from 'svelte/store';\nimport { assets } from '__sveltekit/paths';\nimport { version } from '__sveltekit/environment';\nimport { PRELOAD_PRIORITIES } from './constants.js';\n\n/* global __SVELTEKIT_APP_VERSION_FILE__, __SVELTEKIT_APP_VERSION_POLL_INTERVAL__ */\n\nexport const origin = BROWSER ? location.origin : '';\n\n/** @param {string | URL} url */\nexport function resolve_url(url) {\n\tif (url instanceof URL) return url;\n\n\tlet baseURI = document.baseURI;\n\n\tif (!baseURI) {\n\t\tconst baseTags = document.getElementsByTagName('base');\n\t\tbaseURI = baseTags.length ? baseTags[0].href : document.URL;\n\t}\n\n\treturn new URL(url, baseURI);\n}\n\nexport function scroll_state() {\n\treturn {\n\t\tx: pageXOffset,\n\t\ty: pageYOffset\n\t};\n}\n\nconst warned = new WeakSet();\n\n/** @typedef {keyof typeof valid_link_options} LinkOptionName */\n\nconst valid_link_options = /** @type {const} */ ({\n\t'preload-code': ['', 'off', 'false', 'tap', 'hover', 'viewport', 'eager'],\n\t'preload-data': ['', 'off', 'false', 'tap', 'hover'],\n\tkeepfocus: ['', 'true', 'off', 'false'],\n\tnoscroll: ['', 'true', 'off', 'false'],\n\treload: ['', 'true', 'off', 'false'],\n\treplacestate: ['', 'true', 'off', 'false']\n});\n\n/**\n * @template {LinkOptionName} T\n * @typedef {typeof valid_link_options[T][number]} ValidLinkOptions\n */\n\n/**\n * @template {LinkOptionName} T\n * @param {Element} element\n * @param {T} name\n */\nfunction link_option(element, name) {\n\tconst value = /** @type {ValidLinkOptions<T> | null} */ (\n\t\telement.getAttribute(`data-sveltekit-${name}`)\n\t);\n\n\tif (DEV) {\n\t\tvalidate_link_option(element, name, value);\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {LinkOptionName} T\n * @template {ValidLinkOptions<T> | null} U\n * @param {Element} element\n * @param {T} name\n * @param {U} value\n */\nfunction validate_link_option(element, name, value) {\n\tif (value === null) return;\n\n\t// @ts-expect-error - includes is dumb\n\tif (!warned.has(element) && !valid_link_options[name].includes(value)) {\n\t\tconsole.error(\n\t\t\t`Unexpected value for ${name} — should be one of ${valid_link_options[name]\n\t\t\t\t.map((option) => JSON.stringify(option))\n\t\t\t\t.join(', ')}`,\n\t\t\telement\n\t\t);\n\n\t\twarned.add(element);\n\t}\n}\n\nconst levels = {\n\t...PRELOAD_PRIORITIES,\n\t'': PRELOAD_PRIORITIES.hover\n};\n\n/**\n * @param {Element} element\n * @returns {Element | null}\n */\nfunction parent_element(element) {\n\tlet parent = element.assignedSlot ?? element.parentNode;\n\n\t// @ts-expect-error handle shadow roots\n\tif (parent?.nodeType === 11) parent = parent.host;\n\n\treturn /** @type {Element} */ (parent);\n}\n\n/**\n * @param {Element} element\n * @param {Element} target\n */\nexport function find_anchor(element, target) {\n\twhile (element && element !== target) {\n\t\tif (element.nodeName.toUpperCase() === 'A' && element.hasAttribute('href')) {\n\t\t\treturn /** @type {HTMLAnchorElement | SVGAElement} */ (element);\n\t\t}\n\n\t\telement = /** @type {Element} */ (parent_element(element));\n\t}\n}\n\n/**\n * @param {HTMLAnchorElement | SVGAElement} a\n * @param {string} base\n * @param {boolean} uses_hash_router\n */\nexport function get_link_info(a, base, uses_hash_router) {\n\t/** @type {URL | undefined} */\n\tlet url;\n\n\ttry {\n\t\turl = new URL(a instanceof SVGAElement ? a.href.baseVal : a.href, document.baseURI);\n\n\t\t// if the hash doesn't start with `#/` then it's probably linking to an id on the current page\n\t\tif (uses_hash_router && url.hash.match(/^#[^/]/)) {\n\t\t\tconst route = location.hash.split('#')[1] || '/';\n\t\t\turl.hash = `#${route}${url.hash}`;\n\t\t}\n\t} catch {}\n\n\tconst target = a instanceof SVGAElement ? a.target.baseVal : a.target;\n\n\tconst external =\n\t\t!url ||\n\t\t!!target ||\n\t\tis_external_url(url, base, uses_hash_router) ||\n\t\t(a.getAttribute('rel') || '').split(/\\s+/).includes('external');\n\n\tconst download = url?.origin === origin && a.hasAttribute('download');\n\n\treturn { url, external, target, download };\n}\n\n/**\n * @param {HTMLFormElement | HTMLAnchorElement | SVGAElement} element\n */\nexport function get_router_options(element) {\n\t/** @type {ValidLinkOptions<'keepfocus'> | null} */\n\tlet keepfocus = null;\n\n\t/** @type {ValidLinkOptions<'noscroll'> | null} */\n\tlet noscroll = null;\n\n\t/** @type {ValidLinkOptions<'preload-code'> | null} */\n\tlet preload_code = null;\n\n\t/** @type {ValidLinkOptions<'preload-data'> | null} */\n\tlet preload_data = null;\n\n\t/** @type {ValidLinkOptions<'reload'> | null} */\n\tlet reload = null;\n\n\t/** @type {ValidLinkOptions<'replacestate'> | null} */\n\tlet replace_state = null;\n\n\t/** @type {Element} */\n\tlet el = element;\n\n\twhile (el && el !== document.documentElement) {\n\t\tif (preload_code === null) preload_code = link_option(el, 'preload-code');\n\t\tif (preload_data === null) preload_data = link_option(el, 'preload-data');\n\t\tif (keepfocus === null) keepfocus = link_option(el, 'keepfocus');\n\t\tif (noscroll === null) noscroll = link_option(el, 'noscroll');\n\t\tif (reload === null) reload = link_option(el, 'reload');\n\t\tif (replace_state === null) replace_state = link_option(el, 'replacestate');\n\n\t\tel = /** @type {Element} */ (parent_element(el));\n\t}\n\n\t/** @param {string | null} value */\n\tfunction get_option_state(value) {\n\t\tswitch (value) {\n\t\t\tcase '':\n\t\t\tcase 'true':\n\t\t\t\treturn true;\n\t\t\tcase 'off':\n\t\t\tcase 'false':\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload_code: levels[preload_code ?? 'off'],\n\t\tpreload_data: levels[preload_data ?? 'off'],\n\t\tkeepfocus: get_option_state(keepfocus),\n\t\tnoscroll: get_option_state(noscroll),\n\t\treload: get_option_state(reload),\n\t\treplace_state: get_option_state(replace_state)\n\t};\n}\n\n/** @param {any} value */\nexport function notifiable_store(value) {\n\tconst store = writable(value);\n\tlet ready = true;\n\n\tfunction notify() {\n\t\tready = true;\n\t\tstore.update((val) => val);\n\t}\n\n\t/** @param {any} new_value */\n\tfunction set(new_value) {\n\t\tready = false;\n\t\tstore.set(new_value);\n\t}\n\n\t/** @param {(value: any) => void} run */\n\tfunction subscribe(run) {\n\t\t/** @type {any} */\n\t\tlet old_value;\n\t\treturn store.subscribe((new_value) => {\n\t\t\tif (old_value === undefined || (ready && new_value !== old_value)) {\n\t\t\t\trun((old_value = new_value));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn { notify, set, subscribe };\n}\n\nexport const updated_listener = {\n\tv: () => {}\n};\n\nexport function create_updated_store() {\n\tconst { set, subscribe } = writable(false);\n\n\tif (DEV || !BROWSER) {\n\t\treturn {\n\t\t\tsubscribe,\n\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\tcheck: async () => false\n\t\t};\n\t}\n\n\tconst interval = __SVELTEKIT_APP_VERSION_POLL_INTERVAL__;\n\n\t/** @type {NodeJS.Timeout} */\n\tlet timeout;\n\n\t/** @type {() => Promise<boolean>} */\n\tasync function check() {\n\t\tclearTimeout(timeout);\n\n\t\tif (interval) timeout = setTimeout(check, interval);\n\n\t\ttry {\n\t\t\tconst res = await fetch(`${assets}/${__SVELTEKIT_APP_VERSION_FILE__}`, {\n\t\t\t\theaders: {\n\t\t\t\t\tpragma: 'no-cache',\n\t\t\t\t\t'cache-control': 'no-cache'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!res.ok) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst data = await res.json();\n\t\t\tconst updated = data.version !== version;\n\n\t\t\tif (updated) {\n\t\t\t\tset(true);\n\t\t\t\tupdated_listener.v();\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\n\t\t\treturn updated;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (interval) timeout = setTimeout(check, interval);\n\n\treturn {\n\t\tsubscribe,\n\t\tcheck\n\t};\n}\n\n/**\n * Is external if\n * - origin different\n * - path doesn't start with base\n * - uses hash router and pathname is more than base\n * @param {URL} url\n * @param {string} base\n * @param {boolean} hash_routing\n */\nexport function is_external_url(url, base, hash_routing) {\n\tif (url.origin !== origin || !url.pathname.startsWith(base)) {\n\t\treturn true;\n\t}\n\n\tif (hash_routing) {\n\t\tif (url.pathname === base + '/' || url.pathname === base + '/index.html') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// be lenient if serving from filesystem\n\t\tif (url.protocol === 'file:' && url.pathname.replace(/\\/[^/]+\\.html?$/, '') === base) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {Record<string, boolean>} */\nconst seen = {};\n\n/**\n * Used for server-side resolution, to replicate Vite's CSS loading behaviour in production.\n *\n * Closely modelled after https://github.com/vitejs/vite/blob/3dd12f4724130fdf8ba44c6d3252ebdff407fd47/packages/vite/src/node/plugins/importAnalysisBuild.ts#L214\n * (which ideally we could just use directly, but it's not exported)\n * @param {string[]} deps\n */\nexport function load_css(deps) {\n\tif (__SVELTEKIT_CLIENT_ROUTING__) return;\n\n\tconst csp_nonce_meta = /** @type {HTMLMetaElement} */ (\n\t\tdocument.querySelector('meta[property=csp-nonce]')\n\t);\n\tconst csp_nonce = csp_nonce_meta?.nonce || csp_nonce_meta?.getAttribute('nonce');\n\n\tfor (const dep of deps) {\n\t\tif (dep in seen) continue;\n\t\tseen[dep] = true;\n\n\t\tif (document.querySelector(`link[href=\"${dep}\"][rel=\"stylesheet\"]`)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.crossOrigin = '';\n\t\tlink.href = dep;\n\t\tif (csp_nonce) {\n\t\t\tlink.setAttribute('nonce', csp_nonce);\n\t\t}\n\t\tdocument.head.appendChild(link);\n\t}\n}\n","/**\n * Base64 Encodes an arraybuffer\n * @param {ArrayBuffer} arraybuffer\n * @returns {string}\n */\nexport function encode64(arraybuffer) {\n  const dv = new DataView(arraybuffer);\n  let binaryString = \"\";\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    binaryString += String.fromCharCode(dv.getUint8(i));\n  }\n\n  return binaryToAscii(binaryString);\n}\n\n/**\n * Decodes a base64 string into an arraybuffer\n * @param {string} string\n * @returns {ArrayBuffer}\n */\nexport function decode64(string) {\n  const binaryString = asciiToBinary(string);\n  const arraybuffer = new ArrayBuffer(binaryString.length);\n  const dv = new DataView(arraybuffer);\n\n  for (let i = 0; i < arraybuffer.byteLength; i++) {\n    dv.setUint8(i, binaryString.charCodeAt(i));\n  }\n\n  return arraybuffer;\n}\n\nconst KEY_STRING =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n/**\n * Substitute for atob since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/atob.js\n *\n * @param {string} data\n * @returns {string}\n */\nfunction asciiToBinary(data) {\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n\n  let output = \"\";\n  let buffer = 0;\n  let accumulatedBits = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    buffer <<= 6;\n    buffer |= KEY_STRING.indexOf(data[i]);\n    accumulatedBits += 6;\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n  }\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  return output;\n}\n\n/**\n * Substitute for btoa since it's deprecated in node.\n * Does not do any input validation.\n *\n * @see https://github.com/jsdom/abab/blob/master/lib/btoa.js\n *\n * @param {string} str\n * @returns {string}\n */\nfunction binaryToAscii(str) {\n  let out = \"\";\n  for (let i = 0; i < str.length; i += 3) {\n    /** @type {[number, number, number, number]} */\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = str.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (str.charCodeAt(i) & 0x03) << 4;\n    if (str.length > i + 1) {\n      groupsOfSix[1] |= str.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (str.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (str.length > i + 2) {\n      groupsOfSix[2] |= str.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = str.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += KEY_STRING[groupsOfSix[j]];\n      }\n    }\n  }\n  return out;\n}\n","export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n","import { decode64 } from './base64.js';\nimport {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n          case \"Int8Array\":\n          case \"Uint8Array\":\n          case \"Uint8ClampedArray\":\n          case \"Int16Array\":\n          case \"Uint16Array\":\n          case \"Int32Array\":\n          case \"Uint32Array\":\n          case \"Float32Array\":\n          case \"Float64Array\":\n          case \"BigInt64Array\":\n          case \"BigUint64Array\": {\n            const TypedArrayConstructor = globalThis[type];\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            const typedArray = new TypedArrayConstructor(arraybuffer);\n            hydrated[index] = typedArray;\n            break;\n          }\n\n          case \"ArrayBuffer\": {\n            const base64 = value[1];\n            const arraybuffer = decode64(base64);\n            hydrated[index] = arraybuffer;\n            break;\n          }\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n","/**\n * @param {Set<string>} expected\n */\nfunction validator(expected) {\n\t/**\n\t * @param {any} module\n\t * @param {string} [file]\n\t */\n\tfunction validate(module, file) {\n\t\tif (!module) return;\n\n\t\tfor (const key in module) {\n\t\t\tif (key[0] === '_' || expected.has(key)) continue; // key is valid in this module\n\n\t\t\tconst values = [...expected.values()];\n\n\t\t\tconst hint =\n\t\t\t\thint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??\n\t\t\t\t`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;\n\n\t\t\tthrow new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);\n\t\t}\n\t}\n\n\treturn validate;\n}\n\n/**\n * @param {string} key\n * @param {string} ext\n * @returns {string | void}\n */\nfunction hint_for_supported_files(key, ext = '.js') {\n\tconst supported_files = [];\n\n\tif (valid_layout_exports.has(key)) {\n\t\tsupported_files.push(`+layout${ext}`);\n\t}\n\n\tif (valid_page_exports.has(key)) {\n\t\tsupported_files.push(`+page${ext}`);\n\t}\n\n\tif (valid_layout_server_exports.has(key)) {\n\t\tsupported_files.push(`+layout.server${ext}`);\n\t}\n\n\tif (valid_page_server_exports.has(key)) {\n\t\tsupported_files.push(`+page.server${ext}`);\n\t}\n\n\tif (valid_server_exports.has(key)) {\n\t\tsupported_files.push(`+server${ext}`);\n\t}\n\n\tif (supported_files.length > 0) {\n\t\treturn `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${\n\t\t\tsupported_files.length > 1 ? ' or ' : ''\n\t\t}${supported_files.at(-1)}`;\n\t}\n}\n\nconst valid_layout_exports = new Set([\n\t'load',\n\t'prerender',\n\t'csr',\n\t'ssr',\n\t'trailingSlash',\n\t'config'\n]);\nconst valid_page_exports = new Set([...valid_layout_exports, 'entries']);\nconst valid_layout_server_exports = new Set([...valid_layout_exports]);\nconst valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);\nconst valid_server_exports = new Set([\n\t'GET',\n\t'POST',\n\t'PATCH',\n\t'PUT',\n\t'DELETE',\n\t'OPTIONS',\n\t'HEAD',\n\t'fallback',\n\t'prerender',\n\t'trailingSlash',\n\t'config',\n\t'entries'\n]);\n\nexport const validate_layout_exports = validator(valid_layout_exports);\nexport const validate_page_exports = validator(valid_page_exports);\nexport const validate_layout_server_exports = validator(valid_layout_server_exports);\nexport const validate_page_server_exports = validator(valid_page_server_exports);\nexport const validate_server_exports = validator(valid_server_exports);\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n","/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n","import { HttpError, SvelteKitError } from '../runtime/control.js';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {import('../runtime/control.js').Redirect | HttpError | SvelteKitError | Error} */ (\n\t\terror\n\t);\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_status(error) {\n\treturn error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_message(error) {\n\treturn error instanceof SvelteKitError ? error.text : 'Internal Error';\n}\n","import { onMount } from 'svelte';\nimport { updated_listener } from './utils.js';\n\n/** @type {import('@sveltejs/kit').Page} */\nexport let page;\n\n/** @type {{ current: import('@sveltejs/kit').Navigation | null }} */\nexport let navigating;\n\n/** @type {{ current: boolean }} */\nexport let updated;\n\n// this is a bootleg way to tell if we're in old svelte or new svelte\nconst is_legacy =\n\tonMount.toString().includes('$$') || /function \\w+\\(\\) \\{\\}/.test(onMount.toString());\n\nif (is_legacy) {\n\tpage = {\n\t\tdata: {},\n\t\tform: null,\n\t\terror: null,\n\t\tparams: {},\n\t\troute: { id: null },\n\t\tstate: {},\n\t\tstatus: -1,\n\t\turl: new URL('https://example.com')\n\t};\n\tnavigating = { current: null };\n\tupdated = { current: false };\n} else {\n\tpage = new (class Page {\n\t\tdata = $state.raw({});\n\t\tform = $state.raw(null);\n\t\terror = $state.raw(null);\n\t\tparams = $state.raw({});\n\t\troute = $state.raw({ id: null });\n\t\tstate = $state.raw({});\n\t\tstatus = $state.raw(-1);\n\t\turl = $state.raw(new URL('https://example.com'));\n\t})();\n\n\tnavigating = new (class Navigating {\n\t\tcurrent = $state.raw(null);\n\t})();\n\n\tupdated = new (class Updated {\n\t\tcurrent = $state.raw(false);\n\t})();\n\tupdated_listener.v = () => (updated.current = true);\n}\n\n/**\n * @param {import('@sveltejs/kit').Page} new_page\n */\nexport function update(new_page) {\n\tObject.assign(page, new_page);\n}\n","const DATA_SUFFIX = '/__data.json';\nconst HTML_DATA_SUFFIX = '.html__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX) || pathname.endsWith(HTML_DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\tif (pathname.endsWith('.html')) return pathname.replace(/\\.html$/, HTML_DATA_SUFFIX);\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\tif (pathname.endsWith(HTML_DATA_SUFFIX)) {\n\t\treturn pathname.slice(0, -HTML_DATA_SUFFIX.length) + '.html';\n\t}\n\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n\nconst ROUTE_SUFFIX = '/__route.js';\n\n/**\n * @param {string} pathname\n * @returns {boolean}\n */\nexport function has_resolution_suffix(pathname) {\n\treturn pathname.endsWith(ROUTE_SUFFIX);\n}\n\n/**\n * Convert a regular URL to a route to send to SvelteKit's server-side route resolution endpoint\n * @param {string} pathname\n * @returns {string}\n */\nexport function add_resolution_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + ROUTE_SUFFIX;\n}\n\n/**\n * @param {string} pathname\n * @returns {string}\n */\nexport function strip_resolution_suffix(pathname) {\n\treturn pathname.slice(0, -ROUTE_SUFFIX.length);\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { onMount, tick } from 'svelte';\nimport {\n\tdecode_params,\n\tdecode_pathname,\n\tstrip_hash,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport { dev_fetch, initial_fetch, lock_fetch, subsequent_fetch, unlock_fetch } from './fetcher.js';\nimport { parse, parse_server_route } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tresolve_url,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\torigin,\n\tscroll_state,\n\tnotifiable_store,\n\tcreate_updated_store,\n\tload_css\n} from './utils.js';\nimport { base } from '__sveltekit/paths';\nimport * as devalue from 'devalue';\nimport {\n\tHISTORY_INDEX,\n\tNAVIGATION_INDEX,\n\tPRELOAD_PRIORITIES,\n\tSCROLL_KEY,\n\tSTATES_KEY,\n\tSNAPSHOT_KEY,\n\tPAGE_URL_KEY\n} from './constants.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { compact } from '../../utils/array.js';\nimport { HttpError, Redirect, SvelteKitError } from '../control.js';\nimport { INVALIDATED_PARAM, TRAILING_SLASH_PARAM, validate_depends } from '../shared.js';\nimport { get_message, get_status } from '../../utils/error.js';\nimport { writable } from 'svelte/store';\nimport { page, update, navigating } from './state.svelte.js';\nimport { add_data_suffix, add_resolution_suffix } from '../pathname.js';\n\nexport { load_css };\n\nconst ICON_REL_ATTRIBUTES = new Set(['icon', 'shortcut icon', 'apple-touch-icon']);\n\nlet errored = false;\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n/**\n * history index -> { x, y }\n * @type {Record<number, { x: number; y: number }>}\n */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/**\n * navigation index -> any\n * @type {Record<string, any[]>}\n */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\nif (DEV && BROWSER) {\n\tlet warned = false;\n\n\tconst current_module_url = import.meta.url.split('?')[0]; // remove query params that vite adds to the URL when it is loaded from node_modules\n\n\tconst warn = () => {\n\t\tif (warned) return;\n\n\t\t// Rather than saving a pointer to the original history methods, which would prevent monkeypatching by other libs,\n\t\t// inspect the stack trace to see if we're being called from within SvelteKit.\n\t\tlet stack = new Error().stack?.split('\\n');\n\t\tif (!stack) return;\n\t\tif (!stack[0].includes('https:') && !stack[0].includes('http:')) stack = stack.slice(1); // Chrome includes the error message in the stack\n\t\tstack = stack.slice(2); // remove `warn` and the place where `warn` was called\n\t\t// Can be falsy if was called directly from an anonymous function\n\t\tif (stack[0]?.includes(current_module_url)) return;\n\n\t\twarned = true;\n\n\t\tconsole.warn(\n\t\t\t\"Avoid using `history.pushState(...)` and `history.replaceState(...)` as these will conflict with SvelteKit's router. Use the `pushState` and `replaceState` imports from `$app/navigation` instead.\"\n\t\t);\n\t};\n\n\tconst push_state = history.pushState;\n\thistory.pushState = (...args) => {\n\t\twarn();\n\t\treturn push_state.apply(history, args);\n\t};\n\n\tconst replace_state = history.replaceState;\n\thistory.replaceState = (...args) => {\n\t\twarn();\n\t\treturn replace_state.apply(history, args);\n\t};\n}\n\nexport const stores = {\n\turl: /* @__PURE__ */ notifiable_store({}),\n\tpage: /* @__PURE__ */ notifiable_store({}),\n\tnavigating: /* @__PURE__ */ writable(\n\t\t/** @type {import('@sveltejs/kit').Navigation | null} */ (null)\n\t),\n\tupdated: /* @__PURE__ */ create_updated_store()\n};\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {number} current_history_index\n * @param {number} current_navigation_index\n */\nfunction clear_onward_history(current_history_index, current_navigation_index) {\n\t// if we navigated back, then pushed a new state, we can\n\t// release memory by pruning the scroll/snapshot lookup\n\tlet i = current_history_index + 1;\n\twhile (scroll_positions[i]) {\n\t\tdelete scroll_positions[i];\n\t\ti += 1;\n\t}\n\n\ti = current_navigation_index + 1;\n\twhile (snapshots[i]) {\n\t\tdelete snapshots[i];\n\t\ti += 1;\n\t}\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n */\nfunction native_navigation(url) {\n\tlocation.href = url.href;\n\treturn new Promise(() => {});\n}\n\n/**\n * Checks whether a service worker is registered, and if it is,\n * tries to update it.\n */\nasync function update_service_worker() {\n\tif ('serviceWorker' in navigator) {\n\t\tconst registration = await navigator.serviceWorker.getRegistration(base || '/');\n\t\tif (registration) {\n\t\t\tawait registration.update();\n\t\t}\n\t}\n}\n\nfunction noop() {}\n\n/** @type {import('types').CSRRoute[]} All routes of the app. Only available when kit.router.resolution=client */\nlet routes;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_layout_loader;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_error_loader;\n/** @type {HTMLElement} */\nlet container;\n/** @type {HTMLElement} */\nlet target;\n/** @type {import('./types.js').SvelteKitApp} */\nexport let app;\n\n/** @type {Array<((url: URL) => boolean)>} */\nconst invalidated = [];\n\n/**\n * An array of the `+layout.svelte` and `+page.svelte` component instances\n * that currently live on the page — used for capturing and restoring snapshots.\n * It's updated/manipulated through `bind:this` in `Root.svelte`.\n * @type {import('svelte').SvelteComponent[]}\n */\nconst components = [];\n\n/** @type {{id: string, token: {}, promise: Promise<import('./types.js').NavigationResult>} | null} */\nlet load_cache = null;\n\n/**\n * @type {Map<string, Promise<URL>>}\n * Cache for client-side rerouting, since it could contain async calls which we want to\n * avoid running multiple times which would slow down navigations (e.g. else preloading\n * wouldn't help because on navigation it would be called again). Since `reroute` should be\n * a pure function (i.e. always return the same) value it's safe to cache across navigations.\n * The server reroute calls don't need to be cached because they are called using `import(...)`\n * which is cached per the JS spec.\n */\nconst reroute_cache = new Map();\n\n/**\n * Note on before_navigate_callbacks, on_navigate_callbacks and after_navigate_callbacks:\n * do not re-assign as some closures keep references to these Sets\n */\n/** @type {Set<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\nconst before_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\nconst on_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\nconst after_navigate_callbacks = new Set();\n\n/** @type {import('./types.js').NavigationState} */\nlet current = {\n\tbranch: [],\n\terror: null,\n\t// @ts-ignore - we need the initial value to be null\n\turl: null\n};\n\n/** this being true means we SSR'd */\nlet hydrated = false;\nlet started = false;\nlet autoscroll = true;\nlet updating = false;\nlet is_navigating = false;\nlet hash_navigating = false;\n/** True as soon as there happened one client-side navigation (excluding the SvelteKit-initialized initial one when in SPA mode) */\nlet has_navigated = false;\n\nlet force_invalidation = false;\n\n/** @type {import('svelte').SvelteComponent} */\nlet root;\n\n/** @type {number} keeping track of the history index in order to prevent popstate navigation events if needed */\nlet current_history_index;\n\n/** @type {number} */\nlet current_navigation_index;\n\n/** @type {{}} */\nlet token;\n\n/**\n * A set of tokens which are associated to current preloads.\n * If a preload becomes a real navigation, it's removed from the set.\n * If a preload token is in the set and the preload errors, the error\n * handling logic (for example reloading) is skipped.\n */\nconst preload_tokens = new Set();\n\n/** @type {Promise<void> | null} */\nlet pending_invalidate;\n\n/**\n * @param {import('./types.js').SvelteKitApp} _app\n * @param {HTMLElement} _target\n * @param {Parameters<typeof _hydrate>[1]} [hydrate]\n */\nexport async function start(_app, _target, hydrate) {\n\tif (DEV && _target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\t// detect basic auth credentials in the current URL\n\t// https://github.com/sveltejs/kit/pull/11179\n\t// if so, refresh the page without credentials\n\tif (document.URL !== location.href) {\n\t\t// eslint-disable-next-line no-self-assign\n\t\tlocation.href = location.href;\n\t}\n\n\tapp = _app;\n\n\tawait _app.hooks.init?.();\n\n\troutes = __SVELTEKIT_CLIENT_ROUTING__ ? parse(_app) : [];\n\tcontainer = __SVELTEKIT_EMBEDDED__ ? _target : document.documentElement;\n\ttarget = _target;\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader = _app.nodes[0];\n\tdefault_error_loader = _app.nodes[1];\n\tvoid default_layout_loader();\n\tvoid default_error_loader();\n\n\tcurrent_history_index = history.state?.[HISTORY_INDEX];\n\tcurrent_navigation_index = history.state?.[NAVIGATION_INDEX];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = current_navigation_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{\n\t\t\t\t...history.state,\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tfunction restore_scroll() {\n\t\tif (scroll) {\n\t\t\thistory.scrollRestoration = 'manual';\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t}\n\t}\n\n\tif (hydrate) {\n\t\trestore_scroll();\n\n\t\tawait _hydrate(target, hydrate);\n\t} else {\n\t\tawait navigate({\n\t\t\ttype: 'enter',\n\t\t\turl: resolve_url(app.hash ? decode_hash(new URL(location.href)) : location.href),\n\t\t\treplace_state: true\n\t\t});\n\n\t\trestore_scroll();\n\t}\n\n\t_start_router();\n}\n\nasync function _invalidate() {\n\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t// is running because subsequent invalidations may make earlier ones outdated,\n\t// but batch multiple synchronous invalidations.\n\tawait (pending_invalidate ||= Promise.resolve());\n\tif (!pending_invalidate) return;\n\tpending_invalidate = null;\n\n\tconst nav_token = (token = {});\n\tconst intent = await get_navigation_intent(current.url, true);\n\n\t// Clear preload, it might be affected by the invalidation.\n\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t// was then triggered and is still running while the invalidation kicks in,\n\t// at which point the invalidation should take over and \"win\".\n\tload_cache = null;\n\n\tconst navigation_result = intent && (await load_route(intent));\n\tif (!navigation_result || nav_token !== token) return;\n\n\tif (navigation_result.type === 'redirect') {\n\t\treturn _goto(new URL(navigation_result.location, current.url).href, {}, 1, nav_token);\n\t}\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\tcurrent = navigation_result.state;\n\treset_invalidation();\n\troot.$set(navigation_result.props);\n\tupdate(navigation_result.props.page);\n}\n\nfunction reset_invalidation() {\n\tinvalidated.length = 0;\n\tforce_invalidation = false;\n}\n\n/** @param {number} index */\nfunction capture_snapshot(index) {\n\tif (components.some((c) => c?.snapshot)) {\n\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t}\n}\n\n/** @param {number} index */\nfunction restore_snapshot(index) {\n\tsnapshots[index]?.forEach((value, i) => {\n\t\tcomponents[i]?.snapshot?.restore(value);\n\t});\n}\n\nfunction persist_state() {\n\tupdate_scroll_positions(current_history_index);\n\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\tcapture_snapshot(current_navigation_index);\n\tstorage.set(SNAPSHOT_KEY, snapshots);\n}\n\n/**\n * @param {string | URL} url\n * @param {{ replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; invalidate?: Array<string | URL | ((url: URL) => boolean)>; state?: Record<string, any> }} options\n * @param {number} redirect_count\n * @param {{}} [nav_token]\n */\nasync function _goto(url, options, redirect_count, nav_token) {\n\treturn navigate({\n\t\ttype: 'goto',\n\t\turl: resolve_url(url),\n\t\tkeepfocus: options.keepFocus,\n\t\tnoscroll: options.noScroll,\n\t\treplace_state: options.replaceState,\n\t\tstate: options.state,\n\t\tredirect_count,\n\t\tnav_token,\n\t\taccept: () => {\n\t\t\tif (options.invalidateAll) {\n\t\t\t\tforce_invalidation = true;\n\t\t\t}\n\n\t\t\tif (options.invalidate) {\n\t\t\t\toptions.invalidate.forEach(push_invalidated);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @param {import('./types.js').NavigationIntent} intent */\nasync function _preload_data(intent) {\n\t// Reuse the existing pending preload if it's for the same navigation.\n\t// Prevents an edge case where same preload is triggered multiple times,\n\t// then a later one is becoming the real navigation and the preload tokens\n\t// get out of sync.\n\tif (intent.id !== load_cache?.id) {\n\t\tconst preload = {};\n\t\tpreload_tokens.add(preload);\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\ttoken: preload,\n\t\t\tpromise: load_route({ ...intent, preload }).then((result) => {\n\t\t\t\tpreload_tokens.delete(preload);\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\t}\n\n\treturn load_cache.promise;\n}\n\n/**\n * @param {URL} url\n * @returns {Promise<void>}\n */\nasync function _preload_code(url) {\n\tconst route = (await get_navigation_intent(url, false))?.route;\n\n\tif (route) {\n\t\tawait Promise.all([...route.layouts, route.leaf].map((load) => load?.[1]()));\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationFinished} result\n * @param {HTMLElement} target\n * @param {boolean} hydrate\n */\nfunction initialize(result, target, hydrate) {\n\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\tcurrent = result.state;\n\n\tconst style = document.querySelector('style[data-sveltekit]');\n\tif (style) style.remove();\n\n\tObject.assign(page, /** @type {import('@sveltejs/kit').Page} */ (result.props.page));\n\n\troot = new app.root({\n\t\ttarget,\n\t\tprops: { ...result.props, stores, components },\n\t\thydrate,\n\t\t// @ts-ignore Svelte 5 specific: asynchronously instantiate the component, i.e. don't call flushSync\n\t\tsync: false\n\t});\n\n\trestore_snapshot(current_navigation_index);\n\n\tif (hydrate) {\n\t\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t},\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter',\n\t\t\tcomplete: Promise.resolve()\n\t\t};\n\n\t\tafter_navigate_callbacks.forEach((fn) => fn(navigation));\n\t}\n\n\tstarted = true;\n}\n\n/**\n *\n * @param {{\n *   url: URL;\n *   params: Record<string, string>;\n *   branch: Array<import('./types.js').BranchNode | undefined>;\n *   status: number;\n *   error: App.Error | null;\n *   route: import('types').CSRRoute | null;\n *   form?: Record<string, any> | null;\n * }} opts\n */\nfunction get_navigation_result_from_branch({ url, params, branch, status, error, route, form }) {\n\t/** @type {import('types').TrailingSlash} */\n\tlet slash = 'never';\n\n\t// if `paths.base === '/a/b/c`, then the root route is always `/a/b/c/`, regardless of\n\t// the `trailingSlash` route option, so that relative paths to JS and CSS work\n\tif (base && (url.pathname === base || url.pathname === base + '/')) {\n\t\tslash = 'always';\n\t} else {\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t}\n\n\turl.pathname = normalize_path(url.pathname, slash);\n\n\t// eslint-disable-next-line\n\turl.search = url.search; // turn `/?` into `/`\n\n\t/** @type {import('./types.js').NavigationFinished} */\n\tconst result = {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\terror,\n\t\t\troute\n\t\t},\n\t\tprops: {\n\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component),\n\t\t\tpage: clone_page(page)\n\t\t}\n\t};\n\n\tif (form !== undefined) {\n\t\tresult.props.form = form;\n\t}\n\n\tlet data = {};\n\tlet data_changed = !page;\n\n\tlet p = 0;\n\n\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\tconst node = branch[i];\n\t\tconst prev = current.branch[i];\n\n\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\tif (!node) continue;\n\n\t\tdata = { ...data, ...node.data };\n\n\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\tif (data_changed) {\n\t\t\tresult.props[`data_${p}`] = data;\n\t\t}\n\n\t\tp += 1;\n\t}\n\n\tconst page_changed =\n\t\t!current.url ||\n\t\turl.href !== current.url.href ||\n\t\tcurrent.error !== error ||\n\t\t(form !== undefined && form !== page.form) ||\n\t\tdata_changed;\n\n\tif (page_changed) {\n\t\tresult.props.page = {\n\t\t\terror,\n\t\t\tparams,\n\t\t\troute: {\n\t\t\t\tid: route?.id ?? null\n\t\t\t},\n\t\t\tstate: {},\n\t\t\tstatus,\n\t\t\turl: new URL(url),\n\t\t\tform: form ?? null,\n\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\tdata: data_changed ? data : page.data\n\t\t};\n\t}\n\n\treturn result;\n}\n\n/**\n * Call the universal load function of the given node, if it exists.\n *\n * @param {{\n *   loader: import('types').CSRPageNodeLoader;\n * \t parent: () => Promise<Record<string, any>>;\n *   url: URL;\n *   params: Record<string, string>;\n *   route: { id: string | null };\n * \t server_data_node: import('./types.js').DataNode | null;\n * }} options\n * @returns {Promise<import('./types.js').BranchNode>}\n */\nasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t/** @type {Record<string, any> | null} */\n\tlet data = null;\n\n\tlet is_tracking = true;\n\n\t/** @type {import('types').Uses} */\n\tconst uses = {\n\t\tdependencies: new Set(),\n\t\tparams: new Set(),\n\t\tparent: false,\n\t\troute: false,\n\t\turl: false,\n\t\tsearch_params: new Set()\n\t};\n\n\tconst node = await loader();\n\n\tif (DEV) {\n\t\tvalidate_page_exports(node.universal);\n\n\t\tif (node.universal && app.hash) {\n\t\t\tconst options = Object.keys(node.universal).filter((o) => o !== 'load');\n\n\t\t\tif (options.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Page options are ignored when \\`router.type === 'hash'\\` (${route.id} has ${options\n\t\t\t\t\t\t.filter((o) => o !== 'load')\n\t\t\t\t\t\t.map((o) => `'${o}'`)\n\t\t\t\t\t\t.join(', ')})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (node.universal?.load) {\n\t\t/** @param {string[]} deps */\n\t\tfunction depends(...deps) {\n\t\t\tfor (const dep of deps) {\n\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\tuses.dependencies.add(href);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\tconst load_input = {\n\t\t\troute: new Proxy(route, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tparams: new Proxy(params, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdata: server_data_node?.data ?? null,\n\t\t\turl: make_trackable(\n\t\t\t\turl,\n\t\t\t\t() => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.url = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(param) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.search_params.add(param);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tapp.hash\n\t\t\t),\n\t\t\tasync fetch(resource, init) {\n\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\tinit = {\n\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t// the headers are undefined on the server if the Headers object is empty\n\t\t\t\t\t\t// so we need to make sure they are also undefined here if there are no headers\n\t\t\t\t\t\theaders: [...resource.headers].length ? resource.headers : undefined,\n\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t...init\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst { resolved, promise } = resolve_fetch_url(resource, init, url);\n\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tdepends(resolved.href);\n\t\t\t\t}\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\tsetHeaders: () => {}, // noop\n\t\t\tdepends,\n\t\t\tparent() {\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t}\n\t\t\t\treturn parent();\n\t\t\t},\n\t\t\tuntrack(fn) {\n\t\t\t\tis_tracking = false;\n\t\t\t\ttry {\n\t\t\t\t\treturn fn();\n\t\t\t\t} finally {\n\t\t\t\t\tis_tracking = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (DEV) {\n\t\t\ttry {\n\t\t\t\tlock_fetch();\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`a load function related to route '${route.id}' returned ${\n\t\t\t\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t\t\t\t? 'a Response object'\n\t\t\t\t\t\t\t\t\t: Array.isArray(data)\n\t\t\t\t\t\t\t\t\t\t? 'an array'\n\t\t\t\t\t\t\t\t\t\t: 'a non-plain object'\n\t\t\t\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tunlock_fetch();\n\t\t\t}\n\t\t} else {\n\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t}\n\t}\n\n\treturn {\n\t\tnode,\n\t\tloader,\n\t\tserver: server_data_node,\n\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\tdata: data ?? server_data_node?.data ?? null,\n\t\tslash: node.universal?.trailingSlash ?? server_data_node?.slash\n\t};\n}\n\n/**\n * @param {Request | string | URL} input\n * @param {RequestInit | undefined} init\n * @param {URL} url\n */\nfunction resolve_fetch_url(input, init, url) {\n\tlet requested = input instanceof Request ? input.url : input;\n\n\t// we must fixup relative urls so they are resolved from the target page\n\tconst resolved = new URL(requested, url);\n\n\t// match ssr serialized data url, which is important to find cached responses\n\tif (resolved.origin === url.origin) {\n\t\trequested = resolved.href.slice(url.origin.length);\n\t}\n\n\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\tconst promise = started\n\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t: initial_fetch(requested, init);\n\n\treturn { resolved, promise };\n}\n\n/**\n * @param {boolean} parent_changed\n * @param {boolean} route_changed\n * @param {boolean} url_changed\n * @param {Set<string>} search_params_changed\n * @param {import('types').Uses | undefined} uses\n * @param {Record<string, string>} params\n */\nfunction has_changed(\n\tparent_changed,\n\troute_changed,\n\turl_changed,\n\tsearch_params_changed,\n\tuses,\n\tparams\n) {\n\tif (force_invalidation) return true;\n\n\tif (!uses) return false;\n\n\tif (uses.parent && parent_changed) return true;\n\tif (uses.route && route_changed) return true;\n\tif (uses.url && url_changed) return true;\n\n\tfor (const tracked_params of uses.search_params) {\n\t\tif (search_params_changed.has(tracked_params)) return true;\n\t}\n\n\tfor (const param of uses.params) {\n\t\tif (params[param] !== current.params[param]) return true;\n\t}\n\n\tfor (const href of uses.dependencies) {\n\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n * @param {import('./types.js').DataNode | null} [previous]\n * @returns {import('./types.js').DataNode | null}\n */\nfunction create_data_node(node, previous) {\n\tif (node?.type === 'data') return node;\n\tif (node?.type === 'skip') return previous ?? null;\n\treturn null;\n}\n\n/**\n * @param {URL | null} old_url\n * @param {URL} new_url\n */\nfunction diff_search_params(old_url, new_url) {\n\tif (!old_url) return new Set(new_url.searchParams.keys());\n\n\tconst changed = new Set([...old_url.searchParams.keys(), ...new_url.searchParams.keys()]);\n\n\tfor (const key of changed) {\n\t\tconst old_values = old_url.searchParams.getAll(key);\n\t\tconst new_values = new_url.searchParams.getAll(key);\n\n\t\tif (\n\t\t\told_values.every((value) => new_values.includes(value)) &&\n\t\t\tnew_values.every((value) => old_values.includes(value))\n\t\t) {\n\t\t\tchanged.delete(key);\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n/**\n * @param {Omit<import('./types.js').NavigationFinished['state'], 'branch'> & { error: App.Error }} opts\n * @returns {import('./types.js').NavigationFinished}\n */\nfunction preload_error({ error, url, route, params }) {\n\treturn {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\terror,\n\t\t\turl,\n\t\t\troute,\n\t\t\tparams,\n\t\t\tbranch: []\n\t\t},\n\t\tprops: {\n\t\t\tpage: clone_page(page),\n\t\t\tconstructors: []\n\t\t}\n\t};\n}\n\n/**\n * @param {import('./types.js').NavigationIntent & { preload?: {} }} intent\n * @returns {Promise<import('./types.js').NavigationResult>}\n */\nasync function load_route({ id, invalidating, url, params, route, preload }) {\n\tif (load_cache?.id === id) {\n\t\t// the preload becomes the real navigation\n\t\tpreload_tokens.delete(load_cache.token);\n\t\treturn load_cache.promise;\n\t}\n\n\tconst { errors, layouts, leaf } = route;\n\n\tconst loaders = [...layouts, leaf];\n\n\t// preload modules to avoid waterfall, but handle rejections\n\t// so they don't get reported to Sentry et al (we don't need\n\t// to act on the failures at this point)\n\terrors.forEach((loader) => loader?.().catch(() => {}));\n\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\tlet server_data = null;\n\tconst url_changed = current.url ? id !== get_page_key(current.url) : false;\n\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\tconst search_params_changed = diff_search_params(current.url, url);\n\n\tlet parent_invalid = false;\n\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\tconst previous = current.branch[i];\n\n\t\tconst invalid =\n\t\t\t!!loader?.[0] &&\n\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\thas_changed(\n\t\t\t\t\tparent_invalid,\n\t\t\t\t\troute_changed,\n\t\t\t\t\turl_changed,\n\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\tparams\n\t\t\t\t));\n\n\t\tif (invalid) {\n\t\t\t// For the next one\n\t\t\tparent_invalid = true;\n\t\t}\n\n\t\treturn invalid;\n\t});\n\n\tif (invalid_server_nodes.some(Boolean)) {\n\t\ttry {\n\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t} catch (error) {\n\t\t\tconst handled_error = await handle_error(error, { url, params, route: { id } });\n\n\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\treturn preload_error({ error: handled_error, url, params, route });\n\t\t\t}\n\n\t\t\treturn load_root_error_page({\n\t\t\t\tstatus: get_status(error),\n\t\t\t\terror: handled_error,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\n\t\tif (server_data.type === 'redirect') {\n\t\t\treturn server_data;\n\t\t}\n\t}\n\n\tconst server_data_nodes = server_data?.nodes;\n\n\tlet parent_changed = false;\n\n\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\tif (!loader) return;\n\n\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\tconst previous = current.branch[i];\n\n\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t// re-use data from previous load if it's still valid\n\t\tconst valid =\n\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\tloader[1] === previous?.loader &&\n\t\t\t!has_changed(\n\t\t\t\tparent_changed,\n\t\t\t\troute_changed,\n\t\t\t\turl_changed,\n\t\t\t\tsearch_params_changed,\n\t\t\t\tprevious.universal?.uses,\n\t\t\t\tparams\n\t\t\t);\n\t\tif (valid) return previous;\n\n\t\tparent_changed = true;\n\n\t\tif (server_data_node?.type === 'error') {\n\t\t\t// rethrow and catch below\n\t\t\tthrow server_data_node;\n\t\t}\n\n\t\treturn load_node({\n\t\t\tloader: loader[1],\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: async () => {\n\t\t\t\tconst data = {};\n\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tserver_data_node: create_data_node(\n\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : (server_data_node ?? null),\n\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t)\n\t\t});\n\t});\n\n\t// if we don't do this, rejections will be unhandled\n\tfor (const p of branch_promises) p.catch(() => {});\n\n\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\tconst branch = [];\n\n\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\tif (loaders[i]) {\n\t\t\ttry {\n\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\t\treturn preload_error({\n\t\t\t\t\t\terror: await handle_error(err, { params, url, route: { id: route.id } }),\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet status = get_status(err);\n\t\t\t\t/** @type {App.Error} */\n\t\t\t\tlet error;\n\n\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\terror = err.body;\n\t\t\t\t} else {\n\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\t\t\t\tawait update_service_worker();\n\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t}\n\n\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t}\n\n\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\tif (error_load) {\n\t\t\t\t\treturn get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\tbranch.push(undefined);\n\t\t}\n\t}\n\n\treturn get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus: 200,\n\t\terror: null,\n\t\troute,\n\t\t// Reset `form` on navigation, but not invalidation\n\t\tform: invalidating ? undefined : null\n\t});\n}\n\n/**\n * @param {number} i Start index to backtrack from\n * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n */\nasync function load_nearest_error_page(i, branch, errors) {\n\twhile (i--) {\n\t\tif (errors[i]) {\n\t\t\tlet j = i;\n\t\t\twhile (!branch[j]) j -= 1;\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tidx: j + 1,\n\t\t\t\t\tnode: {\n\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} catch {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {{\n *   status: number;\n *   error: App.Error;\n *   url: URL;\n *   route: { id: string | null }\n * }} opts\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function load_root_error_page({ status, error, url, route }) {\n\t/** @type {Record<string, string>} */\n\tconst params = {}; // error page does not have params\n\n\t/** @type {import('types').ServerDataNode | null} */\n\tlet server_data_node = null;\n\n\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\tif (default_layout_has_server_load) {\n\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t// existing root layout data\n\t\ttry {\n\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\tif (\n\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t) {\n\t\t\t\tthrow 0;\n\t\t\t}\n\n\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t} catch {\n\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\t}\n\n\ttry {\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\treturn _goto(new URL(error.location, location.href), {}, 0);\n\t\t}\n\n\t\t// TODO: this falls back to the server when a server exists, but what about SPA mode?\n\t\tthrow error;\n\t}\n}\n\n/**\n * Resolve the relative rerouted URL for a client-side navigation\n * @param {URL} url\n * @returns {Promise<URL | undefined>}\n */\nasync function get_rerouted_url(url) {\n\tconst href = url.href;\n\n\tif (reroute_cache.has(href)) {\n\t\treturn reroute_cache.get(href);\n\t}\n\n\tlet rerouted;\n\n\ttry {\n\t\tconst promise = (async () => {\n\t\t\t// reroute could alter the given URL, so we pass a copy\n\t\t\tlet rerouted =\n\t\t\t\t(await app.hooks.reroute({\n\t\t\t\t\turl: new URL(url),\n\t\t\t\t\tfetch: async (input, init) => {\n\t\t\t\t\t\treturn resolve_fetch_url(input, init, url).promise;\n\t\t\t\t\t}\n\t\t\t\t})) ?? url;\n\n\t\t\tif (typeof rerouted === 'string') {\n\t\t\t\tconst tmp = new URL(url); // do not mutate the incoming URL\n\n\t\t\t\tif (app.hash) {\n\t\t\t\t\ttmp.hash = rerouted;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.pathname = rerouted;\n\t\t\t\t}\n\n\t\t\t\trerouted = tmp;\n\t\t\t}\n\n\t\t\treturn rerouted;\n\t\t})();\n\n\t\treroute_cache.set(href, promise);\n\t\trerouted = await promise;\n\t} catch (e) {\n\t\treroute_cache.delete(href);\n\t\tif (DEV) {\n\t\t\t// in development, print the error...\n\t\t\tconsole.error(e);\n\n\t\t\t// ...and pause execution, since otherwise we will immediately reload the page\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\t// fall back to native navigation\n\t\treturn;\n\t}\n\n\treturn rerouted;\n}\n\n/**\n * Resolve the full info (which route, params, etc.) for a client-side navigation from the URL,\n * taking the reroute hook into account. If this isn't a client-side-navigation (or the URL is undefined),\n * returns undefined.\n * @param {URL | undefined} url\n * @param {boolean} invalidating\n * @returns {Promise<import('./types.js').NavigationIntent | undefined>}\n */\nasync function get_navigation_intent(url, invalidating) {\n\tif (!url) return;\n\tif (is_external_url(url, base, app.hash)) return;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tconst rerouted = await get_rerouted_url(url);\n\t\tif (!rerouted) return;\n\n\t\tconst path = get_url_path(rerouted);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\treturn {\n\t\t\t\t\tid: get_page_key(url),\n\t\t\t\t\tinvalidating,\n\t\t\t\t\troute,\n\t\t\t\t\tparams: decode_params(params),\n\t\t\t\t\turl\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/** @type {{ route?: import('types').CSRRouteServer, params: Record<string, string>}} */\n\t\tconst { route, params } = await import(\n\t\t\t/* @vite-ignore */\n\t\t\tadd_resolution_suffix(url.pathname)\n\t\t);\n\n\t\tif (!route) return;\n\n\t\treturn {\n\t\t\tid: get_page_key(url),\n\t\t\tinvalidating,\n\t\t\troute: parse_server_route(route, app.nodes),\n\t\t\tparams,\n\t\t\turl\n\t\t};\n\t}\n}\n\n/** @param {URL} url */\nfunction get_url_path(url) {\n\treturn (\n\t\tdecode_pathname(\n\t\t\tapp.hash ? url.hash.replace(/^#/, '').replace(/[?#].+/, '') : url.pathname.slice(base.length)\n\t\t) || '/'\n\t);\n}\n\n/** @param {URL} url */\nfunction get_page_key(url) {\n\treturn (app.hash ? url.hash.replace(/^#/, '') : url.pathname) + url.search;\n}\n\n/**\n * @param {{\n *   url: URL;\n *   type: import('@sveltejs/kit').Navigation[\"type\"];\n *   intent?: import('./types.js').NavigationIntent;\n *   delta?: number;\n * }} opts\n */\nfunction _before_navigate({ url, type, intent, delta }) {\n\tlet should_block = false;\n\n\tconst nav = create_navigation(current, intent, url, type);\n\n\tif (delta !== undefined) {\n\t\tnav.navigation.delta = delta;\n\t}\n\n\tconst cancellable = {\n\t\t...nav.navigation,\n\t\tcancel: () => {\n\t\t\tshould_block = true;\n\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t}\n\t};\n\n\tif (!is_navigating) {\n\t\t// Don't run the event during redirects\n\t\tbefore_navigate_callbacks.forEach((fn) => fn(cancellable));\n\t}\n\n\treturn should_block ? null : nav;\n}\n\n/**\n * @param {{\n *   type: import('@sveltejs/kit').NavigationType;\n *   url: URL;\n *   popped?: {\n *     state: Record<string, any>;\n *     scroll: { x: number, y: number };\n *     delta: number;\n *   };\n *   keepfocus?: boolean;\n *   noscroll?: boolean;\n *   replace_state?: boolean;\n *   state?: Record<string, any>;\n *   redirect_count?: number;\n *   nav_token?: {};\n *   accept?: () => void;\n *   block?: () => void;\n * }} opts\n */\nasync function navigate({\n\ttype,\n\turl,\n\tpopped,\n\tkeepfocus,\n\tnoscroll,\n\treplace_state,\n\tstate = {},\n\tredirect_count = 0,\n\tnav_token = {},\n\taccept = noop,\n\tblock = noop\n}) {\n\tconst prev_token = token;\n\ttoken = nav_token;\n\n\tconst intent = await get_navigation_intent(url, false);\n\tconst nav =\n\t\ttype === 'enter'\n\t\t\t? create_navigation(current, intent, url, type)\n\t\t\t: _before_navigate({ url, type, delta: popped?.delta, intent });\n\n\tif (!nav) {\n\t\tblock();\n\t\tif (token === nav_token) token = prev_token;\n\t\treturn;\n\t}\n\n\t// store this before calling `accept()`, which may change the index\n\tconst previous_history_index = current_history_index;\n\tconst previous_navigation_index = current_navigation_index;\n\n\taccept();\n\n\tis_navigating = true;\n\n\tif (started && nav.navigation.type !== 'enter') {\n\t\tstores.navigating.set((navigating.current = nav.navigation));\n\t}\n\n\tlet navigation_result = intent && (await load_route(intent));\n\n\tif (!navigation_result) {\n\t\tif (is_external_url(url, base, app.hash)) {\n\t\t\tif (DEV && app.hash) {\n\t\t\t\t// Special case for hash mode during DEV: If someone accidentally forgets to use a hash for the link,\n\t\t\t\t// they would end up here in an endless loop. Fall back to error page in that case\n\t\t\t\tnavigation_result = await server_fallback(\n\t\t\t\t\turl,\n\t\t\t\t\t{ id: null },\n\t\t\t\t\tawait handle_error(\n\t\t\t\t\t\tnew SvelteKitError(\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t'Not Found',\n\t\t\t\t\t\t\t`Not found: ${url.pathname} (did you forget the hash?)`\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\t404\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn await native_navigation(url);\n\t\t\t}\n\t\t} else {\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new SvelteKitError(404, 'Not Found', `Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\t}\n\n\t// if this is an internal navigation intent, use the normalized\n\t// URL for the rest of the function\n\turl = intent?.url || url;\n\n\t// abort if user navigated during update\n\tif (token !== nav_token) {\n\t\tnav.reject(new Error('navigation aborted'));\n\t\treturn false;\n\t}\n\n\tif (navigation_result.type === 'redirect') {\n\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\tif (redirect_count >= 20) {\n\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\tstatus: 500,\n\t\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\turl,\n\t\t\t\troute: { id: null }\n\t\t\t});\n\t\t} else {\n\t\t\tawait _goto(new URL(navigation_result.location, url).href, {}, redirect_count + 1, nav_token);\n\t\t\treturn false;\n\t\t}\n\t} else if (/** @type {number} */ (navigation_result.props.page.status) >= 400) {\n\t\tconst updated = await stores.updated.check();\n\t\tif (updated) {\n\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\tawait update_service_worker();\n\t\t\tawait native_navigation(url);\n\t\t}\n\t}\n\n\t// reset invalidation only after a finished navigation. If there are redirects or\n\t// additional invalidations, they should get the same invalidation treatment\n\treset_invalidation();\n\n\tupdating = true;\n\n\tupdate_scroll_positions(previous_history_index);\n\tcapture_snapshot(previous_navigation_index);\n\n\t// ensure the url pathname matches the page's trailing slash option\n\tif (navigation_result.props.page.url.pathname !== url.pathname) {\n\t\turl.pathname = navigation_result.props.page.url.pathname;\n\t}\n\n\tstate = popped ? popped.state : state;\n\n\tif (!popped) {\n\t\t// this is a new navigation, rather than a popstate\n\t\tconst change = replace_state ? 0 : 1;\n\n\t\tconst entry = {\n\t\t\t[HISTORY_INDEX]: (current_history_index += change),\n\t\t\t[NAVIGATION_INDEX]: (current_navigation_index += change),\n\t\t\t[STATES_KEY]: state\n\t\t};\n\n\t\tconst fn = replace_state ? history.replaceState : history.pushState;\n\t\tfn.call(history, entry, '', url);\n\n\t\tif (!replace_state) {\n\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t}\n\t}\n\n\t// reset preload synchronously after the history state has been set to avoid race conditions\n\tload_cache = null;\n\n\tnavigation_result.props.page.state = state;\n\n\tif (started) {\n\t\tcurrent = navigation_result.state;\n\n\t\t// reset url before updating page store\n\t\tif (navigation_result.props.page) {\n\t\t\tnavigation_result.props.page.url = url;\n\t\t}\n\n\t\tconst after_navigate = (\n\t\t\tawait Promise.all(\n\t\t\t\tArray.from(on_navigate_callbacks, (fn) =>\n\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t)\n\t\t\t)\n\t\t).filter(/** @returns {value is () => void} */ (value) => typeof value === 'function');\n\n\t\tif (after_navigate.length > 0) {\n\t\t\tfunction cleanup() {\n\t\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\t\tafter_navigate_callbacks.delete(fn);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tafter_navigate.push(cleanup);\n\n\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\tafter_navigate_callbacks.add(fn);\n\t\t\t});\n\t\t}\n\n\t\troot.$set(navigation_result.props);\n\t\tupdate(navigation_result.props.page);\n\t\thas_navigated = true;\n\t} else {\n\t\tinitialize(navigation_result, target, false);\n\t}\n\n\tconst { activeElement } = document;\n\n\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\tawait tick();\n\n\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\tconst scroll = popped ? popped.scroll : noscroll ? scroll_state() : null;\n\n\tif (autoscroll) {\n\t\tconst deep_linked = url.hash && document.getElementById(get_id(url));\n\t\tif (scroll) {\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t} else if (deep_linked) {\n\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t// CSS properties.\n\t\t\tdeep_linked.scrollIntoView();\n\t\t} else {\n\t\t\tscrollTo(0, 0);\n\t\t}\n\t}\n\n\tconst changed_focus =\n\t\t// reset focus only if any manual focus management didn't override it\n\t\tdocument.activeElement !== activeElement &&\n\t\t// also refocus when activeElement is body already because the\n\t\t// focus event might not have been fired on it yet\n\t\tdocument.activeElement !== document.body;\n\n\tif (!keepfocus && !changed_focus) {\n\t\treset_focus(url);\n\t}\n\n\tautoscroll = true;\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\n\tis_navigating = false;\n\n\tif (type === 'popstate') {\n\t\trestore_snapshot(current_navigation_index);\n\t}\n\n\tnav.fulfil(undefined);\n\n\tafter_navigate_callbacks.forEach((fn) =>\n\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t);\n\n\tstores.navigating.set((navigating.current = null));\n\n\tupdating = false;\n}\n\n/**\n * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n * @param {URL} url\n * @param {{ id: string | null }} route\n * @param {App.Error} error\n * @param {number} status\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function server_fallback(url, route, error, status) {\n\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t// which means no SSR, which means we would end up in an endless loop\n\t\treturn await load_root_error_page({\n\t\t\tstatus,\n\t\t\terror,\n\t\t\turl,\n\t\t\troute\n\t\t});\n\t}\n\n\tif (DEV && status !== 404) {\n\t\tconsole.error(\n\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t);\n\n\t\tdebugger; // eslint-disable-line\n\t}\n\n\treturn await native_navigation(url);\n}\n\nif (import.meta.hot) {\n\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\tif (current.error) location.reload();\n\t});\n}\n\n/** @typedef {(typeof PRELOAD_PRIORITIES)['hover'] | (typeof PRELOAD_PRIORITIES)['tap']} PreloadDataPriority */\n\nfunction setup_preload() {\n\t/** @type {NodeJS.Timeout} */\n\tlet mousemove_timeout;\n\t/** @type {Element} */\n\tlet current_a;\n\t/** @type {PreloadDataPriority} */\n\tlet current_priority;\n\n\tcontainer.addEventListener('mousemove', (event) => {\n\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\tclearTimeout(mousemove_timeout);\n\t\tmousemove_timeout = setTimeout(() => {\n\t\t\tvoid preload(target, PRELOAD_PRIORITIES.hover);\n\t\t}, 20);\n\t});\n\n\t/** @param {Event} event */\n\tfunction tap(event) {\n\t\tif (event.defaultPrevented) return;\n\t\tvoid preload(/** @type {Element} */ (event.composedPath()[0]), PRELOAD_PRIORITIES.tap);\n\t}\n\n\tcontainer.addEventListener('mousedown', tap);\n\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\tconst observer = new IntersectionObserver(\n\t\t(entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tvoid _preload_code(new URL(/** @type {HTMLAnchorElement} */ (entry.target).href));\n\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{ threshold: 0 }\n\t);\n\n\t/**\n\t * @param {Element} element\n\t * @param {PreloadDataPriority} priority\n\t */\n\tasync function preload(element, priority) {\n\t\tconst a = find_anchor(element, container);\n\n\t\t// we don't want to preload data again if the user has already hovered/tapped\n\t\tconst interacted = a === current_a && priority >= current_priority;\n\t\tif (!a || interacted) return;\n\n\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\tif (external || download) return;\n\n\t\tconst options = get_router_options(a);\n\n\t\t// we don't want to preload data for a page we're already on\n\t\tconst same_url = url && get_page_key(current.url) === get_page_key(url);\n\t\tif (options.reload || same_url) return;\n\n\t\tif (priority <= options.preload_data) {\n\t\t\tcurrent_a = a;\n\t\t\t// we don't want to preload data again on tap if we've already preloaded it on hover\n\t\t\tcurrent_priority = PRELOAD_PRIORITIES.tap;\n\n\t\t\tconst intent = await get_navigation_intent(url, false);\n\t\t\tif (!intent) return;\n\n\t\t\tif (DEV) {\n\t\t\t\tvoid _preload_data(intent).then((result) => {\n\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t'See https://svelte.dev/docs/kit/link-options for more info'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvoid _preload_data(intent);\n\t\t\t}\n\t\t} else if (priority <= options.preload_code) {\n\t\t\tcurrent_a = a;\n\t\t\tcurrent_priority = priority;\n\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t}\n\t}\n\n\tfunction after_navigate() {\n\t\tobserver.disconnect();\n\n\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\t\tif (external || download) continue;\n\n\t\t\tconst options = get_router_options(a);\n\t\t\tif (options.reload) continue;\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\tobserver.observe(a);\n\t\t\t}\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t\t}\n\t\t}\n\t}\n\n\tafter_navigate_callbacks.add(after_navigate);\n\tafter_navigate();\n}\n\n/**\n * @param {unknown} error\n * @param {import('@sveltejs/kit').NavigationEvent} event\n * @returns {import('types').MaybePromise<App.Error>}\n */\nfunction handle_error(error, event) {\n\tif (error instanceof HttpError) {\n\t\treturn error.body;\n\t}\n\n\tif (DEV) {\n\t\terrored = true;\n\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t}\n\n\tconst status = get_status(error);\n\tconst message = get_message(error);\n\n\treturn (\n\t\tapp.hooks.handleError({ error, event, status, message }) ?? /** @type {any} */ ({ message })\n\t);\n}\n\n/**\n * @template {Function} T\n * @param {Set<T>} callbacks\n * @param {T} callback\n */\nfunction add_navigation_callback(callbacks, callback) {\n\tonMount(() => {\n\t\tcallbacks.add(callback);\n\n\t\treturn () => {\n\t\t\tcallbacks.delete(callback);\n\t\t};\n\t});\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport function afterNavigate(callback) {\n\tadd_navigation_callback(after_navigate_callbacks, callback);\n}\n\n/**\n * A navigation interceptor that triggers before we navigate to a URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n *\n * Calling `cancel()` will prevent the navigation from completing. If `navigation.type === 'leave'` — meaning the user is navigating away from the app (or closing the tab) — calling `cancel` will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response.\n *\n * When a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), `navigation.to.route.id` will be `null`.\n *\n * If the navigation will (if not cancelled) cause the document to unload — in other words `'leave'` navigations and `'link'` navigations where `navigation.to.route === null` — `navigation.willUnload` is `true`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport function beforeNavigate(callback) {\n\tadd_navigation_callback(before_navigate_callbacks, callback);\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL except during full-page navigations.\n *\n * If you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n *\n * If a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n *\n * `onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>} callback\n * @returns {void}\n */\nexport function onNavigate(callback) {\n\tadd_navigation_callback(on_navigate_callbacks, callback);\n}\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport function disableScrollHandling() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call disableScrollHandling() on the server');\n\t}\n\n\tif (DEV && started && !updating) {\n\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t}\n\n\tif (updating || !started) {\n\t\tautoscroll = false;\n\t}\n}\n\n/**\n * Allows you to navigate programmatically to a given route, with options such as keeping the current element focused.\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n *\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://svelte.dev/docs/kit/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [opts.invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://svelte.dev/docs/kit/load#rerunning-load-functions for more info on invalidation.\n * @param {Array<string | URL | ((url: URL) => boolean)>} [opts.invalidate] Causes any load functions to re-run if they depend on one of the urls\n * @param {App.PageState} [opts.state] An optional object that will be available as `page.state`\n * @returns {Promise<void>}\n */\nexport function goto(url, opts = {}) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call goto(...) on the server');\n\t}\n\n\turl = new URL(resolve_url(url));\n\n\tif (url.origin !== origin) {\n\t\treturn Promise.reject(\n\t\t\tnew Error(\n\t\t\t\tDEV\n\t\t\t\t\t? `Cannot use \\`goto\\` with an external URL. Use \\`window.location = \"${url}\"\\` instead`\n\t\t\t\t\t: 'goto: invalid URL'\n\t\t\t)\n\t\t);\n\t}\n\n\treturn _goto(url, opts, 0);\n}\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n * @returns {Promise<void>}\n */\nexport function invalidate(resource) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidate(...) on the server');\n\t}\n\n\tpush_invalidated(resource);\n\n\treturn _invalidate();\n}\n\n/**\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n */\nfunction push_invalidated(resource) {\n\tif (typeof resource === 'function') {\n\t\tinvalidated.push(resource);\n\t} else {\n\t\tconst { href } = new URL(resource, location.href);\n\t\tinvalidated.push((url) => url.href === href);\n\t}\n}\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @returns {Promise<void>}\n */\nexport function invalidateAll() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidateAll() on the server');\n\t}\n\n\tforce_invalidation = true;\n\treturn _invalidate();\n}\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves with the result of running the new route's `load` functions once the preload is complete.\n *\n * @param {string} href Page to preload\n * @returns {Promise<{ type: 'loaded'; status: number; data: Record<string, any> } | { type: 'redirect'; location: string }>}\n */\nexport async function preloadData(href) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadData(...) on the server');\n\t}\n\n\tconst url = resolve_url(href);\n\tconst intent = await get_navigation_intent(url, false);\n\n\tif (!intent) {\n\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t}\n\n\tconst result = await _preload_data(intent);\n\tif (result.type === 'redirect') {\n\t\treturn {\n\t\t\ttype: result.type,\n\t\t\tlocation: result.location\n\t\t};\n\t}\n\n\tconst { status, data } = result.props.page ?? page;\n\treturn { type: result.type, status, data };\n}\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @param {string} pathname\n * @returns {Promise<void>}\n */\nexport async function preloadCode(pathname) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadCode(...) on the server');\n\t}\n\n\tconst url = new URL(pathname, current.url);\n\n\tif (DEV) {\n\t\tif (!pathname.startsWith('/')) {\n\t\t\tthrow new Error(\n\t\t\t\t'argument passed to preloadCode must be a pathname (i.e. \"/about\" rather than \"http://example.com/about\"'\n\t\t\t);\n\t\t}\n\n\t\tif (!pathname.startsWith(base)) {\n\t\t\tthrow new Error(\n\t\t\t\t`pathname passed to preloadCode must start with \\`paths.base\\` (i.e. \"${base}${pathname}\" rather than \"${pathname}\")`\n\t\t\t);\n\t\t}\n\n\t\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\t\tconst rerouted = await get_rerouted_url(url);\n\t\t\tif (!rerouted || !routes.find((route) => route.exec(get_url_path(rerouted)))) {\n\t\t\t\tthrow new Error(`'${pathname}' did not match any routes`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _preload_code(url);\n}\n\n/**\n * Programmatically create a new history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function pushState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call pushState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call pushState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tupdate_scroll_positions(current_history_index);\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: (current_history_index += 1),\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.pushState(opts, '', resolve_url(url));\n\thas_navigated = true;\n\n\tpage.state = state;\n\troot.$set({\n\t\t// we need to assign a new page object so that subscribers are correctly notified\n\t\tpage: clone_page(page)\n\t});\n\n\tclear_onward_history(current_history_index, current_navigation_index);\n}\n\n/**\n * Programmatically replace the current history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function replaceState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call replaceState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call replaceState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: current_history_index,\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.replaceState(opts, '', resolve_url(url));\n\n\tpage.state = state;\n\troot.$set({\n\t\tpage: clone_page(page)\n\t});\n}\n\n/**\n * This action updates the `form` property of the current page with the given data and updates `page.status`.\n * In case of an error, it redirects to the nearest error page.\n * @template {Record<string, unknown> | undefined} Success\n * @template {Record<string, unknown> | undefined} Failure\n * @param {import('@sveltejs/kit').ActionResult<Success, Failure>} result\n * @returns {Promise<void>}\n */\nexport async function applyAction(result) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call applyAction(...) on the server');\n\t}\n\n\tif (result.type === 'error') {\n\t\tconst url = new URL(location.href);\n\n\t\tconst { branch, route } = current;\n\t\tif (!route) return;\n\n\t\tconst error_load = await load_nearest_error_page(current.branch.length, branch, route.errors);\n\t\tif (error_load) {\n\t\t\tconst navigation_result = get_navigation_result_from_branch({\n\t\t\t\turl,\n\t\t\t\tparams: current.params,\n\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\tstatus: result.status ?? 500,\n\t\t\t\terror: result.error,\n\t\t\t\troute\n\t\t\t});\n\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\troot.$set(navigation_result.props);\n\t\t\tupdate(navigation_result.props.page);\n\n\t\t\tvoid tick().then(() => reset_focus(current.url));\n\t\t}\n\t} else if (result.type === 'redirect') {\n\t\tawait _goto(result.location, { invalidateAll: true }, 0);\n\t} else {\n\t\tpage.form = result.data;\n\t\tpage.status = result.status;\n\n\t\t/** @type {Record<string, any>} */\n\t\troot.$set({\n\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t// after use:enhance reset the form....\n\t\t\tform: null,\n\t\t\tpage: clone_page(page)\n\t\t});\n\n\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\tawait tick();\n\t\troot.$set({ form: result.data });\n\n\t\tif (result.type === 'success') {\n\t\t\treset_focus(page.url);\n\t\t}\n\t}\n}\n\nfunction _start_router() {\n\thistory.scrollRestoration = 'manual';\n\n\t// Adopted from Nuxt.js\n\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t// and back-navigation from other pages to use the browser to restore the\n\t// scrolling position.\n\taddEventListener('beforeunload', (e) => {\n\t\tlet should_block = false;\n\n\t\tpersist_state();\n\n\t\tif (!is_navigating) {\n\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\tconst navigation = {\n\t\t\t\t...nav.navigation,\n\t\t\t\tcancel: () => {\n\t\t\t\t\tshould_block = true;\n\t\t\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbefore_navigate_callbacks.forEach((fn) => fn(navigation));\n\t\t}\n\n\t\tif (should_block) {\n\t\t\te.preventDefault();\n\t\t\te.returnValue = '';\n\t\t} else {\n\t\t\thistory.scrollRestoration = 'auto';\n\t\t}\n\t});\n\n\taddEventListener('visibilitychange', () => {\n\t\tif (document.visibilityState === 'hidden') {\n\t\t\tpersist_state();\n\t\t}\n\t});\n\n\t// @ts-expect-error this isn't supported everywhere yet\n\tif (!navigator.connection?.saveData) {\n\t\tsetup_preload();\n\t}\n\n\t/** @param {MouseEvent} event */\n\tcontainer.addEventListener('click', async (event) => {\n\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\tif (event.button || event.which !== 1) return;\n\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\tif (!a) return;\n\n\t\tconst { url, external, target, download } = get_link_info(a, base, app.hash);\n\t\tif (!url) return;\n\n\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\tif (target === '_parent' || target === '_top') {\n\t\t\tif (window.parent !== window) return;\n\t\t} else if (target && target !== '_self') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = get_router_options(a);\n\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t// See:\n\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\tif (\n\t\t\t!is_svg_a_element &&\n\t\t\turl.protocol !== location.protocol &&\n\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t)\n\t\t\treturn;\n\n\t\tif (download) return;\n\n\t\tconst [nonhash, hash] = (app.hash ? url.hash.replace(/^#/, '') : url.href).split('#');\n\t\tconst same_pathname = nonhash === strip_hash(location);\n\n\t\t// Ignore the following but fire beforeNavigate\n\t\tif (external || (options.reload && (!same_pathname || !hash))) {\n\t\t\tif (_before_navigate({ url, type: 'link' })) {\n\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t// being called when the page unloads\n\t\t\t\tis_navigating = true;\n\t\t\t} else {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t// This will ensure the `hashchange` event is fired\n\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\tif (hash !== undefined && same_pathname) {\n\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t// history state value without any signal that we can detect.\n\t\t\tconst [, current_hash] = current.url.href.split('#');\n\t\t\tif (current_hash === hash) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// We're already on /# and click on a link that goes to /#, or we're on\n\t\t\t\t// /#top and click on a link that goes to /#top. In those cases just go to\n\t\t\t\t// the top of the page, and avoid a history change.\n\t\t\t\tif (hash === '' || (hash === 'top' && a.ownerDocument.getElementById('top') === null)) {\n\t\t\t\t\twindow.scrollTo({ top: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconst element = a.ownerDocument.getElementById(decodeURIComponent(hash));\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\telement.scrollIntoView();\n\t\t\t\t\t\telement.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\thash_navigating = true;\n\n\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\tupdate_url(url);\n\n\t\t\tif (!options.replace_state) return;\n\n\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\thash_navigating = false;\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// allow the browser to repaint before navigating —\n\t\t// this prevents INP scores being penalised\n\t\tawait new Promise((fulfil) => {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tsetTimeout(fulfil, 0);\n\t\t\t});\n\n\t\t\tsetTimeout(fulfil, 100); // fallback for edge case where rAF doesn't fire because e.g. tab was backgrounded\n\t\t});\n\n\t\tawait navigate({\n\t\t\ttype: 'link',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\tcontainer.addEventListener('submit', (event) => {\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t);\n\n\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (event.submitter);\n\n\t\tconst target = submitter?.formTarget || form.target;\n\n\t\tif (target === '_blank') return;\n\n\t\tconst method = submitter?.formMethod || form.method;\n\n\t\tif (method !== 'get') return;\n\n\t\t// It is impossible to use form actions with hash router, so we just ignore handling them here\n\t\tconst url = new URL(\n\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t);\n\n\t\tif (is_external_url(url, base, false)) return;\n\n\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\tconst options = get_router_options(event_form);\n\t\tif (options.reload) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tconst data = new FormData(event_form);\n\n\t\tconst submitter_name = submitter?.getAttribute('name');\n\t\tif (submitter_name) {\n\t\t\tdata.append(submitter_name, submitter?.getAttribute('value') ?? '');\n\t\t}\n\n\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\turl.search = new URLSearchParams(data).toString();\n\n\t\tvoid navigate({\n\t\t\ttype: 'form',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href\n\t\t});\n\t});\n\n\taddEventListener('popstate', async (event) => {\n\t\tif (resetting_focus) return;\n\n\t\tif (event.state?.[HISTORY_INDEX]) {\n\t\t\tconst history_index = event.state[HISTORY_INDEX];\n\t\t\ttoken = {};\n\n\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\tif (history_index === current_history_index) return;\n\n\t\t\tconst scroll = scroll_positions[history_index];\n\t\t\tconst state = event.state[STATES_KEY] ?? {};\n\t\t\tconst url = new URL(event.state[PAGE_URL_KEY] ?? location.href);\n\t\t\tconst navigation_index = event.state[NAVIGATION_INDEX];\n\t\t\tconst is_hash_change = current.url ? strip_hash(location) === strip_hash(current.url) : false;\n\t\t\tconst shallow =\n\t\t\t\tnavigation_index === current_navigation_index && (has_navigated || is_hash_change);\n\n\t\t\tif (shallow) {\n\t\t\t\t// We don't need to navigate, we just need to update scroll and/or state.\n\t\t\t\t// This happens with hash links and `pushState`/`replaceState`. The\n\t\t\t\t// exception is if we haven't navigated yet, since we could have\n\t\t\t\t// got here after a modal navigation then a reload\n\t\t\t\tif (state !== page.state) {\n\t\t\t\t\tpage.state = state;\n\t\t\t\t}\n\n\t\t\t\tupdate_url(url);\n\n\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\tif (scroll) scrollTo(scroll.x, scroll.y);\n\n\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta = history_index - current_history_index;\n\n\t\t\tawait navigate({\n\t\t\t\ttype: 'popstate',\n\t\t\t\turl,\n\t\t\t\tpopped: {\n\t\t\t\t\tstate,\n\t\t\t\t\tscroll,\n\t\t\t\t\tdelta\n\t\t\t\t},\n\t\t\t\taccept: () => {\n\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\tcurrent_navigation_index = navigation_index;\n\t\t\t\t},\n\t\t\t\tblock: () => {\n\t\t\t\t\thistory.go(-delta);\n\t\t\t\t},\n\t\t\t\tnav_token: token\n\t\t\t});\n\t\t} else {\n\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\tif (!hash_navigating) {\n\t\t\t\tconst url = new URL(location.href);\n\t\t\t\tupdate_url(url);\n\n\t\t\t\t// if the user edits the hash via the browser URL bar, trigger a full-page\n\t\t\t\t// reload to align with pathname router behavior\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.reload();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\taddEventListener('hashchange', () => {\n\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t// we need to update history, otherwise we have to leave it alone\n\t\tif (hash_navigating) {\n\t\t\thash_navigating = false;\n\t\t\thistory.replaceState(\n\t\t\t\t{\n\t\t\t\t\t...history.state,\n\t\t\t\t\t[HISTORY_INDEX]: ++current_history_index,\n\t\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t\t},\n\t\t\t\t'',\n\t\t\t\tlocation.href\n\t\t\t);\n\t\t}\n\t});\n\n\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\tfor (const link of document.querySelectorAll('link')) {\n\t\tif (ICON_REL_ATTRIBUTES.has(link.rel)) {\n\t\t\tlink.href = link.href; // eslint-disable-line\n\t\t}\n\t}\n\n\taddEventListener('pageshow', (event) => {\n\t\t// If the user navigates to another site and then uses the back button and\n\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t// the navigation away from it was successful.\n\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\tif (event.persisted) {\n\t\t\tstores.navigating.set((navigating.current = null));\n\t\t}\n\t});\n\n\t/**\n\t * @param {URL} url\n\t */\n\tfunction update_url(url) {\n\t\tcurrent.url = page.url = url;\n\t\tstores.page.set(clone_page(page));\n\t\tstores.page.notify();\n\t}\n}\n\n/**\n * @param {HTMLElement} target\n * @param {import('./types.js').HydrateOptions} opts\n */\nasync function _hydrate(\n\ttarget,\n\t{ status = 200, error, node_ids, params, route, server_route, data: server_data_nodes, form }\n) {\n\thydrated = true;\n\n\tconst url = new URL(location.href);\n\n\t/** @type {import('types').CSRRoute | undefined} */\n\tlet parsed_route;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t// of determining the params on the client side.\n\t\t\t({ params = {}, route = { id: null } } = (await get_navigation_intent(url, false)) || {});\n\t\t}\n\n\t\tparsed_route = routes.find(({ id }) => id === route.id);\n\t} else {\n\t\t// undefined in case of 404\n\t\tif (server_route) {\n\t\t\tparsed_route = route = parse_server_route(server_route, app.nodes);\n\t\t} else {\n\t\t\troute = { id: null };\n\t\t\tparams = {};\n\t\t}\n\t}\n\n\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\tlet result;\n\tlet hydrate = true;\n\n\ttry {\n\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\tif (server_data_node?.uses) {\n\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: app.nodes[n],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t});\n\t\t});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t// so that error boundaries can be lined up correctly\n\t\tif (parsed_route) {\n\t\t\tconst layouts = parsed_route.layouts;\n\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresult = get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus,\n\t\t\terror,\n\t\t\tform,\n\t\t\troute: parsed_route ?? null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t// a redirect but only in the browser\n\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\treturn;\n\t\t}\n\n\t\tresult = await load_root_error_page({\n\t\t\tstatus: get_status(error),\n\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\turl,\n\t\t\troute\n\t\t});\n\n\t\ttarget.textContent = '';\n\t\thydrate = false;\n\t}\n\n\tif (result.props.page) {\n\t\tresult.props.page.state = {};\n\t}\n\n\tinitialize(result, target, hydrate);\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\t// use window.fetch directly to allow using a 3rd party-patched fetch implementation\n\tconst fetcher = DEV ? dev_fetch : window.fetch;\n\tconst res = await fetcher(data_url.href, {});\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\t// if `__data.json` doesn't exist or the server has an internal error,\n\t\t// avoid parsing the HTML error page as a JSON\n\t\t/** @type {string | undefined} */\n\t\tlet message;\n\t\tif (res.headers.get('content-type')?.includes('application/json')) {\n\t\t\tmessage = await res.json();\n\t\t} else if (res.status === 404) {\n\t\t\tmessage = 'Not Found';\n\t\t} else if (res.status === 500) {\n\t\t\tmessage = 'Internal Error';\n\t\t}\n\t\tthrow new HttpError(res.status, message);\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\t\tconst decoder = new TextDecoder();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\t...app.decoders,\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : decoder.decode(value, { stream: true }); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url,\n\t\tsearch_params: new Set(uses?.search_params ?? [])\n\t};\n}\n\n/**\n * This flag is used to avoid client-side navigation when we're only using\n * `location.replace()` to set focus.\n */\nlet resetting_focus = false;\n\n/**\n * @param {URL} url\n */\nfunction reset_focus(url) {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\n\t\t// Mimic the browsers' behaviour and set the sequential focus navigation\n\t\t// starting point to the fragment identifier.\n\t\tconst id = get_id(url);\n\t\tif (id && document.getElementById(id)) {\n\t\t\tconst { x, y } = scroll_state();\n\n\t\t\t// `element.focus()` doesn't work on Safari and Firefox Ubuntu so we need\n\t\t\t// to use this hack with `location.replace()` instead.\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst history_state = history.state;\n\n\t\t\t\tresetting_focus = true;\n\t\t\t\tlocation.replace(`#${id}`);\n\n\t\t\t\t// if we're using hash routing, we need to restore the original hash after\n\t\t\t\t// setting the focus with `location.replace()`. Although we're calling\n\t\t\t\t// `location.replace()` again, the focus won't shift to the new hash\n\t\t\t\t// unless there's an element with the ID `/pathname#hash`, etc.\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.replace(url.hash);\n\t\t\t\t}\n\n\t\t\t\t// but Firefox has a bug that sets the history state to `null` so we\n\t\t\t\t// need to restore it after.\n\t\t\t\t// See https://bugzilla.mozilla.org/show_bug.cgi?id=1199924\n\t\t\t\thistory.replaceState(history_state, '', url.hash);\n\n\t\t\t\t// Scroll management has already happened earlier so we need to restore\n\t\t\t\t// the scroll position after setting the sequential focus navigation starting point\n\t\t\t\tscrollTo(x, y);\n\t\t\t\tresetting_focus = false;\n\t\t\t});\n\t\t} else {\n\t\t\t// If the ID doesn't exist, we try to mimic browsers' behaviour as closely\n\t\t\t// as possible by targeting the first scrollable region. Unfortunately, it's\n\t\t\t// not a perfect match — e.g. shift-tabbing won't immediately cycle up from\n\t\t\t// the end of the page on Chromium\n\t\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\t\tconst root = document.body;\n\t\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\t\troot.tabIndex = -1;\n\t\t\t// @ts-expect-error options.focusVisible is only supported in Firefox\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#browser_compatibility\n\t\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\t\tif (tabindex !== null) {\n\t\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t\t} else {\n\t\t\t\troot.removeAttribute('tabindex');\n\t\t\t}\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @template {import('@sveltejs/kit').NavigationType} T\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {T} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {Omit<import('@sveltejs/kit').Navigation, 'type'> & { type: T }} */\n\tconst navigation = {\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t};\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\n/**\n * TODO: remove this in 3.0 when the page store is also removed\n *\n * We need to assign a new page object so that subscribers are correctly notified.\n * However, spreading `{ ...page }` returns an empty object so we manually\n * assign to each property instead.\n *\n * @param {import('@sveltejs/kit').Page} page\n */\nfunction clone_page(page) {\n\treturn {\n\t\tdata: page.data,\n\t\terror: page.error,\n\t\tform: page.form,\n\t\tparams: page.params,\n\t\troute: page.route,\n\t\tstate: page.state,\n\t\tstatus: page.status,\n\t\turl: page.url\n\t};\n}\n\n/**\n * @param {URL} url\n * @returns {URL}\n */\nfunction decode_hash(url) {\n\tconst new_url = new URL(url);\n\t// Safari, for some reason, does change # to %23, when entered through the address bar\n\tnew_url.hash = decodeURIComponent(url.hash);\n\treturn new_url;\n}\n\n/**\n * @param {URL} url\n * @returns {string}\n */\nfunction get_id(url) {\n\tlet id;\n\n\tif (app.hash) {\n\t\tconst [, , second] = url.hash.split('#', 3);\n\t\tid = second ?? '';\n\t} else {\n\t\tid = url.hash.slice(1);\n\t}\n\n\treturn decodeURIComponent(id);\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":["URL","normalize_path","path","trailing_slash","endsWith","slice","decode_pathname","pathname","split","map","decodeURI","join","decode_params","params","key","decodeURIComponent","strip_hash","href","make_trackable","url","callback","search_params_callback","allow_hash","tracked","Object","defineProperty","value","Proxy","searchParams","get","obj","param","Reflect","bind","enumerable","configurable","tracked_url_properties","push","property","disable_hash","Error","hash","values","i","length","charCodeAt","ArrayBuffer","isView","buffer","Uint8Array","byteOffset","byteLength","TypeError","toString","b64_decode","text","d","atob","u8","loading","native_fetch","window","fetch","lock_fetch","unlock_fetch","can_inspect_stack_trace","check_stack_trace","async","stack","includes","input","init","Request","stack_array","cutoff","findIndex","a","in_load_heuristic","used_kit_fetch","__sveltekit_fetch__","console","warn","method","cache","delete","build_selector","Map","initial_fetch","resource","opts","selector","script","document","querySelector","textContent","body","JSON","parse","ttl","getAttribute","set","Number","b64","Promise","resolve","Response","dev_fetch","subsequent_fetch","resolved","size","cached","performance","now","patched_opts","writable","stringify","headers","Headers","param_pattern","parse_route_id","id","pattern","RegExp","get_route_segments","segment","rest_match","exec","name","matcher","optional","rest","chained","optional_match","parts","result","content","startsWith","escape","String","fromCharCode","parseInt","code","match","is_optional","is_rest","affects_path","test","route","filter","matchers","values_needing_match","buffered","s","next_param","next_value","keys","str","normalize","replace","nodes","server_loads","dictionary","layouts_with_server_load","Set","entries","leaf","layouts","errors","n","create_layout_loader","create_leaf_loader","Math","max","uses_server_data","has","sessionStorage","data","SNAPSHOT_KEY","SCROLL_KEY","STATES_KEY","PAGE_URL_KEY","HISTORY_INDEX","NAVIGATION_INDEX","PRELOAD_PRIORITIES","tap","hover","viewport","eager","off","false","origin","location","resolve_url","baseURI","baseTags","getElementsByTagName","scroll_state","x","pageXOffset","y","pageYOffset","warned","WeakSet","valid_link_options","keepfocus","noscroll","reload","replacestate","link_option","element","validate_link_option","error","option","add","levels","parent_element","parent","assignedSlot","parentNode","nodeType","host","find_anchor","target","nodeName","toUpperCase","hasAttribute","get_link_info","base","uses_hash_router","SVGAElement","baseVal","external","is_external_url","download","get_router_options","preload_code","preload_data","replace_state","el","documentElement","get_option_state","notifiable_store","store","ready","notify","update","val","new_value","subscribe","run","old_value","create_updated_store","check","hash_routing","protocol","load_css","deps","decode64","string","binaryString","asciiToBinary","arraybuffer","dv","DataView","setUint8","KEY_STRING","output","accumulatedBits","indexOf","UNDEFINED","HOLE","NAN","POSITIVE_INFINITY","NEGATIVE_INFINITY","NEGATIVE_ZERO","unflatten","parsed","revivers","hydrate","Array","isArray","hydrated","index","standalone","NaN","Infinity","type","reviver","Date","BigInt","create","TypedArrayConstructor","globalThis","base64","typedArray","array","object","validator","expected","validate","module","file","hint","hint_for_supported_files","lastIndexOf","ext","supported_files","valid_layout_exports","valid_page_exports","valid_layout_server_exports","valid_page_server_exports","valid_server_exports","at","validate_page_exports","compact","arr","HttpError","constructor","status","this","message","Redirect","SvelteKitError","super","validate_depends","route_id","dep","INVALIDATED_PARAM","TRAILING_SLASH_PARAM","get_status","get_message","page","navigating","is_legacy","onMount","form","state","current","_c","__privateAdd","_route","$.tag","$.state","_url","WeakMap","_d","new_page","assign","DATA_SUFFIX","HTML_DATA_SUFFIX","add_data_suffix","ICON_REL_ATTRIBUTES","scroll_positions","storage.get","snapshots","current_module_url","_a","_b","push_state","history","pushState","args","apply","replaceState","stores","updated","update_scroll_positions","clear_onward_history","current_history_index","current_navigation_index","native_navigation","update_service_worker","navigator","registration","serviceWorker","getRegistration","noop","routes","default_layout_loader","default_error_loader","container","app","invalidated","components","load_cache","reroute_cache","before_navigate_callbacks","on_navigate_callbacks","after_navigate_callbacks","branch","started","autoscroll","is_navigating","hash_navigating","has_navigated","force_invalidation","root","token","preload_tokens","start","_app","_target","hooks","call","scroll","restore_scroll","scrollRestoration","scrollTo","_hydrate","navigate","decode_hash","_start_router","reset_invalidation","capture_snapshot","some","c","snapshot","capture","restore_snapshot","forEach","restore","persist_state","storage.set","_goto","options","redirect_count","nav_token","keepFocus","noScroll","accept","invalidateAll","invalidate","push_invalidated","_preload_data","intent","preload","promise","load_route","then","_preload_code","get_navigation_intent","all","load","initialize","style","remove","props","sync","navigation","from","to","willUnload","complete","fn","get_navigation_result_from_branch","slash","node","search","constructors","branch_node","component","clone_page","data_changed","p","prev","page_changed","load_node","loader","server_data_node","is_tracking","uses","dependencies","search_params","universal","o","depends","load_input","blob","credentials","integrity","keepalive","mode","redirect","referrer","referrerPolicy","signal","resolve_fetch_url","setHeaders","untrack","getPrototypeOf","prototype","server","trailingSlash","requested","has_changed","parent_changed","route_changed","url_changed","search_params_changed","tracked_params","create_data_node","previous","diff_search_params","old_url","new_url","changed","old_values","getAll","new_values","every","preload_error","invalidating","loaders","catch","server_data","get_page_key","parent_invalid","invalid_server_nodes","invalid","Boolean","load_data","handled_error","handle_error","load_root_error_page","server_data_nodes","branch_promises","valid","j","err","error_load","load_nearest_error_page","idx","concat","server_fallback","default_layout_has_server_load","root_layout","root_error","get_rerouted_url","rerouted","reroute","tmp","rerouted2","e","get_url_path","_before_navigate","delta","should_block","nav","create_navigation","cancellable","cancel","reject","popped","block","prev_token","previous_history_index","previous_navigation_index","navigation_result","change","entry","after_navigate","cleanup","$set","activeElement","tick","deep_linked","getElementById","get_id","scrollIntoView","changed_focus","reset_focus","fulfil","setup_preload","mousemove_timeout","current_a","current_priority","addEventListener","event","clearTimeout","setTimeout","defaultPrevented","composedPath","passive","observer","IntersectionObserver","isIntersecting","unobserve","threshold","priority","interacted","same_url","disconnect","querySelectorAll","observe","handleError","goto","preventDefault","returnValue","visibilityState","connection","saveData","button","which","metaKey","ctrlKey","shiftKey","altKey","is_svg_a_element","nonhash","same_pathname","current_hash","ownerDocument","top","focus","update_url","requestAnimationFrame","HTMLFormElement","cloneNode","submitter","formTarget","formMethod","formAction","action","event_form","stopPropagation","FormData","submitter_name","append","URLSearchParams","resetting_focus","history_index","navigation_index","is_hash_change","shallow","go","link","rel","persisted","node_ids","server_route","parsed_route","find","deserialize_uses","splice","data_url","fetcher","res","ok","json","deferreds","reader","getReader","decoder","TextDecoder","deserialize","devalue.unflatten","decoders","done","read","decode","stream","node2","deferred","autofocus","history_state","tabindex","tabIndex","preventScroll","focusVisible","root2","setAttribute","removeAttribute","selection","getSelection","ranges","rangeCount","getRangeAt","b","commonAncestorContainer","startContainer","endContainer","startOffset","endOffset","removeAllRanges","f","r","second","console_warn"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}