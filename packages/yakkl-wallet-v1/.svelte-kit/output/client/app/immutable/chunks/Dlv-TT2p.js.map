{"version":3,"mappings":"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","names":["regexBytes","RegExp","regexNumber","regexArray","_pack","type","value","isArray","getBytes","zeroPadValue","getAddress","toUtf8Bytes","match","signed","size","parseInt","assertArgument","String","toTwos","toBeArray","dataLength","zeroPadBytes","Array","baseType","count","length","result","forEach","push","concat","solidityPacked","types","values","tight","index","hexlify","shown","Set","showThrottleMessage","service","has","add","console","log","defaultApiKey","getHost","name","AlchemyProvider","JsonRpcProvider","constructor","_network","apiKey","network","Network","from","request","getRequest","super","staticNetwork","__publicField","this","defineProperties","_getProvider","chainId","error","_perform","req","method","trace","tx","resolveProperties","send","hash","getTransaction","data","output","assert","action","reason","transaction","invocation","revert","isCommunityResource","FetchRequest","allowGzip","retryFunc","async","response","attempt","symbolTag","isSymbol","isObjectLike","baseGetTag","reWhitespace","trimmedEndIndex","string","test","charAt","reTrimStart","baseTrim","slice","replace","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","toNumber","isObject","other","valueOf","isBinary","now","root","Date","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","debounce","func","wait","options","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","leadingEdge","setTimeout","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","timeWaiting","shouldInvoke","trailingEdge","cancel","clearTimeout","flush","debounced","isInvoking","arguments","toggleDropdown","_","disabled","isOpen","searchQuery","$.get","on_click","__1","selectToken","token","selectedToken","$.prop","$$props","$.tag","$.state","filteredTokens","derived","sortedTokens","$sortedTokens","trim","filter","symbol","toLowerCase","includes","getLogoURL","logoURI","startsWith","$.set_attribute","img","text","set_text","text_1","_a","_b","$$render","consequent","alternate","$filteredTokens","img_1","$.set_text","text_2","text_3","bind_value","input","$$value","consequent_1","isUsdModeStore","writable","isUsdMode","$.tag_proxy","$.proxy","showLastUpdated","className","price","amount","decimals","onMount","swapPriceDataUpdated","swapPriceData","tokenIn","tokenOut","amountIn","toBigInt","amountOut","marketPriceIn","marketPriceOut","$.strict_equals","$.set","set","parseFloat","ethersv6.formatUnits","abs","getSymbolPair","inSymbol","get","outSymbol","$.derived","$swapPriceDataStore","$.user_effect","formatDate","lastUpdated","formatPrice","formatQuantity","ROOT_ATTR","THUMB_ATTR","SwitchRootState","props","__privateAdd","_SwitchRootState_instances","getDataDisabled","current","getDataChecked","checked","getDataRequired","required","sharedProps","id","__privateGet","_id","role","getDisabled","getAriaChecked","getAriaRequired","onclick","onkeydown","__privateSet","_ref","ref","useRefById","bind","e","key","kbd.ENTER","kbd.SPACE","preventDefault","__privateMethod","toggle_fn","call","WeakSet","SwitchInputState","_shouldRender","_root","getAriaHidden","style","styleToString","srOnlyStyles","shouldRender","WeakMap","SwitchThumbState","setSwitchRootContext","getSwitchRootContext","createContext","useSwitchRoot","useSwitchInput","useSwitchThumb","inputState","$.attribute_effect","useId","onCheckedChange","noop","controlledChecked","restProps","$.rest_props","rootState","box","with","v","mergedProps","mergeProps","snippet","node_2","children","$.noop","thumbState","$.snippet","expression","cn","class","expression_1","labelOn","labelOff","handleInput","inputValue","onChange","currentTarget","placeholder","errorClass","onBlur","set_class","$$args","NumericInput","resetValues","insufficientBalance","balance","lastModifiedPanel","tokenValue","usdValue","displayValue","$isUsdModeStore","tokenAmount","calculatedUsdAmount","convertTokenToUsd","Number","toString","debouncedAmountChange","handleAmountInput","marketPrice","calculatedTokenAmount","convertUsdToTokenAmount","handleTokenSelection","handleBlur","userInput","formattedAmount","handleSlippageChange","event","slippageTolerance","target","handleDeadlineChange","deadline","handlePoolFeeChange","poolFee","slippageOptions","deadlineOptions","poolFeeOptions","fee","newFee","findClosestPoolFee","reduce","prev","curr","$.each","select","option","select_1","select_2","exchangeRate","feeBasisPointsToPercent","tokenOutPriceInUSD","gasEstimateInUSD","calculateFeeBasisPointsPercent","feeBasisPoints","amountInFormatted","amountOutFormatted","feeAmountInUSD","YAKKL_FEE_BASIS_POINTS_DIVISOR","feeAmount","calculateFeeAmount","formatFeeToUSD","$0","toFixed","$.template_effect","text_4","consequent_2","SwapManager","blockchain","provider","initialFeeBasisPoints","YAKKL_FEE_BASIS_POINTS","priceManager","PriceManager","getChainId","getMarketPrice","pair","getProvider","getFeeBasisPoints","setFeeBasisPoints","calculateFee","Token","address","description","isNative","isStablecoin","privateKey","url","toJSON","fromSwapToken","swapToken","ConcreteToken","getContract","createContract","getBalance","userAddress","contract","transfer","toAddress","Error","sendTransaction","EVMToken","_contract","ABIs","ERC20","gasEstimate","estimateGas","populateTransaction","gasLimit","SUPPORTED_STABLECOINS","UniswapSwapManager","initialize","then","providerNative","signerNative","getSignerNative","factory","ethers.Contract","ADDRESSES","UNISWAP_FACTORY","IUniswapV3FactoryABI","abi","routerContract","UNISWAP_V3_ROUTER","ISwapRouterABI","tokens","fetchTokenList","preferredTokens","getPreferredTokens","sort","a","b","localeCompare","stablecoinTokens","dispose","getName","checkIfPoolExists","poolAddress","getPool","ethers.ZeroAddress","fetch","json","map","eth","WETH","unshift","preferredTokenSymbols","find","multiHopQuote","fundingAddress","isExactIn","ethers.AlchemyProvider","quoterV2ABI","inputs","internalType","outputs","stateMutability","quoterContract","UNISWAP_V3_QUOTER","tokenInAddress","tokenOutAddress","encodedPath","ethers.solidityPacked","amountInOrOut","multiHopParams","path","quoteAmount","quoteExactInput","staticCall","quoteExactOutput","getGasEstimateForSwap","constructQuoteData","excludedProperties","formattedError","errorUniswap","getQuote","actualTokenIn","getWETHToken","actualTokenOut","amountAfterFee","marketPriceGas","priceImpactRatio","feeAmountPrice","sqrtPriceX96After","initializedTicksCrossed","multiHop","isLoading","availablePools","getAvailablePools","params","sqrtPriceLimitX96","IQuoterV2ABI","quoteExactInputSingle","quoteExactOutputSingle","estimateSwapGas","swapRouterAddress","swapParams","tokenA","tokenB","feeTiers","getPoolAddress","token0","token1","formattedAmountIn","ethers.formatUnits","formattedAmountOut","priceIn","priceOut","priceOutBigInt","BigInt","round","adjustedGasEstimate","gasPrice","YAKKL_GAS_ESTIMATE_MULTIPLIER_BASIS_POINTS","gasEstimateInEther","gasEstimateInEtherNumber","ethPriceInUSD","gasCostInUSD","YAKKL_GAS_ESTIMATE_MIN_USD","swapRouterABI","ethers.JsonRpcProvider","getProviderURL","swapRouter","recipient","floor","amountOutMinimum","exactInput","isNativeInput","estimatedGas","estimateError","baseGasLimit","YAKKL_GAS_ESTIMATE_MULTIHOP_SWAP_DEFAULT","gasEstimateBigInt","fallbackGasLimit","getPoolInfo","returnError","message","status","excludeProps","cleanObject","obj","exclude","cleaned","parsed","JSON","parse","cleanedError","stringify","getTokenReserve","getTokenUSDPrice","calculateTVL","reserveA","reserveB","Promise","all","priceA","priceB","valueA","valueB","getRouterAddress","wethAddress","WETH_SEPOLIA","populateSwapTransaction","amountOutMin","estimateOnly","populatedTx","exactInputSingle","signer","getSigner","to","quantity","populateMultiHopSwapTransaction","EthereumBigNumber","checkAllowance","tokenContract","allowance","approveToken","routerAddress","parsedAmount","ethers.parseUnits","maxPriorityFeePerGas","maxFeePerGas","approve","receipt","logs","eventFragment","interface","getEvent","topics","topicHash","EthersConverter","ethersTransactionReceiptToTransactionReceipt","executeSwap","slippage","quote","minOut","executeFullSwap","swapReceipt","feeReceipt","distributeFee","feeRecipient","priorityFee","maxFee","txRequest","gasUsed","cummulativeGasUsed","cumulativeGasUsed","effectiveGasPrice","gasCost","wrapETH","wethContract","deposit","unwrapWETH","withdraw","receiptTrans","txTransfer","shouldShowErrorToUser","errorMessage","networkErrors","some","pattern","getTokenBalance","tokenService","retBal","balanceCacheManager","__vitePreload","import","__VITE_PRELOAD__","yakklPricingStore","n","dg","i","currentPrice","setCachedBalance","log$1","freeGlobal","global","Object","_freeGlobal","require$$0","freeSelf","self","Function","Symbol","objectProto","prototype","hasOwnProperty","nativeObjectToString","symToStringTag","toStringTag","getRawTag","isOwn","tag","unmasked","_getRawTag","objectToString","_objectToString","require$$1","require$$2","nullTag","undefinedTag","GasToken","contractAddress","lastBalanceCheck","fundingPair","lastPrice","lastPriceCheck","errorStack","hasSufficientBalance","getSponsoredGasEstimate","isSponsored","checkSponsorshipEligibility","validateObject","rules","validateValue","rule","bigIntValue","isNaN","safeConvertToBigInt","minBigInt","valueBigInt","maxBigInt","equals","notEquals","oneOf","notOneOf","customValidation","entries","currentRule","join","isValid","validateSwapQuote","bigIntAmount","switchTokens","store_mutate","swapStateStore","$.untrack","$swapStateStore","$$array","fromAmount","$$array_1","toAmount","updateSwapPriceData","parseAmount","handleSellAmountChange","handleBuyAmountChange","handleConfirmSwap","showWarning","warningValue","showConfirmation","show","onSwap","gasToken","initialToken","initialSwapPriceData","swapPriceDataStore","insufficientBalanceStore","fromBalance","uiStateStore","isSwapping","swapManagerName","isEthWethSwap","showVerify","showError","errorValue","pincodeVerified","reset$1","yakklMiscStore","getMiscStore","info","getTimerManager","addTimer","fetchPrices","TIMER_SWAP_FETCH_PRICES_TIME","startTimer","onDestroy","stopTimer","debouncedGetQuote","debouncedCheckBalance","debouncedGetMarketPrice","quoteTrigger","debouncedGetGasTokenPrice","swapManager","checkBalance","handleTokenSelect","otherToken","areTokensEqual","formattedBalance","newData","update","currentData","requiredAmount","isInsufficient","validateBalance","swapAmount","ethersv6.parseUnits","totalRequiredAmount","BigNumber","$.store_mutate","$uiStateStore","validateQuote","returnCode","$insufficientBalanceStore","results","token2","isEthVariant","swapTokens","tokenInInstance","tokenOutInstance","getCurrentGasPrices","ETH_BASE_SWAP_GAS_UNITS","receiptFee","sendNotificationMessage","err","feeData","getFeeData","reset","handleCancelSwap","handleConfirm","handleSwap","handleClose","handleReject","rejection","handleVerified","pincode","profile","verifyWithPin","getProfile","pincodeVerified2","profileEncrypted","isEncryptedData","deepCopy","decryptData","handleCloseModal","onTokenSelect","onSlippageChange","onDeadlineChange","onPoolFeeChange","alternate_1","consequent_3","alternate_2","button_2","width","height","node","qrText","quietZone","logo","logoBackgroundTransparent","QRCode","bind_this","div","title","$yakklCurrentlySelectedStore","shortcuts","YAKKL_ZERO_ADDRESS"],"ignoreList":[0,1,2,3,4,5,6,7,8,12,13,14,15,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"sources":["../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/solidity.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/community.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/providers/provider-alchemy.js","../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isSymbol.js","../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_trimmedEndIndex.js","../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseTrim.js","../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/toNumber.js","../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/now.js","../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/debounce.js","../../../../../../src/lib/components/TokenDropdown.svelte","../../../../../../src/lib/common/stores/uiStateStore.ts","../../../../../../src/lib/components/SwapTokenPrice.svelte","../../../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/switch.svelte.js","../../../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/components/switch-input.svelte","../../../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/components/switch.svelte","../../../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/components/switch-thumb.svelte","../../../../../../src/lib/components/ui/switch/switch.svelte","../../../../../../src/lib/components/ToggleSwitch.svelte","../../../../../../src/lib/components/NumericInput.svelte","../../../../../../src/lib/components/SellTokenPanel.svelte","../../../../../../src/lib/components/BuyTokenPanel.svelte","../../../../../../src/lib/components/SwapSettings.svelte","../../../../../../src/lib/components/SwapSummary.svelte","../../../../../../src/lib/managers/SwapManager.ts","../../../../../../src/lib/managers/Token.ts","../../../../../../src/lib/managers/tokens/evm/EVMToken.ts","../../../../../../src/lib/managers/UniswapSwapManager.ts","../../../../../../src/lib/utilities/balanceUtils.ts","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObject.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_freeGlobal.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_root.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/now.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_trimmedEndIndex.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseTrim.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_Symbol.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_getRawTag.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_objectToString.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseGetTag.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toNumber.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/debounce.js","../../../../../../src/lib/managers/GasToken.ts","../../../../../../src/lib/common/validation.ts","../../../../../../src/lib/components/Swap.svelte","../../../../../../src/lib/components/QR.svelte","../../../../../../src/lib/components/Receive.svelte"],"sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport { keccak256 as _keccak256, sha256 as _sha256 } from \"../crypto/index.js\";\nimport { concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue, assertArgument } from \"../utils/index.js\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\");\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n        if (isArray) {\n            size = 256;\n        }\n        if (signed) {\n            value = toTwos(value, size);\n        }\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${type}`, \"value\", value);\n        if (isArray) {\n            return getBytes(zeroPadBytes(value, 32));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${type}`, \"value\", value);\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n    assertArgument(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types, values) {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types, values) {\n    return _keccak256(solidityPacked(types, values));\n}\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types, values) {\n    return _sha256(solidityPacked(types, values));\n}\n//# sourceMappingURL=solidity.js.map","/**\n *  There are many awesome community services that provide Ethereum\n *  nodes both for developers just starting out and for large-scale\n *  communities.\n *\n *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]\n */\n// Show the throttle message only once per service\nconst shown = new Set();\n/**\n *  Displays a warning in the console when the community resource is\n *  being used too heavily by the app, recommending the developer\n *  acquire their own credentials instead of using the community\n *  credentials.\n *\n *  The notification will only occur once per service.\n */\nexport function showThrottleMessage(service) {\n    if (shown.has(service)) {\n        return;\n    }\n    shown.add(service);\n    console.log(\"========= NOTICE =========\");\n    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.org/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=community.js.map","/**\n *  [[link-alchemy]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\n *  - Base (``base``)\n *  - Base Goerlia Testnet (``base-goerli``)\n *  - Base Sepolia Testnet (``base-sepolia``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\n *  - Polygon (``matic``)\n *  - Polygon Amoy Testnet (``matic-amoy``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport { defineProperties, resolveProperties, assert, assertArgument, FetchRequest } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"arbitrum-sepolia\":\n            return \"arb-sepolia.g.alchemy.com\";\n        case \"base\":\n            return \"base-mainnet.g.alchemy.com\";\n        case \"base-goerli\":\n            return \"base-goerli.g.alchemy.com\";\n        case \"base-sepolia\":\n            return \"base-sepolia.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-amoy\":\n            return \"polygon-amoy.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n        case \"optimism-sepolia\":\n            return \"opt-sepolia.g.alchemy.com\";\n    }\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider {\n    apiKey;\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n        defineProperties(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    async _perform(req) {\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [req.hash]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) {\n                return null;\n            }\n            let data;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            }\n            catch (error) { }\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n        return await super._perform(req);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\n//# sourceMappingURL=provider-alchemy.js.map","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","<script lang=\"ts\">\n\timport { derived } from 'svelte/store';\n\timport { sortedTokens } from '$lib/common/stores/tokens';\n\timport type { SwapToken } from '$lib/common/interfaces';\n\n\tinterface Props {\n\t\tselectedToken: SwapToken;\n\t\tdisabled?: boolean;\n\t\tonTokenSelect: (token: SwapToken) => void;\n\t}\n\n\tlet { selectedToken, disabled = false, onTokenSelect }: Props = $props();\n\n\t// svelte-ignore non_reactive_update\n\tlet isOpen = $state(false);\n\tlet searchQuery = $state('');\n\n\t// Use derived to filter tokens based on searchQuery\n\tconst filteredTokens = derived([sortedTokens], ([$sortedTokens]) =>\n\t\tsearchQuery.trim()\n\t\t\t? $sortedTokens.filter(\n\t\t\t\t\t(token) =>\n\t\t\t\t\t\ttoken.symbol.toLowerCase().includes(searchQuery.toLowerCase()) ||\n\t\t\t\t\t\ttoken.name.toLowerCase().includes(searchQuery.toLowerCase())\n\t\t\t\t)\n\t\t\t: $sortedTokens\n\t);\n\n\tfunction toggleDropdown() {\n\t\tif (disabled) return;\n\t\tisOpen = !isOpen;\n\t\tif (isOpen) {\n\t\t\tsearchQuery = '';\n\t\t}\n\t}\n\n\tfunction selectToken(token: SwapToken) {\n\t\tif (disabled) return;\n\n\t\tselectedToken = token;\n\t\tonTokenSelect(token);\n\t\tisOpen = false;\n\t\tsearchQuery = '';\n\t}\n\n\tfunction getLogoURL(logoURI: string | null | undefined): string {\n\t\tif (!logoURI || logoURI.startsWith('http://') || logoURI.startsWith('ipfs://')) {\n\t\t\treturn '/images/logoBullFav32x32.png';\n\t\t}\n\t\treturn logoURI!;\n\t}\n</script>\n\n<div class=\"relative w-full max-w-sm mx-auto\">\n\t<button\n\t\tclass=\"w-full flex items-center px-4 py-3\n      {disabled\n\t\t\t? 'bg-gray-500 text-gray-200 cursor-not-allowed'\n\t\t\t: 'bg-purple-600 text-white hover:bg-purple-700'}\n      font-bold rounded-full transition duration-300 ease-in-out focus:outline-none\"\n\t\tonclick={toggleDropdown}\n\t\t{disabled}\n\t>\n\t\t{#if selectedToken?.symbol && selectedToken?.name}\n\t\t\t<img\n\t\t\t\tsrc={getLogoURL(selectedToken.logoURI)}\n\t\t\t\talt={selectedToken.name}\n\t\t\t\tclass=\"w-8 h-8 rounded-full\"\n\t\t\t/>\n\t\t\t<div class=\"flex-1 flex flex-col ml-3\">\n\t\t\t\t<span class=\"font-bold text-lg\">{selectedToken.symbol}</span>\n\t\t\t\t<span class=\"text-sm text-gray-200 mt-0.5\">{selectedToken.name}</span>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<span class=\"ml-3\">Select Token</span>\n\t\t{/if}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\tclass=\"ml-auto h-5 w-5 transition-transform duration-300\"\n\t\t\tviewBox=\"0 0 20 20\"\n\t\t\tfill=\"currentColor\"\n\t\t>\n\t\t\t<path\n\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\td=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t/>\n\t\t</svg>\n\t</button>\n\n\t{#if isOpen && !disabled}\n\t\t<div\n\t\t\tclass=\"absolute z-10 w-full bg-white dark:text-gray-600 rounded-md shadow-lg mt-2 p-2 border border-gray-200\"\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\tclass=\"w-full px-4 py-2 mb-2 border border-gray-300 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition duration-200\"\n\t\t\t\tbind:value={searchQuery}\n\t\t\t/>\n\t\t\t<ul class=\"max-h-60 overflow-y-auto w-full\">\n\t\t\t\t{#each $filteredTokens as token}\n\t\t\t\t\t<!-- svelte-ignore a11y_click_events_have_key_events -->\n\t\t\t\t\t<!-- svelte-ignore a11y_no_noninteractive_element_interactions -->\n\t\t\t\t\t<li\n\t\t\t\t\t\tclass=\"px-4 py-2 flex items-center space-x-3 hover:bg-gray-100 cursor-pointer transition duration-200\"\n\t\t\t\t\t\tonclick={() => selectToken(token)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={getLogoURL(token.logoURI)} alt={token.name} class=\"w-8 h-8 rounded-full\" />\n\t\t\t\t\t\t<div class=\"flex-1 flex flex-col\">\n\t\t\t\t\t\t\t<span class=\"font-bold text-gray-800\">{token.symbol}</span>\n\t\t\t\t\t\t\t<span class=\"text-sm text-gray-600\">{token.name}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t{:else}\n\t\t\t\t\t<li class=\"px-4 py-2 text-gray-500\">No tokens found</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n</div>\n","import { writable } from 'svelte/store';\n\n// Shared store for UI state\nexport const isUsdModeStore = writable(false); // Default is quantity mode\n","<script lang=\"ts\">\n\timport { formatDate } from '$lib/common/datetime';\n\timport type { SwapPriceData } from '$lib/common/interfaces';\n\timport { toBigInt } from '$lib/common/math';\n\timport { formatPrice, formatQuantity } from '$lib/utilities';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { onMount } from 'svelte';\n\timport type { Writable } from 'svelte/store';\n\timport { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\n\tlet isUsdMode = $state(isUsdModeStore);\n\n\tinterface Props {\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\ttype?: 'sell' | 'buy';\n\t\tshowLastUpdated?: boolean;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\tswapPriceDataStore,\n\t\ttype = 'sell',\n\t\tshowLastUpdated = false,\n\t\tclassName = ''\n\t}: Props = $props();\n\n\t// Display the price based on the type (sell/buy)\n\tlet price = $state(0);\n\tlet amount = $state(0n);\n\tlet decimals = $state(0);\n\n\tonMount(async () => {\n\t\tswapPriceDataUpdated();\n\t});\n\n\tfunction swapPriceDataUpdated() {\n\t\tif (swapPriceData) {\n\t\t\tconst tokenIn = swapPriceData.tokenIn;\n\t\t\tconst tokenOut = swapPriceData.tokenOut;\n\t\t\tconst amountIn = toBigInt(swapPriceData.amountIn);\n\t\t\tconst amountOut = toBigInt(swapPriceData.amountOut);\n\t\t\tconst marketPriceIn = swapPriceData.marketPriceIn;\n\t\t\tconst marketPriceOut = swapPriceData.marketPriceOut;\n\n\t\t\tprice = 0;\n\n\t\t\tif (type === 'sell') {\n\t\t\t\tdecimals = tokenIn?.decimals || 0;\n\t\t\t\tamount = amountIn;\n\t\t\t\tif (amountIn > 0n && marketPriceIn > 0) {\n\t\t\t\t\tprice = parseFloat(ethersv6.formatUnits(amountIn, tokenIn.decimals)) * marketPriceIn;\n\t\t\t\t} else {\n\t\t\t\t\tprice = Math.abs(marketPriceIn);\n\t\t\t\t}\n\t\t\t} else if (type === 'buy') {\n\t\t\t\tdecimals = tokenOut?.decimals || 0;\n\t\t\t\tamount = amountOut;\n\t\t\t\tif (amountOut > 0n && marketPriceOut > 0) {\n\t\t\t\t\tprice = parseFloat(ethersv6.formatUnits(amountOut, tokenOut.decimals)) * marketPriceOut;\n\t\t\t\t} else {\n\t\t\t\t\tprice = Math.abs(marketPriceOut);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getSymbolPair() {\n\t\tconst inSymbol = swapPriceData.tokenIn?.symbol || '';\n\t\tconst outSymbol = swapPriceData.tokenOut?.symbol || '';\n\t\treturn inSymbol && outSymbol ? `${inSymbol}/${outSymbol}` : '';\n\t}\n\n\tlet swapPriceData = $derived($swapPriceDataStore);\n\n\t// Replace run with $effect\n\t$effect(() => {\n\t\tif (swapPriceData) {\n\t\t\tswapPriceDataUpdated();\n\t\t}\n\t});\n</script>\n\n<div class=\"flex flex-col w-full gap-1 {className}\">\n\t<div class=\"flex justify-between items-center w-full\">\n\t\t<div class=\"flex items-center gap-2\">\n\t\t\t<span class=\"text-sm text-gray-600\">{getSymbolPair()}</span>\n\t\t\t<span class=\"text-sm font-semibold\"\n\t\t\t\t>{isUsdMode ? `${formatPrice(price)}` : `${formatQuantity(amount, decimals)}`}</span\n\t\t\t>\n\t\t</div>\n\t</div>\n\n\t<div class=\"flex justify-between items-center w-full text-xs text-gray-500\">\n\t\t{#if price > 0 && showLastUpdated && swapPriceData && swapPriceData.lastUpdated}\n\t\t\t<span>Last updated: {formatDate(swapPriceData.lastUpdated)}</span>\n\t\t{/if}\n\t</div>\n</div>\n","import { srOnlyStyles, styleToString, useRefById } from \"svelte-toolbelt\";\nimport { getAriaChecked, getAriaHidden, getAriaRequired, getDataChecked, getDataDisabled, getDataRequired, getDisabled, } from \"../../internal/attrs.js\";\nimport { kbd } from \"../../internal/kbd.js\";\nimport { createContext } from \"../../internal/create-context.js\";\nconst ROOT_ATTR = \"data-switch-root\";\nconst THUMB_ATTR = \"data-switch-thumb\";\nclass SwitchRootState {\n    #id;\n    #ref;\n    checked;\n    disabled;\n    required;\n    name;\n    value;\n    constructor(props) {\n        this.checked = props.checked;\n        this.disabled = props.disabled;\n        this.required = props.required;\n        this.name = props.name;\n        this.value = props.value;\n        this.#id = props.id;\n        this.#ref = props.ref;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n        });\n        this.onkeydown = this.onkeydown.bind(this);\n        this.onclick = this.onclick.bind(this);\n    }\n    #toggle() {\n        this.checked.current = !this.checked.current;\n    }\n    onkeydown(e) {\n        if (!(e.key === kbd.ENTER || e.key === kbd.SPACE) || this.disabled.current)\n            return;\n        e.preventDefault();\n        this.#toggle();\n    }\n    onclick(_) {\n        if (this.disabled.current)\n            return;\n        this.#toggle();\n    }\n    sharedProps = $derived.by(() => ({\n        \"data-disabled\": getDataDisabled(this.disabled.current),\n        \"data-state\": getDataChecked(this.checked.current),\n        \"data-required\": getDataRequired(this.required.current),\n    }));\n    props = $derived.by(() => ({\n        ...this.sharedProps,\n        id: this.#id.current,\n        role: \"switch\",\n        disabled: getDisabled(this.disabled.current),\n        \"aria-checked\": getAriaChecked(this.checked.current, false),\n        \"aria-required\": getAriaRequired(this.required.current),\n        [ROOT_ATTR]: \"\",\n        //\n        onclick: this.onclick,\n        onkeydown: this.onkeydown,\n    }));\n}\nclass SwitchInputState {\n    #root;\n    shouldRender = $derived.by(() => this.#root.name.current !== undefined);\n    constructor(root) {\n        this.#root = root;\n    }\n    props = $derived.by(() => ({\n        type: \"checkbox\",\n        name: this.#root.name.current,\n        value: this.#root.value.current,\n        checked: this.#root.checked.current,\n        disabled: this.#root.disabled.current,\n        required: this.#root.required.current,\n        \"aria-hidden\": getAriaHidden(true),\n        style: styleToString(srOnlyStyles),\n    }));\n}\nclass SwitchThumbState {\n    #id;\n    #ref;\n    root;\n    constructor(props, root) {\n        this.root = root;\n        this.#id = props.id;\n        this.#ref = props.ref;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n        });\n    }\n    props = $derived.by(() => ({\n        ...this.root.sharedProps,\n        id: this.#id.current,\n        [THUMB_ATTR]: \"\",\n    }));\n}\n//\n// CONTEXT METHODS\n//\nconst [setSwitchRootContext, getSwitchRootContext] = createContext(\"Switch.Root\");\nexport function useSwitchRoot(props) {\n    return setSwitchRootContext(new SwitchRootState(props));\n}\nexport function useSwitchInput() {\n    return new SwitchInputState(getSwitchRootContext());\n}\nexport function useSwitchThumb(props) {\n    return new SwitchThumbState(props, getSwitchRootContext());\n}\n","<script lang=\"ts\">\n\timport { useSwitchInput } from \"../switch.svelte.js\";\n\n\tconst inputState = useSwitchInput();\n</script>\n\n{#if inputState.shouldRender}\n\t<input {...inputState.props} />\n{/if}\n","<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { SwitchRootProps } from \"../types.js\";\n\timport { useSwitchRoot } from \"../switch.svelte.js\";\n\timport SwitchInput from \"./switch-input.svelte\";\n\timport { useId } from \"../../../internal/use-id.js\";\n\timport { noop } from \"../../../internal/noop.js\";\n\n\tlet {\n\t\tchild,\n\t\tchildren,\n\t\tref = $bindable(null),\n\t\tid = useId(),\n\t\tdisabled = false,\n\t\trequired = false,\n\t\tchecked = $bindable(false),\n\t\tvalue = \"on\",\n\t\tname = undefined,\n\t\ttype = \"button\",\n\t\tonCheckedChange = noop,\n\t\tcontrolledChecked = false,\n\t\t...restProps\n\t}: SwitchRootProps = $props();\n\n\tconst rootState = useSwitchRoot({\n\t\tchecked: box.with(\n\t\t\t() => checked,\n\t\t\t(v) => {\n\t\t\t\tif (controlledChecked) {\n\t\t\t\t\tonCheckedChange(v);\n\t\t\t\t} else {\n\t\t\t\t\tchecked = v;\n\t\t\t\t\tonCheckedChange?.(v);\n\t\t\t\t}\n\t\t\t}\n\t\t),\n\t\tdisabled: box.with(() => disabled ?? false),\n\t\trequired: box.with(() => required),\n\t\tvalue: box.with(() => value),\n\t\tname: box.with(() => name),\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, rootState.props, { type }));\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps, checked: rootState.checked.current })}\n{:else}\n\t<button {...mergedProps}>\n\t\t{@render children?.({ checked: rootState.checked.current })}\n\t</button>\n{/if}\n\n<SwitchInput />\n","<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { SwitchThumbProps } from \"../types.js\";\n\timport { useSwitchThumb } from \"../switch.svelte.js\";\n\timport { useId } from \"../../../internal/use-id.js\";\n\n\tlet {\n\t\tchild,\n\t\tchildren,\n\t\tref = $bindable(null),\n\t\tid = useId(),\n\t\t...restProps\n\t}: SwitchThumbProps = $props();\n\n\tconst thumbState = useSwitchThumb({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, thumbState.props));\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps, checked: thumbState.root.checked.current })}\n{:else}\n\t<span {...mergedProps}>\n\t\t{@render children?.({ checked: thumbState.root.checked.current })}\n\t</span>\n{/if}\n","<script lang=\"ts\">\n\timport { Switch as SwitchPrimitive, type WithoutChildrenOrChild } from 'bits-ui';\n\timport { cn } from '$lib/utils.js';\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchecked = $bindable(false),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<SwitchPrimitive.RootProps> = $props();\n</script>\n\n<SwitchPrimitive.Root\n\tbind:ref\n\tbind:checked\n\tclass={cn(\n\t\t'focus-visible:ring-ring focus-visible:ring-offset-background data-[state=checked]:bg-primary data-[state=unchecked]:bg-input peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t<SwitchPrimitive.Thumb\n\t\tclass={cn(\n\t\t\t'bg-slate-200 pointer-events-none block h-4 w-4 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0'\n\t\t)}\n\t/>\n</SwitchPrimitive.Root>\n","<script lang=\"ts\">\n\timport Switch from './ui/switch/switch.svelte';\n\n\tinterface Props {\n\t\tvalue: boolean;\n\t\tlabelOn: string;\n\t\tlabelOff: string;\n\t\tdisabled?: boolean;\n\t\tonChange: (value: boolean) => void; // Callback for value change\n\t\t[key: string]: any;\n\t}\n\n\tlet {\n\t\tvalue,\n\t\tlabelOn = 'USD',\n\t\tlabelOff = 'Token',\n\t\tdisabled = false,\n\t\tonChange,\n\t\t...rest\n\t}: Props = $props();\n\n\t// Create a reactive state for `value`\n\tlet checked = $state(value);\n\n\t// Watch for changes in `checked` and call onChange\n\t$effect(() => {\n\t\tif (!disabled) {\n\t\t\tonChange(checked);\n\t\t}\n\t});\n</script>\n\n<div class=\"flex items-center\">\n\t<span class=\"mr-2 text-sm w-10\">{checked ? labelOn : labelOff}</span>\n\t<Switch\n\t\tclass=\"peer inline-flex h-6 w-10 cursor-pointer items-center rounded-full border-2 border-purple-600 shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n\t\tbind:checked\n\t\t{disabled}\n\t/>\n</div>\n\n<!-- The default values for the thumb control is: \"bg-background pointer-events-none block size-5 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\" -->\n<!-- We changed it to: bg-slate-500 pointer-events-none block h-4 w-4 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0 -->\n","<!-- NumericInput.svelte -->\n<script lang=\"ts\">\n\tconst {\n\t\tvalue = '',\n\t\tplaceholder = '0',\n\t\tdisabled = false,\n\t\terrorClass = '',\n\t\tclassName = '',\n\t\tonChange = (value: string) => {},\n\t\tonBlur = (value: string) => {}\n\t} = $props<{\n\t\tvalue?: string;\n\t\tplaceholder?: string;\n\t\tdisabled?: boolean;\n\t\terrorClass?: string;\n\t\tclassName?: string;\n\t\tonChange?: (value: string) => void;\n\t\tonBlur?: (value: string) => void;\n\t}>();\n\n\tlet inputValue = $state(value || '');\n\n\t$effect(() => {\n\t\tif (value !== inputValue) {\n\t\t\tinputValue = value;\n\t\t}\n\t});\n\n\tfunction handleInput(e: Event) {\n\t\tconst value = (e.currentTarget as HTMLInputElement).value;\n\n\t\t// Only basic validation for numbers and decimal\n\t\tif (!/^[0-9]*\\.?[0-9]*$/.test(value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tinputValue = value;\n\t\tonChange(value);\n\t}\n</script>\n\n<input\n\ttype=\"text\"\n\t{placeholder}\n\t{disabled}\n\tvalue={inputValue}\n\toninput={handleInput}\n\tonblur={onBlur}\n\tclass=\"{className} {errorClass}\"\n/>\n","<!-- SellTokenPanel.svelte -->\n<script lang=\"ts\">\n\timport type { Writable } from 'svelte/store';\n\timport TokenDropdown from './TokenDropdown.svelte';\n\timport SwapTokenPrice from './SwapTokenPrice.svelte';\n\timport type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n\timport { debounce } from 'lodash-es';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { convertTokenToUsd, convertUsdToTokenAmount, toBigInt } from '$lib/common';\n\timport ToggleSwitch from './ToggleSwitch.svelte';\n\timport { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\timport NumericInput from './NumericInput.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\n\tinterface Props {\n\t\tdisabled?: boolean;\n\t\tresetValues?: boolean;\n\t\tinsufficientBalance?: boolean;\n\t\tbalance?: string;\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tonTokenSelect: (token: SwapToken) => void;\n\t\tonAmountChange: (amount: string) => void;\n\t\tlastModifiedPanel?: string;\n\t}\n\n\tlet {\n\t\tdisabled = false,\n\t\tresetValues = $bindable(false),\n\t\tinsufficientBalance = false,\n\t\tbalance = '0',\n\t\tswapPriceDataStore,\n\t\tonTokenSelect,\n\t\tonAmountChange,\n\t\tlastModifiedPanel = $bindable('sell')\n\t}: Props = $props();\n\n\tlet tokenValue = $state('');\n\tlet usdValue = $state('');\n\tlet displayValue = $state('');\n\n\t// Reset handling\n\t$effect(() => {\n\t\tif (resetValues) {\n\t\t\ttokenValue = '';\n\t\t\tusdValue = '';\n\t\t\tdisplayValue = '';\n\t\t\tresetValues = false;\n\t\t}\n\t});\n\n\t// Update display value based on mode\n\t$effect(() => {\n\t\tdisplayValue = $isUsdModeStore ? usdValue : tokenValue;\n\t});\n\n\t// Update values when quote changes from buy panel\n\t$effect(() => {\n\t\tif (lastModifiedPanel === 'buy') {\n\t\t\tconst tokenAmount = ethersv6.formatUnits(\n\t\t\t\ttoBigInt($swapPriceDataStore.amountIn),\n\t\t\t\t$swapPriceDataStore.tokenIn.decimals\n\t\t\t);\n\t\t\tif ($isUsdModeStore) {\n\t\t\t\ttry {\n\t\t\t\t\tconst calculatedUsdAmount = convertTokenToUsd(\n\t\t\t\t\t\tNumber(tokenAmount),\n\t\t\t\t\t\t$swapPriceDataStore.marketPriceIn\n\t\t\t\t\t);\n\t\t\t\t\tusdValue = calculatedUsdAmount.toString();\n\t\t\t\t\ttokenValue = tokenAmount;\n\t\t\t\t\tdisplayValue = usdValue;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('Token to USD conversion error:', false, error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttokenValue = tokenAmount;\n\t\t\t\tdisplayValue = tokenValue;\n\t\t\t\tif ($swapPriceDataStore.marketPriceIn > 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst calculatedUsdAmount = convertTokenToUsd(\n\t\t\t\t\t\t\tNumber(tokenAmount),\n\t\t\t\t\t\t\t$swapPriceDataStore.marketPriceIn\n\t\t\t\t\t\t);\n\t\t\t\t\t\tusdValue = calculatedUsdAmount.toString();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlog.error('Token to USD conversion error:', false, error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tconst debouncedAmountChange = debounce((value: string) => {\n\t\tonAmountChange(value);\n\t}, 300);\n\n\tfunction handleAmountInput(value: string) {\n\t\tlastModifiedPanel = 'sell';\n\t\tconst marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n\n\t\tif (!value) {\n\t\t\ttokenValue = '';\n\t\t\tusdValue = '';\n\t\t\tdisplayValue = '';\n\t\t\tdebouncedAmountChange('');\n\t\t\treturn;\n\t\t}\n\n\t\tif ($isUsdModeStore) {\n\t\t\t// User is entering USD amount\n\t\t\tusdValue = value;\n\t\t\tif (marketPrice > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tconst calculatedTokenAmount = convertUsdToTokenAmount(\n\t\t\t\t\t\tNumber(value),\n\t\t\t\t\t\tmarketPrice,\n\t\t\t\t\t\t$swapPriceDataStore.tokenIn.decimals\n\t\t\t\t\t);\n\t\t\t\t\ttokenValue = calculatedTokenAmount.toString();\n\t\t\t\t\tdebouncedAmountChange(tokenValue);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('USD to Token conversion error:', false, error);\n\t\t\t\t\tdebouncedAmountChange('');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// User is entering token amount\n\t\t\ttokenValue = value;\n\t\t\tif (marketPrice > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tconst calculatedUsdAmount = convertTokenToUsd(Number(value), marketPrice);\n\t\t\t\t\tusdValue = calculatedUsdAmount.toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('Token to USD conversion error:', false, error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebouncedAmountChange(value);\n\t\t}\n\t}\n\n\tfunction handleTokenSelection(token: SwapToken) {\n\t\ttokenValue = '';\n\t\tusdValue = '';\n\t\tdisplayValue = '';\n\t\tonTokenSelect(token);\n\t}\n\n\tfunction handleBlur(value: string) {\n\t\t// No formatting on blur, maintain exact input values\n\t}\n</script>\n\n<div\n\tclass=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\"\n>\n\t<div class=\"flex justify-between items-center\">\n\t\t<NumericInput\n\t\t\tvalue={displayValue}\n\t\t\tonChange={handleAmountInput}\n\t\t\tonBlur={handleBlur}\n\t\t\t{disabled}\n\t\t\tclassName=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        {insufficientBalance ? 'text-red-500 dark:text-red-400 ' : 'text-black dark:text-white '}\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n\t\t/>\n\t\t<TokenDropdown\n\t\t\t{disabled}\n\t\t\tselectedToken={$swapPriceDataStore.tokenIn}\n\t\t\tonTokenSelect={handleTokenSelection}\n\t\t/>\n\t</div>\n\t<div class=\"flex justify-between items-center mt-2 text-sm\">\n\t\t<div class=\"flex items-center\">\n\t\t\t<ToggleSwitch\n\t\t\t\tvalue={$isUsdModeStore}\n\t\t\t\tlabelOn=\"USD\"\n\t\t\t\tlabelOff=\"Token\"\n\t\t\t\tclassName=\"bg-purple-300\"\n\t\t\t\tonChange={(value) => isUsdModeStore.set(value)}\n\t\t\t/>\n\t\t</div>\n\t\t<div class=\"flex flex-col items-end text-right\">\n\t\t\t<SwapTokenPrice {swapPriceDataStore} type=\"sell\" />\n\t\t\t<span>Balance: {balance}</span>\n\t\t</div>\n\t</div>\n\t{#if insufficientBalance}\n\t\t<div class=\"text-red-500 dark:text-red-400 text-sm mt-1\">\n\t\t\tInsufficient balance for this swap\n\t\t</div>\n\t{/if}\n</div>\n\n<!-- <script lang=\"ts\">\n  import type { Writable } from 'svelte/store';\n  import TokenDropdown from './TokenDropdown.svelte';\n  import SwapTokenPrice from './SwapTokenPrice.svelte';\n  import type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n  import { debounce } from 'lodash-es';\n  import { ethers as ethersv6 } from 'ethers-v6';\n  import { convertTokenToUsd, convertUsdToTokenAmount, toBigInt } from '$lib/common';\n  import ToggleSwitch from './ToggleSwitch.svelte';\n  import { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\timport NumericInput from './NumericInput.svelte';\n\n  interface Props {\n    disabled?: boolean;\n    resetValues?: boolean;\n    insufficientBalance?: boolean;\n    balance?: string;\n    swapPriceDataStore: Writable<SwapPriceData>;\n    onTokenSelect: (token: SwapToken) => void;\n    onAmountChange: (amount: string) => void;\n  }\n\n  let {\n    disabled = false,\n    resetValues = $bindable(false),\n    insufficientBalance = false,\n    balance = '0',\n    swapPriceDataStore,\n    onTokenSelect,\n    onAmountChange,\n  }: Props = $props();\n\n  let userInput = $state('');\n  let formattedAmount = $state('');\n\n  // Ensure resetValues resets inputs\n  $effect(() => {\n    if (resetValues) {\n      userInput = '';\n      formattedAmount = '';\n      resetValues = false;\n    }\n  });\n\n  // Calculate formattedAmount dynamically\n  $effect(() => {\n    const tokenAmount = ethersv6.formatUnits(toBigInt($swapPriceDataStore.amountIn), $swapPriceDataStore.tokenIn.decimals);\n    const usdAmount = $swapPriceDataStore.marketPriceIn > 0\n      ? convertTokenToUsd(Number(tokenAmount), $swapPriceDataStore.marketPriceIn)\n      : 0;\n\n    formattedAmount = $isUsdModeStore ? usdAmount.toFixed(2) : tokenAmount;\n    userInput = '';\n  });\n\n  // Debounced amount change handler\n  const debouncedAmountChange = debounce((value: string) => {\n    onAmountChange(value);\n  }, 300);\n\n  // Handle user input changes\n  function handleAmountInputEvent(event: Event) {\n    const input = event.target as HTMLInputElement;\n    let value = input.value;\n\n    // Allow only valid numbers\n    value = value.replace(/[^0-9.]/g, '');\n\n    // Handle decimals\n    const parts = value.split('.');\n    if (parts.length > 2) value = `${parts[0]}.${parts.slice(1).join('')}`;\n\n    // Limit decimal precision\n    if ($isUsdModeStore && parts[1]?.length > 2) {\n      value = `${parts[0]}.${parts[1].slice(0, 2)}`;\n    } else if (!$isUsdModeStore) {\n      const tokenDecimals = $swapPriceDataStore.tokenIn.decimals || 18;\n      if (parts[1]?.length > tokenDecimals) {\n        value = `${parts[0]}.${parts[1].slice(0, tokenDecimals)}`;\n      }\n    }\n\n    userInput = value;\n    if (value === '' || value === '.') {\n      formattedAmount = '';\n      debouncedAmountChange('');\n    } else {\n      formattedAmount = value;\n\n      if ($isUsdModeStore) {\n        const marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n        if (marketPrice > 0) {\n          const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenIn.decimals);\n          debouncedAmountChange(tokenAmount.toString());\n        } else {\n          debouncedAmountChange('');\n        }\n      } else {\n        debouncedAmountChange(value);\n      }\n    }\n  }\n\n  function handleAmountInput(value: string) {\n    // No need to get value from event.target anymore\n    if (value === '') { // || value === '.') {\n      formattedAmount = '';\n      debouncedAmountChange('');\n    } else {\n      formattedAmount = value;\n\n      if ($isUsdModeStore) {\n        const marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n        if (marketPrice > 0) {\n          const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenIn.decimals);\n          debouncedAmountChange(tokenAmount.toString());\n        } else {\n          debouncedAmountChange('');\n        }\n      } else {\n        debouncedAmountChange(value);\n      }\n    }\n  }\n\n  //   function handleAmountInputEvent(e: Event) {\n  //   const value = (e.currentTarget as HTMLInputElement).value;\n  //   // No need to get value from event.target anymore\n  //   if (value === '' || value === '.') {\n  //     formattedAmount = '';\n  //     debouncedAmountChange('');\n  //   } else {\n  //     formattedAmount = value;\n\n  //     if ($isUsdModeStore) {\n  //       const marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n  //       if (marketPrice > 0) {\n  //         const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenIn.decimals);\n  //         debouncedAmountChange(tokenAmount.toString());\n  //       } else {\n  //         debouncedAmountChange('');\n  //       }\n  //     } else {\n  //       debouncedAmountChange(value);\n  //     }\n  //   }\n  // }\n\n  // Two versions for testing... (same for input and blur)\n  function handleBlurEvent() {\n    if (!userInput || userInput === '.') {\n      userInput = '';\n      formattedAmount = '';\n    } else {\n      formattedAmount = userInput;\n    }\n  }\n\n  function handleBlur(value: string) {\n    // if (!value || value === '.') {\n    //   userInput = '';\n    //   formattedAmount = '';\n    // } else {\n      formattedAmount = value;\n    // }\n  }\n</script>\n\n<div class=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\">\n  <div class=\"flex justify-between items-center\">\n    <NumericInput\n      value={userInput}\n      onChange={handleAmountInput}\n      onBlur={handleBlur}\n      disabled={disabled}\n      className=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        text-black dark:text-white\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n    />\n\n          oninput={handleAmountInput}\n      onblur={handleBlur}\n\n    <input\n      type=\"text\"\n      placeholder=\"0\"\n      value={userInput || formattedAmount}\n      disabled={disabled}\n      oninput={handleAmountInputEvent}\n      onblur={handleBlurEvent}\n      class=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        {insufficientBalance\n          ? 'text-red-500 dark:text-red-400 '\n          : 'text-black dark:text-white '}\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n    />\n\n    <TokenDropdown\n      disabled={disabled}\n      selectedToken={$swapPriceDataStore.tokenIn}\n      onTokenSelect={onTokenSelect}\n    />\n  </div>\n  <div class=\"flex justify-between items-center mt-2 text-sm\">\n    <div class=\"flex items-center\">\n      <ToggleSwitch\n        value={$isUsdModeStore}\n        labelOn=\"USD\"\n        labelOff=\"Token\"\n        className=\"bg-purple-300\"\n        onChange={(value) => isUsdModeStore.set(value)} />\n    </div>\n    <div class=\"flex flex-col items-end text-right\">\n      <SwapTokenPrice {swapPriceDataStore} type=\"sell\" />\n      <span>Balance: {balance}</span>\n    </div>\n  </div>\n  {#if insufficientBalance}\n    <div class=\"text-red-500 dark:text-red-400 text-sm mt-1\">\n      Insufficient balance for this swap\n    </div>\n  {/if}\n</div>\n -->\n","<!-- BuyTokenPanel.svelte -->\n<script lang=\"ts\">\n\timport type { Writable } from 'svelte/store';\n\timport TokenDropdown from './TokenDropdown.svelte';\n\timport SwapTokenPrice from './SwapTokenPrice.svelte';\n\timport type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n\timport { debounce } from 'lodash-es';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { toBigInt } from '$lib/common';\n\timport NumericInput from './NumericInput.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\n\tinterface Props {\n\t\tdisabled?: boolean;\n\t\tresetValues?: boolean;\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tonTokenSelect: (token: SwapToken) => void;\n\t\tonAmountChange: (amount: string) => void;\n\t\tlastModifiedPanel?: string;\n\t}\n\n\tlet {\n\t\tdisabled = false,\n\t\tresetValues = $bindable(false),\n\t\tswapPriceDataStore,\n\t\tonTokenSelect,\n\t\tonAmountChange,\n\t\tlastModifiedPanel = $bindable('sell')\n\t}: Props = $props();\n\n\tlet userInput = $state('');\n\tlet formattedAmount = $state('');\n\n\t// Reset handling\n\t$effect(() => {\n\t\tif (resetValues) {\n\t\t\tuserInput = '';\n\t\t\tformattedAmount = '';\n\t\t\tresetValues = false;\n\t\t}\n\t});\n\n\t// Update display amount when quote changes from sell panel\n\t$effect(() => {\n\t\tif (lastModifiedPanel === 'sell') {\n\t\t\t// Removed the !userInput check\n\t\t\tuserInput = ''; // Clear user input when sell panel changes\n\t\t\tconst tokenAmount = ethersv6.formatUnits(\n\t\t\t\ttoBigInt($swapPriceDataStore.amountOut),\n\t\t\t\t$swapPriceDataStore.tokenOut.decimals\n\t\t\t);\n\t\t\tformattedAmount = tokenAmount;\n\t\t}\n\t});\n\n\tconst debouncedAmountChange = debounce((value: string) => {\n\t\tonAmountChange(value);\n\t}, 300);\n\n\tfunction handleAmountInput(value: string) {\n\t\tlastModifiedPanel = 'buy';\n\n\t\tif (!value) {\n\t\t\tuserInput = '';\n\t\t\tformattedAmount = '';\n\t\t\tdebouncedAmountChange('');\n\t\t\treturn;\n\t\t}\n\n\t\tuserInput = value;\n\t\tformattedAmount = value;\n\t\tdebouncedAmountChange(value);\n\t}\n\n\tfunction handleTokenSelection(token: SwapToken) {\n\t\tuserInput = '';\n\t\tformattedAmount = '';\n\t\tonTokenSelect(token);\n\t}\n\n\tfunction handleBlur(value: string) {\n\t\tif (!value) {\n\t\t\tuserInput = '';\n\t\t\tformattedAmount = '';\n\t\t}\n\t}\n</script>\n\n<div\n\tclass=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\"\n>\n\t<div class=\"flex justify-between items-center\">\n\t\t<NumericInput\n\t\t\tvalue={userInput || formattedAmount}\n\t\t\tonChange={handleAmountInput}\n\t\t\tonBlur={handleBlur}\n\t\t\t{disabled}\n\t\t\tclassName=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        text-black dark:text-white\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n\t\t/>\n\t\t<TokenDropdown\n\t\t\t{disabled}\n\t\t\tselectedToken={$swapPriceDataStore.tokenOut}\n\t\t\tonTokenSelect={handleTokenSelection}\n\t\t/>\n\t</div>\n\t<div class=\"flex justify-between items-center mt-2 text-sm\">\n\t\t<SwapTokenPrice {swapPriceDataStore} type=\"buy\" />\n\t</div>\n</div>\n\n<!-- <script lang=\"ts\">\n  import type { Writable } from 'svelte/store';\n  import TokenDropdown from './TokenDropdown.svelte';\n  import SwapTokenPrice from './SwapTokenPrice.svelte';\n  import type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n  import { debounce } from 'lodash-es';\n  import { ethers as ethersv6 } from 'ethers-v6';\n  import { convertTokenToUsd, convertUsdToTokenAmount, toBigInt } from '$lib/common';\n  import { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\n  interface Props {\n    disabled?: boolean;\n    resetValues?: boolean;\n    swapPriceDataStore: Writable<SwapPriceData>;\n    onTokenSelect: (token: SwapToken) => void;\n    onAmountChange: (amount: string) => void;\n  }\n\n  let {\n    disabled = false,\n    resetValues = $bindable(false),\n    swapPriceDataStore,\n    onTokenSelect,\n    onAmountChange,\n  }: Props = $props();\n\n  // Input states\n  let userInput = $state('');\n  let formattedAmount = $state('');\n\n  // Reset handling\n  $effect(() => {\n    if (resetValues) {\n      userInput = '';\n      formattedAmount = '';\n      resetValues = false;\n    }\n  });\n\n  // Sync formatted amount with store data\n  $effect(() => {\n    const tokenAmount = ethersv6.formatUnits(toBigInt($swapPriceDataStore.amountOut), $swapPriceDataStore.tokenOut.decimals);\n\n    // Convert token amount to USD\n    const usdAmount = $swapPriceDataStore.marketPriceOut > 0\n      ? convertTokenToUsd(Number(tokenAmount), $swapPriceDataStore.marketPriceOut)\n      : 0;\n\n    const displayAmount = $isUsdModeStore ? usdAmount.toFixed(2) : tokenAmount;\n\n    if (!userInput) {\n      formattedAmount = displayAmount;\n    }\n  });\n\n  // Debounced amount change handler\n  const debouncedAmountChange = debounce((value: string) => {\n    onAmountChange(value);\n  }, 300);\n\n  // Handle input changes\n  function handleAmountInput(event: Event) {\n    const input = event.target as HTMLInputElement;\n    let value = input.value;\n\n    // Sanitize input: Allow only numbers and a single dot\n    value = value.replace(/[^0-9.]/g, '');\n\n    // Split input into integer and decimal parts\n    const parts = value.split('.');\n    if (parts.length > 2) {\n      value = `${parts[0]}.${parts.slice(1).join('')}`;\n    }\n\n    // Adjust decimal precision based on mode\n    if ($isUsdModeStore) {\n      // Limit to 2 decimal places for USD\n      if (parts[1]?.length > 2) {\n        value = `${parts[0]}.${parts[1].slice(0, 2)}`;\n      }\n    } else {\n      // Use tokenOut decimals for precision\n      const tokenDecimals = $swapPriceDataStore.tokenOut.decimals || 18;\n      if (parts[1]?.length > tokenDecimals) {\n        value = `${parts[0]}.${parts[1].slice(0, tokenDecimals)}`;\n      }\n    }\n\n    if (userInput !== value) {\n      userInput = value;\n\n      if (value === '' || value === '.') {\n        userInput = '';\n        formattedAmount = '';\n        debouncedAmountChange('');\n        return;\n      }\n\n      formattedAmount = value;\n\n      if ($isUsdModeStore) {\n        // Convert USD value to token quantity\n        const marketPrice = $swapPriceDataStore.marketPriceOut || 0;\n        if (marketPrice > 0) {\n          const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenOut.decimals);\n          debouncedAmountChange(tokenAmount.toString());\n        } else {\n          debouncedAmountChange('');\n        }\n      } else {\n        // Pass the token quantity directly\n        debouncedAmountChange(value);\n      }\n    }\n  }\n\n  // Handle blur (input losing focus)\n  function handleBlur() {\n    if (!userInput || userInput === '.' || userInput === '') {\n      userInput = '';\n      if (!formattedAmount || formattedAmount === '0') formattedAmount = '';\n    } else {\n      formattedAmount = userInput;\n    }\n  }\n</script>\n\n<div class=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\">\n  <div class=\"flex justify-between items-center\">\n    <input\n      type=\"text\"\n      placeholder=\"0\"\n      value={userInput || formattedAmount}\n      oninput={handleAmountInput}\n      onblur={handleBlur}\n      disabled={disabled}\n      class=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        text-black dark:text-white\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n    />\n    <TokenDropdown\n      disabled={disabled}\n      selectedToken={$swapPriceDataStore.tokenOut}\n      onTokenSelect={onTokenSelect}\n    />\n  </div>\n  <div class=\"flex justify-between items-center mt-2 text-sm\">\n    <SwapTokenPrice {swapPriceDataStore} type=\"buy\" />\n  </div>\n</div> -->\n","<script lang=\"ts\">\n\timport { type SwapPriceData } from '$lib/common';\n\timport type { Writable } from 'svelte/store';\n\n\tinterface Props {\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tonSlippageChange: (value: number) => void;\n\t\tonDeadlineChange: (value: number) => void;\n\t\tonPoolFeeChange: (value: number) => void;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\tswapPriceDataStore,\n\t\tonSlippageChange,\n\t\tonDeadlineChange,\n\t\tonPoolFeeChange,\n\t\tclassName = 'text-gray-700'\n\t}: Props = $props();\n\n\tconst slippageOptions = [0.1, 0.5, 1, 3];\n\tconst deadlineOptions = [10, 20, 30, 60];\n\tconst poolFeeOptions = [500, 3000, 10000];\n\n\t// Reactive store value\n\tlet swapPriceData = $derived($swapPriceDataStore);\n\n\tlet slippageTolerance = $state(0.5);\n\tlet deadline = $state(10);\n\tlet poolFee = $state($swapPriceDataStore.fee || 3000);\n\n\t// Replace first run with $effect\n\t$effect(() => {\n\t\tif (swapPriceData) {\n\t\t\tif (swapPriceData.slippageTolerance !== undefined) {\n\t\t\t\tslippageTolerance = swapPriceData.slippageTolerance;\n\t\t\t}\n\t\t\tif (swapPriceData.deadline !== undefined) {\n\t\t\t\tdeadline = swapPriceData.deadline;\n\t\t\t}\n\t\t\tif (swapPriceData.fee !== undefined) {\n\t\t\t\tconst newFee = poolFeeOptions.includes(swapPriceData.fee)\n\t\t\t\t\t? swapPriceData.fee\n\t\t\t\t\t: findClosestPoolFee(swapPriceData.fee);\n\t\t\t\tpoolFee = newFee;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction findClosestPoolFee(fee: number): number {\n\t\tif (poolFeeOptions.includes(fee)) {\n\t\t\treturn fee;\n\t\t}\n\t\treturn poolFeeOptions.reduce((prev, curr) =>\n\t\t\tMath.abs(curr - fee) < Math.abs(prev - fee) ? curr : prev\n\t\t);\n\t}\n\n\tfunction handleSlippageChange(event: Event) {\n\t\tconst value = Number((event.target as HTMLSelectElement).value);\n\t\tslippageTolerance = value;\n\t\tonSlippageChange(value);\n\t}\n\n\tfunction handleDeadlineChange(event: Event) {\n\t\tconst value = Number((event.target as HTMLSelectElement).value);\n\t\tdeadline = value;\n\t\tonDeadlineChange(value);\n\t}\n\n\tfunction handlePoolFeeChange(event: Event) {\n\t\tconst value = Number((event.target as HTMLSelectElement).value);\n\t\tpoolFee = value;\n\t\tonPoolFeeChange(value);\n\t}\n</script>\n\n<div class=\"flex justify-between items-center space-x-4 {className}\">\n\t<div>\n\t\t<label for=\"slippage\" class=\"block text-sm font-medium\"> Slippage </label>\n\t\t<select\n\t\t\tid=\"slippage\"\n\t\t\tvalue={slippageTolerance}\n\t\t\tonchange={handleSlippageChange}\n\t\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n\t\t>\n\t\t\t{#each slippageOptions as option}\n\t\t\t\t<option value={option}>{option}%</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n\n\t<div>\n\t\t<label for=\"deadline\" class=\"block text-sm font-medium\"> Deadline </label>\n\t\t<select\n\t\t\tid=\"deadline\"\n\t\t\tvalue={deadline}\n\t\t\tonchange={handleDeadlineChange}\n\t\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n\t\t>\n\t\t\t{#each deadlineOptions as option}\n\t\t\t\t<option value={option}>{option} minutes</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n\n\t<div>\n\t\t<label for=\"poolFee\" class=\"block text-sm font-medium\"> Pool Fee </label>\n\t\t<select\n\t\t\tid=\"poolFee\"\n\t\t\tvalue={poolFee}\n\t\t\tonchange={handlePoolFeeChange}\n\t\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n\t\t>\n\t\t\t{#each poolFeeOptions as option}\n\t\t\t\t<option value={option}>{option / 10000}%</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n</div>\n","<script lang=\"ts\">\n\timport { type Writable } from 'svelte/store';\n\timport type { SwapPriceData } from '$lib/common/interfaces';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport {\n\t\tcalculateFeeAmount,\n\t\tcalculateFeeBasisPointsPercent,\n\t\tformatFeeToUSD\n\t} from '$lib/utilities/utilities';\n\timport { toBigInt } from '$lib/common/math';\n\timport { YAKKL_FEE_BASIS_POINTS_DIVISOR } from '$lib/common';\n\n\tinterface Props {\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tdisabled?: boolean; // This assumes for wrapping and unwrapping of ETH WETH\n\t}\n\n\tlet { swapPriceDataStore, disabled = false }: Props = $props();\n\n\tlet exchangeRate = $state(0);\n\tlet feeBasisPointsToPercent = $state('0.0000%');\n\n\t// Declare reactive variables\n\tlet swapPriceData = $derived($swapPriceDataStore);\n\tlet tokenOutPriceInUSD = $derived(swapPriceData.tokenOutPriceInUSD || '--');\n\tlet gasEstimateInUSD = $derived(swapPriceData.gasEstimateInUSD || '--');\n\n\t// Replace first run with $effect\n\t$effect(() => {\n\t\tfeeBasisPointsToPercent = swapPriceData\n\t\t\t? calculateFeeBasisPointsPercent(swapPriceData.feeBasisPoints)\n\t\t\t: '0.0000%';\n\t});\n\n\t// Replace second run with $effect\n\t$effect(() => {\n\t\tif (\n\t\t\tswapPriceData &&\n\t\t\ttoBigInt(swapPriceData.amountIn) > 0n &&\n\t\t\ttoBigInt(swapPriceData.amountOut) > 0n\n\t\t) {\n\t\t\tconst tokenIn = swapPriceData.tokenIn;\n\t\t\tconst tokenOut = swapPriceData.tokenOut;\n\n\t\t\t// More precise exchange rate calculation\n\t\t\tconst amountInFormatted = parseFloat(\n\t\t\t\tethersv6.formatUnits(toBigInt(swapPriceData.amountIn) || 0n, tokenIn.decimals)\n\t\t\t);\n\t\t\tconst amountOutFormatted = parseFloat(\n\t\t\t\tethersv6.formatUnits(toBigInt(swapPriceData.amountOut) || 0n, tokenOut.decimals)\n\t\t\t);\n\n\t\t\tif (amountInFormatted > 0 && amountOutFormatted > 0) {\n\t\t\t\texchangeRate = amountOutFormatted / amountInFormatted;\n\t\t\t} else {\n\t\t\t\texchangeRate = 0;\n\t\t\t}\n\t\t} else {\n\t\t\texchangeRate = 0;\n\t\t}\n\t});\n\n\tlet feeAmountInUSD = $derived(\n\t\t(() => {\n\t\t\tif (\n\t\t\t\tswapPriceData &&\n\t\t\t\ttoBigInt(swapPriceData.amountIn) > 0n &&\n\t\t\t\tswapPriceData.marketPriceIn > 0 &&\n\t\t\t\tswapPriceData.tokenIn &&\n\t\t\t\tswapPriceData.tokenIn.decimals &&\n\t\t\t\tswapPriceData.feeBasisPoints &&\n\t\t\t\tdisabled === false\n\t\t\t) {\n\t\t\t\t// Convert basis points to precise decimal\n\t\t\t\tconst feeDecimal = swapPriceData.feeBasisPoints / YAKKL_FEE_BASIS_POINTS_DIVISOR;\n\n\t\t\t\t// Calculate fee amount in token units without rounding\n\t\t\t\tconst feeAmount = calculateFeeAmount(\n\t\t\t\t\ttoBigInt(swapPriceData.amountIn),\n\t\t\t\t\tswapPriceData.feeBasisPoints\n\t\t\t\t);\n\t\t\t\treturn formatFeeToUSD(\n\t\t\t\t\tfeeAmount,\n\t\t\t\t\tswapPriceData.tokenIn.decimals,\n\t\t\t\t\tswapPriceData.marketPriceIn\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Fallback value until all data is available or valid\n\t\t\t\treturn disabled ? '' : 'Calculating...';\n\t\t\t}\n\t\t})()\n\t);\n</script>\n\n<div class=\"space-y-2 text-sm text-gray-500\">\n\t<!-- Exchange Rate Display -->\n\t{#if !disabled}\n\t\t<div class=\"flex justify-between w-full\">\n\t\t\t<span class=\"text-left truncate\">\n\t\t\t\t{#if exchangeRate && exchangeRate > 0}\n\t\t\t\t\tExchange Rate: 1 {swapPriceData.tokenOut.symbol} ≈ {(1 / exchangeRate).toFixed(6)}\n\t\t\t\t\t{swapPriceData.tokenIn.symbol}\n\t\t\t\t{:else}\n\t\t\t\t\tExchange Rate: ~N/A~\n\t\t\t\t{/if}\n\t\t\t</span>\n\t\t</div>\n\n\t\t<!-- Token Out Price in USD -->\n\t\t<div class=\"flex justify-between w-full\">\n\t\t\t<span class=\"text-left truncate\">\n\t\t\t\tToken Price (USD): {tokenOutPriceInUSD}\n\t\t\t</span>\n\t\t</div>\n\t{/if}\n\n\t<!-- Gas Fee Estimate -->\n\t<div class=\"flex justify-between items-center w-full\">\n\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t<img src=\"/images/gas.svg\" alt=\"Gas Estimate\" class=\"w-3 h-3\" />\n\t\t\t<span>Gas Fee ≈ {gasEstimateInUSD}</span>\n\t\t</div>\n\t</div>\n\n\t<!-- Fee Estimate -->\n\t{#if !disabled}\n\t\t<div class=\"flex justify-between w-full\">\n\t\t\t<span class=\"text-left truncate\">\n\t\t\t\tFee ({feeBasisPointsToPercent}): ≈ {feeAmountInUSD}\n\t\t\t</span>\n\t\t</div>\n\t{/if}\n</div>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// SwapManager.ts\nimport type { Blockchain } from './Blockchain';\nimport type { Provider } from './Provider';\nimport type { Token } from './Token';\nimport { YAKKL_FEE_BASIS_POINTS, type BigNumberish, type TransactionResponse } from '$lib/common';\nimport type {\n\tPoolInfoData,\n\tSwapParams,\n\tSwapPriceData,\n\tSwapToken,\n\tTransactionReceipt,\n\tTransactionRequest\n} from '$lib/common/interfaces';\nimport { PriceManager } from './PriceManager';\nimport { calculateFeeAmount } from '$lib/utilities';\nimport { log } from '$lib/common/logger-wrapper';\n\nexport abstract class SwapManager {\n\tprotected blockchain: Blockchain;\n\tprotected provider: Provider;\n\tprotected feeBasisPoints: number = YAKKL_FEE_BASIS_POINTS;\n\tprotected priceManager: PriceManager;\n\tpublic tokens: SwapToken[] = [];\n\tpublic preferredTokens: SwapToken[] = [];\n\tpublic stablecoinTokens: SwapToken[] = [];\n\n\tconstructor(\n\t\tblockchain: Blockchain,\n\t\tprovider: Provider,\n\t\tinitialFeeBasisPoints: number = YAKKL_FEE_BASIS_POINTS\n\t) {\n\t\tthis.blockchain = blockchain;\n\t\tthis.provider = provider;\n\t\tthis.feeBasisPoints =\n\t\t\tinitialFeeBasisPoints < 0 ? YAKKL_FEE_BASIS_POINTS : initialFeeBasisPoints; // If overriding the default fee basis points, ensure it is formatted correctly!\n\t\tthis.priceManager = new PriceManager();\n\t}\n\n\tgetChainId(): number {\n\t\treturn this.blockchain.chainId;\n\t}\n\n\tgetMarketPrice(pair: string) {\n\t\treturn this.priceManager.getMarketPrice(pair); //By default, this will cycle through all specified providers and return the first successful response unless\n\t}\n\n\tgetProvider(): Provider {\n\t\treturn this.provider;\n\t}\n\n\tgetFeeBasisPoints(): number {\n\t\treturn this.feeBasisPoints;\n\t}\n\n\tsetFeeBasisPoints(feeBasisPoints: number): void {\n\t\tthis.feeBasisPoints = feeBasisPoints;\n\t}\n\n\tprotected calculateFee(amount: bigint): bigint {\n\t\ttry {\n\t\t\tif (amount === 0n || this.feeBasisPoints <= 0) return 0n; // No fee if amount is zero or fee is <= zero\n\t\t\treturn calculateFeeAmount(amount, this.feeBasisPoints);\n\t\t} catch (error) {\n\t\t\tlog.error('Error calculating fee:', false, error);\n\t\t\treturn 0n;\n\t\t}\n\t}\n\n\tabstract estimateSwapGas(swapRouterAddress: string, swapParams: SwapParams): Promise<bigint>;\n\n\tabstract checkIfPoolExists(tokenIn: Token, tokenOut: Token, fee: number): Promise<boolean>;\n\tabstract fetchTokenList(): Promise<SwapToken[]>;\n\tabstract getPreferredTokens(tokens: SwapToken[]): SwapToken[];\n\tabstract getName(): string;\n\n\tabstract getQuote(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tamount: BigNumberish,\n\t\tfundingAddress: string,\n\t\tisExactIn: boolean,\n\t\tfee?: number\n\t): Promise<SwapPriceData>;\n\n\tabstract approveToken(token: Token, amount: string): Promise<TransactionReceipt>;\n\tabstract checkAllowance(token: Token, fundingAddress: string): Promise<bigint>;\n\tabstract executeSwap(params: SwapParams): Promise<TransactionResponse>;\n\tabstract executeFullSwap(params: SwapParams): Promise<[TransactionReceipt, TransactionReceipt]>; // Waits for transaction to be mined, sends fees, and returns transaction receipt\n\n\tabstract getPoolInfo(tokenA: Token, tokenB: Token, fee?: number): Promise<PoolInfoData>;\n\n\tabstract populateSwapTransaction(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tamountIn: BigNumberish,\n\t\tamountOutMin: BigNumberish,\n\t\trecipient: string,\n\t\tdeadline: number,\n\t\tfee?: number,\n\t\testimateOnly?: boolean\n\t): Promise<TransactionRequest | bigint>;\n\n\tabstract distributeFee(\n\t\ttokenOut: Token,\n\t\tfeeAmount: BigNumberish,\n\t\tfeeRecipient: string,\n\t\tgasLimit: BigNumberish,\n\t\tmaxPriorityFeePerGas: BigNumberish,\n\t\tmaxFeePerGas: BigNumberish\n\t): Promise<TransactionReceipt>;\n}\n","// Token.ts\nimport type { BigNumberish, SwapToken, TransactionResponse } from '$lib/common';\nimport type { AbstractContract } from '$managers/Contract';\nimport type { Blockchain } from '$managers/Blockchain';\nimport type { Provider } from '$managers/Provider';\n\nexport interface IToken {\n\taddress: string;\n\tname: string;\n\tsymbol: string;\n\tdecimals: number;\n\tisNative?: boolean;\n\tisStablecoin?: boolean;\n\tlogoURI: string;\n\tdescription: string;\n\tchainId: number;\n\tblockchain?: Blockchain;\n\tprovider?: Provider;\n\tbalance?: BigNumberish;\n\tprivateKey?: string;\n\turl?: string;\n\tgetContract(): Promise<AbstractContract | null>;\n\tgetBalance(userAddress: string): Promise<BigNumberish>;\n\ttransfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse>;\n}\n\nexport abstract class Token implements IToken {\n\treadonly address: string;\n\treadonly name: string;\n\treadonly symbol: string;\n\treadonly decimals: number;\n\treadonly logoURI: string;\n\treadonly description: string;\n\treadonly chainId: number;\n\treadonly isNative?: boolean;\n\treadonly isStablecoin?: boolean;\n\treadonly blockchain?: Blockchain;\n\treadonly provider?: Provider;\n\treadonly privateKey?: string;\n\treadonly url?: string;\n\tbalance?: BigNumberish = 0n;\n\n\tconstructor(\n\t\taddress: string,\n\t\tname: string,\n\t\tsymbol: string,\n\t\tdecimals: number,\n\t\tlogoURI: string,\n\t\tdescription: string,\n\t\tchainId: number,\n\t\tisNative?: boolean,\n\t\tisStablecoin?: boolean,\n\t\tblockchain?: Blockchain,\n\t\tprovider?: Provider,\n\t\tbalance?: BigNumberish,\n\t\tprivateKey?: string,\n\t\turl?: string\n\t) {\n\t\tthis.address = address;\n\t\tthis.name = name;\n\t\tthis.symbol = symbol;\n\t\tthis.decimals = decimals;\n\t\tthis.logoURI = logoURI;\n\t\tthis.description = description || `${name} token`;\n\t\tthis.chainId = chainId || 1;\n\t\tthis.isNative = isNative || false;\n\t\tthis.isStablecoin = isStablecoin || false;\n\t\tthis.blockchain = blockchain;\n\t\tthis.provider = provider;\n\t\tthis.balance = balance || 0n;\n\t\tthis.privateKey = privateKey || '';\n\t\tthis.url = url || '';\n\t}\n\n\tabstract getContract(): Promise<AbstractContract | null>;\n\tabstract getBalance(userAddress: string): Promise<BigNumberish>;\n\tabstract transfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse>;\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\taddress: this.address,\n\t\t\tname: this.name,\n\t\t\tsymbol: this.symbol,\n\t\t\tdecimals: this.decimals,\n\t\t\tbalance: this.balance?.toString(),\n\t\t\tlogoURI: this.logoURI,\n\t\t\tdescription: this.description,\n\t\t\tchainId: this.chainId,\n\t\t\tisNative: this.isNative,\n\t\t\tisStablecoin: this.isStablecoin,\n\t\t\turl: this.url\n\t\t};\n\t}\n\n\t// New static method to create a Token from a SwapToken\n\tstatic fromSwapToken(\n\t\tswapToken: SwapToken,\n\t\tblockchain: Blockchain,\n\t\tprovider: Provider,\n\t\tprivateKey?: string\n\t): Token {\n\t\t// This is a factory method that returns a concrete implementation of Token\n\t\t// You'll need to create a concrete class that extends Token, let's call it ConcreteToken\n\t\treturn new ConcreteToken(\n\t\t\tswapToken.address,\n\t\t\tswapToken.name,\n\t\t\tswapToken.symbol,\n\t\t\tswapToken.decimals,\n\t\t\tswapToken.logoURI || '', // Use an empty string if logoURI is undefined\n\t\t\tswapToken.description || `${swapToken.name} token`, // Use an empty string if description is undefined\n\t\t\tswapToken.chainId,\n\t\t\tswapToken.isNative || false, // Use false if isNative is undefined\n\t\t\tswapToken.isStablecoin || false, // Use false if isStablecoin is undefined\n\t\t\tblockchain,\n\t\t\tprovider,\n\t\t\tswapToken.balance || 0n, // Use 0 if balance is undefined\n\t\t\tprivateKey,\n\t\t\tswapToken.url || ''\n\t\t);\n\t}\n}\n\n// Concrete implementation of Token\nclass ConcreteToken extends Token {\n\tasync getContract(): Promise<AbstractContract | null> {\n\t\t// Implement contract creation logic here\n\t\t// For example:\n\t\treturn this.blockchain.createContract(this.address, [\n\t\t\t'function balanceOf(address account) view returns (uint256)',\n\t\t\t'function transfer(address to, uint256 amount) returns (bool)'\n\t\t]);\n\t}\n\n\tasync getBalance(userAddress: string): Promise<BigNumberish> {\n\t\tconst contract = await this.getContract();\n\t\tif (!contract) return 0n; // Return 0 if contract is null\n\t\tthis.balance = await contract.call('balanceOf', userAddress);\n\t\treturn this.balance;\n\t}\n\n\tasync transfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse> {\n\t\tconst contract = await this.getContract();\n\t\tif (!contract) throw new Error('Invalid contract');\n\t\treturn await contract.sendTransaction('transfer', toAddress, amount);\n\t}\n}\n","// EVMToken.ts\nimport { Token } from '$managers/Token';\nimport type { Blockchain } from '$managers/Blockchain';\nimport type { BigNumberish, TransactionResponse } from '$lib/common';\nimport { ABIs } from '$lib/managers/contracts/evm/constants-evm';\nimport type { AbstractContract } from '$managers/Contract';\nimport type { Provider } from '$lib/managers/Provider';\n\nexport class EVMToken extends Token {\n\tprivate _contract: AbstractContract | null = null;\n\n\tconstructor(\n\t\taddress: string,\n\t\tname: string,\n\t\tsymbol: string,\n\t\tdecimals: number,\n\t\tlogoURI: string,\n\t\tdescription: string = `${name} token`,\n\t\tchainId: number = 1,\n\t\tisNative?: boolean,\n\t\tisStablecoin?: boolean,\n\t\tblockchain?: Blockchain,\n\t\tprovider?: Provider,\n\t\tprivateKey?: string,\n\t\turl?: string\n\t) {\n\t\tsuper(\n\t\t\taddress,\n\t\t\tname,\n\t\t\tsymbol,\n\t\t\tdecimals,\n\t\t\tlogoURI,\n\t\t\tdescription,\n\t\t\tchainId,\n\t\t\tisNative,\n\t\t\tisStablecoin,\n\t\t\tblockchain,\n\t\t\tprovider,\n\t\t\tprivateKey,\n\t\t\turl\n\t\t);\n\t}\n\n\tasync getContract(): Promise<AbstractContract | null> {\n\t\tif (!this._contract) {\n\t\t\tthis._contract = this.blockchain.createContract(this.address, ABIs.ERC20);\n\t\t}\n\t\treturn this._contract;\n\t}\n\n\tasync getBalance(userAddress: string): Promise<BigNumberish> {\n\t\tconst contract = await this.getContract();\n\t\tif (!contract) return 0n; // Want a graceful way to handle this instead of throwing an error\n\t\treturn await contract.call('balanceOf', userAddress);\n\t}\n\n\tasync transfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse> {\n\t\tconst contract = await this.getContract();\n\t\tif (!contract) throw new Error('Invalid contract');\n\t\tconst gasEstimate = await contract.estimateGas('transfer', toAddress, amount);\n\t\tconst tx = await contract.populateTransaction('transfer', toAddress, amount);\n\t\tif (!tx) throw new Error('Invalid transaction');\n\t\ttx.gasLimit = gasEstimate;\n\n\t\treturn await this.blockchain.sendTransaction(tx);\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// UniswapSwapManager.ts\nimport {\n\ttoBigInt,\n\tYAKKL_FEE_BASIS_POINTS,\n\tYAKKL_GAS_ESTIMATE_MIN_USD,\n\tYAKKL_GAS_ESTIMATE_MULTIHOP_SWAP_DEFAULT,\n\tYAKKL_GAS_ESTIMATE_MULTIPLIER_BASIS_POINTS,\n\ttype BigNumberish,\n\ttype PoolInfoData,\n\ttype PriceData,\n\ttype SwapParams,\n\ttype SwapPriceData,\n\ttype SwapToken,\n\ttype TransactionReceipt,\n\ttype TransactionRequest,\n\ttype TransactionResponse\n} from '$lib/common';\nimport { EthereumBigNumber } from '$lib/common/bignumber-ethereum';\nimport type { ExactInputParams, ExactInputSingleParams } from '$lib/common/ISwapRouter';\nimport IUniswapV3FactoryABI from '@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Factory.sol/IUniswapV3Factory.json';\nimport { abi as ISwapRouterABI } from '@uniswap/v3-periphery/artifacts/contracts/interfaces/ISwapRouter.sol/ISwapRouter.json';\nimport IQuoterV2ABI from '@uniswap/v3-periphery/artifacts/contracts/lens/QuoterV2.sol/QuoterV2.json';\nimport { ethers } from 'ethers';\nimport { formatFeeToUSD, formatPrice } from '../utilities/utilities';\nimport type { Ethereum } from './blockchains/evm/ethereum/Ethereum';\nimport { ADDRESSES } from './contracts/evm/constants-evm';\nimport type { Provider } from './Provider';\nimport { SwapManager } from './SwapManager';\nimport { Token } from './Token';\nimport { EVMToken } from './tokens/evm/EVMToken';\nimport { EthersConverter } from './utilities/EthersConverter';\nimport { log } from '$lib/common/logger-wrapper';\n\n// import { getToken, type TokenPair } from '$lib/common/tokens';\n// import { CurrencyAmount, Token as UniswapToken } from '@uniswap/sdk-core';\n// import IUniswapV3PoolABI from '@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json';\n// import { Pool, SqrtPriceMath, TickMath } from '@uniswap/v3-sdk';\n// import JSBI from 'jsbi';\n// import JSBI from '@uniswap/sdk-core/node_modules/jsbi';\n// import { convertToUniswapToken, sqrtPriceX96ToPrice } from './utilities/uniswap';\n// import { AlphaRouterService } from '@yakkl/uniswap-alpha-router-service';\n\nconst SUPPORTED_STABLECOINS = ['USDC', 'USDT', 'DAI', 'BUSD'];\n\n// example\n// import { AlphaRouterService } from 'uniswap-alpha-router-service';\n\n// const service = new AlphaRouterService();\n// try {\n//   const quote = await service.getQuote( tokenIn, tokenOut, amount, fundingAddress );\n//   // Use quote data\n// } catch ( error ) {\n//   log.error( 'Quote error:', false, error );\n// } finally {\n//   service.dispose();\n// }\n\nexport class UniswapSwapManager extends SwapManager {\n\tprivate routerContract: ethers.Contract | null = null;\n\tprivate providerNative: ethers.JsonRpcProvider | null = null;\n\tprivate signerNative: ethers.JsonRpcSigner | null = null;\n\tprivate factory: ethers.Contract | null = null;\n\t// private alphaRouter: AlphaRouterService;\n\n\tconstructor(\n\t\tblockchain: Ethereum,\n\t\tprovider: Provider,\n\t\tinitialFeeBasisPoints: number = YAKKL_FEE_BASIS_POINTS\n\t) {\n\t\tsuper(blockchain, provider, initialFeeBasisPoints);\n\t\t// this.alphaRouter = new AlphaRouterService();\n\t\tthis.initialize().then();\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tthis.providerNative = await this.provider.getProvider(); // This needs to be the normal native provider and not Signer\n\t\tif (!this.providerNative) throw new Error('Ethereum native provider not initialized');\n\t\tthis.signerNative = this.provider.getSignerNative();\n\t\tif (!this.signerNative) throw new Error('Ethereum native signer not initialized');\n\n\t\tthis.factory = new ethers.Contract(\n\t\t\tADDRESSES.UNISWAP_FACTORY,\n\t\t\tIUniswapV3FactoryABI.abi,\n\t\t\tthis.providerNative\n\t\t);\n\n\t\tthis.routerContract = new ethers.Contract(\n\t\t\tADDRESSES.UNISWAP_V3_ROUTER,\n\t\t\tISwapRouterABI,\n\t\t\tthis.signerNative\n\t\t);\n\n\t\tthis.tokens = await this.fetchTokenList();\n\t\tthis.preferredTokens = this.getPreferredTokens(this.tokens);\n\t\tthis.tokens = this.tokens\n\t\t\t.filter((token) => !this.preferredTokens.includes(token))\n\t\t\t.sort((a, b) => a.symbol.localeCompare(b.symbol));\n\t\tthis.stablecoinTokens = this.tokens.filter((token) => token.isStablecoin);\n\t}\n\n\tdispose() {\n\t\t// this.alphaRouter.dispose();\n\t}\n\n\tgetName(): string {\n\t\treturn 'Uniswap V3';\n\t}\n\n\t// Get best price tier for a swap - future implementation\n\n\tasync checkIfPoolExists(tokenIn: Token, tokenOut: Token, fee: number): Promise<boolean> {\n\t\tif (!this.factory) throw new Error('Factory contract not initialized');\n\t\ttry {\n\t\t\tconst poolAddress = await this.factory.getPool(tokenIn.address, tokenOut.address, fee);\n\t\t\treturn poolAddress !== ethers.ZeroAddress;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// For getting the tokens specific to Uniswap V3\n\tasync fetchTokenList(): Promise<SwapToken[]> {\n\t\ttry {\n\t\t\tconst response = await fetch('https://tokens.uniswap.org');\n\t\t\tconst data = await response.json();\n\t\t\tdata.tokens\n\t\t\t\t.filter((token: SwapToken) => token.chainId === this.blockchain?.getChainId())\n\t\t\t\t.map((token: SwapToken) => {\n\t\t\t\t\tif (SUPPORTED_STABLECOINS.includes(token.symbol)) {\n\t\t\t\t\t\ttoken.isStablecoin = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\n\t\t\tconst eth: SwapToken = {\n\t\t\t\tchainId: 1,\n\t\t\t\taddress: ADDRESSES.WETH,\n\t\t\t\tname: 'Ethereum',\n\t\t\t\tsymbol: 'ETH',\n\t\t\t\tdecimals: 18,\n\t\t\t\tisNative: true,\n\t\t\t\tisStablecoin: false,\n\t\t\t\tlogoURI: '/images/ethereum.svg'\n\t\t\t};\n\n\t\t\tdata.tokens.unshift(eth);\n\t\t\treturn data.tokens;\n\t\t} catch (error) {\n\t\t\tlog.error('Error fetching token list:', false, error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tgetPreferredTokens(tokens: SwapToken[]): SwapToken[] {\n\t\tconst preferredTokenSymbols = ['ETH', 'WETH', 'WBTC', 'USDC', 'USDT', 'DAI'];\n\t\treturn preferredTokenSymbols\n\t\t\t.map((symbol) => tokens.find((token) => token.symbol === symbol))\n\t\t\t.filter((token): token is SwapToken => token !== undefined);\n\t}\n\n\t// Final fallback for multi-hop quotes but we may move this up and replace the multiHopQuote method\n\t//   async multiHopQuoteAlphaRouter(\n\t//     tokenIn: Token,\n\t//     tokenOut: Token,\n\t//     amount: BigNumberish,\n\t//     fundingAddress: string,\n\t//     isExactIn: boolean = true\n\t//   ): Promise<SwapPriceData> {\n\t//   try {\n\t//     // Step 1: Set up the provider using Alchemy (ethers v5)\n\t//     const provider = new ethersv5.providers.AlchemyProvider(\n\t//       'mainnet',\n\t//       import.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t//     );\n\n\t//     // Step 2: Initialize the AlphaRouter\n\t//     const router = new AlphaRouter( { chainId: 1, provider } );\n\n\t//     const slippageTolerance = new Percent( 5, 100 );\n\n\t//     // Step 3: Set up the Swap route request\n\t//     const amountInOrOut = ethersv5.BigNumber.from( amount );\n\t//     const swapRouteOptions: SwapOptions = {\n\t//       recipient: fundingAddress,\n\t//       slippageTolerance: slippageTolerance, // Setting a 5% slippage tolerance\n\t//       deadline: Math.floor( Date.now() / 1000 ) + 60 * 20, // 20 minutes from now\n\t//       type: SwapType.SWAP_ROUTER_02, // Set the type to indicate the router version (SwapRouter02 is the most used)\n\t//     };\n\n\t//     // Convert to uniswap tokens\n\n\t//     const currencyAmount = CurrencyAmount.fromRawAmount( convertToUniswapToken( isExactIn ? tokenIn : tokenOut ), amountInOrOut.toString() );\n\n\t//     // Step 4: Call AlphaRouter to get the best swap route\n\t//     const swapRoute: SwapRoute | null = await router.route(\n\t//       currencyAmount,\n\t//       convertToUniswapToken( tokenOut),\n\t//       isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n\t//       swapRouteOptions\n\t//     );\n\n\t//     if ( !swapRoute ) {\n\t//       throw new Error( 'No valid route exists for the provided tokens and amount' );\n\t//     }\n\n\t//     // Step 5: Extract quote information from the SwapRoute\n\t//     const quoteAmount = swapRoute.quote.toFixed( 0 ); // CurrencyAmount has address and which token in it\n\t//     const gasEstimate = ethersv5.BigNumber.from( swapRoute.estimatedGasUsed );\n\n\t//     let poolFee: number | undefined = undefined;\n\n\t//     if ( swapRoute instanceof V3RouteWithValidQuote ) {\n\t//       const route = swapRoute.route; // V3Route object containing pool information\n\t//       if ( route && route.pools && route.pools.length > 0 ) {\n\t//         // Extracting the fee from the first pool in the route\n\t//         poolFee = route.pools[ 0 ].fee; // Assuming this pool has a 'fee' property\n\t//       }\n\t//     }\n\n\t//     const fee = poolFee ?? 3000; // Default to 3000 basis points if pool fee is not found\n\n\t//     return await this.constructQuoteData(\n\t//       tokenIn,\n\t//       tokenOut,\n\t//       fundingAddress,\n\t//       amount,\n\t//       BigInt( quoteAmount ),\n\t//       fee, // Assuming first fee for simplicity\n\t//       gasEstimate.toBigInt(),\n\t//       true, // multiHop\n\t//       0n, // sqrtPriceX96After.toBigInt(),\n\t//       0, // initializedTicksCrossed,\n\t//       isExactIn\n\t//     );\n\t//   } catch ( error ) {\n\t//     debug_log( 'Error fetching multi-hop quote using AlphaRouter:', false, error );\n\t//     throw new Error( 'Failed to get multi-hop quote via AlphaRouter. This means pools do not exist.' );\n\t//   }\n\t// }\n\n\tasync multiHopQuote(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tamount: BigNumberish,\n\t\tfundingAddress: string,\n\t\tisExactIn: boolean = true,\n\t\tfee: number = 3000\n\t): Promise<SwapPriceData> {\n\t\t// const quote = await this.alphaRouter.getQuote(\n\t\t//   tokenIn,\n\t\t//   tokenOut,\n\t\t//   amount.toString(),\n\t\t//   fundingAddress,\n\t\t//   isExactIn\n\t\t// );\n\n\t\t// if ( !quote.success || !quote.data ) {\n\t\t//   throw new Error( quote.error || 'Failed to get quote' );\n\t\t// }\n\n\t\t// return this.constructQuoteData(\n\t\t//   tokenIn,\n\t\t//   tokenOut,\n\t\t//   fundingAddress,\n\t\t//   amount,\n\t\t//   BigInt( quote.data.quoteAmount ),\n\t\t//   quote.data.fee ?? 3000,\n\t\t//   BigInt( quote.data.gasEstimate ),\n\t\t//   true,\n\t\t//   0n,\n\t\t//   0,\n\t\t//   isExactIn\n\t\t// );\n\n\t\t// multiHopQuoteAlphaRouter(tokenIn, tokenOut, amount, fundingAddress, isExactIn);\n\n\t\t// Step 1: Set up the provider using Alchemy (ethers v6)\n\t\tconst provider = new ethers.AlchemyProvider(\n\t\t\t'mainnet',\n\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t);\n\t\t// Step 2: Define the QuoterV2 contract address and ABI\n\t\tconst quoterV2ABI = [\n\t\t\t{\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: 'bytes',\n\t\t\t\t\t\tname: 'path',\n\t\t\t\t\t\ttype: 'bytes'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: 'uint256',\n\t\t\t\t\t\tname: 'amountIn',\n\t\t\t\t\t\ttype: 'uint256'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tname: 'quoteExactInput',\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: 'uint256',\n\t\t\t\t\t\tname: 'amountOut',\n\t\t\t\t\t\ttype: 'uint256'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tstateMutability: 'nonpayable',\n\t\t\t\ttype: 'function'\n\t\t\t},\n\t\t\t{\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: 'bytes',\n\t\t\t\t\t\tname: 'path',\n\t\t\t\t\t\ttype: 'bytes'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: 'uint256',\n\t\t\t\t\t\tname: 'amountOut',\n\t\t\t\t\t\ttype: 'uint256'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tname: 'quoteExactOutput',\n\t\t\t\toutputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalType: 'uint256',\n\t\t\t\t\t\tname: 'amountIn',\n\t\t\t\t\t\ttype: 'uint256'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tstateMutability: 'nonpayable',\n\t\t\t\ttype: 'function'\n\t\t\t}\n\t\t];\n\n\t\t// Step 3: Create the contract instance\n\t\tconst quoterContract = new ethers.Contract(ADDRESSES.UNISWAP_V3_QUOTER, quoterV2ABI, provider);\n\n\t\t// Step 4: Encode the path using solidityPack (ethers v5)\n\t\tconst tokenInAddress = tokenIn.address;\n\t\tconst tokenOutAddress = tokenOut.address;\n\n\t\tconst encodedPath = isExactIn\n\t\t\t? ethers.solidityPacked(\n\t\t\t\t\t['address', 'uint24', 'address', 'uint24', 'address'],\n\t\t\t\t\t[\n\t\t\t\t\t\ttokenInAddress, // TokenIn address\n\t\t\t\t\t\tfee, // Fee for TokenIn -> WETH pool\n\t\t\t\t\t\tADDRESSES.WETH, // WETH address\n\t\t\t\t\t\tfee, // Fee for WETH -> TokenOut pool\n\t\t\t\t\t\ttokenOutAddress // TokenOut address\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t: ethers.solidityPacked(\n\t\t\t\t\t['address', 'uint24', 'address', 'uint24', 'address'],\n\t\t\t\t\t[\n\t\t\t\t\t\ttokenOutAddress, // TokenOut address\n\t\t\t\t\t\tfee, // Fee for TokenOut -> WETH pool\n\t\t\t\t\t\tADDRESSES.WETH, // WETH address\n\t\t\t\t\t\tfee, // Fee for WETH -> TokenIn pool\n\t\t\t\t\t\ttokenInAddress // TokenIn address\n\t\t\t\t\t]\n\t\t\t\t);\n\n\t\t// Step 5: Call the contract method\n\t\tconst amountInOrOut = toBigInt(amount);\n\n\t\tconst multiHopParams = {\n\t\t\tpath: encodedPath,\n\t\t\t...(isExactIn ? { amountIn: amountInOrOut } : { amountOut: amountInOrOut })\n\t\t};\n\n\t\ttry {\n\t\t\tlet quoteAmount: bigint;\n\n\t\t\t// Returns a single value for the quote instead of a tuple of values\n\t\t\tif (isExactIn) {\n\t\t\t\tquoteAmount = await quoterContract.quoteExactInput.staticCall(\n\t\t\t\t\tmultiHopParams.path,\n\t\t\t\t\tamountInOrOut\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tquoteAmount = await quoterContract.quoteExactOutput.staticCall(\n\t\t\t\t\tmultiHopParams.path,\n\t\t\t\t\tamountInOrOut\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (quoteAmount > 0n) {\n\t\t\t\tconst gasEstimate = await this.getGasEstimateForSwap(\n\t\t\t\t\ttokenInAddress,\n\t\t\t\t\ttokenOutAddress,\n\t\t\t\t\tamountInOrOut,\n\t\t\t\t\tfundingAddress,\n\t\t\t\t\tfee\n\t\t\t\t);\n\n\t\t\t\treturn await this.constructQuoteData(\n\t\t\t\t\ttokenIn,\n\t\t\t\t\ttokenOut,\n\t\t\t\t\tfundingAddress,\n\t\t\t\t\tamount,\n\t\t\t\t\tquoteAmount,\n\t\t\t\t\tfee,\n\t\t\t\t\tgasEstimate,\n\t\t\t\t\ttrue, // multiHop\n\t\t\t\t\t0n, //sqrtPriceX96After.toBigInt(),\n\t\t\t\t\t0, //initializedTicksCrossed,\n\t\t\t\t\tisExactIn\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconst excludedProperties = ['url', 'requestBody', 'requestMethod', 'accessList'];\n\t\t\tconst formattedError = this.errorUniswap(error, excludedProperties);\n\t\t\t// debug_log( 'Formatted error: ', formattedError );\n\n\t\t\tthrow new Error(formattedError);\n\t\t\t// AlphaRouter causes issues with current version of ethers so it is no longer used here\n\t\t\t// return this.multiHopQuoteAlphaRouter( tokenIn, tokenOut, amount, fundingAddress, isExactIn );\n\t\t}\n\n\t\tthrow new Error('Token pools not found');\n\t\t// AlphaRouter causes issues with current version of ethers so it is no longer used here\n\t\t// return this.multiHopQuoteAlphaRouter( tokenIn, tokenOut, amount, fundingAddress, isExactIn );\n\t}\n\n\tasync getQuote(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tamount: BigNumberish,\n\t\tfundingAddress: string,\n\t\tisExactIn: boolean = true,\n\t\tfee: number = 3000\n\t): Promise<SwapPriceData> {\n\t\t// Determine actual tokens for routing\n\t\tconst actualTokenIn = tokenIn.isNative ? await this.getWETHToken() : tokenIn;\n\t\tconst actualTokenOut = tokenOut.isNative ? await this.getWETHToken() : tokenOut;\n\n\t\tswitch (fee) {\n\t\t\tcase 500:\n\t\t\tcase 3000:\n\t\t\tcase 10000:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfee = 3000;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!actualTokenIn?.address || !actualTokenOut?.address || !amount) {\n\t\t\t// Default empty quote return if params are not sufficient\n\t\t\treturn {\n\t\t\t\tprovider: this.getName(),\n\t\t\t\tlastUpdated: new Date(),\n\t\t\t\tchainId: this.provider ? this.provider.getChainId() : 1,\n\t\t\t\ttokenIn,\n\t\t\t\ttokenOut,\n\t\t\t\tfundingAddress,\n\t\t\t\tquoteAmount: 0n,\n\t\t\t\tfeeAmount: 0n,\n\t\t\t\tamountAfterFee: 0n,\n\t\t\t\tamountIn: 0n,\n\t\t\t\tamountOut: 0n,\n\t\t\t\texchangeRate: 0,\n\t\t\t\tmarketPriceIn: 0,\n\t\t\t\tmarketPriceOut: 0,\n\t\t\t\tmarketPriceGas: 0,\n\t\t\t\tpriceImpactRatio: 0,\n\t\t\t\tpath: [\n\t\t\t\t\ttokenIn.isNative ? ethers.ZeroAddress : tokenIn.address,\n\t\t\t\t\ttokenOut.isNative ? ethers.ZeroAddress : tokenOut.address\n\t\t\t\t],\n\t\t\t\tfee,\n\t\t\t\tfeeBasisPoints: this.feeBasisPoints,\n\t\t\t\tfeeAmountPrice: 0,\n\t\t\t\tfeeAmountInUSD: '',\n\t\t\t\tgasEstimate: 0n,\n\t\t\t\tgasEstimateInUSD: '',\n\t\t\t\ttokenOutPriceInUSD: '',\n\t\t\t\tslippageTolerance: 0.5,\n\t\t\t\tdeadline: 10,\n\t\t\t\tsqrtPriceX96After: 0n,\n\t\t\t\tinitializedTicksCrossed: 0,\n\t\t\t\tmultiHop: false,\n\t\t\t\terror: 'Insufficient parameters for quote',\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\t}\n\t\tif (!this.providerNative) throw new Error('Provider(s) not set');\n\t\t// Step 1: Get available pools\n\t\tconst availablePools = await this.getAvailablePools(actualTokenIn, actualTokenOut);\n\t\t// Step 2: Proceed with the first available pool (or select a pool with the desired fee). There are cases where pools only have a single fee tier.\n\t\tlet newFee = fee;\n\n\t\tif (!availablePools || !availablePools.includes(fee)) {\n\t\t\tnewFee = availablePools[0];\n\t\t}\n\n\t\tif (!availablePools || availablePools.length === 0) {\n\t\t\t// Handle multi-hop or throw an error if no valid routes exist\n\t\t\ttry {\n\t\t\t\treturn await this.multiHopQuote(\n\t\t\t\t\ttokenIn,\n\t\t\t\t\ttokenOut,\n\t\t\t\t\tamount,\n\t\t\t\t\tfundingAddress,\n\t\t\t\t\tisExactIn,\n\t\t\t\t\tnewFee\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Multi-hop quote failed:', false, error);\n\t\t\t\tthrow new Error('No valid route exists for the provided tokens and amount');\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\t// Step 3: Call `quoteExactInputSingle` or `quoteExactOutputSingle` based on the type of swap\n\t\t\t// (Using the fee obtained from the available pool)\n\t\t\tconst params = {\n\t\t\t\ttokenIn: actualTokenIn.address,\n\t\t\t\ttokenOut: actualTokenOut.address,\n\t\t\t\tfee: newFee,\n\t\t\t\tsqrtPriceLimitX96: 0n,\n\t\t\t\t...(isExactIn ? { amountIn: amount } : { amount: amount })\n\t\t\t};\n\n\t\t\tconst quoterContract = new ethers.Contract(\n\t\t\t\tADDRESSES.UNISWAP_V3_QUOTER,\n\t\t\t\tIQuoterV2ABI.abi,\n\t\t\t\tthis.providerNative\n\t\t\t);\n\t\t\tlet quoteAmount: bigint;\n\t\t\tlet sqrtPriceX96After: bigint = 0n;\n\t\t\tlet initializedTicksCrossed: number = 0;\n\t\t\tlet gasEstimate: bigint = 0n;\n\n\t\t\tif (isExactIn) {\n\t\t\t\t[quoteAmount, sqrtPriceX96After, initializedTicksCrossed, gasEstimate] =\n\t\t\t\t\tawait quoterContract.quoteExactInputSingle.staticCall(params);\n\t\t\t} else {\n\t\t\t\t[quoteAmount, sqrtPriceX96After, initializedTicksCrossed, gasEstimate] =\n\t\t\t\t\tawait quoterContract.quoteExactOutputSingle.staticCall(params);\n\t\t\t}\n\n\t\t\tif (quoteAmount > 0n) {\n\t\t\t\treturn await this.constructQuoteData(\n\t\t\t\t\ttokenIn,\n\t\t\t\t\ttokenOut,\n\t\t\t\t\tfundingAddress,\n\t\t\t\t\tamount,\n\t\t\t\t\tquoteAmount,\n\t\t\t\t\tnewFee,\n\t\t\t\t\tgasEstimate,\n\t\t\t\t\tfalse, // multiHop\n\t\t\t\t\tsqrtPriceX96After,\n\t\t\t\t\tinitializedTicksCrossed,\n\t\t\t\t\tisExactIn\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('Direct pool quote failed, trying multi-hop:', false, error);\n\t\t}\n\n\t\t// If direct pool fails, attempt multi-hop anyway\n\t\ttry {\n\t\t\treturn await this.multiHopQuote(tokenIn, tokenOut, amount, fundingAddress, isExactIn, newFee);\n\t\t} catch (error) {\n\t\t\tlog.error('Multi-hop quote failed:', false, error);\n\t\t\tthrow new Error('No valid route exists for the provided tokens and amount');\n\t\t}\n\t}\n\n\t// WIP - Not yet implemented\n\tasync estimateSwapGas(swapRouterAddress: string, swapParams: SwapParams): Promise<bigint> {\n\t\t// debug_log( 'Estimating gas for swap:', swapParams );\n\t\treturn 0n;\n\t}\n\n\tasync getAvailablePools(tokenA: Token, tokenB: Token): Promise<number[]> {\n\t\tconst availablePools: number[] = [];\n\t\tconst feeTiers = [500, 3000, 10000]; // Common fee tiers on Uniswap V3\n\n\t\t// Loop through each fee tier to check if a pool exists\n\t\tfor (const fee of feeTiers) {\n\t\t\ttry {\n\t\t\t\tconst poolAddress = await this.getPoolAddress(tokenA, tokenB, fee);\n\t\t\t\tif (poolAddress !== ethers.ZeroAddress) {\n\t\t\t\t\tavailablePools.push(fee);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tlog.error(`Pool not found for tokens ${tokenA.symbol}/${tokenB.symbol} with fee ${fee}`);\n\t\t\t}\n\t\t}\n\t\treturn availablePools;\n\t}\n\n\tasync getPoolAddress(tokenA: Token, tokenB: Token, fee: number): Promise<string> {\n\t\tif (!this.factory) throw new Error('Factory contract not initialized');\n\t\t// Sort the tokens by address to get the correct pool address (Uniswap requires tokens in sorted order)\n\t\tconst [token0, token1] = [tokenA.address, tokenB.address].sort((a, b) =>\n\t\t\ta.toLowerCase() < b.toLowerCase() ? -1 : 1\n\t\t);\n\t\tconst poolAddress = await this.factory.getPool(token0, token1, fee);\n\t\treturn poolAddress;\n\t}\n\n\t// WIP - Not yet implemented - Liquidity consideration of pools.\n\t// async getQuoteWithLiquidityConsideration(\n\t//   tokenIn: Token,\n\t//   tokenOut: Token,\n\t//   amount: BigNumberish,\n\t//   fundingAddress: string,\n\t//   isExactIn: boolean = true,\n\t//   preferredFee: number = 3000,\n\t//   liquidityThreshold?: BigNumberish // Updated to be optional\n\t// ): Promise<SwapPriceData> {\n\t//   try {\n\t//     // Determine actual tokens for routing\n\t//     const actualTokenIn = tokenIn.isNative ? await this.getWETHToken() : tokenIn;\n\t//     const actualTokenOut = tokenOut.isNative ? await this.getWETHToken() : tokenOut;\n\n\t//     // Step 1: Get available pools\n\t//     const availablePools = await this.getAvailablePools( actualTokenIn, actualTokenOut );\n\n\t//     if ( availablePools.length === 0 ) {\n\t//       log.error( `No pools exist for ${ tokenIn.symbol } and ${ tokenOut.symbol }` );\n\t//       // Handle multi-hop or throw an error if no valid routes exist\n\t//       return await this.multiHopQuote( tokenIn, tokenOut, amount, fundingAddress, isExactIn );\n\t//     }\n\n\t//     // Step 2: Choose the appropriate fee tier based on liquidity\n\t//     let selectedFee: number | undefined = undefined;\n\t//     let maxLiquidity = BigInt( 0 );\n\n\t//     for ( const fee of availablePools ) {\n\t//       const liquidity = await this.getPoolLiquidity( actualTokenIn, actualTokenOut, fee );\n\t//       if ( liquidity === null ) {\n\t//         log.error( `Liquidity data unavailable for pool with fee ${ fee }` );\n\t//         continue;\n\t//       }\n\n\t//       // Check if the liquidity is greater than the threshold or keep track of the highest liquidity\n\t//       if (\n\t//         liquidityThreshold == null ||\n\t//         ( liquidityThreshold != null && BigInt( liquidity ) > BigInt( liquidityThreshold ) )\n\t//       ) {\n\t//         if ( BigInt( liquidity ) > maxLiquidity ) {\n\t//           selectedFee = fee;\n\t//           maxLiquidity = BigInt( liquidity );\n\t//         }\n\t//       }\n\t//     }\n\n\t//     // If no suitable pool was found based on the threshold, use the first available pool\n\t//     const fee = selectedFee ? selectedFee : availablePools[ 0 ];\n\t//     log.error( `Using fee tier ${ fee } with liquidity ${ maxLiquidity.toString() }` );\n\n\t//     // Step 3: Create quote parameters\n\t//     const params = {\n\t//       tokenIn: actualTokenIn.address,\n\t//       tokenOut: actualTokenOut.address,\n\t//       fee,\n\t//       sqrtPriceLimitX96: 0n,\n\t//       ...( isExactIn ? { amountIn: amount } : { amount: amount } ),\n\t//     };\n\n\t//     const quoterContract = new ethersv6.Contract(\n\t//       ADDRESSES.UNISWAP_V3_QUOTER,\n\t//       IQuoterV2ABI.abi,\n\t//       this.providerNative\n\t//     );\n\t//     if ( !quoterContract ) throw new Error( 'Invalid quoter contract' );\n\n\t//     let quoteAmount: bigint = 0n;\n\t//     let sqrtPriceX96After: bigint = 0n;\n\t//     let initializedTicksCrossed: number = 0;\n\t//     let gasEstimate: bigint = 0n;\n\n\t//     try {\n\t//       if ( isExactIn ) {\n\t//         // Comes from fromAmount\n\t//         [ quoteAmount, sqrtPriceX96After, initializedTicksCrossed, gasEstimate ] =\n\t//           await quoterContract.quoteExactInputSingle.staticCall( params );\n\t//       } else {\n\t//         // Comes from toAmount\n\t//         [ quoteAmount, sqrtPriceX96After, initializedTicksCrossed, gasEstimate ] =\n\t//           await quoterContract.quoteExactOutputSingle.staticCall( params );\n\t//       }\n\n\t//       if ( quoteAmount > 0n ) {\n\t//         return await this.constructQuoteData(\n\t//           tokenIn,\n\t//           tokenOut,\n\t//           fundingAddress,\n\t//           amount,\n\t//           quoteAmount,\n\t//           fee,\n\t//           gasEstimate,\n\t//           false, // multiHop\n\t//           sqrtPriceX96After,\n\t//           initializedTicksCrossed,\n\t//           isExactIn\n\t//         );\n\t//       }\n\t//     } catch ( error ) {\n\t//       log.error( 'Direct pool quote failed, trying multi-hop:', false, error );\n\t//     }\n\n\t//     // Step 4: If no direct pool works, attempt a multi-hop route\n\t//     return await this.multiHopQuote( tokenIn, tokenOut, amount, fundingAddress, isExactIn );\n\t//   } catch ( error ) {\n\t//     log.error( 'Error in getQuoteWithLiquidityConsideration:', false, error );\n\t//     throw error;\n\t//   }\n\t// }\n\n\t// async getPoolLiquidity( tokenA: Token, tokenB: Token, fee: number ): Promise<BigNumberish | null> {\n\t//   try {\n\t//     const poolAddress = await this.getPoolAddress( tokenA, tokenB, fee );\n\t//     if ( poolAddress === ethersv6.ZeroAddress ) {\n\t//       log.error( `No pool exists for the token pair ${ tokenA.symbol }/${ tokenB.symbol } at fee ${ fee }` );\n\t//       return null;\n\t//     }\n\n\t//     const poolContract = new ethersv6.Contract( poolAddress, UNISWAP_POOL_ABI, this.providerNative );\n\t//     const liquidity = await poolContract.liquidity();\n\t//     return liquidity;\n\t//   } catch ( error ) {\n\t//     log.error( 'Error fetching pool liquidity:', false, error );\n\t//     return null;\n\t//   }\n\t// }\n\n\t// Where fees are calculated...\n\n\tprivate async constructQuoteData(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tfundingAddress: string,\n\t\tamount: BigNumberish,\n\t\tquoteAmount: bigint,\n\t\tfee: number,\n\t\tgasEstimate: bigint,\n\t\tmultiHop: boolean,\n\t\tsqrtPriceX96After: bigint,\n\t\tinitializedTicksCrossed: number,\n\t\tisExactIn: boolean\n\t): Promise<SwapPriceData> {\n\t\t// Fee should always be calculated based on the 'buy' side\n\t\tconst feeAmount = this.calculateFee(isExactIn ? quoteAmount : toBigInt(amount));\n\n\t\tconst amountAfterFee = isExactIn ? quoteAmount - feeAmount : quoteAmount + feeAmount; // Adjusted amount after fee\n\n\t\tconst formattedAmountIn = Number(\n\t\t\tethers.formatUnits(isExactIn ? toBigInt(amount) : amountAfterFee, tokenIn.decimals)\n\t\t);\n\t\tconst formattedAmountOut = Number(\n\t\t\tethers.formatUnits(isExactIn ? amountAfterFee : toBigInt(amount), tokenOut.decimals)\n\t\t);\n\t\tconst exchangeRate = formattedAmountOut / formattedAmountIn;\n\n\t\t// Fetch USD prices (these should come back as `number`)\n\t\t// These should cycle through the providers to get the first price\n\t\tconst priceIn = await this.getMarketPrice(`${tokenIn.symbol}-USD`);\n\t\tconst priceOut = await this.getMarketPrice(`${tokenOut.symbol}-USD`);\n\n\t\t// This is not checking specific prices but the object itself\n\t\tif (!priceIn || !priceOut) {\n\t\t\tthrow new Error('Failed to get price from provider');\n\t\t}\n\n\t\t// const feeAmountInTokenOut = ethersv6.formatUnits( feeAmount, tokenOut.decimals ); // Fee amount in tokenOut\n\n\t\tconst feeAmountInUSD = formatFeeToUSD(feeAmount, tokenOut.decimals, priceOut.price); //feeAmountInTokenOut * priceOut.price; // Always in tokenOut (buy side)\n\t\tconst priceOutBigInt = BigInt(Math.round(priceOut.price * 10 ** tokenOut.decimals));\n\n\t\tlet gasEstimateInUSD = '';\n\t\tlet adjustedGasEstimate = 0n;\n\n\t\tconst gasPrice = await this.getMarketPrice(`ETH-USD`);\n\n\t\tif (gasEstimate > 0n) {\n\t\t\tadjustedGasEstimate =\n\t\t\t\t(gasEstimate * (10000n + YAKKL_GAS_ESTIMATE_MULTIPLIER_BASIS_POINTS)) / 10000n;\n\n\t\t\t// Convert gas estimate from Gwei to Ether\n\t\t\tconst gasEstimateInEther = adjustedGasEstimate * 10n ** 9n;\n\t\t\tconst gasEstimateInEtherNumber = Number(gasEstimateInEther) / 10 ** 18;\n\n\t\t\t// Calculate gas cost in USD using the price of Ether\n\t\t\tconst ethPriceInUSD = gasPrice.price;\n\n\t\t\t// Multiply gas in Ether with Ether's price to get the cost in USD\n\t\t\tconst gasCostInUSD = gasEstimateInEtherNumber * ethPriceInUSD;\n\n\t\t\t// Can use Math.max to ensure a gas estimate\n\t\t\tgasEstimateInUSD =\n\t\t\t\tgasCostInUSD > YAKKL_GAS_ESTIMATE_MIN_USD\n\t\t\t\t\t? formatPrice(gasCostInUSD)\n\t\t\t\t\t: formatPrice(YAKKL_GAS_ESTIMATE_MIN_USD); // This is only a conservative minimum estimate and not actual\n\t\t}\n\n\t\treturn {\n\t\t\tprovider: this.getName(),\n\t\t\tlastUpdated: new Date(),\n\t\t\tchainId: this.getChainId(),\n\t\t\ttokenIn,\n\t\t\ttokenOut,\n\t\t\tfundingAddress,\n\t\t\tquoteAmount,\n\t\t\tfeeAmount,\n\t\t\tamountAfterFee,\n\t\t\tamountIn: isExactIn ? amount : quoteAmount,\n\t\t\tamountOut: isExactIn ? amountAfterFee : amount,\n\t\t\texchangeRate,\n\t\t\tmarketPriceIn: priceIn.price,\n\t\t\tmarketPriceOut: priceOut.price,\n\t\t\tmarketPriceGas: gasPrice.price, // Defaults to ETH\n\t\t\tpriceImpactRatio: 0,\n\t\t\tpath: [\n\t\t\t\ttokenIn.isNative ? ethers.ZeroAddress : tokenIn.address,\n\t\t\t\ttokenOut.isNative ? ethers.ZeroAddress : tokenOut.address\n\t\t\t],\n\t\t\tfee,\n\t\t\tfeeBasisPoints: this.feeBasisPoints,\n\t\t\tfeeAmountPrice: (Number(feeAmount) * priceOut.price) / formattedAmountOut,\n\t\t\tfeeAmountInUSD,\n\t\t\tgasEstimate: adjustedGasEstimate,\n\t\t\tgasEstimateInUSD,\n\t\t\ttokenOutPriceInUSD: formatPrice(Number(priceOutBigInt) / 10 ** tokenOut.decimals),\n\n\t\t\t// Default values and have no meaning here but are required for the interface and will be corrected further up the chain\n\t\t\tslippageTolerance: 0.5,\n\t\t\tdeadline: 10,\n\n\t\t\tsqrtPriceX96After,\n\t\t\tinitializedTicksCrossed,\n\t\t\tmultiHop,\n\t\t\terror: null,\n\t\t\tisLoading: false\n\t\t};\n\t}\n\n\tasync getGasEstimateForSwap(\n\t\ttokenIn: string,\n\t\ttokenOut: string,\n\t\tamountIn: bigint,\n\t\tfundingAddress: string,\n\t\tfee: number\n\t): Promise<bigint> {\n\t\t// Ensure provider is not null\n\t\tif (!this.providerNative) {\n\t\t\tthrow new Error('Ethereum provider not initialized');\n\t\t}\n\n\t\t// Step 1: Set up the SwapRouter contract (Uniswap V3)\n\t\tconst swapRouterABI = [\n\t\t\t'function exactInput((bytes path,uint256 amountIn,uint256 amountOutMinimum,address recipient,uint256 deadline)) external payable returns (uint256 amountOut)'\n\t\t];\n\n\t\t// Create a provider from the existing provider\n\t\tconst provider = new ethers.JsonRpcProvider(await this.provider.getProviderURL());\n\n\t\tconst swapRouter = new ethers.Contract(ADDRESSES.UNISWAP_V3_ROUTER, swapRouterABI, provider);\n\n\t\t// Step 2: Encode the multi-hop path using ethers v6 utils\n\t\tconst encodedPath = ethers.solidityPacked(\n\t\t\t['address', 'uint24', 'address', 'uint24', 'address'],\n\t\t\t[\n\t\t\t\ttokenIn, // TokenIn address\n\t\t\t\tfee, // Fee for TokenIn -> WETH pool\n\t\t\t\tADDRESSES.WETH, // WETH address\n\t\t\t\tfee, // Fee for WETH -> TokenOut pool\n\t\t\t\ttokenOut // TokenOut address\n\t\t\t]\n\t\t);\n\n\t\t// Step 3: Prepare swap parameters\n\t\tconst recipient: string = fundingAddress;\n\n\t\tconst deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes from the current Unix time\n\t\tconst amountOutMinimum = 0; // You can adjust slippage tolerance here\n\n\t\t// Parameters for the swap\n\t\tconst swapParams = {\n\t\t\tpath: encodedPath,\n\t\t\tamountIn: amountIn.toString(), // Convert to string for ethers v5\n\t\t\tamountOutMinimum: amountOutMinimum,\n\t\t\trecipient: recipient,\n\t\t\tdeadline: deadline\n\t\t};\n\n\t\t// Step 4: Estimate gas for the transaction\n\t\ttry {\n\t\t\t// Populate the transaction using the contract method directly\n\t\t\tconst tx = await swapRouter.exactInput.populateTransaction(swapParams);\n\n\t\t\t// Ensure from address is set\n\t\t\ttx.from = recipient;\n\n\t\t\t// Add value for native token input\n\t\t\t// If tokenIn is native, add the amountIn as value\n\t\t\tconst isNativeInput = tokenIn.toLowerCase() === ethers.ZeroAddress.toLowerCase();\n\t\t\tif (isNativeInput) {\n\t\t\t\ttx.value = BigInt(amountIn.toString());\n\t\t\t}\n\n\t\t\t// Try to estimate gas with a fallback mechanism\n\t\t\tlet gasEstimate: bigint;\n\t\t\ttry {\n\t\t\t\tconst estimatedGas = await provider.estimateGas({\n\t\t\t\t\t...tx,\n\t\t\t\t\tfrom: recipient\n\t\t\t\t});\n\t\t\t\tgasEstimate = BigInt(estimatedGas.toString());\n\t\t\t} catch (estimateError) {\n\t\t\t\t// Fallback: Use a fixed gas limit or a percentage increase\n\t\t\t\tconst baseGasLimit = YAKKL_GAS_ESTIMATE_MULTIHOP_SWAP_DEFAULT; // Adjust based on typical multi-hop swap gas usage\n\t\t\t\tgasEstimate = BigInt(baseGasLimit);\n\t\t\t}\n\n\t\t\t// Add a buffer to the gas estimate\n\t\t\tconst gasEstimateBigInt = gasEstimate; // Already bigint\n\t\t\tconst adjustedGasEstimate =\n\t\t\t\t(gasEstimateBigInt * (10000n + YAKKL_GAS_ESTIMATE_MULTIPLIER_BASIS_POINTS)) / 10000n;\n\n\t\t\treturn adjustedGasEstimate;\n\t\t} catch (error) {\n\t\t\t// Fallback to a default gas estimate\n\t\t\tconst fallbackGasLimit = BigInt(YAKKL_GAS_ESTIMATE_MULTIHOP_SWAP_DEFAULT); // Adjust based on typical multi-hop swap gas usage\n\t\t\treturn fallbackGasLimit;\n\t\t}\n\t}\n\n\tasync getPoolInfo(\n\t\ttokenIn: SwapToken,\n\t\ttokenOut: SwapToken,\n\t\tfee: number = 3000\n\t): Promise<PoolInfoData> {\n\t\tthrow new Error('Not implemented yet');\n\t}\n\n\t// async getPoolInfo( tokenIn: SwapToken, tokenOut: SwapToken, fee: number = 3000 ): Promise<PoolInfoData> {\n\t//   if ( !this.factory || !this.provider ) throw new Error( 'Contracts not initialized' );\n\n\t//   try {\n\t//     const poolAddress = await this.factory.getPool( tokenIn.address, tokenOut.address, fee );\n\t//     if ( !poolAddress || poolAddress === ethersv6.ZeroAddress ) {\n\t//       throw new Error( 'Pool does not exist' );\n\t//     }\n\n\t//     const tokenA = convertToUniswapToken( tokenIn );\n\t//     const tokenB = convertToUniswapToken( tokenOut );\n\n\t//     const poolContract = new ethersv6.Contract( poolAddress, IUniswapV3PoolABI.abi, this.providerNative );\n\t//     if ( !poolContract ) throw new Error( 'Pool contract not found' );\n\n\t//     const [ slot0, liquidity, token0Address, token1Address, tickSpacing, poolFee, tickBitmap, ticks ] = await Promise.all( [\n\t//       poolContract.slot0(),\n\t//       poolContract.liquidity(),\n\t//       poolContract.token0(),\n\t//       poolContract.token1(),\n\t//       poolContract.tickSpacing(),\n\t//       poolContract.fee(),\n\t//       poolContract.tickBitmap( 0 ),\n\t//       poolContract.ticks( 0 )\n\t//     ] );\n\n\t//     debug_log( '\\n\\nUniswapPriceProvider - getPoolInfo: >>>>>>>>>>>>>>>>>>>>>>>>>>>> POOL START <<<<<<<<<<<<<<<<<<<<<<<<\\n\\n' );\n\t//     debug_log( 'UniswapPriceProvider - getPoolInfo:', poolContract );\n\n\t//     debug_log( 'Slot0:', slot0 );\n\t//     debug_log( 'Liquidity:', liquidity.toString() );\n\t//     debug_log( 'Token0 address:', token0Address, tokenA );\n\t//     debug_log( 'Token1 address:', token1Address, tokenB );\n\t//     debug_log( 'Tick spacing:', tickSpacing.toString() );\n\t//     debug_log( 'Pool fee:', poolFee.toString() );\n\n\t//     debug_log( 'Tick bitmap:', tickBitmap );\n\t//     debug_log( 'Ticks:', ticks );\n\n\t//     const { sqrtPriceX96, tick } = slot0;\n\n\t//     debug_log( 'sqrtPriceX96:', sqrtPriceX96.toString() );\n\t//     debug_log( 'tick:', tick );\n\n\t//     const token0 = new UniswapToken( this.getChainId(), token0Address, tokenIn.decimals, tokenIn.symbol, tokenIn.name );\n\t//     const token1 = new UniswapToken( this.getChainId(), token1Address, tokenOut.decimals, tokenOut.symbol, tokenOut.name );\n\n\t//     debug_log( 'Token0:', token0 );\n\t//     debug_log( 'Token1:', token1 );\n\n\t//     // Ensure tick is within valid range\n\t//     const minTick = BigInt( TickMath.MIN_TICK );\n\t//     const maxTick = BigInt( TickMath.MAX_TICK );\n\t//     const tickBigInt = BigInt( tick.toString() );\n\t//     const validTickBigInt = tickBigInt < minTick ? minTick : ( tickBigInt > maxTick ? maxTick : tickBigInt );\n\n\t//     let validTick: number;\n\t//     try {\n\t//       validTick = safeConvertBigIntToNumber( validTickBigInt );\n\t//     } catch ( error ) {\n\t//       log.error( 'Error converting tick to number:', false, error );\n\t//       // Fallback to a default tick value or handle the error as appropriate for your use case\n\t//       validTick = 0; // or some other default value\n\t//     }\n\n\t//     debug_log( 'Valid tick:', validTick );\n\n\t//     // Calculate reserves\n\t//     const Q96 = 2n ** 96n;\n\n\t//     // Calculate price from sqrtPriceX96\n\t//     const price = ( Number( sqrtPriceX96 ) / Number( Q96 ) ) ** 2;\n\t//     debug_log( 'Price:', price );\n\n\t//     // Ensure sqrtPriceX96 is within valid range\n\t//     const minSqrtRatio = JSBI.BigInt( TickMath.MIN_SQRT_RATIO.toString() );\n\t//     const maxSqrtRatio = JSBI.BigInt( TickMath.MAX_SQRT_RATIO.toString() );\n\t//     const sqrtPriceX96BigInt = JSBI.BigInt( sqrtPriceX96.toString() );\n\t//     const clampedSqrtPriceX96 = JSBI.lessThan( sqrtPriceX96BigInt, minSqrtRatio )\n\t//       ? minSqrtRatio\n\t//       : ( JSBI.greaterThan( sqrtPriceX96BigInt, maxSqrtRatio ) ? maxSqrtRatio : sqrtPriceX96BigInt );\n\n\t//     debug_log( 'Clamped sqrtPriceX96:', clampedSqrtPriceX96.toString() );\n\n\t//     const pool = new Pool(\n\t//       token0,\n\t//       token1,\n\t//       fee,\n\t//       clampedSqrtPriceX96.toString(),\n\t//       liquidity.toString(),\n\t//       validTick\n\t//     );\n\n\t//     debug_log( 'Pool created successfully', pool );\n\n\t//     // Calculate amounts from liquidity\n\t//     const tickLow = Math.floor( validTick / Number( tickSpacing ) ) * Number( tickSpacing );\n\t//     const tickHigh = tickLow + Number( tickSpacing );\n\t//     const sqrtPriceLow = TickMath.getSqrtRatioAtTick( tickLow );\n\t//     const sqrtPriceHigh = TickMath.getSqrtRatioAtTick( tickHigh );\n\n\t//     debug_log( 'Tick low:', tickLow );\n\t//     debug_log( 'Tick high:', tickHigh );\n\t//     debug_log( 'Sqrt price low:', sqrtPriceLow.toString() );\n\t//     debug_log( 'Sqrt price high:', sqrtPriceHigh.toString() );\n\n\t//     const price2 = sqrtPriceX96ToPrice( BigInt( sqrtPriceLow.toString() ), token0.decimals, token1.decimals );\n\t//     debug_log( 'Price at low tick:', price2 );\n\t//     const price3 = sqrtPriceX96ToPrice( BigInt( sqrtPriceHigh.toString() ), token0.decimals, token1.decimals );\n\t//     debug_log( 'Price at high tick:', price3 );\n\n\t//     const avgPrice = ( price2 + price3 ) / 2;\n\t//     debug_log( 'Average price:', avgPrice );\n\n\t//     const sqrtPrice = sqrtPriceX96 / Q96;\n\t//     debug_log( 'Sqrt price:', sqrtPrice );\n\n\t//     const liquidityBigInt = BigInt( liquidity.toString() );\n\n\t//     const token0Amt = Number( liquidityBigInt ) / ( Number( sqrtPrice ) * ( 2 ** 96 ) );\n\t//     const token1Amt = Number( liquidityBigInt ) * Number( sqrtPrice ) / ( 2 ** 96 );\n\n\t//     debug_log( 'Token0 amount:', token0Amt );\n\t//     debug_log( 'Token1 amount:', token1Amt );\n\n\t//     // Calculate reserves\n\t//     const token0Reserve = parseFloat(\n\t//       ethersv6.formatUnits( liquidity.toString(), token0.decimals )\n\t//     );\n\t//     const token1Reserve = parseFloat(\n\t//       ethersv6.formatUnits( liquidity.toString(), token1.decimals )\n\t//     );\n\n\t//     debug_log( 'Token0 reserve:', token0Reserve );\n\t//     debug_log( 'Token1 reserve:', token1Reserve );\n\n\t//     // Calculate amounts of token0 and token1 in the pool\n\t//     const sqrtRatioX96 = JSBI.BigInt( clampedSqrtPriceX96.toString() );\n\n\t//     const liquidity_ = JSBI.BigInt( liquidity.toString());\n\n\t//     debug_log( 'sqrtRatioX96:', sqrtRatioX96.toString() );\n\t//     debug_log( 'liquidity_:', liquidity_.toString() );\n\n\t//     const token0Amount = SqrtPriceMath.getAmount0Delta(\n\t//       sqrtRatioX96,\n\t//       TickMath.MAX_SQRT_RATIO,\n\t//       liquidity_,\n\t//       true\n\t//     );\n\n\t//     const token1Amount = SqrtPriceMath.getAmount1Delta(\n\t//       TickMath.MIN_SQRT_RATIO,\n\t//       sqrtRatioX96,\n\t//       liquidity_,\n\t//       true\n\t//     );\n\n\t//     debug_log( 'token0Amount:', token0Amount.toString() );\n\t//     debug_log( 'token1Amount:', token1Amount.toString() );\n\n\t//     // Get CurrencyAmount for 1 unit of each token\n\t//     const amount0 = CurrencyAmount.fromRawAmount(\n\t//       token0,\n\t//       JSBI.exponentiate( JSBI.BigInt( 10 ), JSBI.BigInt( token0.decimals ) ).toString()\n\t//     );\n\t//     const amount1 = CurrencyAmount.fromRawAmount(\n\t//       token1,\n\t//       JSBI.exponentiate( JSBI.BigInt( 10 ), JSBI.BigInt( token1.decimals ) ).toString()\n\t//     );\n\n\t//     debug_log( 'amount0:', amount0.toExact() );\n\t//     debug_log( 'amount1:', amount1.toExact() );\n\n\t//     // Calculate prices\n\t//     let token0Price, token1Price;\n\t//     try {\n\t//       // Get the sqrt price from the pool\n\t//       const sqrtPriceX96 = JSBI.BigInt( pool.sqrtRatioX96.toString() );\n\n\t//       // Calculate price0 (token1 per token0)\n\t//       const price0 = JSBI.divide(\n\t//         JSBI.multiply( sqrtPriceX96, sqrtPriceX96 ),\n\t//         JSBI.exponentiate( JSBI.BigInt( 2 ), JSBI.BigInt( 192 ) )\n\t//       );\n\n\t//       // Calculate price1 (token0 per token1)\n\t//       const price1 = JSBI.divide(\n\t//         JSBI.exponentiate( JSBI.BigInt( 2 ), JSBI.BigInt( 192 ) ),\n\t//         JSBI.multiply( sqrtPriceX96, sqrtPriceX96 )\n\t//       );\n\n\t//       // Convert to decimal representation\n\t//       const price0Decimal = Number( price0.toString() ) / Math.pow( 10, token1.decimals - token0.decimals );\n\t//       const price1Decimal = Number( price1.toString() ) / Math.pow( 10, token0.decimals - token1.decimals );\n\n\t//       debug_log( 'token0:', token0 );\n\t//       debug_log( 'token1:', token1 );\n\n\t//       debug_log( 'price0Decimal:', price0Decimal );\n\t//       debug_log( 'price1Decimal:', price1Decimal );\n\n\t//       token0Price = price0Decimal.toFixed( 6 );\n\t//       token1Price = price1Decimal.toFixed( 6 );\n\n\t//       debug_log( 'token0Price:', token0Price );\n\t//       debug_log( 'token1Price:', token1Price );\n\n\t//     } catch ( error ) {\n\t//       log.error( 'Error calculating prices:', false, error );\n\t//       token0Price = '0';\n\t//       token1Price = '0';\n\t//     }\n\n\t//     const token0Reserves = ethersv6.formatUnits( token0Amount.toString(), tokenIn.decimals );\n\t//     const token1Reserves = ethersv6.formatUnits( token1Amount.toString(), tokenOut.decimals );\n\n\t//     debug_log( 'token0Reserves:', token0Reserves );\n\t//     debug_log( 'token1Reserves:', token1Reserves );\n\n\t//     // Calculate TVL using the price as a string and parseFloat\n\t//     const tvl = ( parseFloat( token0Reserves ) * parseFloat( token0Price ) ) +\n\t//       ( parseFloat( token1Reserves ) * parseFloat( token1Price ) );\n\n\t//     debug_log( 'TVL:', tvl );\n\n\t//     debug_log( '\\n\\nUniswapPriceProvider - getPoolInfo: >>>>>>>>>>>>>>>>>>>>>>>>>>>> POOL END <<<<<<<<<<<<<<<<<<<<<<<<\\n\\n' );\n\n\t//     return {\n\t//       provider: this.getName(),\n\t//       lastUpdated: new Date(),\n\t//       chainId: this.getChainId(),\n\t//       fee,\n\t//       liquidity: liquidity.toString(),\n\t//       sqrtPriceX96: clampedSqrtPriceX96.toString(),\n\t//       tick: validTick,\n\t//       tokenInReserve: token0Reserves,\n\t//       tokenOutReserve: token1Reserves,\n\t//       tokenInUSDPrice: token0Price,\n\t//       tokenOutUSDPrice: token1Price,\n\t//       tvl\n\t//     };\n\t//   } catch ( error ) {\n\t//     log.error( 'Error in getPoolInfo:', false, error );\n\t//     throw error;\n\t//   }\n\t// }\n\n\t// async getTokenPair( pair: string ): Promise<TokenPair | PriceData> {\n\t//   if ( !pair ) {\n\t//     return this.returnError( `Invalid pair - ${ pair }` );\n\t//   }\n\n\t//   const [ tokenInSymbol, tokenOutSymbol ] = pair.split( '-' );\n\t//   if ( !tokenInSymbol || !tokenOutSymbol ) {\n\t//     return this.returnError( `Invalid pair format - ${ pair }` );\n\t//   }\n\n\t//   const tokenIn = this.getStandardizedToken( tokenInSymbol );\n\t//   const tokenOut = this.getStandardizedToken( tokenOutSymbol );\n\n\t//   if ( !tokenIn || !tokenOut ) {\n\t//     return this.returnError( `Token not found for ${ pair }` );\n\t//   }\n\n\t//   if ( tokenIn.address === tokenOut.address ) {\n\t//     return this.getMarketPrice( `${ tokenInSymbol }-USD` );\n\t//   }\n\n\t//   return { tokenIn, tokenOut };\n\t// }\n\n\tprivate returnError(message: string): PriceData {\n\t\treturn {\n\t\t\tprovider: this.getName(),\n\t\t\tprice: 0,\n\t\t\tlastUpdated: new Date(),\n\t\t\tstatus: 404,\n\t\t\tmessage\n\t\t};\n\t}\n\n\terrorUniswap(error: any, excludeProps: string[] = []): string {\n\t\t// Recursive function to clean up the object\n\t\tconst cleanObject = (obj: any, exclude: string[]): any => {\n\t\t\tif (!obj || typeof obj !== 'object') {\n\t\t\t\treturn obj;\n\t\t\t}\n\n\t\t\t// Create a shallow copy to avoid mutating the original object\n\t\t\tconst cleaned = Array.isArray(obj) ? [...obj] : { ...obj };\n\n\t\t\tfor (const key in cleaned) {\n\t\t\t\tif (exclude.includes(key)) {\n\t\t\t\t\tdelete cleaned[key];\n\t\t\t\t} else if (typeof cleaned[key] === 'string') {\n\t\t\t\t\t// Attempt to parse stringified JSON for better readability\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst parsed = JSON.parse(cleaned[key]);\n\t\t\t\t\t\tcleaned[key] = parsed; // Replace with parsed JSON if valid\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Keep the string as-is if it's not valid JSON\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof cleaned[key] === 'object') {\n\t\t\t\t\t// Recursively clean nested objects\n\t\t\t\t\tcleaned[key] = cleanObject(cleaned[key], exclude);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn cleaned;\n\t\t};\n\n\t\t// Extract and clean up the error object\n\t\tconst cleanedError = cleanObject(error, excludeProps);\n\n\t\t// Format the cleaned object into a readable JSON string\n\t\treturn JSON.stringify(cleanedError, null, 2);\n\t}\n\n\tprivate async getTokenReserve(token: Token, poolAddress: string): Promise<string> {\n\t\tconst balance = await token.getBalance(poolAddress);\n\t\treturn balance ? balance.toString() : '0';\n\t}\n\n\tprivate async getTokenUSDPrice(token: Token): Promise<number> {\n\t\ttry {\n\t\t\tconst price = await this.getMarketPrice(token.symbol + '-USD');\n\t\t\treturn price.price;\n\t\t} catch (error) {\n\t\t\tlog.error('Error getting token price. Defaulting to 0:', false, error);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate async calculateTVL(tokenA: Token, tokenB: Token, poolAddress: string): Promise<number> {\n\t\tconst [reserveA, reserveB] = await Promise.all([\n\t\t\tthis.getTokenReserve(tokenA, poolAddress),\n\t\t\tthis.getTokenReserve(tokenB, poolAddress)\n\t\t]);\n\n\t\tconst [priceA, priceB] = await Promise.all([\n\t\t\tthis.getTokenUSDPrice(tokenA),\n\t\t\tthis.getTokenUSDPrice(tokenB)\n\t\t]);\n\n\t\tconst valueA = (Number(reserveA) / 10 ** tokenA.decimals) * priceA;\n\t\tconst valueB = (Number(reserveB) / 10 ** tokenB.decimals) * priceB;\n\n\t\treturn valueA + valueB;\n\t}\n\n\tgetRouterAddress(): string {\n\t\treturn this.routerContract!.target as string;\n\t}\n\n\tasync getWETHToken(): Promise<Token> {\n\t\tconst chainId = this.getChainId();\n\t\tconst wethAddress = chainId === 1 ? ADDRESSES.WETH : ADDRESSES.WETH_SEPOLIA;\n\n\t\treturn new EVMToken(\n\t\t\twethAddress,\n\t\t\t'Wrapped Ether',\n\t\t\t'WETH',\n\t\t\t18,\n\t\t\t'/images/ethereum.svg',\n\t\t\t'Wrapped version of Ether',\n\t\t\tchainId,\n\t\t\tfalse, // Not native since it's wrapped,\n\t\t\tfalse,\n\t\t\tthis.blockchain,\n\t\t\tthis.provider\n\t\t);\n\t}\n\n\tasync populateSwapTransaction(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tamountIn: BigNumberish,\n\t\tamountOutMin: BigNumberish,\n\t\trecipient: string,\n\t\tdeadline: number,\n\t\tfee: number = 3000,\n\t\testimateOnly: boolean = false\n\t): Promise<TransactionRequest | bigint> {\n\t\tconst params: ExactInputSingleParams = {\n\t\t\ttokenIn: tokenIn.address,\n\t\t\ttokenOut: tokenOut.address,\n\t\t\tfee,\n\t\t\trecipient,\n\t\t\tdeadline,\n\t\t\tamountIn: toBigInt(amountIn),\n\t\t\tamountOutMinimum: toBigInt(amountOutMin),\n\t\t\tsqrtPriceLimitX96: 0\n\t\t};\n\n\t\tif (!this.routerContract) throw new Error('Router contract not initialized');\n\t\tconst populatedTx = await this.routerContract.exactInputSingle.populateTransaction(params);\n\n\t\tif (estimateOnly) {\n\t\t\tconst signer = this.provider.getSigner();\n\t\t\tif (!signer) throw new Error('No signer available');\n\n\t\t\tconst gasEstimate = await this.provider.estimateGas({\n\t\t\t\tfrom: await signer.getAddress(),\n\t\t\t\tto: this.routerContract!.target as string,\n\t\t\t\tdata: populatedTx.data,\n\t\t\t\tquantity: tokenIn.isNative ? amountIn : 0n,\n\t\t\t\tchainId: this.getChainId()\n\t\t\t});\n\n\t\t\treturn gasEstimate;\n\t\t}\n\n\t\treturn {\n\t\t\tto: this.routerContract.target as string,\n\t\t\tdata: populatedTx.data,\n\t\t\tquantity: tokenIn.isNative ? amountIn : 0n,\n\t\t\tfrom: params.recipient,\n\t\t\tchainId: this.getChainId()\n\t\t};\n\t}\n\n\t// No fee needed for multi-hop swaps since it is enoded in the route\n\tasync populateMultiHopSwapTransaction(\n\t\ttokenIn: Token,\n\t\ttokenOut: Token,\n\t\tamountIn: BigNumberish,\n\t\tamountOutMin: BigNumberish,\n\t\trecipient: string,\n\t\tdeadline: number\n\t): Promise<TransactionRequest> {\n\t\tconst params: ExactInputParams = {\n\t\t\tpath: [tokenIn.address, ADDRESSES.WETH, tokenOut.address],\n\t\t\trecipient,\n\t\t\tdeadline,\n\t\t\tamountIn: EthereumBigNumber.from(amountIn).toBigInt() ?? 0n,\n\t\t\tamountOutMinimum: EthereumBigNumber.from(amountOutMin).toBigInt() ?? 0n\n\t\t};\n\n\t\tif (!this.routerContract) throw new Error('Router contract not initialized');\n\t\tconst populatedTx = await this.routerContract.exactInput.populateTransaction(params);\n\n\t\treturn {\n\t\t\tto: this.routerContract!.target as string,\n\t\t\tdata: populatedTx.data,\n\t\t\tquantity: tokenIn.isNative ? amountIn : 0,\n\t\t\tfrom: params.recipient,\n\t\t\tchainId: this.getChainId()\n\t\t};\n\t}\n\n\tasync checkAllowance(token: Token, fundingAddress: string): Promise<bigint> {\n\t\ttry {\n\t\t\tif (!token || token.isNative || !fundingAddress || !this.providerNative) {\n\t\t\t\t// debug_log( 'Token, provider, or swap manager not initialized', { token, fundingAddress } );\n\t\t\t\treturn 0n;\n\t\t\t}\n\n\t\t\tconst tokenContract = new ethers.Contract(\n\t\t\t\ttoken.address,\n\t\t\t\t['function allowance(address,address) view returns (uint256)'],\n\t\t\t\tthis.providerNative\n\t\t\t);\n\n\t\t\tif (!tokenContract) {\n\t\t\t\tthrow new Error('Token contract not initialized');\n\t\t\t}\n\n\t\t\tconst allowance = await tokenContract.allowance(fundingAddress, this.getRouterAddress());\n\t\t\treturn toBigInt(allowance);\n\t\t} catch (error) {\n\t\t\tlog.error('Error checking allowance:', false, error);\n\t\t\treturn 0n;\n\t\t}\n\t}\n\n\tasync approveToken(token: Token, amount: string): Promise<TransactionReceipt> {\n\t\t// Validate inputs\n\t\tif (!this.blockchain) {\n\t\t\tthrow new Error('Blockchain not initialized');\n\t\t}\n\t\tif (!this.signerNative) {\n\t\t\tthrow new Error('Signer not initialized');\n\t\t}\n\t\tif (!token.address || token.address === ethers.ZeroAddress) {\n\t\t\tthrow new Error('Invalid token address');\n\t\t}\n\t\tconst routerAddress = this.getRouterAddress();\n\t\tif (!routerAddress || routerAddress === ethers.ZeroAddress) {\n\t\t\tthrow new Error('Invalid router address');\n\t\t}\n\t\t// Create token contract\n\t\tconst tokenContract = new ethers.Contract(\n\t\t\ttoken.address,\n\t\t\t['function approve(address,uint256) public returns (bool)'],\n\t\t\tthis.signerNative\n\t\t);\n\t\tif (!tokenContract) {\n\t\t\tthrow new Error('Token contract not initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// Parse the amount with correct decimals\n\t\t\tconst parsedAmount = ethers.parseUnits(amount, token.decimals);\n\t\t\tif (!parsedAmount) {\n\t\t\t\tthrow new Error('Failed to parse amount');\n\t\t\t}\n\n\t\t\t// Set gas parameters defaults - these can be adjusted based on network conditions and token approval requirements\n\t\t\tconst gasLimit = 100000; // Set an appropriate gas limit value\n\t\t\tconst maxPriorityFeePerGas = ethers.parseUnits('1.5', 'gwei'); // Adjust based on network conditions\n\t\t\tconst maxFeePerGas = ethers.parseUnits('20', 'gwei'); // Adjust based on network conditions\n\n\t\t\t// Call approve with gas overrides\n\t\t\tconst tx = await tokenContract.approve(routerAddress, parsedAmount, {\n\t\t\t\tchainId: this.getChainId() || 1,\n\t\t\t\ttype: 2,\n\t\t\t\tgasLimit,\n\t\t\t\tmaxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas\n\t\t\t});\n\n\t\t\t// Wait for transaction confirmation to get the receipt\n\t\t\tconst receipt = await tx.wait(); // TODO: Move the class to background processing and setup a listener for the transaction receipt with no 'wait'\n\t\t\tif (receipt.status !== 1) {\n\t\t\t\tthrow new Error('Token approval transaction failed');\n\t\t\t}\n\n\t\t\t// Check if the approval was successful (true or false)\n\t\t\tif (receipt.logs.length > 0) {\n\t\t\t\tconst eventFragment = tokenContract.interface.getEvent('Approval');\n\t\t\t\tconst log = receipt.logs.find(\n\t\t\t\t\t(log: { topics: string[] }) => log.topics[0] === eventFragment?.topicHash\n\t\t\t\t);\n\t\t\t\t// if ( log ) {\n\t\t\t\t//   debug_log( 'Approval event detected: ***************************', log );\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\treturn EthersConverter.ethersTransactionReceiptToTransactionReceipt(receipt);\n\t\t} catch (error) {\n\t\t\tlog.error('Token approval error:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync executeSwap(params: SwapParams): Promise<TransactionResponse> {\n\t\ttry {\n\t\t\tconst {\n\t\t\t\ttokenIn,\n\t\t\t\ttokenOut,\n\t\t\t\tamount,\n\t\t\t\tfee,\n\t\t\t\tslippage,\n\t\t\t\tdeadline,\n\t\t\t\trecipient,\n\t\t\t\tgasLimit,\n\t\t\t\tmaxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas\n\t\t\t} = params;\n\n\t\t\tconst quote = await this.getQuote(tokenIn, tokenOut, amount, recipient);\n\t\t\tif (!quote || quote.error)\n\t\t\t\tthrow new Error(quote && quote.error ? quote.error : 'Failed to get quote for excute swap');\n\n\t\t\tconst minOut = (toBigInt(quote.amountOut) * BigInt(1000 - Math.floor(slippage * 10))) / 1000n;\n\t\t\tlet tx;\n\t\t\tif (quote.multiHop) {\n\t\t\t\t// No fee required for multi-hop swaps (encoded in path)\n\t\t\t\ttx = await this.populateMultiHopSwapTransaction(\n\t\t\t\t\ttokenIn,\n\t\t\t\t\ttokenOut,\n\t\t\t\t\tamount,\n\t\t\t\t\tminOut,\n\t\t\t\t\trecipient,\n\t\t\t\t\tMath.floor(Date.now() / 1000) + deadline * 60\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ttx = await this.populateSwapTransaction(\n\t\t\t\t\ttokenIn,\n\t\t\t\t\ttokenOut,\n\t\t\t\t\tamount,\n\t\t\t\t\tminOut,\n\t\t\t\t\trecipient,\n\t\t\t\t\tMath.floor(Date.now() / 1000) + deadline * 60,\n\t\t\t\t\tfee\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof tx === 'bigint') {\n\t\t\t\tthrow new Error('Received gas estimate instead of transaction request');\n\t\t\t}\n\n\t\t\ttx.type = 2;\n\t\t\ttx.gasLimit = toBigInt(gasLimit);\n\t\t\ttx.maxPriorityFeePerGas = toBigInt(maxPriorityFeePerGas);\n\t\t\ttx.maxFeePerGas = toBigInt(maxFeePerGas);\n\n\t\t\treturn await this.provider.sendTransaction(tx);\n\t\t} catch (error) {\n\t\t\tlog.error('Error executing swap:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync executeFullSwap(params: SwapParams): Promise<[TransactionReceipt, TransactionReceipt]> {\n\t\ttry {\n\t\t\tconst tx = await this.executeSwap(params);\n\t\t\tif (!tx) {\n\t\t\t\tthrow new Error('Failed to execute swap - 1');\n\t\t\t}\n\n\t\t\t// Wait for the swap transaction receipt\n\t\t\tconst swapReceipt = await tx.wait();\n\t\t\tif (!swapReceipt) {\n\t\t\t\tthrow new Error('Failed to get transaction receipt - 2');\n\t\t\t}\n\n\t\t\t// Distribute the fee via transaction/transfer and wait for the fee transaction receipt\n\t\t\tconst feeReceipt = await this.distributeFee(\n\t\t\t\tparams.tokenOut,\n\t\t\t\tparams.feeAmount,\n\t\t\t\tparams.feeRecipient,\n\t\t\t\tparams.gasLimit,\n\t\t\t\tparams.maxPriorityFeePerGas,\n\t\t\t\tparams.maxFeePerGas\n\t\t\t);\n\n\t\t\t// Return both receipts as an array, as expected by the function return type\n\t\t\treturn [swapReceipt, feeReceipt];\n\t\t} catch (error) {\n\t\t\tlog.error('Error executing FULL swap:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync distributeFee(\n\t\ttokenOut: Token,\n\t\tfeeAmount: BigNumberish,\n\t\tfeeRecipient: string,\n\t\tgasLimit: BigNumberish,\n\t\tmaxPriorityFeePerGas: BigNumberish,\n\t\tmaxFeePerGas: BigNumberish\n\t): Promise<TransactionReceipt> {\n\t\tif (!this.provider) {\n\t\t\tthrow new Error('Provider not initialized');\n\t\t}\n\t\tif (!tokenOut.address && !tokenOut.isNative) {\n\t\t\tthrow new Error('Fee distribution only works with ERC20 tokens');\n\t\t}\n\t\tif (!feeRecipient) {\n\t\t\tthrow new Error('Fee recipient address is required');\n\t\t}\n\t\tif (!feeAmount) {\n\t\t\tthrow new Error('Fee amount is required');\n\t\t}\n\n\t\tlet priorityFee = toBigInt(maxPriorityFeePerGas);\n\t\tconst maxFee = toBigInt(maxFeePerGas);\n\n\t\t// Ensure maxPriorityFeePerGas does not exceed maxFeePerGas\n\t\tif (priorityFee > maxFee) {\n\t\t\tpriorityFee = maxFee; // Adjust to make sure it's valid\n\t\t}\n\n\t\tif (tokenOut.isNative) {\n\t\t\ttry {\n\t\t\t\t// Create a transaction to send the fee directly as a transfer\n\t\t\t\tconst signer = this.provider.getSigner();\n\t\t\t\tif (!signer) {\n\t\t\t\t\tthrow new Error('Signer not available');\n\t\t\t\t}\n\n\t\t\t\tconst txRequest = {\n\t\t\t\t\tto: feeRecipient,\n\t\t\t\t\tvalue: toBigInt(feeAmount),\n\t\t\t\t\tfrom: await signer.getAddress(),\n\t\t\t\t\tchainId: this.getChainId(),\n\t\t\t\t\tgasLimit: toBigInt(gasLimit),\n\t\t\t\t\tmaxPriorityFeePerGas: priorityFee,\n\t\t\t\t\tmaxFeePerGas: maxFee,\n\t\t\t\t\ttype: 2\n\t\t\t\t};\n\n\t\t\t\tconst tx = await this.provider.sendTransaction(txRequest); // sendTransaction and not transfer since it's a native transaction\n\t\t\t\tconst receipt = await tx.wait();\n\n\t\t\t\ttry {\n\t\t\t\t\tconst gasUsed = toBigInt(receipt.gasUsed) || 0n;\n\t\t\t\t\tconst cummulativeGasUsed = receipt.cumulativeGasUsed\n\t\t\t\t\t\t? toBigInt(receipt.cumulativeGasUsed.toString())\n\t\t\t\t\t\t: 0n;\n\t\t\t\t\tconst effectiveGasPrice = receipt.effectiveGasPrice\n\t\t\t\t\t\t? toBigInt(receipt.effectiveGasPrice.toString())\n\t\t\t\t\t\t: 0n;\n\t\t\t\t\tconst gasCost = gasUsed * effectiveGasPrice;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('Error calculating gas cost (informational-transaction):', false, error);\n\t\t\t\t}\n\t\t\t\treturn receipt;\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Fee distribution failed (transaction):', false, error);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst tokenContract = new ethers.Contract(\n\t\t\t\ttokenOut.address,\n\t\t\t\t['function transfer(address recipient, uint256 amount) public returns (bool)'],\n\t\t\t\tthis.signerNative // Use the signer for transactions, transfers, etc.\n\t\t\t);\n\n\t\t\t// Use the `transfer` function of the ERC-20 token to send the tokens to the recipient\n\t\t\t// NOTE: Using ethers and it supports transaction overrides like { gasLimit, maxPriorityFeePerGas, maxFeePerGas }\n\t\t\tconst tx = await tokenContract.transfer(feeRecipient, feeAmount, {\n\t\t\t\tgasLimit: toBigInt(gasLimit),\n\t\t\t\tmaxPriorityFeePerGas: toBigInt(maxPriorityFeePerGas),\n\t\t\t\tmaxFeePerGas: toBigInt(maxFeePerGas)\n\t\t\t});\n\n\t\t\t// Wait for the transaction to be mined\n\t\t\tconst receipt = await tx.wait();\n\t\t\t// May want to do something with the receipt here...\n\n\t\t\t// Use the gas spends that come back and calculate actual gas cost for transaction\n\t\t\ttry {\n\t\t\t\tconst gasUsed = toBigInt(receipt.gasUsed) || 0n;\n\t\t\t\tconst cummulativeGasUsed = toBigInt(receipt.cumulativeGasUsed.toString()) || 0n;\n\t\t\t\tconst effectiveGasPrice = receipt.effectiveGasPrice\n\t\t\t\t\t? toBigInt(receipt.effectiveGasPrice.toString())\n\t\t\t\t\t: 0n;\n\t\t\t\tconst gasCost = gasUsed * effectiveGasPrice;\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error calculating gas cost (informational-transfer):', false, error);\n\t\t\t}\n\n\t\t\treturn receipt;\n\t\t} catch (error) {\n\t\t\tlog.error('Fee distribution failed (transfer):', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync wrapETH(amount: BigNumberish, recipient: string): Promise<TransactionReceipt | null> {\n\t\tif (!this.signerNative) throw new Error('Ethereum signer not initialized');\n\t\tif (!recipient) throw new Error('Recipient address is required');\n\t\tif (!amount) throw new Error('Amount is required');\n\n\t\ttry {\n\t\t\tconst wethContract = new ethers.Contract(\n\t\t\t\tADDRESSES.WETH,\n\t\t\t\t['function deposit() public payable'],\n\t\t\t\tthis.signerNative\n\t\t\t);\n\n\t\t\t// Make sure that the signer is connected properly for the recipient\n\t\t\t// const tx = await wethContract.connect( this.signerNative ).deposit( {\n\t\t\t//   value: amount,\n\t\t\t//   from: recipient\n\t\t\t// } );\n\n\t\t\tlet tx;\n\t\t\tif (recipient !== (await this.signerNative.getAddress())) {\n\t\t\t\ttx = await wethContract.deposit({\n\t\t\t\t\tvalue: amount,\n\t\t\t\t\tfrom: recipient\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttx = await wethContract.deposit({\n\t\t\t\t\tvalue: amount\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst receipt = await tx.wait();\n\t\t\treturn await EthersConverter.ethersTransactionReceiptToTransactionReceipt(receipt);\n\t\t} catch (error) {\n\t\t\tlog.error('Error wrapping ETH:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync unwrapWETH(amount: BigNumberish, recipient: string): Promise<TransactionReceipt | null> {\n\t\tif (!this.signerNative) throw new Error('Ethereum signer not initialized');\n\t\tif (!recipient) throw new Error('Recipient address is required');\n\t\tif (!amount) throw new Error('Amount is required');\n\n\t\ttry {\n\t\t\tconst wethContract = new ethers.Contract(\n\t\t\t\tADDRESSES.WETH,\n\t\t\t\t[\n\t\t\t\t\t'function withdraw(uint256 amount) public',\n\t\t\t\t\t'function transfer(address to, uint256 value) public returns (bool)'\n\t\t\t\t],\n\t\t\t\tthis.signerNative\n\t\t\t);\n\n\t\t\tconst tx = await wethContract.withdraw(amount);\n\t\t\tconst receiptTrans = await tx.wait();\n\n\t\t\tif (!receiptTrans || receiptTrans.status !== 1) {\n\t\t\t\tthrow new Error('Failed to withdraw WETH');\n\t\t\t}\n\n\t\t\t// Send the resulting ETH to the recipient\n\t\t\tif (recipient !== (await this.signerNative.getAddress())) {\n\t\t\t\t// This means unwrap WETH to ETH and send to someone else (not the signer)\n\t\t\t\tconst txTransfer = await this.signerNative.sendTransaction({\n\t\t\t\t\tto: recipient,\n\t\t\t\t\tvalue: toBigInt(amount)\n\t\t\t\t});\n\n\t\t\t\tconst receipt = await txTransfer.wait();\n\t\t\t\tif (!receipt || receipt.status !== 1) {\n\t\t\t\t\tthrow new Error('Failed to transfer ETH to recipient');\n\t\t\t\t}\n\n\t\t\t\treturn receipt\n\t\t\t\t\t? await EthersConverter.ethersTransactionReceiptToTransactionReceipt(receipt)\n\t\t\t\t\t: null;\n\t\t\t} else {\n\t\t\t\treturn receiptTrans; // Return the original receipt if the recipient is the signer\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('Error unwrapping WETH:', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// private getStandardizedToken( symbol: string ): SwapToken | null {\n\t//   let standardizedSymbol = symbol;\n\t//   if ( symbol === 'USD' ) standardizedSymbol = 'USDC';\n\t//   if ( symbol === 'ETH' ) standardizedSymbol = 'WETH';\n\t//   return getToken( standardizedSymbol, this.getChainId() );\n\t// }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// balanceUtils.ts\nimport type { SwapToken } from '$lib/common/interfaces';\nimport type { Provider } from '$managers/Provider';\nimport type { TokenService } from '$lib/managers/blockchains/evm/TokenService';\nimport { log } from '$lib/managers/Logger';\n\n// Helper function to determine if an error should be shown to the user\nfunction shouldShowErrorToUser(error: any): boolean {\n\tconst errorMessage = error?.message || error?.toString() || '';\n\n\t// Network/API errors that should be handled silently\n\tconst networkErrors = [\n\t\t'missing response',\n\t\t'timeout',\n\t\t'TIMEOUT',\n\t\t'SERVER_ERROR',\n\t\t'NETWORK_ERROR',\n\t\t'Failed to fetch',\n\t\t'fetch',\n\t\t'Connection failed',\n\t\t'Request timeout',\n\t\t'eth_getBalance',\n\t\t'call revert exception',\n\t\t'alchemy.com',\n\t\t'infura.io',\n\t\t'requestBody',\n\t\t'serverError',\n\t\t'code=SERVER_ERROR',\n\t\t'version=web/',\n\t\t'JsonRpcError',\n\t\t'RPC Error',\n\t\t'getBalance',\n\t\t'Balance fetch'\n\t];\n\n\treturn !networkErrors.some((pattern) =>\n\t\terrorMessage.toLowerCase().includes(pattern.toLowerCase())\n\t);\n}\n\nexport async function getTokenBalance(\n\ttoken: SwapToken,\n\taddress: string,\n\tprovider: Provider | null,\n\ttokenService: TokenService<any> | null // TokenService and may want to change this for specific blockchain\n): Promise<bigint> {\n\t// Needs a better return type. It needs to be a BigNumberish plus a code and message. This would allow for 0n to be returned and for the code and message to be used to determine if there was an error or not\n\ttry {\n\t\tif (!token) return 0n;\n\t\tif (token.isNative) {\n\t\t\t// token.isNative needs to be implemented!\n\t\t\tif (!provider) return 0n;\n\t\t\tconst retBal = await provider.getBalance(address);\n\t\t\ttoken.balance = retBal;\n\n\t\t\t// Update cache with native token balance\n\t\t\tconst { balanceCacheManager } = await import('$lib/managers/BalanceCacheManager');\n\t\t\tconst { yakklPricingStore } = await import('$lib/common/stores');\n\t\t\tconst { get } = await import('svelte/store');\n\t\t\tconst currentPrice = get(yakklPricingStore)?.price;\n\t\t\tif (currentPrice) {\n\t\t\t\tbalanceCacheManager.setCachedBalance(address, retBal, currentPrice);\n\t\t\t}\n\n\t\t\treturn retBal;\n\t\t}\n\n\t\tif (!tokenService) return 0n;\n\t\tconst retBal = await tokenService.getBalance(token.address, address); // address is the user's address. This checks the contract to see if it has the given userAddress registered and if it has a balance\n\t\ttoken.balance = retBal;\n\n\t\t// Update cache with token balance (for non-native tokens)\n\t\t// Note: This is for individual token balances, not ETH balance\n\t\t// You may want to create a separate token balance cache if needed\n\n\t\treturn retBal;\n\t} catch (error) {\n\t\t// Only log non-network errors, suppress network timeouts\n\t\tif (shouldShowErrorToUser(error)) {\n\t\t\tlog.error('getTokenBalance - error', false, error);\n\t\t}\n\t\treturn 0n;\n\t}\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// GasToken.ts\nimport { Token, type IToken } from '$managers/Token';\nimport type { Blockchain } from '$managers/Blockchain';\nimport type { Provider } from '$managers/Provider';\nimport { type MarketPriceData } from '$lib/common';\nimport { PriceManager } from './PriceManager';\nimport { log } from '$lib/managers/Logger';\n\nexport interface IGasToken extends IToken {\n\tgetSponsoredGasEstimate(transaction: any): Promise<bigint>;\n\tcheckSponsorshipEligibility(userAddress: string): Promise<boolean>;\n}\n\nexport class GasToken extends Token {\n\tprotected priceManager: PriceManager;\n\tprotected fundingAddress: string | null = null;\n\tprotected fundingPair: string | null = null;\n\tprotected lastPrice: MarketPriceData | null = null;\n\tprotected lastPriceCheck: number = 0;\n\tprotected lastBalanceCheck: number = 0;\n\n\tconstructor(\n\t\tname: string,\n\t\tsymbol: string,\n\t\tblockchain: Blockchain,\n\t\tprovider: Provider,\n\t\tfundingAddress: string | null = null,\n\t\tchainId: number = 1,\n\t\tdecimals: number = 18,\n\t\tlogoURI: string = '/images/logoBullFav.svg',\n\t\tcontractAddress: string = ''\n\t) {\n\t\tsuper(\n\t\t\tcontractAddress, // GasToken does not need an address, it is native. However, in the future we may sponsor a gas token, so we keep this field\n\t\t\tname,\n\t\t\tsymbol,\n\t\t\tdecimals,\n\t\t\tlogoURI,\n\t\t\t`${name} YAKKL native gas token`,\n\t\t\tchainId,\n\t\t\ttrue, // Native token\n\t\t\tfalse, // Not a stablecoin\n\t\t\tblockchain,\n\t\t\tprovider\n\t\t);\n\n\t\tthis.priceManager = new PriceManager();\n\t\tthis.fundingAddress = fundingAddress;\n\t\tif (this.fundingAddress)\n\t\t\tthis.getBalance(this.fundingAddress).then((balance) => {\n\t\t\t\tthis.balance = balance;\n\t\t\t\tthis.lastBalanceCheck = Date.now();\n\t\t\t});\n\t\tthis.fundingPair = `${symbol}-USD`;\n\t}\n\n\t// GasToken does not need a contract, as it is native to the blockchain\n\tasync getContract(): Promise<null> {\n\t\treturn null;\n\t}\n\n\t// Overriding to provide more appropriate handling for native balance\n\tasync getBalance(userAddress: string): Promise<bigint> {\n\t\tif (!userAddress) return 0n;\n\t\tif (this.blockchain) {\n\t\t\tthis.balance = await this.blockchain.getBalance(userAddress);\n\t\t\tthis.lastBalanceCheck = Date.now();\n\t\t} else {\n\t\t\tthis.balance = 0n;\n\t\t}\n\t\treturn this.balance;\n\t}\n\n\tasync getMarketPrice(pair: string | null = this.fundingPair): Promise<MarketPriceData> {\n\t\ttry {\n\t\t\tif (!pair) {\n\t\t\t\tlog.error('GasToken - getMarketPrice - pair is invalid (null)');\n\t\t\t\tthrow new Error('Invalid pair for market price check');\n\t\t\t}\n\n\t\t\t// log.debug('GasToken - getMarketPrice - pair', pair);\n\n\t\t\tconst price = await this.priceManager.getMarketPrice(pair);\n\t\t\tthis.lastPrice = price;\n\t\t\tthis.lastPriceCheck = Date.now();\n\t\t\treturn price;\n\t\t} catch (error) {\n\t\t\tlog.errorStack('GasToken - getMarketPrice', false, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync hasSufficientBalance(userAddress: string, amount: bigint): Promise<boolean> {\n\t\tthis.balance = await this.getBalance(userAddress); // Update the balance\n\t\treturn this.balance >= amount;\n\t}\n\n\t// Transferring native tokens typically involves direct blockchain transactions\n\t// async transfer( toAddress: string, amount: bigint ): Promise<any> {\n\t//   const tx = {\n\t//     to: toAddress,\n\t//     value: amount,\n\t//     gasLimit: 21000 // Default gas limit for a native token transfer\n\t//   };\n\t//   return await this.provider.sendTransaction( tx );\n\t// }\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync transfer(toAddress: string, amount: bigint): Promise<any> {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tasync getSponsoredGasEstimate(transaction: any): Promise<bigint> {\n\t\tconst gasEstimate = await this.provider.estimateGas(transaction);\n\n\t\t// Logic to determine if gas fees are sponsored by YAKKL\n\t\tconst isSponsored = await this.checkSponsorshipEligibility(transaction.from);\n\n\t\tif (isSponsored) {\n\t\t\t// Apply a discount or use YAKKL to pay the gas fee\n\t\t\treturn gasEstimate / 2n; // Example: half the gas fees covered by sponsorship\n\t\t}\n\n\t\treturn gasEstimate;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync checkSponsorshipEligibility(userAddress: string): Promise<boolean> {\n\t\t// Check user's eligibility for gas sponsorship (e.g., based on holdings or subscription)\n\t\treturn true; // Placeholder logic\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { BigNumberish } from '$lib/common/bignumber';\nimport { safeConvertToBigInt } from './math';\nimport type { SwapPriceData, SwapToken } from '$lib/common/interfaces';\n\n// Validation Types\nexport type ValidationRuleType =\n\t| 'number'\n\t| 'bigint'\n\t| 'string'\n\t| 'boolean'\n\t| 'array'\n\t| 'object'\n\t| 'bignumberish';\n\n// Validation Constraint Types\nexport type ValidationConstraint<T> = {\n\ttype?: ValidationRuleType;\n\trequired?: boolean;\n\tmin?: T;\n\tmax?: T;\n\tequals?: T;\n\tnotEquals?: T;\n\toneOf?: T[];\n\tnotOneOf?: T[];\n\tcustomValidation?: (value: T) => boolean;\n};\n\n// Generic Validation Rules Type\nexport type ValidationRules<T> = {\n\t[K in keyof T]?: ValidationConstraint<T[K]>;\n};\n\n// Validation Result\nexport interface ValidationResult {\n\tisValid: boolean;\n\terror: string;\n}\n\n/**\n * Generic object validation function\n * @param data Object to validate\n * @param rules Validation rules for the object\n * @returns Validation result\n */\nexport function validateObject<T extends Record<string, any>>(\n\tdata: T,\n\trules: ValidationRules<T>\n): ValidationResult {\n\t// Validation function for a single rule\n\tconst validateValue = <V>(value: V, rule: ValidationConstraint<V>): boolean => {\n\t\t// Handle undefined or null\n\t\tif (value === undefined || value === null) {\n\t\t\treturn !rule.required;\n\t\t}\n\n\t\tlet bigIntValue: bigint | undefined;\n\n\t\t// Type checking with more robust handling\n\t\tif (rule.type) {\n\t\t\tswitch (rule.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tif (typeof value !== 'number' || isNaN(value as number)) return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bigint':\n\t\t\t\tcase 'bignumberish':\n\t\t\t\t\tbigIntValue = safeConvertToBigInt(value as BigNumberish);\n\t\t\t\t\tif (bigIntValue === undefined) return false;\n\t\t\t\t\t// Reassign value for further checks\n\t\t\t\t\tvalue = bigIntValue as V;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (typeof value !== 'string') return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tif (typeof value !== 'boolean') return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\tif (!Array.isArray(value)) return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\tif (typeof value !== 'object' || value === null) return false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Min/Max validation with safe bigint conversion\n\t\tif (rule.min !== undefined) {\n\t\t\tif (typeof rule.min === 'number' && (value as number) < (rule.min as number)) return false;\n\n\t\t\t// For bigint and bignumberish\n\t\t\tif (rule.type === 'bigint' || rule.type === 'bignumberish') {\n\t\t\t\tconst minBigInt = safeConvertToBigInt(rule.min as BigNumberish);\n\t\t\t\tconst valueBigInt = safeConvertToBigInt(value as BigNumberish);\n\n\t\t\t\tif (minBigInt === undefined || valueBigInt === undefined) return false;\n\t\t\t\tif (valueBigInt < minBigInt) return false;\n\t\t\t}\n\t\t}\n\n\t\tif (rule.max !== undefined) {\n\t\t\tif (typeof rule.max === 'number' && (value as number) > (rule.max as number)) return false;\n\n\t\t\t// For bigint and bignumberish\n\t\t\tif (rule.type === 'bigint' || rule.type === 'bignumberish') {\n\t\t\t\tconst maxBigInt = safeConvertToBigInt(rule.max as BigNumberish);\n\t\t\t\tconst valueBigInt = safeConvertToBigInt(value as BigNumberish);\n\n\t\t\t\tif (maxBigInt === undefined || valueBigInt === undefined) return false;\n\t\t\t\tif (valueBigInt > maxBigInt) return false;\n\t\t\t}\n\t\t}\n\n\t\t// Equality checks\n\t\tif (rule.equals !== undefined && value !== rule.equals) return false;\n\t\tif (rule.notEquals !== undefined && value === rule.notEquals) return false;\n\n\t\t// One of / Not One of checks\n\t\tif (rule.oneOf !== undefined && !rule.oneOf.includes(value)) return false;\n\t\tif (rule.notOneOf !== undefined && rule.notOneOf.includes(value)) return false;\n\n\t\t// Custom validation\n\t\tif (rule.customValidation && !rule.customValidation(value)) return false;\n\n\t\treturn true;\n\t};\n\n\t// Validate all rules\n\tfor (const [key, rule] of Object.entries(rules)) {\n\t\tconst value = data[key];\n\n\t\tif (!validateValue(value, rule as ValidationConstraint<any>)) {\n\t\t\t// Generate user-friendly error message\n\t\t\tlet errorMessage = `Invalid ${key}: `;\n\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\terrorMessage += (rule as ValidationConstraint<any>).required\n\t\t\t\t\t? 'is required'\n\t\t\t\t\t: 'is missing but not required';\n\t\t\t} else {\n\t\t\t\tconst currentRule = rule as ValidationConstraint<any>;\n\t\t\t\tif (currentRule.min !== undefined) errorMessage += `must be at least ${currentRule.min}`;\n\t\t\t\tif (currentRule.max !== undefined) errorMessage += `must be at most ${currentRule.max}`;\n\t\t\t\tif (currentRule.equals !== undefined) errorMessage += `must equal ${currentRule.equals}`;\n\t\t\t\tif (currentRule.notEquals !== undefined)\n\t\t\t\t\terrorMessage += `cannot equal ${currentRule.notEquals}`;\n\t\t\t\tif (currentRule.oneOf !== undefined)\n\t\t\t\t\terrorMessage += `must be one of ${currentRule.oneOf.join(', ')}`;\n\t\t\t\tif (currentRule.notOneOf !== undefined)\n\t\t\t\t\terrorMessage += `cannot be one of ${currentRule.notOneOf.join(', ')}`;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisValid: false,\n\t\t\t\terror: errorMessage\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tisValid: true,\n\t\terror: ''\n\t};\n}\n\n// Specific validation for SwapQuote\nexport function validateSwapQuote(quote: SwapPriceData): ValidationResult {\n\treturn validateObject(quote, {\n\t\tamountIn: {\n\t\t\trequired: true,\n\t\t\ttype: 'bignumberish',\n\t\t\tmin: 0n,\n\t\t\tcustomValidation: (amount: BigNumberish) => {\n\t\t\t\tconst bigIntAmount = safeConvertToBigInt(amount);\n\t\t\t\treturn bigIntAmount !== undefined && bigIntAmount > 0n;\n\t\t\t}\n\t\t},\n\t\tamountOut: {\n\t\t\trequired: true,\n\t\t\ttype: 'bignumberish',\n\t\t\tmin: 0n,\n\t\t\tcustomValidation: (amount: BigNumberish) => {\n\t\t\t\tconst bigIntAmount = safeConvertToBigInt(amount);\n\t\t\t\treturn bigIntAmount !== undefined && bigIntAmount > 0n;\n\t\t\t}\n\t\t},\n\t\ttokenIn: {\n\t\t\trequired: true,\n\t\t\ttype: 'object',\n\t\t\tcustomValidation: (token: SwapToken) => {\n\t\t\t\treturn !!(token && token.address && token.symbol);\n\t\t\t}\n\t\t},\n\t\ttokenOut: {\n\t\t\trequired: true,\n\t\t\ttype: 'object',\n\t\t\tcustomValidation: (token: SwapToken) => {\n\t\t\t\treturn !!(token && token.address && token.symbol);\n\t\t\t}\n\t\t},\n\t\tfee: {\n\t\t\toneOf: [500, 3000, 10000]\n\t\t}\n\t});\n}\n\n// Comprehensive example usages below...\n// function exampleUsage() {\n//   const swapQuote: SwapPriceData = { /* your swap quote data */ };\n//   const validationResult = validateSwapQuote( swapQuote );\n\n//   if ( !validationResult.isValid ) {\n//     console.log( 'Validation failed:', validationResult.error );\n//   }\n// }\n\n// function exampleUsage() {\n//   // Basic object validation\n//   interface User {\n//     name: string;\n//     age: number;\n//     email?: string;\n//   }\n\n//   const user: User = {\n//     name: 'John Doe',\n//     age: 30\n//   };\n\n//   const userValidation = validateObject( user, {\n//     name: {\n//       required: true,\n//       type: 'string',\n//       min: 2,\n//       max: 50\n//     },\n//     age: {\n//       required: true,\n//       type: 'number',\n//       min: 18,\n//       max: 120\n//     },\n//     email: {\n//       type: 'string',\n//       customValidation: ( email ) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test( email )\n//     }\n//   } );\n\n//   // Swap quote validation\n//   const swapQuote: SwapPriceData = { /* your swap quote data */ };\n//   const swapValidation = validateSwapQuote( swapQuote );\n\n//   // Advanced validation with multiple constraints\n//   interface Product {\n//     name: string;\n//     price: number;\n//     categories: string[];\n//   }\n\n//   const product: Product = {\n//     name: 'Awesome Product',\n//     price: 19.99,\n//     categories: [ 'Electronics', 'Gadgets' ]\n//   };\n\n//   const productValidation = validateObject( product, {\n//     name: {\n//       required: true,\n//       type: 'string',\n//       min: 3,\n//       max: 100\n//     },\n//     price: {\n//       required: true,\n//       type: 'number',\n//       min: 0,\n//       max: 1000\n//     },\n//     categories: {\n//       type: 'array',\n//       customValidation: ( cats ) => cats.length > 0,\n//       oneOf: [ 'Electronics', 'Clothing', 'Books', 'Gadgets' ]\n//     }\n//   } );\n\n//   // Logging results\n//   console.log( 'User Validation:', userValidation );\n//   console.log( 'Swap Quote Validation:', swapValidation );\n//   console.log( 'Product Validation:', productValidation );\n// }\n","<script lang=\"ts\">\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { onDestroy, onMount } from 'svelte';\n\timport type {\n\t\tProfile,\n\t\tProfileData,\n\t\tSwapParams,\n\t\tSwapPriceData,\n\t\tSwapToken\n\t} from '$lib/common/interfaces';\n\timport SellTokenPanel from './SellTokenPanel.svelte';\n\timport BuyTokenPanel from './BuyTokenPanel.svelte';\n\timport SwapSettings from './SwapSettings.svelte';\n\timport SwapSummary from './SwapSummary.svelte';\n\timport Modal from './Modal.svelte';\n\timport {\n\t\tBigNumber,\n\t\tdecryptData,\n\t\tETH_BASE_SWAP_GAS_UNITS,\n\t\tisEncryptedData,\n\t\tparseAmount,\n\t\tTIMER_SWAP_FETCH_PRICES_TIME,\n\t\tYAKKL_FEE_BASIS_POINTS,\n\t\ttype BigNumberish\n\t} from '$lib/common';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { UniswapSwapManager } from '$lib/managers/UniswapSwapManager';\n\timport { TokenService } from '$lib/managers/blockchains/evm/TokenService';\n\timport { Ethereum } from '$lib/managers/blockchains/evm/ethereum/Ethereum';\n\timport { Token } from '$lib/managers/Token';\n\timport type { Provider } from '$lib/managers/Provider';\n\timport { derived, writable } from 'svelte/store';\n\timport { getTokenBalance } from '$lib/utilities/balanceUtils';\n\timport debounce from 'lodash/debounce';\n\timport { toBigInt } from '$lib/common/math';\n\timport { GasToken } from '$lib/managers/GasToken';\n\timport { validateSwapQuote, type ValidationResult } from '$lib/common/validation';\n\timport { getMiscStore, getProfile } from '$lib/common/stores';\n\timport { deepCopy } from '$lib/utilities';\n\timport ErrorNoAction from './ErrorNoAction.svelte';\n\timport Warning from './Warning.svelte';\n\timport PincodeVerify from './PincodeVerify.svelte';\n\timport Confirmation from './Confirmation.svelte';\n\timport { sendNotificationMessage } from '$lib/common/notifications';\n\timport { getTimerManager } from '$lib/managers/TimerManager';\n\n\t// import { browserSvelte } from '$lib/utilities/browserSvelte';\n\t// import { getBrowserExt } from '$lib/browser-polyfill-wrapper';\n\t// import type { Browser } from 'webextension-polyfill';\n\n\t// import { multiHopQuoteAlphaRouter } from '$lib/managers/alphaRouter';\n\t// Add back to package.json - \t\t\"@yakkl/uniswap-alpha-router-service\": \"workspace:*\",\n\n\t///////////////////////\n\t// NOTE: The swap pricing process was done by the calling routine before calling this component. However, this caused unnecessary calls to the API. So, this now requires anything using it to set up the\n\t// swapPriceDataStore and then remove it when done with this component.\n\t// NOTE: To use a turnkey swap solution, use SwapModal.svelte which is a thin wrapper that implments the price checks and this component.\n\t///////////////////////\n\n\tinterface Props {\n\t\t// Props\n\t\tfundingAddress: string;\n\t\tprovider: Provider; // Provider must have Signer set before calling Swap!\n\t\tblockchain: Ethereum;\n\t\tswapManager: UniswapSwapManager;\n\t\ttokenService: TokenService<any>;\n\t\tshow?: boolean;\n\t\tclassName?: string;\n\t\tonSwap?: (\n\t\t\tfundingAddress: string,\n\t\t\ttokenIn: SwapToken,\n\t\t\ttokenOut: SwapToken,\n\t\t\tfromAmount: BigNumberish,\n\t\t\ttoAmount: BigNumberish\n\t\t) => void;\n\t}\n\n\tlet {\n\t\tfundingAddress,\n\t\tprovider,\n\t\tblockchain,\n\t\tswapManager,\n\t\ttokenService,\n\t\tshow = $bindable(false),\n\t\tclassName = 'text-gray-600 z-[699]',\n\t\tonSwap = () => {}\n\t}: Props = $props();\n\n\tconst SUPPORTED_STABLECOINS = ['USDC', 'USDT', 'DAI', 'BUSD'];\n\n\t// May could have passed this in as a prop\n\tlet gasToken: GasToken = $state();\n\n\t// Initial token values\n\tlet initialToken: SwapToken = {\n\t\tchainId: 1,\n\t\taddress: '',\n\t\tname: '',\n\t\tsymbol: '',\n\t\tdecimals: 0,\n\t\tbalance: 0n,\n\t\tlogoURI: '',\n\t\tisNative: false,\n\t\tisStablecoin: false\n\t};\n\n\t// Central store for swap price data\n\tconst initialSwapPriceData: SwapPriceData = {\n\t\tprovider: 'Uniswap V3',\n\t\tlastUpdated: new Date(),\n\t\tchainId: 1,\n\t\ttokenIn: initialToken,\n\t\ttokenOut: initialToken,\n\t\tquoteAmount: 0n,\n\t\tfundingAddress: '',\n\t\tfeeAmount: 0n,\n\t\tamountAfterFee: 0n,\n\t\tamountIn: 0n,\n\t\tamountOut: 0n,\n\t\texchangeRate: 0n,\n\t\tmarketPriceIn: 0,\n\t\tmarketPriceOut: 0,\n\t\tmarketPriceGas: 0,\n\t\tpriceImpactRatio: 0,\n\t\tpath: [],\n\t\tfee: 0,\n\t\tfeeBasisPoints: YAKKL_FEE_BASIS_POINTS,\n\t\tfeeAmountPrice: 0,\n\t\tfeeAmountInUSD: '',\n\t\tgasEstimate: 0n,\n\t\tgasEstimateInUSD: '',\n\t\ttokenOutPriceInUSD: '',\n\t\tmultiHop: false,\n\t\tslippageTolerance: 0.5,\n\t\tdeadline: 10,\n\t\terror: null,\n\t\tisLoading: false\n\t};\n\n\t// Create stores\n\tinterface SwapStateStore {\n\t\ttokenIn: SwapToken;\n\t\ttokenOut: SwapToken;\n\t\tfromAmount: string;\n\t\ttoAmount: string;\n\t\tfromBalance: string;\n\t\terror: string;\n\t\tdeadline: number; // Default value for deadline\n\t\tslippageTolerance: number; // Default slippage tolerance in percentage\n\t\tpoolFee: number; // Default pool fee in basis points (e.g., 0.3%)\n\t\tmultiHop: boolean;\n\t}\n\n\tinterface UIStateStore {\n\t\tresetValues: boolean;\n\t\tisLoading: boolean;\n\t\tisSwapping: boolean;\n\t}\n\n\tconst swapPriceDataStore = writable<SwapPriceData>(initialSwapPriceData);\n\tconst insufficientBalanceStore = writable(false);\n\n\tlet swapStateStore = writable<SwapStateStore>({\n\t\ttokenIn: initialToken,\n\t\ttokenOut: initialToken,\n\t\tfromAmount: '',\n\t\ttoAmount: '',\n\t\tfromBalance: '0',\n\t\terror: '',\n\t\tdeadline: 10, // Default value for deadline\n\t\tslippageTolerance: 0.5, // Default slippage tolerance in percentage\n\t\tpoolFee: 3000, // Default pool fee in basis points (e.g., 0.3%)\n\t\tmultiHop: false\n\t});\n\n\tlet uiStateStore = writable<UIStateStore>({\n\t\tresetValues: false,\n\t\tisLoading: false,\n\t\tisSwapping: false\n\t});\n\n\t// State\n\t// let tokenIn: SwapToken = $state(initialToken);\n\t// let tokenOut: SwapToken = $state(initialToken);\n\t// let fromAmount = $state('');\n\t// let toAmount = $state('');\n\t// let fromBalance = $state('0');\n\t// let slippageTolerance = $state(0.5);  // 0.5% default - amount in percentage of acceptable slippage from quoted price\n\t// let deadline = $state(10);  // 10 minutes default\n\t// let poolFee = $state(3000); // 0.3% fee default\n\t// let error: string | null = $state(null);\n\t// let isLoading = $state(false);\n\t// let isSwapping = $state(false);\n\t// let resetValues = $state(false);\n\t// let multiHop = $state(false);\n\n\t// eslint-disable-next-line svelte/non-reactive-declaration\n\t// let tokens: SwapToken[] = [];\n\n\t// svelte-ignore non_reactive_update\n\t// let preferredTokens: SwapToken[] = [];\n\n\tlet lastModifiedPanel: 'sell' | 'buy' = $state('sell');\n\tlet swapManagerName = '';\n\tlet isEthWethSwap = $state(false);\n\tlet showVerify = $state(false);\n\tlet showError = $state(false);\n\tlet errorValue = $state('');\n\tlet showWarning = $state(false);\n\tlet warningValue = $state('');\n\tlet showConfirmation = $state(false);\n\tlet pincodeVerified = false;\n\n\t// Initialize\n\tonMount(async () => {\n\t\ttry {\n\t\t\treset();\n\t\t\tconst yakklMiscStore = getMiscStore();\n\t\t\tif (!yakklMiscStore) {\n\t\t\t\tlog.info('User is not logged in yet, so no swap is possible.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Provider must have Signer set before calling Swap!\n\t\t\tgasToken = new GasToken('YAKKL GasToken', 'ETH', blockchain, provider, fundingAddress); // Native token for now\n\n\t\t\t// Defaulting gas price check as last thing in onMount\n\t\t\tif (gasToken) {\n\t\t\t\tconst price = await gasToken.getMarketPrice(); //.then(price => {\n\t\t\t\tupdateSwapPriceData({ marketPriceGas: price.price });\n\t\t\t}\n\t\t\t// Add and start timer\n\t\t\tgetTimerManager().addTimer('swap_fetchPrices', fetchPrices, TIMER_SWAP_FETCH_PRICES_TIME);\n\t\t\tgetTimerManager().startTimer('swap_fetchPrices');\n\t\t} catch (error) {\n\t\t\tlog.error('Error initializing swap:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to initialize swap. Please try again.';\n\t\t}\n\t});\n\n\tonDestroy(() => {\n\t\tconst yakklMiscStore = getMiscStore();\n\t\tif (yakklMiscStore) {\n\t\t\tgetTimerManager().stopTimer('swap_fetchPrices');\n\t\t\tdebouncedGetQuote.cancel();\n\t\t\tdebouncedCheckBalance.cancel();\n\t\t\tdebouncedGetMarketPrice.cancel();\n\t\t\treset();\n\t\t}\n\t});\n\n\tconst quoteTrigger = derived([swapStateStore], ([$swapStateStore]) => {\n\t\tconst { deadline, slippageTolerance, poolFee } = $swapStateStore;\n\t\treturn { deadline, slippageTolerance, poolFee };\n\t});\n\n\t$effect(() => {\n\t\tif (quoteTrigger) {\n\t\t\tdebouncedGetQuote();\n\t\t}\n\t});\n\n\t$effect(() => {\n\t\t$swapStateStore.multiHop = $swapPriceDataStore.multiHop;\n\t});\n\n\t$effect(() => {\n\t\tconst { tokenIn, tokenOut } = $swapPriceDataStore;\n\t\tif (\n\t\t\t(tokenIn.symbol === 'ETH' && tokenOut.symbol === 'WETH') ||\n\t\t\t(tokenIn.symbol === 'WETH' && tokenOut.symbol === 'ETH') ||\n\t\t\t(tokenIn.symbol === 'ETH' && tokenOut.symbol === 'ETH') ||\n\t\t\t(tokenIn.symbol === 'WETH' && tokenOut.symbol === 'WETH')\n\t\t) {\n\t\t\tisEthWethSwap = true;\n\t\t} else {\n\t\t\tisEthWethSwap = false;\n\t\t}\n\t});\n\n\t$effect(() => {\n\t\t(async () => {\n\t\t\tconst { tokenIn, fromAmount } = $swapStateStore;\n\t\t\tif (tokenIn && fromAmount) {\n\t\t\t\tawait debouncedCheckBalance(tokenIn, fromAmount, fundingAddress);\n\n\t\t\t\tif (gasToken && $swapPriceDataStore.marketPriceGas === 0) {\n\t\t\t\t\tawait debouncedGetGasTokenPrice();\n\t\t\t\t\t// gasToken.getMarketPrice().then(price => {\n\t\t\t\t\t//   if ($swapPriceDataStore.marketPriceGas === 0) {\n\t\t\t\t\t//       updateSwapPriceData({ marketPriceGas: price.price });\n\t\t\t\t\t//   }\n\t\t\t\t\t// });\n\t\t\t\t}\n\n\t\t\t\tif (tokenIn.symbol && swapManager && $swapPriceDataStore.marketPriceIn === 0) {\n\t\t\t\t\tawait debouncedGetMarketPrice(tokenIn);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n\n\t$effect(() => {\n\t\t(async () => {\n\t\t\tif ($swapStateStore.tokenOut && $swapStateStore.toAmount) {\n\t\t\t\t// Only need to update if we have a tokenOut and the market price is 0\n\t\t\t\tif ($swapStateStore.tokenOut.symbol && $swapPriceDataStore.marketPriceOut === 0) {\n\t\t\t\t\tawait debouncedGetMarketPrice($swapStateStore.tokenOut);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n\n\t// Debounced quote handler, check balance, and market price\n\tconst debouncedGetQuote = debounce(async () => {\n\t\tawait getQuote();\n\t}, 300);\n\n\tconst debouncedCheckBalance = debounce(checkBalance, 300);\n\n\tconst debouncedGetGasTokenPrice = debounce(async () => {\n\t\tconst price = await gasToken.getMarketPrice();\n\t\tif ($swapPriceDataStore.marketPriceGas === 0) {\n\t\t\tupdateSwapPriceData({ marketPriceGas: price.price });\n\t\t}\n\t}, 500);\n\n\tconst debouncedGetMarketPrice = debounce(async (token) => {\n\t\tconst price = await swapManager.getMarketPrice(`${token.symbol}-USD`);\n\t\tif (price.price > 0) {\n\t\t\tupdateSwapPriceData({ marketPriceIn: price.price });\n\t\t}\n\t}, 500);\n\n\t// Function to fetch the gas price\n\tasync function fetchPrices() {\n\t\tif (gasToken) {\n\t\t\ttry {\n\t\t\t\t// Always the native token except where we sponsor the gas\n\t\t\t\tconst price = await gasToken.getMarketPrice();\n\t\t\t\tupdateSwapPriceData({ marketPriceGas: price.price });\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error fetching gas price:', false, error);\n\t\t\t}\n\t\t}\n\n\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenIn.symbol && swapManager) {\n\t\t\ttry {\n\t\t\t\tconst price = await swapManager.getMarketPrice(`${$swapStateStore.tokenIn.symbol}-USD`);\n\t\t\t\tupdateSwapPriceData({ marketPriceIn: price.price });\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error fetching market price:', false, error);\n\t\t\t}\n\t\t}\n\n\t\tif ($swapStateStore.tokenOut && $swapStateStore.tokenOut.symbol && swapManager) {\n\t\t\ttry {\n\t\t\t\tconst price = await swapManager.getMarketPrice(`${$swapStateStore.tokenOut.symbol}-USD`);\n\t\t\t\tupdateSwapPriceData({ marketPriceOut: price.price });\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error fetching market price:', false, error);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handler functions\n\tasync function handleSellAmountChange(amount: string) {\n\t\t$swapStateStore.error = '';\n\t\t$swapStateStore.fromAmount = amount;\n\t\tlastModifiedPanel = 'sell';\n\n\t\tif (amount !== '.' && isNaN(parseFloat(amount))) {\n\t\t\tlog.info('Swap - Invalid sell amount:', false, amount);\n\n\t\t\t$swapStateStore.fromAmount = '';\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountIn: 0n,\n\t\t\t\tamountOut: 0n\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst parsedAmount = parseAmount(amount, $swapStateStore.tokenIn.decimals);\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountIn: parsedAmount\n\t\t\t});\n\t\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) {\n\t\t\t\tawait getQuote(true);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('Error handling sell amount change:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to process sell amount';\n\t\t}\n\t}\n\n\tasync function handleBuyAmountChange(amount: string) {\n\t\t$swapStateStore.error = '';\n\t\t$swapStateStore.toAmount = amount;\n\t\tlastModifiedPanel = 'buy';\n\n\t\tif (amount !== '.' && isNaN(parseFloat(amount))) {\n\t\t\t$swapStateStore.toAmount = '';\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountOut: 0n\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst parsedAmount = parseAmount(amount, $swapStateStore.tokenOut.decimals);\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountOut: parsedAmount\n\t\t\t});\n\t\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) await getQuote(false);\n\t\t} catch (error) {\n\t\t\tlog.error('Error handling buy amount change:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to process buy amount';\n\t\t}\n\t}\n\n\tasync function handleTokenSelect(token: SwapToken, type: 'sell' | 'buy') {\n\t\t$swapStateStore.error = '';\n\n\t\t// Check if selecting the same token\n\t\tconst otherToken = type === 'sell' ? $swapStateStore.tokenOut : $swapStateStore.tokenIn;\n\t\tif (otherToken.symbol && areTokensEqual(token, otherToken)) {\n\t\t\t$swapStateStore.error = `Cannot swap ${token.symbol} for itself`;\n\t\t\treturn;\n\t\t}\n\n\t\t// This is a helper function to set the pool fee for stablecoins\n\t\tif (token.isStablecoin || SUPPORTED_STABLECOINS.includes(token.symbol)) {\n\t\t\t$swapStateStore.poolFee = 500;\n\t\t\ttoken.isStablecoin = true;\n\t\t\tupdateSwapPriceData({ fee: $swapStateStore.poolFee });\n\t\t}\n\n\t\tif (!token.balance || toBigInt(token.balance) <= 0n) {\n\t\t\ttoken.balance = await getTokenBalance(token, fundingAddress, provider, tokenService);\n\t\t}\n\t\tconst formattedBalance = ethersv6.formatUnits(toBigInt(token.balance), token.decimals); // NOTE: This and all ethers specific code should be moved to the TokenService - maybe\n\n\t\tif (type === 'sell') {\n\t\t\t$swapStateStore.tokenIn = token;\n\t\t\tupdateSwapPriceData({ tokenIn: token });\n\t\t\t$swapStateStore.fromBalance = formattedBalance;\n\t\t} else {\n\t\t\t$swapStateStore.tokenOut = token;\n\t\t\tupdateSwapPriceData({ tokenOut: token });\n\t\t}\n\n\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) {\n\t\t\tif (lastModifiedPanel === 'sell' && $swapStateStore.fromAmount) {\n\t\t\t\tawait handleSellAmountChange($swapStateStore.fromAmount);\n\t\t\t} else if (lastModifiedPanel === 'buy' && $swapStateStore.toAmount) {\n\t\t\t\tawait handleBuyAmountChange($swapStateStore.toAmount);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function switchTokens() {\n\t\t[$swapStateStore.tokenIn, $swapStateStore.tokenOut] = [\n\t\t\t$swapStateStore.tokenOut,\n\t\t\t$swapStateStore.tokenIn\n\t\t];\n\t\t[$swapStateStore.fromAmount, $swapStateStore.toAmount] = [\n\t\t\t$swapStateStore.toAmount,\n\t\t\t$swapStateStore.fromAmount\n\t\t];\n\n\t\tupdateSwapPriceData({\n\t\t\ttokenIn: $swapStateStore.tokenIn,\n\t\t\ttokenOut: $swapStateStore.tokenOut,\n\t\t\tamountIn: $swapStateStore.toAmount\n\t\t\t\t? parseAmount($swapStateStore.toAmount, $swapStateStore.tokenIn.decimals)\n\t\t\t\t: 0n,\n\t\t\tamountOut: $swapStateStore.fromAmount\n\t\t\t\t? parseAmount($swapStateStore.fromAmount, $swapStateStore.tokenOut.decimals)\n\t\t\t\t: 0n\n\t\t});\n\n\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) {\n\t\t\tif ($swapStateStore.fromAmount) await handleSellAmountChange($swapStateStore.fromAmount);\n\t\t\telse if ($swapStateStore.toAmount) await handleBuyAmountChange($swapStateStore.toAmount);\n\t\t}\n\t}\n\n\t// Helper functions\n\tfunction updateSwapPriceData(newData: Partial<SwapPriceData>) {\n\t\tswapPriceDataStore.update((currentData) => ({ ...currentData, ...newData }));\n\t}\n\n\tasync function checkBalance(token: SwapToken, amount: string, fundingAddress: string) {\n\t\ttry {\n\t\t\tif (!token || !amount || !fundingAddress) {\n\t\t\t\tinsufficientBalanceStore.set(false);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst balance = await getTokenBalance(token, fundingAddress, provider, tokenService);\n\t\t\tconst formattedBalance = ethersv6.formatUnits(balance, token.decimals);\n\n\t\t\t// Only update if the balance actually changes\n\t\t\tif (formattedBalance !== $swapStateStore.fromBalance) {\n\t\t\t\t$swapStateStore.fromBalance = formattedBalance;\n\t\t\t\ttoken.balance = balance;\n\t\t\t}\n\n\t\t\tconst requiredAmount = parseAmount(amount, token.decimals);\n\t\t\tconst isInsufficient = balance < requiredAmount;\n\t\t\tinsufficientBalanceStore.set(isInsufficient);\n\n\t\t\treturn isInsufficient;\n\t\t} catch (error) {\n\t\t\tinsufficientBalanceStore.set(false);\n\t\t\tlog.error('Error checking balance:', false, error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// async function fetchTokenList(): Promise<SwapToken[]> {\n\t//   try {\n\t//     if ( browserSvelte ) {\n\t//       const response = await fetch(browser_ext.runtime.getURL('/data/uniswap.json')); // 'https://tokens.uniswap.org' );\n\t//       const data = await response.json();\n\t//       data.tokens\n\t//         .filter( ( token: SwapToken ) => token.chainId === (blockchain ? blockchain.getChainId() || 1 : 1))\n\t//         .map( ( token: SwapToken ) => {\n\t//           if ( SUPPORTED_STABLECOINS.includes( token.symbol ) ) {\n\t//             token.isStablecoin = true;\n\t//           }\n\t//           return token;\n\t//         } );\n\t//       return data.tokens.filter((token: SwapToken) => token.chainId === 1); // blockchain.getChainId() || 1);\n\t//     }\n\t//     return [];\n\t//   } catch (error) {\n\t//     log.error('Error fetching token list:', false, error);\n\t//     return [];\n\t//   }\n\t// }\n\n\t// function getPreferredTokens(tokens: SwapToken[]): SwapToken[] {\n\t//   const preferredTokenSymbols = [\"ETH\", \"WETH\", \"USDC\", \"USDT\", \"WBTC\"];\n\t//   return preferredTokenSymbols\n\t//     .map(symbol => tokens.find(token => token.symbol === symbol))\n\t//     .filter((token): token is SwapToken => token !== undefined);\n\t// }\n\n\tasync function validateBalance(): Promise<boolean> {\n\t\ttry {\n\t\t\tif (!$swapStateStore.tokenIn || !$swapStateStore.fromAmount || !fundingAddress) return false;\n\t\t\t// Get token or native balance\n\t\t\tconst balance = await getTokenBalance(\n\t\t\t\t$swapStateStore.tokenIn,\n\t\t\t\tfundingAddress,\n\t\t\t\tprovider,\n\t\t\t\ttokenService\n\t\t\t);\n\t\t\t// Parse amounts\n\t\t\tconst swapAmount = ethersv6.parseUnits(\n\t\t\t\t$swapStateStore.fromAmount,\n\t\t\t\t$swapStateStore.tokenIn.decimals\n\t\t\t);\n\n\t\t\t// If native token (ETH), account for gas\n\t\t\tif ($swapStateStore.tokenIn.isNative) {\n\t\t\t\tconst gasEstimate = $swapPriceDataStore.gasEstimate || 0n;\n\t\t\t\tconst totalRequiredAmount = swapAmount + (BigNumber.toBigInt(gasEstimate) || 0n);\n\t\t\t\tif (balance < totalRequiredAmount) {\n\t\t\t\t\t$swapStateStore.error = `Insufficient ${$swapStateStore.tokenIn.symbol} balance. Need ${ethersv6.formatUnits(totalRequiredAmount, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}, but have ${ethersv6.formatUnits(balance, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}`;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For ERC20 tokens, check swap amount\n\t\t\t\tconst totalRequiredAmount = swapAmount;\n\t\t\t\tif (balance < totalRequiredAmount) {\n\t\t\t\t\t$swapStateStore.error = `Insufficient ${$swapStateStore.tokenIn.symbol} balance. Need ${ethersv6.formatUnits(totalRequiredAmount, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}, but have ${ethersv6.formatUnits(balance, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}`;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlog.error('Error validating balance:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to validate balance. Please try again.';\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Fix for the quote formatting issue\n\tasync function getQuote(isExactIn: boolean = true) {\n\t\tif (\n\t\t\t!$swapStateStore.tokenIn.symbol ||\n\t\t\t!$swapStateStore.tokenOut.symbol ||\n\t\t\t(!$swapStateStore.fromAmount && !$swapStateStore.toAmount)\n\t\t)\n\t\t\treturn;\n\n\t\t// Add token equality check\n\t\tif (areTokensEqual($swapStateStore.tokenIn, $swapStateStore.tokenOut)) {\n\t\t\t$swapStateStore.error = `Cannot swap ${$swapStateStore.tokenIn.symbol} for itself`;\n\t\t\treturn;\n\t\t}\n\n\t\tif (isEthWethSwap) {\n\t\t\tupdateSwapPriceData({ feeAmount: 0n }); // May want to force fees, slippage, etc. to 0 here\n\t\t\treturn; // Do nothing here for now\n\t\t}\n\n\t\ttry {\n\t\t\t$uiStateStore.isLoading = true;\n\t\t\tconst amount = isExactIn\n\t\t\t\t? parseAmount($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals)\n\t\t\t\t: parseAmount($swapStateStore.toAmount, $swapStateStore.tokenOut.decimals);\n\n\t\t\t$swapStateStore.slippageTolerance = $swapPriceDataStore.slippageTolerance || 0.5;\n\t\t\t$swapStateStore.deadline = $swapPriceDataStore.deadline || 10;\n\t\t\t$swapStateStore.poolFee = $swapPriceDataStore.fee || 3000;\n\n\t\t\tconst quote = await swapManager.getQuote(\n\t\t\t\tToken.fromSwapToken($swapStateStore.tokenIn, blockchain, provider),\n\t\t\t\tToken.fromSwapToken($swapStateStore.tokenOut, blockchain, provider),\n\t\t\t\tamount,\n\t\t\t\tfundingAddress,\n\t\t\t\tisExactIn,\n\t\t\t\t$swapStateStore.poolFee\n\t\t\t);\n\n\t\t\t// const { multiHopQuoteAlphaRouter } = await import('../plugins/alphaRouter');\n\n\t\t\t// multiHopQuoteAlphaRouter(\n\t\t\t//   Token.fromSwapToken($swapStateStore.tokenIn, blockchain, provider),\n\t\t\t//   Token.fromSwapToken($swapStateStore.tokenOut, blockchain, provider),\n\t\t\t//   amount,\n\t\t\t//   fundingAddress,\n\t\t\t//   isExactIn );\n\n\t\t\tif (!quote || quote.error) {\n\t\t\t\t$swapStateStore.error =\n\t\t\t\t\t'No valid pool found for this token pair. Try a different combination.';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Reset the slippage and deadline to correct values\n\t\t\tif (quote) {\n\t\t\t\tquote.slippageTolerance = $swapStateStore.slippageTolerance;\n\t\t\t\tquote.deadline = $swapStateStore.deadline;\n\t\t\t}\n\n\t\t\t// Handle the BigNumberish type safely\n\t\t\tif (isExactIn) {\n\t\t\t\tconst amountOut = quote.amountOut ?? 0n;\n\t\t\t\t$swapStateStore.toAmount = ethersv6.formatUnits(\n\t\t\t\t\ttoBigInt(amountOut),\n\t\t\t\t\t$swapStateStore.tokenOut.decimals\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst amountIn = quote.amountIn ?? 0n;\n\t\t\t\t$swapStateStore.fromAmount = ethersv6.formatUnits(\n\t\t\t\t\ttoBigInt(amountIn),\n\t\t\t\t\t$swapStateStore.tokenIn.decimals\n\t\t\t\t);\n\t\t\t}\n\t\t\tupdateSwapPriceData(quote);\n\t\t} catch (error) {\n\t\t\tlog.error('Quote Error:', false, error);\n\t\t\t$swapStateStore.error = `Failed to get quote: ${error}`;\n\t\t\t$swapStateStore.toAmount = '';\n\t\t} finally {\n\t\t\t$uiStateStore.isLoading = false;\n\t\t}\n\t}\n\n\t// May want to make this a little less dependent on the store and move to a more generic function\n\tasync function validateQuote() {\n\t\tlet returnCode: boolean = false;\n\n\t\tif (\n\t\t\t!$swapStateStore.tokenIn ||\n\t\t\t!$swapStateStore.tokenOut ||\n\t\t\t!$swapStateStore.fromAmount ||\n\t\t\t!$swapStateStore.toAmount ||\n\t\t\t!fundingAddress ||\n\t\t\t!swapManager\n\t\t) {\n\t\t\t$swapStateStore.error = 'Invalid swap parameters';\n\t\t\treturn returnCode;\n\t\t}\n\n\t\t// Add token equality check\n\t\tif (areTokensEqual($swapStateStore.tokenIn, $swapStateStore.tokenOut)) {\n\t\t\t$swapStateStore.error = `Cannot swap ${$swapStateStore.tokenIn.symbol} for itself`;\n\t\t\treturn returnCode;\n\t\t}\n\n\t\tif (!$swapPriceDataStore) {\n\t\t\t$swapStateStore.error = 'Failed to get quote';\n\t\t\treturn returnCode;\n\t\t}\n\t\tif ($swapPriceDataStore.error) {\n\t\t\t$swapStateStore.error = $swapPriceDataStore.error;\n\t\t\treturn returnCode;\n\t\t}\n\t\tif ($insufficientBalanceStore) {\n\t\t\t$swapStateStore.error = `Insufficient balance for the given swap. You need ETH for gas fees and enough ${$swapStateStore.tokenIn.symbol} to sell/swap.`;\n\t\t\treturn returnCode;\n\t\t}\n\n\t\tif (!(await validateBalance())) {\n\t\t\t// Redundant check for now\n\t\t\t$swapStateStore.error = 'Insufficient balance for the given swap';\n\t\t\treturn;\n\t\t}\n\n\t\tconst results: ValidationResult = validateSwapQuote($swapPriceDataStore);\n\n\t\tif (results.error) {\n\t\t\t$swapStateStore.error = results.error;\n\t\t\tlog.error('Validation error:', false, $swapStateStore.error);\n\t\t\treturn returnCode;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction areTokensEqual(token1: SwapToken, token2: SwapToken): boolean {\n\t\t// Check for native token variants (ETH/WETH)\n\t\tconst isEthVariant = (symbol: string) => ['ETH', 'WETH'].includes(symbol);\n\n\t\tif (token1.address && token2.address) {\n\t\t\t// Compare addresses if both tokens have them\n\t\t\treturn token1.address.toLowerCase() === token2.address.toLowerCase();\n\t\t} else if (token1.symbol && token2.symbol) {\n\t\t\t// If one is ETH and other is WETH, they're considered different\n\t\t\tif (isEthVariant(token1.symbol) && isEthVariant(token2.symbol)) {\n\t\t\t\treturn token1.symbol === token2.symbol;\n\t\t\t}\n\t\t\t// Compare symbols as fallback\n\t\t\treturn token1.symbol === token2.symbol;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync function swapTokens() {\n\t\ttry {\n\t\t\t// Verify pin for one more security check before calling this function!\n\n\t\t\tif (!pincodeVerified) {\n\t\t\t\tshowVerify = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isEthWethSwap) {\n\t\t\t\tupdateSwapPriceData({ feeAmount: 0n }); // May want to force fees, slippage, etc. to 0 here\n\t\t\t\t// May want to do something with receipts later...\n\t\t\t\tif (\n\t\t\t\t\t$swapStateStore.tokenIn.symbol === 'ETH' &&\n\t\t\t\t\t$swapStateStore.tokenOut.symbol === 'WETH'\n\t\t\t\t) {\n\t\t\t\t\t// Wrap ETH to WETH\n\t\t\t\t\tconst receipt = await swapManager.wrapETH(\n\t\t\t\t\t\tethersv6.parseUnits($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals),\n\t\t\t\t\t\tfundingAddress\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\t$swapStateStore.tokenIn.symbol === 'WETH' &&\n\t\t\t\t\t$swapStateStore.tokenOut.symbol === 'ETH'\n\t\t\t\t) {\n\t\t\t\t\t// Unwrap WETH to ETH\n\t\t\t\t\tconst receipt = await swapManager.unwrapWETH(\n\t\t\t\t\t\tethersv6.parseUnits($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals),\n\t\t\t\t\t\tfundingAddress\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$uiStateStore.isSwapping = true;\n\t\t\t$swapStateStore.error = '';\n\t\t\t// Make sure getQuote has been called successfully\n\t\t\tif (!(await validateQuote())) {\n\t\t\t\t$uiStateStore.isSwapping = false;\n\t\t\t\treturn; // Error message is set in validateQuote\n\t\t\t}\n\n\t\t\tconst tokenInInstance = Token.fromSwapToken(\n\t\t\t\t$swapPriceDataStore.tokenIn,\n\t\t\t\tblockchain,\n\t\t\t\tprovider\n\t\t\t);\n\t\t\tconst tokenOutInstance = Token.fromSwapToken(\n\t\t\t\t$swapPriceDataStore.tokenOut,\n\t\t\t\tblockchain,\n\t\t\t\tprovider\n\t\t\t);\n\n\t\t\tif (!$swapPriceDataStore.tokenIn.isNative) {\n\t\t\t\tconst allowance = await swapManager.checkAllowance(tokenInInstance, fundingAddress);\n\t\t\t\tconst requiredAmount = ethersv6.parseUnits(\n\t\t\t\t\t$swapStateStore.fromAmount,\n\t\t\t\t\ttokenInInstance.decimals\n\t\t\t\t);\n\n\t\t\t\tif (allowance < requiredAmount) {\n\t\t\t\t\tconst receipt = await swapManager.approveToken(\n\t\t\t\t\t\ttokenInInstance,\n\t\t\t\t\t\t$swapStateStore.fromAmount\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { maxFeePerGas, maxPriorityFeePerGas } = await getCurrentGasPrices();\n\n\t\t\tconst params: SwapParams = {\n\t\t\t\ttokenIn: tokenInInstance,\n\t\t\t\ttokenOut: tokenOutInstance,\n\t\t\t\tamount: ethersv6.parseUnits(\n\t\t\t\t\t$swapStateStore.fromAmount,\n\t\t\t\t\t$swapPriceDataStore.tokenIn.decimals\n\t\t\t\t),\n\t\t\t\tfee: $swapPriceDataStore.fee || $swapStateStore.poolFee, // Basis points - not used here for multihops\n\t\t\t\tslippage: $swapPriceDataStore.slippageTolerance || $swapStateStore.slippageTolerance,\n\t\t\t\tdeadline: $swapPriceDataStore.deadline || $swapStateStore.deadline,\n\t\t\t\trecipient: $swapPriceDataStore.fundingAddress,\n\t\t\t\tfeeRecipient: import.meta.env.VITE_YAKKL_FEE_RECIPIENT || 'aifees.eth', // Fee recipient address\n\t\t\t\tfeeAmount: $swapPriceDataStore.feeAmount || 0n,\n\t\t\t\tgasLimit: toBigInt($swapPriceDataStore.gasEstimate) || ETH_BASE_SWAP_GAS_UNITS,\n\t\t\t\tmaxFeePerGas: maxFeePerGas,\n\t\t\t\tmaxPriorityFeePerGas: maxPriorityFeePerGas\n\t\t\t};\n\n\t\t\tconst [receiptTrans, receiptFee] = await swapManager.executeFullSwap(params); // May want to do something with receipts later...\n\n\t\t\tonSwap(\n\t\t\t\tfundingAddress,\n\t\t\t\t$swapStateStore.tokenIn,\n\t\t\t\t$swapStateStore.tokenOut,\n\t\t\t\tethersv6.parseUnits($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals),\n\t\t\t\tethersv6.parseUnits($swapStateStore.toAmount, $swapStateStore.tokenOut.decimals)\n\t\t\t); // Notify parent component - could add more data here such as fee, feeAmount, etc.\n\n\t\t\t$swapStateStore.error = '';\n\n\t\t\t// Add more details to the notification in the future\n\t\t\tawait sendNotificationMessage(\n\t\t\t\t'Swap completed successfully',\n\t\t\t\t'Your swap has been completed successfully.'\n\t\t\t);\n\n\t\t\treset();\n\t\t\tshow = false;\n\t\t} catch (err: any) {\n\t\t\t$uiStateStore.isSwapping = false;\n\t\t\tlog.error('Error executing swap:', err);\n\t\t\t$swapStateStore.error = `Failed to execute swap: ${err.message}`;\n\t\t}\n\t}\n\n\tasync function getCurrentGasPrices(): Promise<{\n\t\tmaxFeePerGas: bigint;\n\t\tmaxPriorityFeePerGas: bigint;\n\t}> {\n\t\ttry {\n\t\t\t// Use a gas price API or provider method\n\t\t\tconst feeData = await provider.getFeeData();\n\n\t\t\treturn {\n\t\t\t\tmaxFeePerGas: toBigInt(feeData.maxFeePerGas),\n\t\t\t\tmaxPriorityFeePerGas: toBigInt(feeData.maxPriorityFeePerGas)\n\t\t\t};\n\t\t} catch (error) {\n\t\t\t// Fallback to manual rates\n\t\t\treturn {\n\t\t\t\tmaxFeePerGas: ethersv6.parseUnits('30', 'gwei'),\n\t\t\t\tmaxPriorityFeePerGas: ethersv6.parseUnits('1', 'gwei')\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction reset() {\n\t\tshowConfirmation = false;\n\t\tshowError = false;\n\t\terrorValue = '';\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tpincodeVerified = false;\n\t\tshowVerify = false;\n\n\t\t$swapStateStore.tokenIn = initialToken;\n\t\t$swapStateStore.tokenOut = initialToken;\n\t\t$swapStateStore.fromAmount = '';\n\t\t$swapStateStore.toAmount = '';\n\t\t$swapStateStore.fromBalance = '0';\n\t\t$swapStateStore.poolFee = 3000;\n\t\t$swapStateStore.error = '';\n\t\tlastModifiedPanel = 'sell';\n\t\tinsufficientBalanceStore.set(false);\n\t\tswapPriceDataStore.set(initialSwapPriceData);\n\t\t$uiStateStore.resetValues = true;\n\t}\n\n\tfunction handleConfirmSwap() {\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tshowConfirmation = true;\n\t}\n\n\tfunction handleCancelSwap() {\n\t\tshowConfirmation = false;\n\t}\n\n\tfunction handleConfirm() {\n\t\tshowConfirmation = false;\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\thandleSwap();\n\t}\n\n\tfunction handleSwap() {\n\t\tpincodeVerified = false;\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tshowVerify = true;\n\t}\n\n\tfunction handleClose() {\n\t\tshowConfirmation = false;\n\t\tshowError = false;\n\t\terrorValue = '';\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tpincodeVerified = false;\n\t\tshowVerify = false;\n\t}\n\n\t// Pincode verification\n\tfunction handleReject(\n\t\trejection: string = 'You have rejected or Pincode was not validated. No swap transaction was sent.'\n\t) {\n\t\ttry {\n\t\t\tshowConfirmation = false;\n\t\t\tshowVerify = false;\n\t\t\tshowError = false;\n\t\t\tpincodeVerified = false;\n\t\t\tshowWarning = true;\n\t\t\twarningValue = rejection;\n\t\t} catch (e: any) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n\n\tasync function handleVerified(pincode: string) {\n\t\ttry {\n\t\t\tlet profile: Profile | null = await verifyWithPin(pincode, pincodeVerified);\n\t\t\tif (profile === null) {\n\t\t\t\tthrow 'Profile was not found.';\n\t\t\t}\n\n\t\t\tpincodeVerified = true;\n\t\t\tshowVerify = false;\n\n\t\t\tawait swapTokens();\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n\n\t// One more internal check to verify the pincode\n\tasync function verifyWithPin(pincode: string, pincodeVerified: boolean): Promise<Profile | null> {\n\t\ttry {\n\t\t\tconst yakklMiscStore = getMiscStore();\n\t\t\tlet profile: Profile | null = await getProfile();\n\t\t\tif (profile === null) {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'Profile was not found.';\n\t\t\t}\n\n\t\t\tlet profileEncrypted = null;\n\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tprofileEncrypted = deepCopy(profile);\n\t\t\t\tawait decryptData(profile?.data, yakklMiscStore).then((result) => {\n\t\t\t\t\t(profile as Profile).data = result as ProfileData;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ((profile.data as ProfileData).pincode !== pincode && pincodeVerified === false) {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'PINCODE was not verified.';\n\t\t\t}\n\n\t\t\tif (pincode === (profile.data as ProfileData).pincode) {\n\t\t\t\tprofile = null;\n\t\t\t\treturn profileEncrypted;\n\t\t\t} else {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'PINCODE did not match.';\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tlog.error(e);\n\t\t\tpincodeVerified = false;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tfunction handleCloseModal() {\n\t\treset();\n\t\tshow = false;\n\t}\n</script>\n\n<!-- TODO: Maybe - Move these two to a SecurityBaseLayout.svelte and wrap the content in them -->\n<Confirmation\n\tbind:show={showConfirmation}\n\tclassName=\"z-[990]\"\n\tonConfirm={handleConfirm}\n\tonReject={handleCancelSwap}\n/>\n<PincodeVerify\n\tbind:show={showVerify}\n\tclassName=\"text-gray-600 z-[990]\"\n\tonRejected={handleReject}\n\tonVerified={handleVerified}\n/>\n\n<!-- TODO: Maybe - Move these two to layout and use stores -->\n<ErrorNoAction bind:show={showError} className=\"z-[999]\" value={errorValue} handle={handleClose} />\n<Warning bind:show={showWarning} className=\"z-[999]\" value={warningValue} handle={handleClose} />\n\n<Modal bind:show title=\"Swap\" {className} onClose={handleCloseModal}>\n\t<div class=\"p-6 space-y-4\">\n\t\t<!-- Sell Section -->\n\t\t<span>Sell</span>\n\t\t<SellTokenPanel\n\t\t\t{swapPriceDataStore}\n\t\t\tdisabled={false}\n\t\t\tinsufficientBalance={$insufficientBalanceStore}\n\t\t\tbalance={$swapStateStore.fromBalance}\n\t\t\tbind:resetValues={$uiStateStore.resetValues}\n\t\t\tbind:lastModifiedPanel\n\t\t\tonTokenSelect={(token) => handleTokenSelect(token, 'sell')}\n\t\t\tonAmountChange={handleSellAmountChange}\n\t\t/>\n\n\t\t<!-- Switch Button -->\n\t\t<!-- svelte-ignore a11y_consider_explicit_label -->\n\t\t<button\n\t\t\tonclick={switchTokens}\n\t\t\tclass=\"mx-auto block bg-gray-200 p-2 rounded-full transform transition-transform hover:rotate-180\"\n\t\t>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"h-6 w-6 text-gray-600\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</button>\n\n\t\t<!-- Buy Section -->\n\t\t<span>Buy</span>\n\t\t<BuyTokenPanel\n\t\t\t{swapPriceDataStore}\n\t\t\tdisabled={false}\n\t\t\tbind:resetValues={$uiStateStore.resetValues}\n\t\t\tbind:lastModifiedPanel\n\t\t\tonTokenSelect={(token) => handleTokenSelect(token, 'buy')}\n\t\t\tonAmountChange={handleBuyAmountChange}\n\t\t/>\n\n\t\t<!-- Error Message (need to look at wrap blocking)-->\n\t\t{#if $swapStateStore.error && !isEthWethSwap}\n\t\t\t<div class=\"w-full bg-red-50 border border-red-200 rounded-lg p-3\">\n\t\t\t\t<div class=\"flex items-center justify-center\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tclass=\"h-5 w-5 text-red-500 mr-2\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t\t<div class=\"text-red-500 text-center overflow-x-auto max-w-full\">\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\">{$swapStateStore.error}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<div class=\"w-full bg-blue-400 border border-blue-800 rounded-lg p-3\">\n\t\t\t<div class=\"flex items-center justify-center\">\n\t\t\t\t<div class=\"text-blue-700 text-center overflow-x-auto max-w-full\">\n\t\t\t\t\t{#if $swapStateStore.multiHop}\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\">This swap requires multiple hops to complete.</span>\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\">This swap requires a single hop to complete.</span>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Settings -->\n\t\t{#if isEthWethSwap === false}\n\t\t\t<SwapSettings\n\t\t\t\t{swapPriceDataStore}\n\t\t\t\tonSlippageChange={(value) => ($swapStateStore.slippageTolerance = value)}\n\t\t\t\tonDeadlineChange={(value) => ($swapStateStore.deadline = value)}\n\t\t\t\tonPoolFeeChange={(value) => {\n\t\t\t\t\t$swapStateStore.poolFee = value;\n\t\t\t\t\tif (\n\t\t\t\t\t\t($swapStateStore.tokenIn?.isStablecoin || $swapStateStore.tokenOut?.isStablecoin) &&\n\t\t\t\t\t\tswapManagerName.includes('uniswap')\n\t\t\t\t\t) {\n\t\t\t\t\t\t$swapStateStore.poolFee = 500;\n\t\t\t\t\t}\n\t\t\t\t\tupdateSwapPriceData({ fee: $swapStateStore.poolFee });\n\t\t\t\t}}\n\t\t\t/>\n\t\t{:else}\n\t\t\t<div class=\"w-full bg-blue-400 border border-blue-800 rounded-lg p-3\">\n\t\t\t\t<div class=\"flex items-center justify-center\">\n\t\t\t\t\t<div class=\"text-blue-700 text-center overflow-x-auto max-w-full\">\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\"\n\t\t\t\t\t\t\t>ETH-WETH swap is a simple wrap so no additional information needed.</span\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Summary -->\n\t\t<SwapSummary {swapPriceDataStore} disabled={isEthWethSwap} />\n\n\t\t<!-- Reset Button -->\n\t\t<button\n\t\t\tonclick={reset}\n\t\t\tclass=\"w-full px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center\"\n\t\t>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"h-5 w-5 mr-2\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t\tReset Swap\n\t\t</button>\n\n\t\t<!-- Swap Button -->\n\t\t<button\n\t\t\tonclick={handleConfirmSwap}\n\t\t\tclass=\"w-full px-4 py-3 text-lg font-medium text-white bg-blue-600 rounded-lg shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n\t\t\tdisabled={!$swapStateStore.tokenIn ||\n\t\t\t\t!$swapStateStore.tokenOut ||\n\t\t\t\t!$swapStateStore.fromAmount ||\n\t\t\t\t!$swapStateStore.toAmount}\n\t\t>\n\t\t\t{#if !isEthWethSwap}\n\t\t\t\t{$uiStateStore.isLoading ? 'Loading...' : $uiStateStore.isSwapping ? 'Swapping...' : 'Swap'}\n\t\t\t{:else}\n\t\t\t\t{$uiStateStore.isLoading\n\t\t\t\t\t? 'Loading...'\n\t\t\t\t\t: $swapStateStore.tokenIn.symbol === 'WETH'\n\t\t\t\t\t\t? 'Unwrap'\n\t\t\t\t\t\t: 'Wrap'}\n\t\t\t{/if}\n\t\t</button>\n\t\t<!-- Cancel Button -->\n\t\t<button\n\t\t\tonclick={handleCloseModal}\n\t\t\tclass=\"w-full px-4 py-3 text-lg font-medium text-white bg-red-500 rounded-lg shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400\"\n\t\t>\n\t\t\tCancel\n\t\t</button>\n\t</div>\n</Modal>\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QRCode from 'easyqrcodejs';\n\n\tlet { qrText } = $props();\n\texport const width = 220;\n\texport const height = 220;\n\t// export const radius = 1;\n\tlet node: HTMLDivElement = $state();\n\n\tonMount(() => {\n\t\tconst options = {\n\t\t\ttext: qrText,\n\t\t\t// ... other options\n\t\t\twidth: 220,\n\t\t\theight: 220,\n\t\t\tquietZone: 20,\n\t\t\tlogo: '/images/logoBullFav48x48.png',\n\t\t\tlogoBackgroundTransparent: true\n\t\t};\n\t\tnew QRCode(node, options);\n\t});\n</script>\n\n<div class=\"flex mx-auto justify-center w-full h-full\" bind:this={node}></div>\n\n<style>\n\t/* make QR-wrapper squared */\n\t/* div {\n     width: 100%;\n     position: relative;\n     padding: 50%;\n     z-index: 1;\n   } */\n\n\t/* fit QR to wrapper */\n\tdiv :global(canvas) {\n\t\tborder-radius: 1rem;\n\t}\n</style>\n","<!-- Receive.svelte -->\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QR from './QR.svelte';\n\timport { YAKKL_ZERO_ADDRESS } from '$lib/common/constants';\n\timport { yakklCurrentlySelectedStore } from '$lib/common/stores';\n\timport Modal from './Modal.svelte';\n\timport Copy from './Copy.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\taddress?: string;\n\t\ttitle?: string;\n\t}\n\n\tlet { show = $bindable(false), address = $bindable(''), title = 'Receive' }: Props = $props();\n\n\tonMount(() => {\n\t\tif (\n\t\t\t$yakklCurrentlySelectedStore &&\n\t\t\t$yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS\n\t\t) {\n\t\t\taddress = $yakklCurrentlySelectedStore.shortcuts.address;\n\t\t}\n\t});\n\n\t// function copyAddress() {\n\t//   navigator.clipboard.writeText(address);\n\t// }\n</script>\n\n<Modal bind:show {title}>\n\t<div class=\"p-6\">\n\t\t{#if $yakklCurrentlySelectedStore && $yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS}\n\t\t\t<!-- Modern card layout with QR code -->\n\t\t\t<div class=\"bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-6 mb-6 text-center\">\n\t\t\t\t<div class=\"mb-6\">\n\t\t\t\t\t<QR qrText={address} />\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-800 mb-2\">Your Wallet Address</h3>\n\t\t\t\t<p class=\"text-sm text-gray-600 mb-4\">Share this address to receive payments</p>\n\t\t\t</div>\n\n\t\t\t<!-- Address display with copy button on same line -->\n\t\t\t<div class=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n\t\t\t\t<div class=\"flex items-center justify-between p-4\">\n\t\t\t\t\t<div class=\"flex-1 min-w-0 mr-3\">\n\t\t\t\t\t\t<div class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-1\">\n\t\t\t\t\t\t\tEthereum Address\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p class=\"text-sm font-mono text-gray-900 truncate\" title={address} id=\"eth-address\">\n\t\t\t\t\t\t\t{address}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<Copy target={{ value: address }} className=\"p-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Info card -->\n\t\t\t<div class=\"mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<svg class=\"w-5 h-5 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"ml-3\">\n\t\t\t\t\t\t<p class=\"text-sm text-blue-800\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Scan the QR code</span> with your mobile wallet or \n\t\t\t\t\t\t\t<span class=\"font-medium\">copy the address</span> to receive payments\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<!-- Empty state -->\n\t\t\t<div class=\"text-center py-12\">\n\t\t\t\t<div class=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n\t\t\t\t\t<svg class=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-700 mb-2\">No Portfolio Accounts</h3>\n\t\t\t\t<p class=\"text-gray-500\">Create at least one Portfolio account to receive payments</p>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</Modal>\n"],"file":"app/immutable/chunks/Dlv-TT2p.js"}