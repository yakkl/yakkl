{"version":3,"mappings":"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","names":["count","$.prop","$$props","text","lessText","expanded","className","onclick","this","$$args","MoreLess","$.template_effect","$.set_text","text_1","$$render","consequent","alternate","_TransactionService","BaseService","constructor","super","getInstance","instance","sendTransaction","params","account","get","currentAccount","chain","currentChain","success","error","hasError","message","txParams","from","address","to","value","tokenAddress","ethers.parseEther","toString","chainId","transferData","encodeTokenTransfer","data","gasPrice","gasLimit","gas","response","sendMessage","method","handleError","getTransactionHistory","limit","transactions","map","tx","hash","timestamp","Date","now","status","mapTxStatus","type","determineTxType","estimateGas","getGasPrice","amount","transferFn","transferSelector","ethers.id","slice","encodedParams","ethers.AbiCoder","defaultAbiCoder","encode","ethers.parseUnits","userAddress","_a","toLowerCase","_b","user","__publicField","TransactionService","createTransactionStore","txService","subscribe","set","update","writable","pendingTx","loading","isLoading","async","loadTransactions","state","setTimeout","Error","updateGasPrice","clearError","reset","transactionStore","recentTransactions","derived","$store","isLoadingTx","txError","maxRows","$.tag","$.derived","$recentTransactions","$isLoadingTx","$currentAccount","$.state","visible","$.get","hidden","formatAmount","num","parseFloat","toExponential","toFixed","shortAddress","formatTime","diff","minutes","Math","floor","hours","days","getTransactionDirection","$.strict_equals","getStatusColor","getTransactionIcon","Array","$.index","$$anchor","_","each","ul","direction","isOutgoing","$1","consequent_3","alternate_3","consequent_2","alternate_2","$.set_attribute","span","charAt","toUpperCase","length","$.set","consequent_4","consequent_1","alternate_1","handleSubmit","validationError","mode","submitSend","submitSwap","on_keydown","e","key","closeModal","stopPropagation","on_click_1","__1","selectedToken","qty","show","onClose","onSend","tokens","icon","name","recipient","$.proxy","symbol","gasEstimate","estimatingGas","sending","$txError","$.user_effect","validateAddress","ethers.isAddress","validateAmount","amt","isNaN","canUseFeature","isETH","gasInEth","ethers.formatEther","validateInputs","validation","txHash","token","img","startsWith","$.each","select","text_2","bind_select_value","$$value","select_1","text_3","consequent_5","text_7","consequent_6","text_8","template_effect","text_10","consequent_8","alternate_4","consequent_7","text_4","set_class","button_2","bind_value","input","input_1","consequent_9","width","height","node","onMount","options","qrText","quietZone","logo","logoBackgroundTransparent","QRCode","bind_this","div","copyToClipboard","isArray","target","handleMultiCopy","handleSingleCopy","showFeedback","isCopied","timerManager","addTimeout","feedbackDuration","startTimeout","err","size","defaultRedactText","onClick","timeoutIds","Map","UnifiedTimerManager","getValue","copyTarget","id","element","document","getElementById","HTMLInputElement","HTMLTextAreaElement","textContent","log","warn","navigator","clipboard","writeText","timeout","timeoutClipboard","redactText","copyTargets","values","combinedValue","join","forEach","index","timerId","currentValues","delete","stopTimeout","removeTimeout","clear","title","$yakklCurrentlySelectedStore","shortcuts","YAKKL_ZERO_ADDRESS","expression","_BuyService","getBuyQuote","currency","cryptoCurrency","quote","cryptoAmount","rate","fees","total","estimatedTime","provider","validUntil","getMockBuyQuote","executeBuyOrder","paymentMethodId","order","orderId","paymentMethod","createdAt","getPaymentMethods","addPaymentMethod","details","getBuyLimits","min","max","daily","monthly","getBuyHistory","getSupportedCurrencies","getSupportedCryptoCurrencies","rates","ETH","BTC","USDC","USDT","DAI","networkFee","serviceFee","totalFees","network","service","BuyService","getQuote","buyService","step","executePurchase","selectedPaymentMethod","uiStore","showSuccess","__2","on_click_2","__3","goToStep","supportedCurrencies","supportedCryptoCurrencies","paymentMethods","limits","canBuy","loadInitialData","currenciesRes","cryptosRes","paymentMethodsRes","limitsRes","Promise","all","newStep","formatCurrency","curr","Intl","NumberFormat","style","format","crypto","set_text","text_5","text_6","$2","div_21","last4","set_attribute","text_9","button_4","disabled","text_14","text_15","text_16","consequent_10","consequent_11","consequent_12","consequent_13","needsEllipsis","val","String","formatValue","minimumFractionDigits","maximumFractionDigits","div_4","color","get$1","yakklCombinedTokenStore","_TokenService","getTokens","combinedTokens","preview2Tokens","getDefaultIcon","totalValue","totalQuantity","price","change24h","priceChange24h","decimals","getTokenColor","sort","a","b","getTokenBalance","walletAddress","refreshTokenPrices","iconMap","LINK","UNI","AAVE","COMP","MKR","SUSHI","YFI","PEPE","colorMap","TokenService","createTokenStore","tokenService","lastUpdate","loadTokens","refresh","refreshPrices","tokenStore","totalPortfolioValue","reduce","sum","isLoadingTokens","lastTokenUpdate","performanceData","dayChange","weekChange","monthChange","yearChange","volatility","sharpeRatio","diversificationScore","riskProfile","topPerformers","recommendations","$totalPortfolioValue","$tokens","loadAdvancedAnalytics","calculateRiskProfile","getTopPerformers","generateRecommendations","console","$.log_if_contains_state","change","formatChange","sign","getChangeColor","div_20","performer","div_29","recommendation","createShamirBackup","showSecurityWarning","setupHardwareBackup","createAirGappedBackup","testRecovery","on_click","backupStatus","hasSecureBackup","lastBackupDate","backupMethod","integrityCheck","recoveryOptions","hardwareDevices","loadSecurityStatus","shards","threshold","device","location","backup","formatDate","date","DateTimeFormat","year","month","day","hour","minute","div_15","option","includes","div_25","$.set_class","div_28","div_6","div_12","getSettings","plan","setSettings","settings","enablePreview2","isMigrationNeeded","preview2Enabled","migrationCompleted","handleReceive","showReceiveModal","refreshAllData","showSendModal","showUpgradeModal","on_click_3","__4","on_click_4","__5","showSwapModal","showBuyModal","showMigrationBanner","modalOpen","$isModalOpen","modalStore","openModal","$currentChain","tokenList","portfolioValue","$isLoadingTokens","$lastTokenUpdate","accountStore","__vitePreload","import","then","n","f","__VITE_PRELOAD__","url","chainStore","resolve","token_store","planStore","loadAccounts","loadChains","loadPlan","setGlobalLoading","syncStorageToStore","isLocked","init","isAuthenticated","isPreview2Session","sessionStorage","getItem","referrer","cameFromPreview2","goto","setItem","migrationNeeded","initializeCore","catch","showInfo","showError","handleSend","showTransactionPending","handleSwap","handleBuySell","handleSwapClick","shortAddr","addr","hour12","showUpgradePrompt","feature","requiredPlan","ens","username","isTestnet","onComplete","onCancel"],"ignoreList":[],"sources":["../../../../../../src/routes/preview2/lib/components/MoreLess.svelte","../../../../../../src/routes/preview2/lib/services/transaction.service.ts","../../../../../../src/routes/preview2/lib/stores/transaction.store.ts","../../../../../../src/routes/preview2/lib/components/RecentActivity.svelte","../../../../../../src/routes/preview2/lib/components/SendModal.svelte","../../../../../../src/routes/preview2/lib/components/v1/QR.svelte","../../../../../../src/routes/preview2/lib/components/v1/Copy.svelte","../../../../../../src/routes/preview2/lib/components/Receive.svelte","../../../../../../src/routes/preview2/lib/features/payment/buy/buy.service.ts","../../../../../../src/routes/preview2/lib/components/BuyModal.svelte","../../../../../../src/routes/preview2/lib/components/TokenPortfolio.svelte","../../../../../../src/routes/preview2/lib/services/token.service.ts","../../../../../../src/routes/preview2/lib/stores/token.store.ts","../../../../../../src/routes/preview2/lib/components/pro/AdvancedAnalytics.svelte","../../../../../../src/routes/preview2/lib/components/private/SecureRecovery.svelte","../../../../../../src/routes/preview2/migrate.ts","../../../../../../src/routes/preview2/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  let {\n    count = 1,\n    text = \"more\",\n    lessText = \"less\",\n    expanded = false,\n    className = \"\",\n    onclick = null\n  } = $props();\n</script>\n\n<button\n  class={`flex items-center gap-1 text-xs text-blue-500 dark:text-blue-400 underline cursor-pointer select-none px-2 py-1 rounded hover:bg-blue-100 dark:hover:bg-zinc-700 transition ${className}`}\n  type=\"button\"\n  onclick={onclick}\n>\n  {#if !expanded}\n    <svg class=\"w-4 h-4 mr-1 fill-current text-blue-400 dark:text-blue-300\" viewBox=\"0 0 20 20\">\n      <path d=\"M7 5l5 5-5 5\" />\n    </svg>\n    + {count} {text}\n  {:else}\n    <svg class=\"w-4 h-4 mr-1 fill-current text-blue-400 dark:text-blue-300 transform -rotate-90\" viewBox=\"0 0 20 20\">\n      <path d=\"M7 5l5 5-5 5\" />\n    </svg>\n    {lessText}\n  {/if}\n</button>\n","import { BaseService } from './base.service';\nimport type { Preview2Transaction, ServiceResponse } from '../types';\nimport { ethers } from 'ethers';\nimport { get } from 'svelte/store';\nimport { currentAccount } from '../stores/account.store';\nimport { currentChain } from '../stores/chain.store';\n\ninterface SendTransactionParams {\n  to: string;\n  value: string;\n  tokenAddress?: string;\n  gasPrice?: string;\n  gasLimit?: string;\n}\n\nexport class TransactionService extends BaseService {\n  private static instance: TransactionService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): TransactionService {\n    if (!TransactionService.instance) {\n      TransactionService.instance = new TransactionService();\n    }\n    return TransactionService.instance;\n  }\n\n  async sendTransaction(params: SendTransactionParams): Promise<ServiceResponse<string>> {\n    try {\n      const account = get(currentAccount);\n      const chain = get(currentChain);\n      \n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      // Build transaction\n      const txParams: any = {\n        from: account.address,\n        to: params.to,\n        value: params.tokenAddress ? '0x0' : ethers.parseEther(params.value).toString(),\n        chainId: chain?.chainId\n      };\n\n      // If token transfer, encode the transfer function\n      if (params.tokenAddress) {\n        const transferData = this.encodeTokenTransfer(params.to, params.value);\n        txParams.to = params.tokenAddress;\n        txParams.data = transferData;\n      }\n\n      // Add gas parameters if provided\n      if (params.gasPrice) {\n        txParams.gasPrice = params.gasPrice;\n      }\n      if (params.gasLimit) {\n        txParams.gas = params.gasLimit;\n      }\n\n      // Send to background\n      const response = await this.sendMessage<string>({\n        method: 'eth_sendTransaction',\n        params: [txParams]\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getTransactionHistory(address: string, limit: number = 10): Promise<ServiceResponse<Preview2Transaction[]>> {\n    try {\n      // Request transaction history from background\n      const response = await this.sendMessage<any[]>({\n        method: 'yakkl_getTransactionHistory',\n        params: [address, limit]\n      });\n\n      if (response.success && response.data) {\n        const transactions: Preview2Transaction[] = response.data.map(tx => ({\n          hash: tx.hash,\n          from: tx.from,\n          to: tx.to,\n          value: tx.value,\n          timestamp: tx.timestamp || Date.now(),\n          status: this.mapTxStatus(tx.status),\n          type: this.determineTxType(tx, address),\n          gas: tx.gas,\n          gasPrice: tx.gasPrice\n        }));\n\n        return { success: true, data: transactions };\n      }\n\n      return response as ServiceResponse<Preview2Transaction[]>;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async estimateGas(params: SendTransactionParams): Promise<ServiceResponse<string>> {\n    try {\n      const account = get(currentAccount);\n      \n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const txParams: any = {\n        from: account.address,\n        to: params.to,\n        value: params.tokenAddress ? '0x0' : ethers.parseEther(params.value).toString()\n      };\n\n      if (params.tokenAddress) {\n        txParams.to = params.tokenAddress;\n        txParams.data = this.encodeTokenTransfer(params.to, params.value);\n      }\n\n      const response = await this.sendMessage<string>({\n        method: 'eth_estimateGas',\n        params: [txParams]\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getGasPrice(): Promise<ServiceResponse<string>> {\n    try {\n      const response = await this.sendMessage<string>({\n        method: 'eth_gasPrice'\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  private encodeTokenTransfer(to: string, amount: string): string {\n    // ERC20 transfer function signature\n    const transferFn = 'transfer(address,uint256)';\n    const transferSelector = ethers.id(transferFn).slice(0, 10);\n    \n    // Encode parameters\n    const encodedParams = ethers.AbiCoder.defaultAbiCoder().encode(\n      ['address', 'uint256'],\n      [to, ethers.parseUnits(amount, 18)] // Assuming 18 decimals, should be dynamic\n    );\n\n    return transferSelector + encodedParams.slice(2);\n  }\n\n  private mapTxStatus(status: any): 'pending' | 'confirmed' | 'failed' {\n    if (status === '0x0' || status === 0) return 'failed';\n    if (status === '0x1' || status === 1) return 'confirmed';\n    return 'pending';\n  }\n\n  private determineTxType(tx: any, userAddress: string): 'send' | 'receive' | 'swap' | 'contract' {\n    const from = tx.from?.toLowerCase();\n    const to = tx.to?.toLowerCase();\n    const user = userAddress.toLowerCase();\n\n    if (from === user && to !== user) return 'send';\n    if (from !== user && to === user) return 'receive';\n    if (tx.data && tx.data !== '0x') return 'contract';\n    return 'send';\n  }\n}","import { writable, derived } from 'svelte/store';\nimport type { Preview2Transaction, LoadingState, ErrorState } from '../types';\nimport { TransactionService } from '../services/transaction.service';\nimport { currentAccount } from './account.store';\nimport { get } from 'svelte/store';\n\ninterface TransactionState {\n  transactions: Preview2Transaction[];\n  pendingTx: string | null;\n  loading: LoadingState;\n  error: ErrorState;\n  gasPrice: string | null;\n}\n\nfunction createTransactionStore() {\n  const txService = TransactionService.getInstance();\n  \n  const { subscribe, set, update } = writable<TransactionState>({\n    transactions: [],\n    pendingTx: null,\n    loading: { isLoading: false },\n    error: { hasError: false },\n    gasPrice: null\n  });\n\n  // Auto-refresh when account changes\n  currentAccount.subscribe(async (account) => {\n    if (account) {\n      await loadTransactions(account.address);\n    }\n  });\n\n  async function loadTransactions(address: string) {\n    update(state => ({\n      ...state,\n      loading: { isLoading: true, message: 'Loading transactions...' }\n    }));\n\n    const response = await txService.getTransactionHistory(address);\n    \n    if (response.success && response.data) {\n      update(state => ({\n        ...state,\n        transactions: response.data!,\n        loading: { isLoading: false },\n        error: { hasError: false }\n      }));\n    } else {\n      update(state => ({\n        ...state,\n        loading: { isLoading: false },\n        error: response.error || { hasError: true, message: 'Failed to load transactions' }\n      }));\n    }\n  }\n\n  return {\n    subscribe,\n    \n    async sendTransaction(to: string, value: string, tokenAddress?: string) {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Sending transaction...' },\n        error: { hasError: false }\n      }));\n\n      const response = await txService.sendTransaction({\n        to,\n        value,\n        tokenAddress\n      });\n      \n      if (response.success && response.data) {\n        update(state => ({\n          ...state,\n          pendingTx: response.data!,\n          loading: { isLoading: false },\n          error: { hasError: false }\n        }));\n        \n        // Refresh transactions after a delay\n        setTimeout(() => {\n          const account = get(currentAccount);\n          if (account) {\n            loadTransactions(account.address);\n          }\n        }, 3000);\n        \n        return response.data;\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Transaction failed' }\n        }));\n        throw new Error(response.error?.message || 'Transaction failed');\n      }\n    },\n\n    async estimateGas(to: string, value: string, tokenAddress?: string) {\n      const response = await txService.estimateGas({\n        to,\n        value,\n        tokenAddress\n      });\n      \n      return response;\n    },\n\n    async updateGasPrice() {\n      const response = await txService.getGasPrice();\n      \n      if (response.success && response.data) {\n        update(state => ({\n          ...state,\n          gasPrice: response.data!\n        }));\n      }\n    },\n\n    clearError() {\n      update(state => ({\n        ...state,\n        error: { hasError: false }\n      }));\n    },\n\n    reset() {\n      set({\n        transactions: [],\n        pendingTx: null,\n        loading: { isLoading: false },\n        error: { hasError: false },\n        gasPrice: null\n      });\n    }\n  };\n}\n\nexport const transactionStore = createTransactionStore();\n\n// Derived stores\nexport const recentTransactions = derived(\n  transactionStore,\n  $store => $store.transactions.slice(0, 5)\n);\n\nexport const pendingTransaction = derived(\n  transactionStore,\n  $store => $store.pendingTx\n);\n\nexport const isLoadingTx = derived(\n  transactionStore,\n  $store => $store.loading.isLoading\n);\n\nexport const txError = derived(\n  transactionStore,\n  $store => $store.error\n);","<script lang=\"ts\">\n  import MoreLess from \"./MoreLess.svelte\";\n  import { recentTransactions, isLoadingTx } from '../stores/transaction.store';\n  import { currentAccount } from '../stores/account.store';\n  import type { Preview2Transaction } from '../types';\n\n  let { className = '', maxRows = 4 } = $props();\n\n  // Reactive values from stores\n  let transactions = $derived($recentTransactions);\n  let loading = $derived($isLoadingTx);\n  let account = $derived($currentAccount);\n\n  let expanded = $state(false);\n  let visible = $derived(expanded ? transactions : transactions.slice(0, maxRows));\n  let hidden = $derived(expanded ? [] : transactions.slice(maxRows));\n\n  function formatAmount(value: string): string {\n    try {\n      const num = parseFloat(value);\n      if (num < 0.0001) {\n        return num.toExponential(2);\n      }\n      return num.toFixed(4);\n    } catch {\n      return value;\n    }\n  }\n\n  function shortAddress(address: string): string {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  }\n\n  function formatTime(timestamp: number): string {\n    const now = Date.now();\n    const diff = now - timestamp;\n    \n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    \n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    return `${days}d ago`;\n  }\n\n  function getTransactionDirection(tx: Preview2Transaction): 'sent' | 'received' {\n    return tx.from.toLowerCase() === account?.address.toLowerCase() ? 'sent' : 'received';\n  }\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'failed':\n        return 'bg-red-200 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'pending':\n      default:\n        return 'bg-yellow-200 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n    }\n  }\n\n  function getTransactionIcon(type: string): string {\n    switch (type) {\n      case 'send':\n        return '↗️';\n      case 'receive':\n        return '↙️';\n      case 'swap':\n        return '🔄';\n      case 'contract':\n        return '📄';\n      default:\n        return '💸';\n    }\n  }\n</script>\n\n<div class={`bg-white/70 dark:bg-zinc-800 rounded-2xl shadow p-4 mt-3 relative z-10 ${className}`}>\n  <div class=\"text-sm font-semibold mb-2 text-zinc-700 dark:text-zinc-200\">Recent Activity</div>\n  \n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(3) as _}\n        <div class=\"flex items-center gap-2 py-2 animate-pulse\">\n          <div class=\"w-8 h-4 bg-zinc-300 dark:bg-zinc-600 rounded\"></div>\n          <div class=\"flex-1 h-3 bg-zinc-300 dark:bg-zinc-600 rounded\"></div>\n          <div class=\"w-16 h-3 bg-zinc-300 dark:bg-zinc-600 rounded\"></div>\n        </div>\n      {/each}\n    </div>\n  {:else if transactions.length === 0}\n    <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n      <p>No recent activity</p>\n      <p class=\"text-sm mt-2\">Your transactions will appear here</p>\n    </div>\n  {:else}\n    <ul class=\"space-y-1 max-h-44 overflow-y-auto\">\n      {#each visible as tx}\n        {@const direction = getTransactionDirection(tx)}\n        {@const isOutgoing = direction === 'sent'}\n        <li class=\"flex items-center gap-2 text-xs border-b border-zinc-100 dark:border-zinc-700 py-2 last:border-b-0\">\n          <!-- Transaction Icon -->\n          <span class=\"text-lg\" title={tx.type}>\n            {getTransactionIcon(tx.type)}\n          </span>\n          \n          <!-- Transaction Details -->\n          <div class=\"flex-1 min-w-0\">\n            {#if tx.type === 'send' || tx.type === 'receive'}\n              <div class=\"flex items-center gap-1\">\n                <span class=\"font-bold {isOutgoing ? 'text-red-500' : 'text-green-500'}\">\n                  {isOutgoing ? '−' : '+'}\n                  {formatAmount(tx.value)} ETH\n                </span>\n              </div>\n              <div class=\"text-gray-400 dark:text-gray-500 truncate\">\n                {isOutgoing ? 'to' : 'from'} {shortAddress(isOutgoing ? tx.to : tx.from)}\n              </div>\n            {:else if tx.type === 'swap'}\n              <div class=\"font-bold text-blue-500\">Swap</div>\n              <div class=\"text-gray-400 dark:text-gray-500 truncate\">\n                Contract interaction\n              </div>\n            {:else}\n              <div class=\"font-bold text-purple-500\">Contract</div>\n              <div class=\"text-gray-400 dark:text-gray-500 truncate\">\n                {shortAddress(tx.to)}\n              </div>\n            {/if}\n          </div>\n          \n          <!-- Status Badge -->\n          <span class=\"px-2 py-0.5 rounded-full text-xs {getStatusColor(tx.status)} whitespace-nowrap\">\n            {tx.status.charAt(0).toUpperCase() + tx.status.slice(1)}\n          </span>\n          \n          <!-- Timestamp -->\n          <span class=\"text-gray-400 dark:text-gray-500 whitespace-nowrap ml-2\">\n            {formatTime(tx.timestamp)}\n          </span>\n        </li>\n      {/each}\n    </ul>\n    \n    {#if hidden.length > 0}\n      <MoreLess\n        count={hidden.length}\n        text=\"more\"\n        lessText=\"less\"\n        expanded={expanded}\n        className=\"mt-2\"\n        onclick={() => expanded = !expanded}\n      />\n    {/if}\n  {/if}\n</div>","<script lang=\"ts\">\n  import { transactionStore, isLoadingTx, txError } from '../stores/transaction.store';\n  import { canUseFeature } from '../stores/plan.store';\n  import { ethers } from 'ethers';\n\n  let {\n    show = $bindable(false),\n    onClose = null,\n    onSend = null,\n    tokens = [],\n    chain = { icon: '/images/eth.svg', name: 'Ethereum' },\n    mode = 'send' // or 'swap'\n  } = $props();\n\n  let recipient = $state('');\n  let amount = $state('');\n  let selectedToken = $state(tokens[0] || { symbol: 'ETH', icon: '/images/eth.svg' });\n  let gasEstimate = $state('');\n  let estimatingGas = $state(false);\n  let validationError = $state('');\n\n  // Reactive values\n  let sending = $derived($isLoadingTx);\n  let error = $derived($txError);\n\n  // Update selected token when tokens change\n  $effect(() => {\n    if (tokens.length > 0 && !selectedToken) {\n      selectedToken = tokens[0];\n    }\n  });\n\n  // Validate address format\n  function validateAddress(address: string): boolean {\n    try {\n      return ethers.isAddress(address);\n    } catch {\n      return false;\n    }\n  }\n\n  // Validate amount\n  function validateAmount(amt: string): boolean {\n    const num = parseFloat(amt);\n    return !isNaN(num) && num > 0;\n  }\n\n  // Estimate gas when inputs change\n  $effect(() => {\n    if (recipient && amount && validateAddress(recipient) && validateAmount(amount)) {\n      estimateGas();\n    }\n  });\n\n  async function estimateGas() {\n    if (!canUseFeature('send_tokens')) return;\n    \n    estimatingGas = true;\n    try {\n      const isETH = selectedToken.symbol === 'ETH';\n      const response = await transactionStore.estimateGas(\n        recipient,\n        amount,\n        isETH ? undefined : selectedToken.address\n      );\n      \n      if (response.success && response.data) {\n        const gasInEth = ethers.formatEther(response.data);\n        gasEstimate = `~${parseFloat(gasInEth).toFixed(6)} ETH`;\n      }\n    } catch (error) {\n      gasEstimate = 'Unable to estimate';\n    } finally {\n      estimatingGas = false;\n    }\n  }\n\n  function validateInputs(): string | null {\n    if (!recipient) return 'Recipient address is required';\n    if (!validateAddress(recipient)) return 'Invalid recipient address';\n    if (!amount) return 'Amount is required';\n    if (!validateAmount(amount)) return 'Invalid amount';\n    if (parseFloat(amount) > selectedToken.qty) return 'Insufficient balance';\n    return null;\n  }\n\n  function closeModal() {\n    recipient = '';\n    amount = '';\n    gasEstimate = '';\n    validationError = '';\n    transactionStore.clearError();\n    if (onClose) onClose();\n  }\n\n  async function submitSend() {\n    // Validate inputs\n    const validation = validateInputs();\n    if (validation) {\n      validationError = validation;\n      return;\n    }\n\n    if (!canUseFeature('send_tokens')) {\n      validationError = 'Send feature requires Pro plan';\n      return;\n    }\n\n    try {\n      const isETH = selectedToken.symbol === 'ETH';\n      const txHash = await transactionStore.sendTransaction(\n        recipient,\n        amount,\n        isETH ? undefined : selectedToken.address\n      );\n      \n      // Call the parent callback if provided\n      if (onSend) {\n        await onSend({ \n          recipient, \n          amount, \n          token: selectedToken,\n          txHash \n        });\n      }\n      \n      closeModal();\n    } catch (error) {\n      validationError = error instanceof Error ? error.message : 'Transaction failed';\n    }\n  }\n\n  async function submitSwap() {\n    // TODO: Implement swap functionality\n    validationError = 'Swap functionality coming soon';\n  }\n\n  function handleSubmit() {\n    validationError = '';\n    if (mode === 'send') {\n      submitSend();\n    } else {\n      submitSwap();\n    }\n  }\n</script>\n\n{#if show}\n  <div class=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm animate-in fade-in\"\n    onclick={closeModal}\n    onkeydown={e => e.key === 'Escape' && closeModal()}\n    role=\"dialog\"\n    aria-modal=\"true\"\n    aria-label=\"Send tokens modal\">\n    <div class=\"relative bg-white dark:bg-zinc-900 rounded-2xl shadow-xl p-6 min-w-[320px] w-full max-w-xs flex flex-col gap-4 animate-in slide-in-from-bottom-10\"\n      onclick={e => e.stopPropagation()}\n      onkeydown={e => e.stopPropagation()}>\n      \n      <!-- Header -->\n      <div class=\"flex items-center justify-between mb-2\">\n        <div class=\"flex items-center gap-2\">\n          {#if chain?.icon}\n            {#if chain.icon.startsWith('/')}\n              <img src={chain.icon} alt={chain.name} class=\"w-6 h-6\" />\n            {:else}\n              <span class=\"text-xl\">{chain.icon}</span>\n            {/if}\n          {/if}\n          <span class=\"font-bold text-lg capitalize\">\n            {mode === 'send' ? 'Send Tokens' : 'Swap Tokens'}\n          </span>\n        </div>\n        <button \n          class=\"text-2xl text-gray-400 hover:text-red-500 transition-colors\" \n          onclick={closeModal}\n          aria-label=\"Close modal\"\n        >\n          ×\n        </button>\n      </div>\n\n      <!-- Token Selection for Swap -->\n      {#if mode === 'swap'}\n        <div>\n          <label for=\"from-token-select\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">From Token</label>\n          <select \n            id=\"from-token-select\"\n            bind:value={selectedToken} \n            class=\"w-full rounded bg-zinc-100 dark:bg-zinc-800 p-2 mb-1 text-zinc-900 dark:text-white\"\n          >\n            {#each tokens as token}\n              <option value={token}>{token.symbol} ({token.qty})</option>\n            {/each}\n          </select>\n        </div>\n      {:else}\n        <!-- Token selection for Send -->\n        <div>\n          <label for=\"send-token-select\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">Token</label>\n          <select \n            id=\"send-token-select\"\n            bind:value={selectedToken} \n            class=\"w-full rounded bg-zinc-100 dark:bg-zinc-800 p-2 mb-1 text-zinc-900 dark:text-white\"\n          >\n            {#each tokens as token}\n              <option value={token}>\n                {token.symbol} (Balance: {token.qty})\n              </option>\n            {/each}\n          </select>\n        </div>\n      {/if}\n\n      <!-- Recipient Address -->\n      <div>\n        <label for=\"recipient-input\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">\n          {mode === 'send' ? 'Recipient Address' : 'To Token'}\n        </label>\n        <input \n          id=\"recipient-input\"\n          type=\"text\" \n          bind:value={recipient} \n          placeholder=\"0x...\" \n          class=\"w-full p-2 bg-zinc-100 dark:bg-zinc-800 rounded text-zinc-900 dark:text-white border {!recipient || validateAddress(recipient) ? 'border-transparent' : 'border-red-400'}\"\n          aria-invalid={recipient && !validateAddress(recipient)}\n          aria-describedby={validationError ? \"validation-error\" : null}\n        />\n      </div>\n\n      <!-- Amount -->\n      <div>\n        <label for=\"amount-input\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">Amount</label>\n        <div class=\"relative\">\n          <input \n            id=\"amount-input\"\n            type=\"number\" \n            min=\"0\" \n            step=\"any\" \n            bind:value={amount} \n            placeholder=\"0.00\" \n            class=\"w-full p-2 bg-zinc-100 dark:bg-zinc-800 rounded text-zinc-900 dark:text-white border {!amount || validateAmount(amount) ? 'border-transparent' : 'border-red-400'}\"\n            aria-invalid={amount && !validateAmount(amount)}\n            aria-describedby={validationError ? \"validation-error\" : null}\n          />\n          <button \n            class=\"absolute right-2 top-2 text-xs text-blue-500 hover:text-blue-600\"\n            onclick={() => amount = selectedToken.qty?.toString() || '0'}\n          >\n            MAX\n          </button>\n        </div>\n      </div>\n\n      <!-- Gas Estimate -->\n      {#if mode === 'send' && gasEstimate}\n        <div class=\"text-xs text-gray-500 dark:text-gray-400\">\n          {#if estimatingGas}\n            <span class=\"animate-pulse\">Estimating gas...</span>\n          {:else}\n            Estimated gas: {gasEstimate}\n          {/if}\n        </div>\n      {/if}\n\n      <!-- Error Display -->\n      {#if validationError}\n        <div id=\"validation-error\" class=\"text-xs text-red-500 bg-red-50 dark:bg-red-900/20 p-2 rounded\" role=\"alert\">\n          {validationError}\n        </div>\n      {/if}\n\n      {#if error.hasError}\n        <div class=\"text-xs text-red-500 bg-red-50 dark:bg-red-900/20 p-2 rounded\" role=\"alert\">\n          {error.message}\n        </div>\n      {/if}\n\n      <!-- Submit Button -->\n      <button \n        class=\"w-full p-3 rounded-xl font-semibold shadow transition-all disabled:opacity-60 disabled:cursor-not-allowed {mode === 'send' ? 'bg-green-600 hover:bg-green-700' : 'bg-purple-600 hover:bg-purple-700'} text-white\"\n        disabled={!recipient || !amount || sending || !canUseFeature(mode === 'send' ? 'send_tokens' : 'swap_tokens')}\n        onclick={handleSubmit}\n      >\n        {#if sending}\n          <div class=\"flex items-center justify-center gap-2\">\n            <div class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n            {mode === 'send' ? 'Sending...' : 'Swapping...'}\n          </div>\n        {:else if !canUseFeature(mode === 'send' ? 'send_tokens' : 'swap_tokens')}\n          Upgrade to Pro\n        {:else}\n          {mode === 'send' ? 'Send' : 'Swap'}\n        {/if}\n      </button>\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QRCode from 'easyqrcodejs';\n\n\tlet { qrText } = $props();\n\texport const width = 220;\n\texport const height = 220;\n\t// export const radius = 1;\n\tlet node: HTMLDivElement = $state();\n\n\tonMount(() => {\n\t\tconst options = {\n\t\t\ttext: qrText,\n\t\t\t// ... other options\n\t\t\twidth: 220,\n\t\t\theight: 220,\n\t\t\tquietZone: 20,\n\t\t\tlogo: '/images/logoBullFav48x48.png',\n\t\t\tlogoBackgroundTransparent: true\n\t\t};\n\t\tnew QRCode(node, options);\n\t});\n</script>\n\n<div class=\"flex mx-auto justify-center w-full h-full\" bind:this={node}></div>\n\n<style>\n\t/* make QR-wrapper squared */\n\t/* div {\n     width: 100%;\n     position: relative;\n     padding: 50%;\n     z-index: 1;\n   } */\n\n\t/* fit QR to wrapper */\n\tdiv :global(canvas) {\n\t\tborder-radius: 1rem;\n\t}\n</style>\n","<!-- Copy.svelte -->\n<script lang=\"ts\">\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { browser_ext } from '$lib/common/environment';\n\timport { timeoutClipboard } from '$lib/utilities';\n\timport { UnifiedTimerManager } from '$lib/managers/UnifiedTimerManager';\n\n\ttype CopyTarget = {\n\t\tid?: string;\n\t\tvalue?: string | number | null | undefined;\n\t\ttimeout?: number;\n\t\tredactText?: string;\n\t};\n\n\ttype CopyConfig = CopyTarget | CopyTarget[];\n\n\tconst {\n\t\ttarget,\n\t\tsize = 20,\n\t\tclassName = '',\n\t\tshowFeedback = true,\n\t\tfeedbackDuration = 2000,\n\t\tdefaultRedactText = '<redacted>',\n\t\tonClick = undefined\n\t} = $props<{\n\t\ttarget: CopyConfig;\n\t\tsize?: number;\n\t\tclassName?: string;\n\t\tshowFeedback?: boolean;\n\t\tfeedbackDuration?: number;\n\t\tdefaultRedactText?: string;\n\t\tonClick?: (copiedValue: string) => void;\n\t}>();\n\n\tlet isCopied = $state(false);\n\tlet timeoutIds: Map<string, string> = new Map(); // Now stores timer IDs instead of timeout numbers\n\tconst timerManager = UnifiedTimerManager.getInstance();\n\n\t// Add reactive tracking for the target value\n\t// $effect(() => {\n\t//   // This ensures we're tracking changes to the target value\n\t//   if (!Array.isArray(target) && target.value !== undefined) {\n\t//     log.debug('Current target value:', target.value);\n\t//   }\n\t// });\n\n\tfunction getValue(copyTarget: CopyTarget): string {\n\t\tif (copyTarget.id) {\n\t\t\tconst element = document.getElementById(copyTarget.id);\n\t\t\tif (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n\t\t\t\treturn element.value;\n\t\t\t} else if (element) {\n\t\t\t\treturn element.textContent || '';\n\t\t\t}\n\t\t\tlog.warn(`Element with id '${copyTarget.id}' not found`);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Improved value handling\n\t\tconst value = copyTarget.value;\n\t\tif (value === null || value === undefined) {\n\t\t\treturn '';\n\t\t}\n\t\treturn value.toString();\n\t}\n\n\t// Handle single copy target\n\tasync function handleSingleCopy(copyTarget: CopyTarget): Promise<void> {\n\t\tconst value = getValue(copyTarget);\n\t\tawait navigator.clipboard.writeText(value);\n\n\t\t// Call onClick handler if provided\n\t\tif (onClick) {\n\t\t\tonClick(value);\n\t\t}\n\n\t\t// Set redaction timeout if specified\n\t\tif (copyTarget.timeout) {\n\t\t\ttimeoutClipboard(copyTarget.timeout, copyTarget.redactText || defaultRedactText);\n\n\t\t\t// Get active tab for script injection\n\t\t\t// try {\n\t\t\t// const [tab] = await browser_ext.tabs.query({ active: true, currentWindow: true });\n\t\t\t// if (tab && tab.id) {\n\t\t\t//   browser_ext.runtime.sendMessage({ type: 'clipboard-timeout', tabId: tab.id, timeout: copyTarget.timeout, redactText: copyTarget.redactText || defaultRedactText });\n\t\t\t// } else {\n\t\t\t//   log.error('Failed to get active tab for clipboard timeout');\n\t\t\t// }\n\t\t\t// } catch (err) {\n\t\t\t//   log.error('Failed to set clipboard timeout:', err);\n\t\t\t// }\n\n\t\t\t// const timeoutId = setTimeout(async () => {\n\t\t\t//   const redactText = copyTarget.redactText || defaultRedactText;\n\t\t\t//   await navigator.clipboard.writeText(redactText);\n\t\t\t//   timeoutIds.delete(copyTarget.id || value);\n\t\t\t// }, copyTarget.timeout) as unknown as number;\n\n\t\t\t// timeoutIds.set(copyTarget.id || value, timeoutId);\n\t\t}\n\t}\n\n\t// Handle multiple copy targets\n\tasync function handleMultiCopy(copyTargets: CopyTarget[]): Promise<void> {\n\t\tconst values = copyTargets.map((target) => getValue(target));\n\t\tconst combinedValue = values.join('\\n');\n\t\tawait navigator.clipboard.writeText(combinedValue);\n\n\t\t// Call onClick handler if provided\n\t\tif (onClick) {\n\t\t\tonClick(combinedValue);\n\t\t}\n\n\t\t// Handle individual timeouts using UnifiedTimerManager\n\t\tcopyTargets.forEach((target, index) => {\n\t\t\tif (target.timeout) {\n\t\t\t\tconst timerId = `copy-timeout-${target.id || index}`;\n\t\t\t\ttimerManager.addTimeout(\n\t\t\t\t\ttimerId,\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tconst currentValues = [...values];\n\t\t\t\t\t\tconst redactText = target.redactText || defaultRedactText;\n\t\t\t\t\t\tcurrentValues[index] = redactText;\n\t\t\t\t\t\tawait navigator.clipboard.writeText(currentValues.join('\\n'));\n\t\t\t\t\t\ttimeoutIds.delete(target.id || values[index]);\n\t\t\t\t\t},\n\t\t\t\t\ttarget.timeout\n\t\t\t\t);\n\t\t\t\ttimerManager.startTimeout(timerId);\n\n\t\t\t\ttimeoutIds.set(target.id || values[index], timerId);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync function copyToClipboard() {\n\t\ttry {\n\t\t\tif (Array.isArray(target)) {\n\t\t\t\tawait handleMultiCopy(target);\n\t\t\t} else {\n\t\t\t\tawait handleSingleCopy(target);\n\t\t\t}\n\n\t\t\tif (showFeedback) {\n\t\t\t\tisCopied = true;\n\t\t\t\ttimerManager.addTimeout(\n\t\t\t\t\t'copy-feedback',\n\t\t\t\t\t() => {\n\t\t\t\t\t\tisCopied = false;\n\t\t\t\t\t},\n\t\t\t\t\tfeedbackDuration\n\t\t\t\t);\n\t\t\t\ttimerManager.startTimeout('copy-feedback');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// log.error('Failed to copy:', err);\n\t\t\tisCopied = false;\n\t\t}\n\t}\n\n\t// Cleanup timeouts\n\t$effect(() => {\n\t\treturn () => {\n\t\t\ttimeoutIds.forEach((timerId) => {\n\t\t\t\ttimerManager.stopTimeout(timerId);\n\t\t\t\ttimerManager.removeTimeout(timerId);\n\t\t\t});\n\t\t\ttimeoutIds.clear();\n\t\t};\n\t});\n</script>\n\n<button\n\ttype=\"button\"\n\tonclick={copyToClipboard}\n\tclass=\"\n    inline-flex\n    items-center\n    justify-center\n    transition-all\n    duration-200\n    ease-in-out\n    rounded-md\n    focus:outline-none\n    focus:ring-2\n    focus:ring-offset-2\n    focus:ring-blue-500\n    {className}\n  \"\n\ttitle=\"Copy to clipboard\"\n>\n\t{#if isCopied}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={size}\n\t\t\theight={size}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstroke-width=\"2\"\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\tclass=\"text-green-500\"\n\t\t\taria-hidden=\"true\"\n\t\t>\n\t\t\t<path d=\"M20 6L9 17l-5-5\" />\n\t\t</svg>\n\t\t<span class=\"sr-only\">Copied!</span>\n\t{:else}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={size}\n\t\t\theight={size}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstroke-width=\"2\"\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\tclass=\"text-gray-500 hover:text-blue-500 transition-colors duration-200\"\n\t\t\taria-hidden=\"true\"\n\t\t>\n\t\t\t<rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\" />\n\t\t\t<path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\" />\n\t\t</svg>\n\t\t<span class=\"sr-only\">Copy to clipboard</span>\n\t{/if}\n</button>\n\n<!-- Example usage: -->\n<!-- Basic usage -->\n<!-- <Copy\n  target={{ value: \"Simple text to copy\" }}\n  className=\"hover:bg-gray-100 p-2\"\n/> -->\n\n<!-- With custom redaction -->\n<!-- <Copy\n  target={{\n    value: sensitiveData,\n    timeout: 30000,\n    redactText: \"Content removed for security\"\n  }}\n  className=\"text-gray-600 hover:text-blue-600\"\n/> -->\n\n<!-- Copy from input with custom styling -->\n<!-- <div class=\"flex items-center space-x-2\">\n  <input\n    id=\"walletAddress\"\n    value={address}\n    readonly\n    class=\"bg-gray-50 border rounded px-3 py-2\"\n  />\n  <Copy\n    target={{ id: \"walletAddress\" }}\n    className=\"p-1 hover:bg-gray-100 rounded-full\"\n    size={16}\n  />\n</div> -->\n\n<!-- Multiple values with different redaction settings -->\n<!-- <Copy\n  target={[\n    {\n      value: \"Public info\",\n    },\n    {\n      value: \"Sensitive info\",\n      timeout: 30000,\n      redactText: \"REDACTED-SENSITIVE\"\n    },\n    {\n      id: \"privateKey\",\n      timeout: 5000,\n      redactText: \"KEY-REMOVED\"\n    }\n  ]}\n  className=\"bg-blue-50 hover:bg-blue-100 p-2 rounded-lg\"\n/> -->\n\n<!-- Complex example with different styles -->\n<!-- <div class=\"space-y-4 p-4 bg-white rounded-lg shadow\">\n  <div class=\"flex items-center justify-between\">\n    <input\n      id=\"wallet\"\n      value={walletAddress}\n      readonly\n      class=\"flex-1 bg-gray-50 rounded border px-3 py-2\"\n    />\n    <Copy\n      target={{ id: \"wallet\" }}\n      className=\"ml-2 p-2 hover:bg-gray-100 rounded-full transition-all\"\n      size={16}\n    />\n  </div>\n\n  <div class=\"flex items-center justify-between\">\n    <input\n      id=\"privateKey\"\n      value={privateKey}\n      type=\"password\"\n      class=\"flex-1 bg-gray-50 rounded border px-3 py-2\"\n    />\n    <Copy\n      target={{\n        id: \"privateKey\",\n        timeout: 5000,\n        redactText: \"PRIVATE-KEY-REMOVED\"\n      }}\n      className=\"ml-2 p-2 hover:bg-gray-100 rounded-full transition-all\"\n      size={16}\n    />\n  </div>\n</div> -->\n","<!-- Receive.svelte -->\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QR from './v1/QR.svelte';\n\timport { YAKKL_ZERO_ADDRESS } from '$lib/common/constants';\n\timport { yakklCurrentlySelectedStore } from '$lib/common/stores';\n\timport Modal from './v1/Modal.svelte';\n\timport Copy from './v1/Copy.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\taddress?: string;\n\t\ttitle?: string;\n\t}\n\n\tlet { show = $bindable(false), address = $bindable(''), title = 'Receive' }: Props = $props();\n\n\tonMount(() => {\n\t\tif (\n\t\t\t$yakklCurrentlySelectedStore &&\n\t\t\t$yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS\n\t\t) {\n\t\t\taddress = $yakklCurrentlySelectedStore.shortcuts.address;\n\t\t}\n\t});\n\n\t// function copyAddress() {\n\t//   navigator.clipboard.writeText(address);\n\t// }\n</script>\n\n<Modal bind:show {title}>\n\t<div class=\"p-6\">\n\t\t{#if $yakklCurrentlySelectedStore && $yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS}\n\t\t\t<!-- Modern card layout with QR code -->\n\t\t\t<div class=\"bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-6 mb-6 text-center\">\n\t\t\t\t<div class=\"mb-6\">\n\t\t\t\t\t<QR qrText={address} />\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-800 mb-2\">Your Wallet Address</h3>\n\t\t\t\t<p class=\"text-sm text-gray-600 mb-4\">Share this address to receive payments</p>\n\t\t\t</div>\n\n\t\t\t<!-- Address display with copy button on same line -->\n\t\t\t<div class=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n\t\t\t\t<div class=\"flex items-center justify-between p-4\">\n\t\t\t\t\t<div class=\"flex-1 min-w-0 mr-3\">\n\t\t\t\t\t\t<div class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-1\">\n\t\t\t\t\t\t\tEthereum Address\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p class=\"text-sm font-mono text-gray-900 truncate\" title={address} id=\"eth-address\">\n\t\t\t\t\t\t\t{address}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<Copy target={{ value: address }} className=\"p-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Info card -->\n\t\t\t<div class=\"mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<svg class=\"w-5 h-5 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"ml-3\">\n\t\t\t\t\t\t<p class=\"text-sm text-blue-800\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Scan the QR code</span> with your mobile wallet or \n\t\t\t\t\t\t\t<span class=\"font-medium\">copy the address</span> to receive payments\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<!-- Empty state -->\n\t\t\t<div class=\"text-center py-12\">\n\t\t\t\t<div class=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n\t\t\t\t\t<svg class=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-700 mb-2\">No Portfolio Accounts</h3>\n\t\t\t\t<p class=\"text-gray-500\">Create at least one Portfolio account to receive payments</p>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</Modal>","import { BaseService } from '../../../services/base.service';\nimport type { ServiceResponse } from '../../../types';\nimport { currentAccount } from '../../../stores/account.store';\nimport { get } from 'svelte/store';\n\ninterface BuyQuote {\n  amount: number;\n  currency: string;\n  cryptoAmount: number;\n  cryptoCurrency: string;\n  rate: number;\n  fees: {\n    network: number;\n    service: number;\n    total: number;\n  };\n  total: number;\n  estimatedTime: string;\n  provider: string;\n  validUntil: number;\n}\n\ninterface BuyOrder {\n  id: string;\n  amount: number;\n  currency: string;\n  cryptoAmount: number;\n  cryptoCurrency: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  paymentMethod: string;\n  provider: string;\n  createdAt: number;\n  completedAt?: number;\n  txHash?: string;\n}\n\ninterface PaymentMethod {\n  id: string;\n  type: 'card' | 'bank' | 'paypal' | 'apple_pay' | 'google_pay';\n  name: string;\n  last4?: string;\n  expiryMonth?: number;\n  expiryYear?: number;\n  isDefault: boolean;\n}\n\ninterface BuyLimits {\n  min: number;\n  max: number;\n  daily: number;\n  monthly: number;\n  currency: string;\n}\n\nexport class BuyService extends BaseService {\n  private static instance: BuyService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): BuyService {\n    if (!BuyService.instance) {\n      BuyService.instance = new BuyService();\n    }\n    return BuyService.instance;\n  }\n\n  async getBuyQuote(\n    amount: number, \n    currency: string = 'USD', \n    cryptoCurrency: string = 'ETH'\n  ): Promise<ServiceResponse<BuyQuote>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<any>({\n        method: 'yakkl_getBuyQuote',\n        params: [{\n          amount,\n          currency,\n          cryptoCurrency,\n          userAddress: account.address\n        }]\n      });\n\n      if (response.success && response.data) {\n        const quote: BuyQuote = {\n          amount,\n          currency,\n          cryptoAmount: response.data.cryptoAmount,\n          cryptoCurrency,\n          rate: response.data.rate,\n          fees: response.data.fees,\n          total: response.data.total,\n          estimatedTime: response.data.estimatedTime,\n          provider: response.data.provider || 'Stripe',\n          validUntil: Date.now() + (10 * 60 * 1000) // 10 minutes\n        };\n\n        return { success: true, data: quote };\n      }\n\n      // Fallback mock quote\n      return this.getMockBuyQuote(amount, currency, cryptoCurrency);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async executeBuyOrder(\n    quote: BuyQuote, \n    paymentMethodId: string\n  ): Promise<ServiceResponse<BuyOrder>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      // Check if quote is still valid\n      if (Date.now() > quote.validUntil) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'Quote expired, please get a new quote' }\n        };\n      }\n\n      const response = await this.sendMessage<any>({\n        method: 'yakkl_executeBuyOrder',\n        params: [{\n          quote,\n          paymentMethodId,\n          userAddress: account.address\n        }]\n      });\n\n      if (response.success && response.data) {\n        const order: BuyOrder = {\n          id: response.data.orderId,\n          amount: quote.amount,\n          currency: quote.currency,\n          cryptoAmount: quote.cryptoAmount,\n          cryptoCurrency: quote.cryptoCurrency,\n          status: 'pending',\n          paymentMethod: paymentMethodId,\n          provider: quote.provider,\n          createdAt: Date.now()\n        };\n\n        return { success: true, data: order };\n      }\n\n      return response as ServiceResponse<BuyOrder>;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getPaymentMethods(): Promise<ServiceResponse<PaymentMethod[]>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<PaymentMethod[]>({\n        method: 'yakkl_getPaymentMethods',\n        params: [account.address]\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Return empty array if no payment methods\n      return { success: true, data: [] };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async addPaymentMethod(\n    type: string, \n    details: any\n  ): Promise<ServiceResponse<PaymentMethod>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<PaymentMethod>({\n        method: 'yakkl_addPaymentMethod',\n        params: [{\n          type,\n          details,\n          userAddress: account.address\n        }]\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getBuyLimits(): Promise<ServiceResponse<BuyLimits>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<BuyLimits>({\n        method: 'yakkl_getBuyLimits',\n        params: [account.address]\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Default limits for basic users\n      return {\n        success: true,\n        data: {\n          min: 10,\n          max: 1000,\n          daily: 1000,\n          monthly: 10000,\n          currency: 'USD'\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getBuyHistory(limit: number = 10): Promise<ServiceResponse<BuyOrder[]>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<BuyOrder[]>({\n        method: 'yakkl_getBuyHistory',\n        params: [account.address, limit]\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      return { success: true, data: [] };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getSupportedCurrencies(): Promise<ServiceResponse<string[]>> {\n    try {\n      const response = await this.sendMessage<string[]>({\n        method: 'yakkl_getSupportedCurrencies'\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Default supported currencies\n      return {\n        success: true,\n        data: ['USD', 'EUR', 'GBP', 'CAD', 'AUD']\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getSupportedCryptoCurrencies(): Promise<ServiceResponse<string[]>> {\n    try {\n      const response = await this.sendMessage<string[]>({\n        method: 'yakkl_getSupportedCryptoCurrencies'\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Default supported crypto currencies\n      return {\n        success: true,\n        data: ['ETH', 'BTC', 'USDC', 'USDT', 'DAI']\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  private async getMockBuyQuote(\n    amount: number, \n    currency: string, \n    cryptoCurrency: string\n  ): Promise<ServiceResponse<BuyQuote>> {\n    // Mock exchange rates\n    const rates: Record<string, number> = {\n      'ETH': 2500,\n      'BTC': 45000,\n      'USDC': 1,\n      'USDT': 1,\n      'DAI': 1\n    };\n\n    const rate = rates[cryptoCurrency] || 2500;\n    const networkFee = 5;\n    const serviceFee = amount * 0.029; // 2.9% service fee\n    const totalFees = networkFee + serviceFee;\n    const total = amount + totalFees;\n    const cryptoAmount = amount / rate;\n\n    const quote: BuyQuote = {\n      amount,\n      currency,\n      cryptoAmount,\n      cryptoCurrency,\n      rate,\n      fees: {\n        network: networkFee,\n        service: serviceFee,\n        total: totalFees\n      },\n      total,\n      estimatedTime: '5-10 minutes',\n      provider: 'Mock Provider',\n      validUntil: Date.now() + (10 * 60 * 1000)\n    };\n\n    return { success: true, data: quote };\n  }\n}","<script lang=\"ts\">\n  import { BuyService } from '../features/payment/buy/buy.service';\n  import { canUseFeature } from '../stores/plan.store';\n  import { currentAccount } from '../stores/account.store';\n  import { uiStore } from '../stores/ui.store';\n\n  let {\n    show = $bindable(false),\n    onClose = null\n  } = $props();\n\n  const buyService = BuyService.getInstance();\n\n  // State\n  let step = $state('amount'); // 'amount' | 'payment' | 'review' | 'processing' | 'success'\n  let amount = $state('100');\n  let currency = $state('USD');\n  let cryptoCurrency = $state('ETH');\n  let selectedPaymentMethod = $state(null);\n  let quote = $state(null);\n  let order = $state(null);\n  let loading = $state(false);\n  let error = $state('');\n\n  // Data\n  let supportedCurrencies = $state(['USD', 'EUR', 'GBP', 'CAD']);\n  let supportedCryptoCurrencies = $state(['ETH', 'BTC', 'USDC', 'USDT']);\n  let paymentMethods = $state([]);\n  let limits = $state({ min: 10, max: 1000, daily: 1000, monthly: 10000, currency: 'USD' });\n\n  // Reactive values\n  let account = $derived($currentAccount);\n  let canBuy = $derived(canUseFeature('buy_crypto_card'));\n\n  // Load initial data\n  $effect(() => {\n    if (show && canBuy) {\n      loadInitialData();\n    }\n  });\n\n  async function loadInitialData() {\n    loading = true;\n    try {\n      const [currenciesRes, cryptosRes, paymentMethodsRes, limitsRes] = await Promise.all([\n        buyService.getSupportedCurrencies(),\n        buyService.getSupportedCryptoCurrencies(),\n        buyService.getPaymentMethods(),\n        buyService.getBuyLimits()\n      ]);\n\n      if (currenciesRes.success && currenciesRes.data) {\n        supportedCurrencies = currenciesRes.data;\n      }\n\n      if (cryptosRes.success && cryptosRes.data) {\n        supportedCryptoCurrencies = cryptosRes.data;\n      }\n\n      if (paymentMethodsRes.success && paymentMethodsRes.data) {\n        paymentMethods = paymentMethodsRes.data;\n      }\n\n      if (limitsRes.success && limitsRes.data) {\n        limits = limitsRes.data;\n      }\n    } catch (err) {\n      error = 'Failed to load buy options';\n    } finally {\n      loading = false;\n    }\n  }\n\n  async function getQuote() {\n    if (!validateAmount()) return;\n\n    loading = true;\n    error = '';\n\n    try {\n      const response = await buyService.getBuyQuote(\n        parseFloat(amount),\n        currency,\n        cryptoCurrency\n      );\n\n      if (response.success && response.data) {\n        quote = response.data;\n        step = 'payment';\n      } else {\n        error = response.error?.message || 'Failed to get quote';\n      }\n    } catch (err) {\n      error = 'Failed to get quote';\n    } finally {\n      loading = false;\n    }\n  }\n\n  async function executePurchase() {\n    if (!quote || !selectedPaymentMethod) return;\n\n    loading = true;\n    error = '';\n\n    try {\n      const response = await buyService.executeBuyOrder(quote, selectedPaymentMethod.id);\n\n      if (response.success && response.data) {\n        order = response.data;\n        step = 'success';\n        \n        // Show success notification\n        uiStore.showSuccess(\n          'Purchase Initiated',\n          `Your order for ${quote.cryptoAmount} ${quote.cryptoCurrency} has been placed.`\n        );\n      } else {\n        error = response.error?.message || 'Purchase failed';\n      }\n    } catch (err) {\n      error = 'Purchase failed';\n    } finally {\n      loading = false;\n    }\n  }\n\n  function validateAmount(): boolean {\n    const amt = parseFloat(amount);\n    if (isNaN(amt) || amt <= 0) {\n      error = 'Please enter a valid amount';\n      return false;\n    }\n    if (amt < limits.min) {\n      error = `Minimum amount is ${limits.min} ${limits.currency}`;\n      return false;\n    }\n    if (amt > limits.max) {\n      error = `Maximum amount is ${limits.max} ${limits.currency}`;\n      return false;\n    }\n    return true;\n  }\n\n  function closeModal() {\n    step = 'amount';\n    amount = '100';\n    selectedPaymentMethod = null;\n    quote = null;\n    order = null;\n    error = '';\n    if (onClose) onClose();\n  }\n\n  function goToStep(newStep: string) {\n    step = newStep;\n    error = '';\n  }\n\n  function formatCurrency(value: number, curr: string = 'USD'): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: curr\n    }).format(value);\n  }\n</script>\n\n{#if show}\n  <div class=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm animate-in fade-in\"\n    onclick={closeModal}\n    onkeydown={e => e.key === 'Escape' && closeModal()}\n    role=\"dialog\"\n    aria-modal=\"true\"\n    aria-label=\"Buy crypto modal\">\n    <div class=\"relative bg-white dark:bg-zinc-900 rounded-2xl shadow-xl p-6 min-w-[380px] w-full max-w-md flex flex-col gap-4 animate-in slide-in-from-bottom-10 max-h-[90vh] overflow-y-auto\"\n      onclick={e => e.stopPropagation()}\n      onkeydown={e => e.stopPropagation()}>\n      \n      <!-- Header -->\n      <div class=\"flex items-center justify-between mb-2\">\n        <div class=\"flex items-center gap-2\">\n          <span class=\"text-xl\">💳</span>\n          <span class=\"font-bold text-lg\">Buy Crypto</span>\n        </div>\n        <button \n          class=\"text-2xl text-gray-400 hover:text-red-500 transition-colors\" \n          onclick={closeModal}\n          aria-label=\"Close modal\"\n        >\n          ×\n        </button>\n      </div>\n\n      {#if !canBuy}\n        <!-- Upgrade Required -->\n        <div class=\"text-center py-8\">\n          <div class=\"text-4xl mb-4\">🔒</div>\n          <h3 class=\"text-lg font-semibold mb-2\">Pro Feature</h3>\n          <p class=\"text-gray-600 dark:text-gray-400 mb-4\">\n            Buying crypto with fiat requires a Pro subscription\n          </p>\n          <button class=\"yakkl-btn-primary\">\n            Upgrade to Pro\n          </button>\n        </div>\n      {:else if !account}\n        <!-- No Account -->\n        <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n          <p>No account selected</p>\n        </div>\n      {:else}\n        <!-- Step 1: Amount -->\n        {#if step === 'amount'}\n          <div class=\"space-y-4\">\n            <!-- Amount Input -->\n            <div>\n              <label for=\"buy-amount-input\" class=\"block text-sm font-medium mb-2\">Amount to Spend</label>\n              <div class=\"flex gap-2\">\n                <input \n                  id=\"buy-amount-input\"\n                  type=\"number\" \n                  bind:value={amount} \n                  placeholder=\"100\" \n                  class=\"flex-1 p-3 bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-900 dark:text-white border {error && !validateAmount() ? 'border-red-400' : 'border-transparent'}\"\n                  aria-invalid={error && !validateAmount()}\n                  aria-describedby=\"amount-limits\"\n                />\n                <select \n                  bind:value={currency}\n                  class=\"px-3 py-3 bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-900 dark:text-white\"\n                  aria-label=\"Select currency\"\n                >\n                  {#each supportedCurrencies as curr}\n                    <option value={curr}>{curr}</option>\n                  {/each}\n                </select>\n              </div>\n              <div id=\"amount-limits\" class=\"text-xs text-gray-500 mt-1\">\n                Limits: {formatCurrency(limits.min)} - {formatCurrency(limits.max)}\n              </div>\n            </div>\n\n            <!-- Crypto Selection -->\n            <div>\n              <label for=\"crypto-select\" class=\"block text-sm font-medium mb-2\">Cryptocurrency</label>\n              <select \n                id=\"crypto-select\"\n                bind:value={cryptoCurrency}\n                class=\"w-full p-3 bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-900 dark:text-white\"\n              >\n                {#each supportedCryptoCurrencies as crypto}\n                  <option value={crypto}>{crypto}</option>\n                {/each}\n              </select>\n            </div>\n\n            <!-- Continue Button -->\n            <button \n              class=\"w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors disabled:opacity-60\"\n              onclick={getQuote}\n              disabled={loading || !validateAmount()}\n            >\n              {#if loading}\n                <div class=\"flex items-center justify-center gap-2\">\n                  <div class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  Getting Quote...\n                </div>\n              {:else}\n                Get Quote\n              {/if}\n            </button>\n          </div>\n        {/if}\n\n        <!-- Step 2: Payment Method -->\n        {#if step === 'payment'}\n          <div class=\"space-y-4\">\n            <!-- Quote Display -->\n            {#if quote}\n              <div class=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4\">\n                <h4 class=\"font-semibold mb-2\">Quote</h4>\n                <div class=\"space-y-1 text-sm\">\n                  <div class=\"flex justify-between\">\n                    <span>Amount:</span>\n                    <span>{formatCurrency(quote.amount, quote.currency)}</span>\n                  </div>\n                  <div class=\"flex justify-between\">\n                    <span>You'll receive:</span>\n                    <span class=\"font-semibold\">{quote.cryptoAmount.toFixed(6)} {quote.cryptoCurrency}</span>\n                  </div>\n                  <div class=\"flex justify-between\">\n                    <span>Rate:</span>\n                    <span>{formatCurrency(quote.rate)} per {quote.cryptoCurrency}</span>\n                  </div>\n                  <div class=\"flex justify-between\">\n                    <span>Fees:</span>\n                    <span>{formatCurrency(quote.fees.total)}</span>\n                  </div>\n                  <hr class=\"my-2\" />\n                  <div class=\"flex justify-between font-semibold\">\n                    <span>Total:</span>\n                    <span>{formatCurrency(quote.total)}</span>\n                  </div>\n                </div>\n              </div>\n            {/if}\n\n            <!-- Payment Methods -->\n            <div>\n              <label class=\"block text-sm font-medium mb-2\">Payment Method</label>\n              {#if paymentMethods.length === 0}\n                <div class=\"text-center py-4 text-gray-500\">\n                  <p class=\"mb-2\">No payment methods found</p>\n                  <button class=\"text-blue-500 hover:text-blue-600 text-sm\">\n                    Add Payment Method\n                  </button>\n                </div>\n              {:else}\n                <div class=\"space-y-2\">\n                  {#each paymentMethods as method}\n                    <button \n                      class=\"w-full p-3 border rounded-lg text-left hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors {selectedPaymentMethod?.id === method.id ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : 'border-gray-200 dark:border-gray-700'}\"\n                      onclick={() => selectedPaymentMethod = method}\n                      aria-pressed={selectedPaymentMethod?.id === method.id}\n                      aria-label=\"Select {method.name} payment method\"\n                    >\n                      <div class=\"flex items-center justify-between\">\n                        <div>\n                          <div class=\"font-medium\">{method.name}</div>\n                          {#if method.last4}\n                            <div class=\"text-sm text-gray-500\">•••• {method.last4}</div>\n                          {/if}\n                        </div>\n                        <div class=\"text-sm text-gray-500\">\n                          {method.type.toUpperCase()}\n                        </div>\n                      </div>\n                    </button>\n                  {/each}\n                </div>\n              {/if}\n            </div>\n\n            <!-- Action Buttons -->\n            <div class=\"flex gap-3\">\n              <button \n                class=\"flex-1 p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                onclick={() => goToStep('amount')}\n              >\n                Back\n              </button>\n              <button \n                class=\"flex-1 p-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold transition-colors disabled:opacity-60\"\n                onclick={executePurchase}\n                disabled={!selectedPaymentMethod || loading}\n              >\n                {#if loading}\n                  Processing...\n                {:else}\n                  Buy Now\n                {/if}\n              </button>\n            </div>\n          </div>\n        {/if}\n\n        <!-- Step 3: Success -->\n        {#if step === 'success'}\n          <div class=\"text-center py-8\">\n            <div class=\"text-6xl mb-4\">✅</div>\n            <h3 class=\"text-xl font-semibold mb-2\">Purchase Successful!</h3>\n            {#if order}\n              <p class=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Your order for {order.cryptoAmount} {order.cryptoCurrency} has been placed.\n              </p>\n              <div class=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-4\">\n                <div class=\"text-sm space-y-1\">\n                  <div><strong>Order ID:</strong> {order.id}</div>\n                  <div><strong>Status:</strong> {order.status}</div>\n                  <div><strong>Estimated Time:</strong> 5-10 minutes</div>\n                </div>\n              </div>\n            {/if}\n            <button \n              class=\"w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold\"\n              onclick={closeModal}\n            >\n              Done\n            </button>\n          </div>\n        {/if}\n\n        <!-- Error Display -->\n        {#if error}\n          <div class=\"text-sm text-red-500 bg-red-50 dark:bg-red-900/20 p-3 rounded-lg\">\n            {error}\n          </div>\n        {/if}\n\n        <!-- Info Footer -->\n        {#if step === 'amount'}\n          <div class=\"text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-3 rounded-lg\">\n            <strong>Secure Purchase:</strong><br />\n            • Powered by Stripe for secure payment processing<br />\n            • Crypto delivered directly to your wallet<br />\n            • Industry-standard encryption and security\n          </div>\n        {/if}\n      {/if}\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n  import SimpleTooltip from \"$lib/components/SimpleTooltip.svelte\";\n  import MoreLess from \"./MoreLess.svelte\";\n\n  let { tokens = [], className = '', maxRows = 4, loading = false } = $props();\n\n  let expanded = $state(false);\n  let visible = $state(tokens.slice(0, maxRows));\n  let hidden = $state(tokens.slice(maxRows));\n\n  $effect(() => {\n    visible = expanded ? tokens : tokens.slice(0, maxRows);\n    hidden = expanded ? [] : tokens.slice(maxRows);\n  });\n\n  // Helper for long values\n  function needsEllipsis(val: number | undefined) {\n    return String(val ?? '').length > 9;\n  }\n  \n  function formatValue(val: number | undefined): string {\n    if (!val) return '0.00';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(val);\n  }\n</script>\n\n<div class={`bg-white/70 dark:bg-zinc-800 p-4 rounded-2xl shadow space-y-2 relative z-10 ${className}`}>\n  <div class=\"text-sm font-semibold mb-2 text-zinc-700 dark:text-zinc-200\">Token Portfolio</div>\n  \n  {#if loading}\n    <div class=\"grid grid-cols-2 gap-3\">\n      {#each Array(4) as _, i}\n        <div class=\"rounded-xl shadow bg-zinc-100 dark:bg-zinc-700 p-3 animate-pulse\">\n          <div class=\"w-8 h-8 mb-1 rounded-full bg-zinc-300 dark:bg-zinc-600 mx-auto\"></div>\n          <div class=\"h-4 bg-zinc-300 dark:bg-zinc-600 rounded mt-2\"></div>\n          <div class=\"h-3 bg-zinc-300 dark:bg-zinc-600 rounded mt-1 w-3/4 mx-auto\"></div>\n          <div class=\"h-3 bg-zinc-300 dark:bg-zinc-600 rounded mt-1 w-1/2 mx-auto\"></div>\n        </div>\n      {/each}\n    </div>\n  {:else if tokens.length === 0}\n    <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n      <p>No tokens found</p>\n      <p class=\"text-sm mt-2\">Add tokens to see them here</p>\n    </div>\n  {:else}\n    <div class=\"grid grid-cols-2 gap-3 overflow-auto\">\n      {#each visible as token}\n        <div class=\"rounded-xl shadow flex flex-col items-center justify-center bg-zinc-100 dark:bg-zinc-700 p-3 transition hover:ring-2 hover:ring-indigo-400 dark:hover:ring-indigo-300 min-w-0\">\n          {#if token.icon?.startsWith('/') || token.icon?.startsWith('http')}\n            <img src={token.icon} alt={token.symbol} class=\"w-8 h-8 mb-1 rounded-full\" />\n          {:else}\n            <div class={`w-8 h-8 mb-1 rounded-full flex items-center justify-center ${token.color || 'bg-gray-400'} text-white font-bold text-lg`}>\n              {token.icon || token.symbol[0]}\n            </div>\n          {/if}\n          <div class=\"font-bold text-base text-center mt-1\">{token.symbol}</div>\n          <SimpleTooltip content={`${token.qty || 0} ${token.symbol}`}>\n            <div class=\"text-xs text-zinc-400 dark:text-zinc-200 truncate max-w-[96px] text-center cursor-help mt-0.5\">\n              {needsEllipsis(token.qty) ? `${token.qty}`.slice(0, 9) + \"…\" : (token.qty || 0)}\n            </div>\n          </SimpleTooltip>\n          <SimpleTooltip content={formatValue(token.value)}>\n            <div class=\"text-sm text-zinc-600 dark:text-zinc-300 truncate max-w-[96px] text-center cursor-help\">\n              {formatValue(token.value)}\n            </div>\n          </SimpleTooltip>\n        </div>\n      {/each}\n    </div>\n    {#if hidden.length}\n      <MoreLess\n        count={hidden.length}\n        text=\"more\"\n        lessText=\"less\"\n        expanded={expanded}\n        className=\"mt-2\"\n        onclick={() => expanded = !expanded}\n      />\n    {/if}\n  {/if}\n</div>\n","import { BaseService } from './base.service';\nimport type { Preview2Token, ServiceResponse } from '../types';\n// Mock token store for Preview 2.0\nconst yakklCombinedTokenStore = {\n  subscribe: () => () => {},\n  get: (): any[] => []\n};\nimport { get } from 'svelte/store';\n\nexport class TokenService extends BaseService {\n  private static instance: TokenService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): TokenService {\n    if (!TokenService.instance) {\n      TokenService.instance = new TokenService();\n    }\n    return TokenService.instance;\n  }\n\n  async getTokens(address?: string): Promise<ServiceResponse<Preview2Token[]>> {\n    try {\n      // Get tokens from store\n      const combinedTokens = yakklCombinedTokenStore.get();\n      \n      if (!combinedTokens || (combinedTokens as any[]).length === 0) {\n        return { success: true, data: [] };\n      }\n\n      // Transform to Preview2Token format\n      const preview2Tokens: Preview2Token[] = (combinedTokens as any[]).map((token: any) => ({\n        symbol: token.symbol,\n        name: token.name,\n        icon: token.logo || this.getDefaultIcon(token.symbol),\n        value: parseFloat(token.totalValue || '0'),\n        qty: parseFloat(token.totalQuantity || '0'),\n        price: parseFloat(token.price || '0'),\n        change24h: token.priceChange24h,\n        address: token.address,\n        decimals: token.decimals,\n        color: this.getTokenColor(token.symbol)\n      }));\n\n      // Sort by value descending\n      preview2Tokens.sort((a, b) => b.value - a.value);\n\n      return { success: true, data: preview2Tokens };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getTokenBalance(tokenAddress: string, walletAddress: string): Promise<ServiceResponse<string>> {\n    try {\n      const response = await this.sendMessage<string>({\n        method: 'eth_call',\n        params: [{\n          to: tokenAddress,\n          data: `0x70a08231000000000000000000000000${walletAddress.slice(2)}` // balanceOf(address)\n        }, 'latest']\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async refreshTokenPrices(): Promise<ServiceResponse<boolean>> {\n    try {\n      // This would typically call an API to get latest prices\n      // For now, we'll just trigger a refresh of the token store\n      const response = await this.sendMessage<boolean>({\n        method: 'yakkl_refreshTokenPrices'\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  private getDefaultIcon(symbol: string): string {\n    // Map common tokens to emojis or default icons\n    const iconMap: Record<string, string> = {\n      'ETH': '/images/eth.svg',\n      'BTC': '₿',\n      'USDT': '💵',\n      'USDC': '💰',\n      'DAI': '🏦',\n      'LINK': '🔗',\n      'UNI': '🦄',\n      'AAVE': '👻',\n      'COMP': '🏛️',\n      'MKR': '🏭',\n      'SUSHI': '🍣',\n      'YFI': '🌾',\n      'PEPE': '🐸'\n    };\n\n    return iconMap[symbol.toUpperCase()] || '🪙';\n  }\n\n  private getTokenColor(symbol: string): string {\n    // Map tokens to colors for visual distinction\n    const colorMap: Record<string, string> = {\n      'ETH': 'bg-blue-400',\n      'BTC': 'bg-orange-400',\n      'USDT': 'bg-green-400',\n      'USDC': 'bg-blue-500',\n      'DAI': 'bg-yellow-400',\n      'LINK': 'bg-indigo-400',\n      'UNI': 'bg-pink-400',\n      'AAVE': 'bg-purple-400',\n      'COMP': 'bg-teal-400',\n      'MKR': 'bg-cyan-400',\n      'SUSHI': 'bg-rose-400',\n      'YFI': 'bg-amber-400',\n      'PEPE': 'bg-green-500'\n    };\n\n    return colorMap[symbol.toUpperCase()] || 'bg-gray-400';\n  }\n}","import { writable, derived } from 'svelte/store';\nimport type { Preview2Token, LoadingState, ErrorState } from '../types';\nimport { TokenService } from '../services/token.service';\nimport { currentAccount } from './account.store';\nimport { get } from 'svelte/store';\n\ninterface TokenState {\n  tokens: Preview2Token[];\n  loading: LoadingState;\n  error: ErrorState;\n  lastUpdate: Date | null;\n}\n\nfunction createTokenStore() {\n  const tokenService = TokenService.getInstance();\n  \n  const { subscribe, set, update } = writable<TokenState>({\n    tokens: [],\n    loading: { isLoading: false },\n    error: { hasError: false },\n    lastUpdate: null\n  });\n\n  // Auto-refresh when account changes\n  currentAccount.subscribe(async (account) => {\n    if (account) {\n      await loadTokens(account.address);\n    }\n  });\n\n  async function loadTokens(address?: string) {\n    update(state => ({\n      ...state,\n      loading: { isLoading: true, message: 'Loading tokens...' }\n    }));\n\n    const response = await tokenService.getTokens(address);\n    \n    if (response.success && response.data) {\n      update(state => ({\n        ...state,\n        tokens: response.data!,\n        loading: { isLoading: false },\n        error: { hasError: false },\n        lastUpdate: new Date()\n      }));\n    } else {\n      update(state => ({\n        ...state,\n        loading: { isLoading: false },\n        error: response.error || { hasError: true, message: 'Failed to load tokens' }\n      }));\n    }\n  }\n\n  return {\n    subscribe,\n    \n    async refresh() {\n      const account = get(currentAccount);\n      if (account) {\n        await loadTokens(account.address);\n      }\n    },\n\n    async refreshPrices() {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Updating prices...' }\n      }));\n\n      const response = await tokenService.refreshTokenPrices();\n      \n      if (response.success) {\n        // Reload tokens with new prices\n        const account = get(currentAccount);\n        if (account) {\n          await loadTokens(account.address);\n        }\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Failed to update prices' }\n        }));\n      }\n    },\n\n    reset() {\n      set({\n        tokens: [],\n        loading: { isLoading: false },\n        error: { hasError: false },\n        lastUpdate: null\n      });\n    }\n  };\n}\n\nexport const tokenStore = createTokenStore();\n\n// Derived stores\nexport const tokens = derived(\n  tokenStore,\n  $store => $store.tokens\n);\n\nexport const totalPortfolioValue = derived(\n  tokenStore,\n  $store => $store.tokens.reduce((sum, token) => sum + token.value, 0)\n);\n\nexport const isLoadingTokens = derived(\n  tokenStore,\n  $store => $store.loading.isLoading\n);\n\nexport const tokensByValue = derived(\n  tokenStore,\n  $store => [...$store.tokens].sort((a, b) => b.value - a.value)\n);\n\nexport const lastTokenUpdate = derived(\n  tokenStore,\n  $store => $store.lastUpdate\n);","<script lang=\"ts\">\n  /**\n   * Advanced Portfolio Analytics - Pro Feature\n   * This component will be moved to yakkl-wallet-pro repo\n   */\n  \n  import { canUseFeature } from '../../utils/features';\n  import { tokens, totalPortfolioValue } from '../../stores/token.store';\n  import { onMount } from 'svelte';\n\n  let { className = '' } = $props();\n\n  // Pro-only analytics data\n  let performanceData = $state({\n    dayChange: 0,\n    weekChange: 0,\n    monthChange: 0,\n    yearChange: 0,\n    volatility: 0,\n    sharpeRatio: 0\n  });\n\n  let diversificationScore = $state(0);\n  let riskProfile = $state('Conservative');\n  let topPerformers = $state([]);\n  let recommendations = $state([]);\n\n  // Reactive portfolio value\n  let portfolioValue = $derived($totalPortfolioValue);\n  let tokenList = $derived($tokens);\n\n  onMount(() => {\n    if (canUseFeature('advanced_analytics')) {\n      loadAdvancedAnalytics();\n    }\n  });\n\n  async function loadAdvancedAnalytics() {\n    try {\n      // Simulate advanced analytics calculations\n      // In production, this would call actual analytics APIs\n      performanceData = {\n        dayChange: 2.4,\n        weekChange: -1.2,\n        monthChange: 8.7,\n        yearChange: 34.2,\n        volatility: 15.8,\n        sharpeRatio: 1.23\n      };\n\n      diversificationScore = 72;\n      riskProfile = calculateRiskProfile();\n      topPerformers = getTopPerformers();\n      recommendations = generateRecommendations();\n    } catch (error) {\n      console.error('Failed to load advanced analytics:', error);\n    }\n  }\n\n  function calculateRiskProfile(): string {\n    // Risk calculation logic (would be more complex in production)\n    if (performanceData.volatility < 10) return 'Conservative';\n    if (performanceData.volatility < 20) return 'Moderate';\n    return 'Aggressive';\n  }\n\n  function getTopPerformers() {\n    // Mock top performers\n    return [\n      { symbol: 'ETH', change: '+12.4%', value: '$1,234' },\n      { symbol: 'BTC', change: '+8.2%', value: '$5,678' },\n      { symbol: 'SOL', change: '+15.1%', value: '$890' }\n    ];\n  }\n\n  function generateRecommendations() {\n    return [\n      'Consider rebalancing your portfolio - ETH allocation is above target',\n      'Low diversification detected - consider adding more asset classes',\n      'Your DeFi exposure could be optimized with yield farming strategies'\n    ];\n  }\n\n  function formatChange(change: number): string {\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(1)}%`;\n  }\n\n  function getChangeColor(change: number): string {\n    return change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';\n  }\n</script>\n\n{#if !canUseFeature('advanced_analytics')}\n  <!-- Upgrade prompt for non-Pro users -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6 text-center\">\n      <div class=\"mb-4\">\n        <svg class=\"w-12 h-12 mx-auto text-indigo-500 dark:text-indigo-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n      </div>\n      <h3 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-2\">Advanced Portfolio Analytics</h3>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        Get detailed performance insights, risk analysis, and personalized recommendations\n      </p>\n      <button class=\"yakkl-btn-primary bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700\">\n        Upgrade to Pro\n      </button>\n    </div>\n  </div>\n{:else}\n  <!-- Pro analytics dashboard -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6\">\n      <div class=\"flex items-center gap-2 mb-6\">\n        <svg class=\"w-6 h-6 text-indigo-600 dark:text-indigo-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <h3 class=\"text-xl font-bold text-zinc-900 dark:text-white\">Advanced Analytics</h3>\n        <span class=\"px-2 py-1 bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-xs rounded-full font-semibold\">PRO</span>\n      </div>\n\n      <!-- Performance Metrics -->\n      <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n        <div class=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-green-700 dark:text-green-300 mb-1\">24h Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.dayChange)}`}>\n            {formatChange(performanceData.dayChange)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-blue-700 dark:text-blue-300 mb-1\">7d Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.weekChange)}`}>\n            {formatChange(performanceData.weekChange)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-purple-700 dark:text-purple-300 mb-1\">30d Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.monthChange)}`}>\n            {formatChange(performanceData.monthChange)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-amber-700 dark:text-amber-300 mb-1\">1y Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.yearChange)}`}>\n            {formatChange(performanceData.yearChange)}\n          </div>\n        </div>\n      </div>\n\n      <!-- Risk Metrics -->\n      <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <div class=\"bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">Risk Profile</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">{riskProfile}</div>\n        </div>\n        \n        <div class=\"bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">Diversification</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">{diversificationScore}/100</div>\n        </div>\n        \n        <div class=\"bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">Sharpe Ratio</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">{performanceData.sharpeRatio}</div>\n        </div>\n      </div>\n\n      <!-- Top Performers -->\n      <div class=\"mb-6\">\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">Top Performers</h4>\n        <div class=\"space-y-2\">\n          {#each topPerformers as performer}\n            <div class=\"flex items-center justify-between p-3 bg-zinc-50 dark:bg-zinc-800/50 rounded-lg\">\n              <div class=\"flex items-center gap-3\">\n                <div class=\"w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                  {performer.symbol.slice(0, 2)}\n                </div>\n                <div>\n                  <div class=\"font-medium text-zinc-900 dark:text-white\">{performer.symbol}</div>\n                  <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{performer.value}</div>\n                </div>\n              </div>\n              <div class=\"text-green-600 dark:text-green-400 font-bold\">{performer.change}</div>\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Recommendations -->\n      <div>\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">AI Recommendations</h4>\n        <div class=\"space-y-3\">\n          {#each recommendations as recommendation}\n            <div class=\"flex items-start gap-3 p-3 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-lg\">\n              <svg class=\"w-5 h-5 text-indigo-600 dark:text-indigo-400 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <p class=\"text-sm text-zinc-700 dark:text-zinc-300\">{recommendation}</p>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n  /**\n   * Secure Recovery System - Private Feature\n   * This component will be moved to yakkl-wallet-private repo\n   * Handles private key backup, recovery, and air-gapped operations\n   */\n  \n  import { canUseFeature } from '../../utils/features';\n  import { onMount } from 'svelte';\n\n  let { className = '' } = $props();\n\n  // Private-only security features\n  let backupStatus = $state({\n    hasSecureBackup: false,\n    lastBackupDate: null,\n    backupMethod: 'none', // 'shamir', 'hardware', 'air_gapped'\n    integrityCheck: false\n  });\n\n  let recoveryOptions = $state([]);\n  let hardwareDevices = $state([]);\n  let showSecurityWarning = $state(false);\n\n  onMount(() => {\n    if (canUseFeature('private_key_backup')) {\n      loadSecurityStatus();\n    }\n  });\n\n  async function loadSecurityStatus() {\n    try {\n      // Simulate loading security status\n      // In production, this would check actual backup systems\n      backupStatus = {\n        hasSecureBackup: true,\n        lastBackupDate: new Date('2024-01-15'),\n        backupMethod: 'shamir',\n        integrityCheck: true\n      };\n\n      recoveryOptions = [\n        { method: 'Shamir Secret Sharing', status: 'active', shards: 5, threshold: 3 },\n        { method: 'Hardware Backup', status: 'pending', device: 'Ledger Nano X' },\n        { method: 'Air-Gapped Storage', status: 'inactive', location: 'Not configured' }\n      ];\n\n      hardwareDevices = [\n        { name: 'Ledger Nano X', status: 'connected', backup: true },\n        { name: 'Trezor Model T', status: 'disconnected', backup: false }\n      ];\n    } catch (error) {\n      console.error('Failed to load security status:', error);\n    }\n  }\n\n  function createShamirBackup() {\n    showSecurityWarning = true;\n    // Would implement Shamir Secret Sharing\n    console.log('Creating Shamir backup...');\n  }\n\n  function setupHardwareBackup() {\n    // Would integrate with hardware wallets\n    console.log('Setting up hardware backup...');\n  }\n\n  function createAirGappedBackup() {\n    // Would create air-gapped backup process\n    console.log('Creating air-gapped backup...');\n  }\n\n  function testRecovery() {\n    // Would test recovery process without exposing keys\n    console.log('Testing recovery process...');\n  }\n\n  function formatDate(date: Date | null): string {\n    if (!date) return 'Never';\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  }\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'active': return 'text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/30';\n      case 'pending': return 'text-amber-600 dark:text-amber-400 bg-amber-100 dark:bg-amber-900/30';\n      case 'inactive': return 'text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/30';\n      default: return 'text-zinc-600 dark:text-zinc-400 bg-zinc-100 dark:bg-zinc-800';\n    }\n  }\n</script>\n\n{#if !canUseFeature('private_key_backup')}\n  <!-- Upgrade prompt for non-Private users -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6 text-center\">\n      <div class=\"mb-4\">\n        <svg class=\"w-12 h-12 mx-auto text-red-500 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n      </div>\n      <h3 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-2\">Secure Recovery System</h3>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        Military-grade private key backup, Shamir secret sharing, and air-gapped recovery\n      </p>\n      <button class=\"yakkl-btn-primary bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700\">\n        Upgrade to Private\n      </button>\n    </div>\n  </div>\n{:else}\n  <!-- Private security dashboard -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6\">\n      <div class=\"flex items-center gap-2 mb-6\">\n        <svg class=\"w-6 h-6 text-red-600 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n        <h3 class=\"text-xl font-bold text-zinc-900 dark:text-white\">Secure Recovery</h3>\n        <span class=\"px-2 py-1 bg-gradient-to-r from-red-500 to-rose-600 text-white text-xs rounded-full font-semibold\">PRIVATE</span>\n      </div>\n\n      <!-- Security Status Overview -->\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n        <div class=\"bg-gradient-to-br from-red-50 to-rose-50 dark:from-red-900/20 dark:to-rose-900/20 p-4 rounded-xl\">\n          <div class=\"flex items-center gap-2 mb-2\">\n            <div class={`w-3 h-3 rounded-full ${backupStatus.hasSecureBackup ? 'bg-green-500' : 'bg-red-500'}`}></div>\n            <div class=\"text-sm font-medium text-red-700 dark:text-red-300\">Backup Status</div>\n          </div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white mb-1\">\n            {backupStatus.hasSecureBackup ? 'Secured' : 'Not Secured'}\n          </div>\n          <div class=\"text-xs text-zinc-500 dark:text-zinc-400\">\n            Last backup: {formatDate(backupStatus.lastBackupDate)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-amber-700 dark:text-amber-300 mb-2\">Backup Method</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white mb-1\">\n            {backupStatus.backupMethod === 'shamir' ? 'Shamir Sharing' : \n             backupStatus.backupMethod === 'hardware' ? 'Hardware' : \n             backupStatus.backupMethod === 'air_gapped' ? 'Air-Gapped' : 'None'}\n          </div>\n          <div class=\"flex items-center gap-1\">\n            <div class={`w-2 h-2 rounded-full ${backupStatus.integrityCheck ? 'bg-green-500' : 'bg-red-500'}`}></div>\n            <div class=\"text-xs text-zinc-500 dark:text-zinc-400\">\n              Integrity {backupStatus.integrityCheck ? 'verified' : 'failed'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Recovery Methods -->\n      <div class=\"mb-6\">\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">Recovery Methods</h4>\n        <div class=\"space-y-3\">\n          {#each recoveryOptions as option}\n            <div class=\"flex items-center justify-between p-4 bg-zinc-50 dark:bg-zinc-800/50 rounded-lg\">\n              <div class=\"flex items-center gap-3\">\n                <div class=\"w-10 h-10 bg-gradient-to-br from-red-500 to-rose-600 rounded-lg flex items-center justify-center text-white\">\n                  {#if option.method.includes('Shamir')}\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                    </svg>\n                  {:else if option.method.includes('Hardware')}\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z\" />\n                    </svg>\n                  {:else}\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 3v2.25m0 13.5V21m9-9h-2.25M4.5 12H3\" />\n                    </svg>\n                  {/if}\n                </div>\n                <div>\n                  <div class=\"font-medium text-zinc-900 dark:text-white\">{option.method}</div>\n                  {#if option.shards}\n                    <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">\n                      {option.shards} shards, {option.threshold} required\n                    </div>\n                  {:else if option.device}\n                    <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{option.device}</div>\n                  {:else if option.location}\n                    <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{option.location}</div>\n                  {/if}\n                </div>\n              </div>\n              <span class={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(option.status)}`}>\n                {option.status}\n              </span>\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Hardware Devices -->\n      <div class=\"mb-6\">\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">Hardware Devices</h4>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          {#each hardwareDevices as device}\n            <div class=\"flex items-center justify-between p-3 bg-zinc-50 dark:bg-zinc-800/50 rounded-lg\">\n              <div class=\"flex items-center gap-3\">\n                <div class={`w-3 h-3 rounded-full ${device.status === 'connected' ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <div>\n                  <div class=\"font-medium text-zinc-900 dark:text-white\">{device.name}</div>\n                  <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{device.status}</div>\n                </div>\n              </div>\n              {#if device.backup}\n                <svg class=\"w-4 h-4 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n                </svg>\n              {/if}\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Action Buttons -->\n      <div class=\"flex flex-wrap gap-3\">\n        <button \n          onclick={createShamirBackup}\n          class=\"yakkl-btn-primary bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-sm\"\n        >\n          Create Shamir Backup\n        </button>\n        \n        <button \n          onclick={setupHardwareBackup}\n          class=\"yakkl-btn-secondary text-sm\"\n        >\n          Setup Hardware Backup\n        </button>\n        \n        <button \n          onclick={createAirGappedBackup}\n          class=\"yakkl-btn-secondary text-sm\"\n        >\n          Air-Gapped Backup\n        </button>\n        \n        <button \n          onclick={testRecovery}\n          class=\"yakkl-btn-secondary text-sm\"\n        >\n          Test Recovery\n        </button>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<!-- Security Warning Modal -->\n{#if showSecurityWarning}\n  <div class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n    <div class=\"bg-white dark:bg-zinc-800 rounded-xl p-6 max-w-md mx-4\">\n      <div class=\"flex items-center gap-3 mb-4\">\n        <svg class=\"w-8 h-8 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.664-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n        </svg>\n        <h3 class=\"text-lg font-bold text-zinc-900 dark:text-white\">Security Warning</h3>\n      </div>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        You are about to create a cryptographic backup of your private keys. Ensure you're in a secure environment and follow all security protocols.\n      </p>\n      <div class=\"flex gap-3\">\n        <button \n          onclick={() => showSecurityWarning = false}\n          class=\"flex-1 yakkl-btn-secondary text-sm\"\n        >\n          Cancel\n        </button>\n        <button \n          onclick={() => { showSecurityWarning = false; /* Proceed with backup */ }}\n          class=\"flex-1 yakkl-btn-primary bg-red-600 hover:bg-red-700 text-sm\"\n        >\n          I Understand\n        </button>\n      </div>\n    </div>\n  </div>\n{/if}","import { MigrationUtils } from './lib/utils/migration';\nimport { accountStore } from './lib/stores/account.store';\nimport { chainStore } from './lib/stores/chain.store';\nimport { tokenStore } from './lib/stores/token.store';\nimport { uiStore } from './lib/stores/ui.store';\nimport { planStore } from './lib/stores/plan.store';\nimport { yakklMiscStore } from '$lib/common/stores';\n// Mock legacy store functions for migration\nconst getSettings = async () => ({ plan: { type: 'basic' } });\nconst setSettings = async (settings: any) => true;\nconst getAccounts = async (): Promise<any[]> => [];\nconst getCurrentChain = async (): Promise<any> => ({ name: 'Ethereum', chainId: 1 });\nconst getAllTokens = async (): Promise<any[]> => [];\nimport { PlanType } from './lib/config/features';\n\n/**\n * Main migration script to move from old system to preview2\n */\n\ninterface MigrationConfig {\n  dryRun?: boolean;\n  verbose?: boolean;\n  backupData?: boolean;\n}\n\nexport class Preview2Migration {\n  private config: MigrationConfig;\n  private migrationLog: string[] = [];\n\n  constructor(config: MigrationConfig = {}) {\n    this.config = {\n      dryRun: false,\n      verbose: false,\n      backupData: true,\n      ...config\n    };\n  }\n\n  /**\n   * Execute the complete migration\n   */\n  async execute(): Promise<{\n    success: boolean;\n    report: any;\n    rollback?: any;\n  }> {\n    this.log('Starting Preview2 migration...');\n\n    try {\n      // Step 1: Create rollback data if needed\n      const rollbackData = this.config.backupData \n        ? await this.createBackup()\n        : null;\n\n      // Step 2: Load legacy data\n      const legacyData = await this.loadLegacyData();\n      this.log(`Loaded legacy data: ${legacyData.accounts.length} accounts, ${legacyData.tokens.length} tokens`);\n\n      // Step 3: Validate legacy data\n      const validation = this.validateLegacyData(legacyData);\n      if (!validation.isValid) {\n        throw new Error(`Legacy data validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      // Step 4: Convert data to new format\n      const convertedData = await this.convertData(legacyData);\n      this.log(`Converted data: ${convertedData.accounts.length} accounts, ${convertedData.tokens.length} tokens`);\n\n      // Step 5: Validate converted data\n      const conversionValidation = MigrationUtils.validateMigration(legacyData, convertedData);\n      if (!conversionValidation.isValid) {\n        throw new Error(`Data conversion validation failed: ${conversionValidation.errors.join(', ')}`);\n      }\n\n      if (conversionValidation.warnings.length > 0) {\n        this.log(`Warnings: ${conversionValidation.warnings.join(', ')}`);\n      }\n\n      // Step 6: Apply migration (unless dry run)\n      if (!this.config.dryRun) {\n        await this.applyMigration(convertedData);\n        this.log('Migration applied successfully');\n      } else {\n        this.log('Dry run completed - no changes applied');\n      }\n\n      // Step 7: Generate report\n      const report = MigrationUtils.createMigrationReport(\n        convertedData.accounts.length,\n        convertedData.tokens.length,\n        convertedData.transactions?.length || 0,\n        []\n      );\n\n      this.log('Migration completed successfully');\n\n      return {\n        success: true,\n        report,\n        rollback: rollbackData\n      };\n\n    } catch (error) {\n      this.log(`Migration failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      \n      const report = MigrationUtils.createMigrationReport(0, 0, 0, [\n        error instanceof Error ? error.message : 'Unknown error'\n      ]);\n\n      return {\n        success: false,\n        report\n      };\n    }\n  }\n\n  /**\n   * Create backup of current data\n   */\n  private async createBackup(): Promise<any> {\n    this.log('Creating backup...');\n\n    const originalData = {\n      accounts: await getAccounts(),\n      settings: await getSettings(),\n      chain: await getCurrentChain(),\n      tokens: await getAllTokens(),\n      timestamp: Date.now()\n    };\n\n    return MigrationUtils.createRollbackData(originalData);\n  }\n\n  /**\n   * Load all legacy data\n   */\n  private async loadLegacyData(): Promise<{\n    accounts: any[];\n    tokens: any[];\n    settings: any;\n    chain: any;\n    transactions?: any[];\n  }> {\n    const [accounts, settings, chain, tokens] = await Promise.all([\n      getAccounts(),\n      getSettings(),\n      getCurrentChain(),\n      getAllTokens()\n    ]);\n\n    return {\n      accounts: accounts || [],\n      tokens: tokens || [],\n      settings: settings || {},\n      chain: chain || null\n    };\n  }\n\n  /**\n   * Validate legacy data before conversion\n   */\n  private validateLegacyData(data: any): {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check for required data\n    if (!data.accounts || data.accounts.length === 0) {\n      warnings.push('No accounts found in legacy data');\n    }\n\n    if (!data.settings) {\n      warnings.push('No settings found in legacy data');\n    }\n\n    // Validate account structure\n    data.accounts?.forEach((account: any, index: number) => {\n      if (!account.ethAddress && !account.address) {\n        errors.push(`Account at index ${index} missing address`);\n      }\n    });\n\n    // Validate token structure\n    data.tokens?.forEach((token: any, index: number) => {\n      if (!token.symbol) {\n        errors.push(`Token at index ${index} missing symbol`);\n      }\n    });\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Convert legacy data to preview2 format\n   */\n  private async convertData(legacyData: any): Promise<{\n    accounts: any[];\n    tokens: any[];\n    settings: any;\n    chains: any[];\n    transactions?: any[];\n  }> {\n    // Convert accounts\n    const accounts = MigrationUtils.convertAccounts(legacyData.accounts);\n\n    // Convert tokens (extend with mock pricing data for conversion)\n    const tokensWithPricing = legacyData.tokens.map((token: any) => ({\n      ...token,\n      totalValue: token.totalValue || (parseFloat(token.balance || '0') * 2500).toString(), // Mock ETH price\n      totalQuantity: token.totalQuantity || token.balance || '0',\n      price: token.price || '2500' // Mock price\n    }));\n    const tokens = MigrationUtils.convertTokens(tokensWithPricing);\n\n    // Convert settings\n    const settings = await MigrationUtils.migrateUserSettings(legacyData.settings);\n\n    // Convert chain data\n    const chains = legacyData.chain ? [MigrationUtils.convertChain(legacyData.chain)] : [];\n\n    return {\n      accounts,\n      tokens,\n      settings,\n      chains\n    };\n  }\n\n  /**\n   * Apply the migration to preview2 stores\n   */\n  private async applyMigration(convertedData: any): Promise<void> {\n    this.log('Applying migration to preview2 stores...');\n\n    try {\n      // Initialize stores with converted data\n      if (convertedData.accounts.length > 0) {\n        // Set the first account as current\n        accountStore.setCurrentAccount(convertedData.accounts[0]);\n        \n        // Load all accounts\n        // Accounts are loaded via loadAccounts() method\n        await accountStore.loadAccounts();\n      }\n\n      // Set up chain data\n      if (convertedData.chains.length > 0) {\n        await chainStore.loadChains();\n        // The chain store will handle setting the current chain\n      }\n\n      // Set up tokens\n      if (convertedData.tokens.length > 0) {\n        // Token data will be loaded via refresh() method\n        await tokenStore.refresh();\n      }\n\n      // Set up plan\n      await planStore.loadPlan();\n      if (convertedData.settings.plan.type !== PlanType.Basic) {\n        await planStore.upgradeTo(convertedData.settings.plan.type);\n      }\n\n      // Set up UI preferences\n      uiStore.setTheme(convertedData.settings.theme);\n\n      // Update settings with preview2 flag\n      await setSettings({\n        ...convertedData.settings,\n        preview2Enabled: true,\n        migrationCompleted: true,\n        migrationDate: new Date().toISOString()\n      });\n\n      this.log('Store initialization completed');\n\n    } catch (error) {\n      throw new Error(`Failed to apply migration: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Rollback migration if something goes wrong\n   */\n  async rollback(rollbackData: any): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    this.log('Starting rollback...');\n\n    try {\n      const result = await MigrationUtils.executeRollback(rollbackData);\n      this.log(result.message);\n      return result;\n    } catch (error) {\n      const message = `Rollback failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      this.log(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  }\n\n  /**\n   * Get migration logs\n   */\n  getLogs(): string[] {\n    return [...this.migrationLog];\n  }\n\n  /**\n   * Clear migration logs\n   */\n  clearLogs(): void {\n    this.migrationLog = [];\n  }\n\n  /**\n   * Internal logging\n   */\n  private log(message: string): void {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] ${message}`;\n    \n    this.migrationLog.push(logMessage);\n    \n    if (this.config.verbose) {\n      console.log(logMessage);\n    }\n  }\n}\n\n/**\n * Quick migration for development/testing\n */\nexport async function quickMigrate(options: MigrationConfig = {}): Promise<void> {\n  const migration = new Preview2Migration({\n    verbose: true,\n    ...options\n  });\n\n  const result = await migration.execute();\n  \n  if (!result.success) {\n    console.error('Migration failed:', result.report);\n    throw new Error('Migration failed');\n  }\n\n  console.log('Migration completed successfully:', result.report);\n}\n\n/**\n * Enable preview2 features without full migration (for development)\n */\nexport async function enablePreview2(): Promise<void> {\n  const settings = await getSettings();\n  await setSettings({\n    ...settings,\n    preview2Enabled: true,\n    devMode: true\n  });\n\n  console.log('Preview2 enabled in development mode');\n}\n\n/**\n * Check if migration is needed\n */\nexport async function isMigrationNeeded(): Promise<boolean> {\n  const settings = await getSettings();\n  return !(settings as any).preview2Enabled && !(settings as any).migrationCompleted;\n}\n\n/**\n * Get migration status\n */\nexport async function getMigrationStatus(): Promise<{\n  isNeeded: boolean;\n  isCompleted: boolean;\n  migrationDate?: string;\n}> {\n  const settings = await getSettings();\n  \n  return {\n    isNeeded: await isMigrationNeeded(),\n    isCompleted: (settings as any).migrationCompleted || false,\n    migrationDate: (settings as any).migrationDate\n  };\n}","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import RecentActivity from \"./lib/components/RecentActivity.svelte\";\n  import SendModal from \"./lib/components/SendModal.svelte\";\n  import Receive from \"./lib/components/Receive.svelte\";\n  import BuyModal from \"./lib/components/BuyModal.svelte\";\n  import TokenPortfolio from \"./lib/components/TokenPortfolio.svelte\";\n  import AIHelpButton from \"./lib/components/AIHelpButton.svelte\";\n  import AdvancedAnalytics from \"./lib/components/pro/AdvancedAnalytics.svelte\";\n  import SecureRecovery from \"./lib/components/private/SecureRecovery.svelte\";\n  import ModDashboard from \"./lib/components/mods/ModDashboard.svelte\";\n  import ModRenderer from \"./lib/components/mods/ModRenderer.svelte\";\n  import Upgrade from \"./lib/components/Upgrade.svelte\";\n  import { modalStore, isModalOpen } from \"./lib/stores/modal.store\";\n  import { initializeCore } from \"./lib/core/integration\";\n  import MigrationBanner from \"./migration-banner.svelte\";\n  import { currentAccount, accounts } from './lib/stores/account.store';\n  import { currentChain } from './lib/stores/chain.store';\n  import { tokens, totalPortfolioValue, isLoadingTokens, lastTokenUpdate } from './lib/stores/token.store';\n  import { canUseFeature } from './lib/utils/features';\n  import { Preview2Migration, isMigrationNeeded, enablePreview2 } from './migrate';\n  import { uiStore } from './lib/stores/ui.store';\n\n  let showSendModal = $state(false);\n  let showSwapModal = $state(false);\n  let showReceiveModal = $state(false);\n  let showBuyModal = $state(false);\n  let showMigrationBanner = $state(false);\n  let showUpgradeModal = $state(false);\n  let modalOpen = $derived($isModalOpen);\n  \n  // Track modal state\n  $effect(() => {\n    if (showUpgradeModal) {\n      modalStore.openModal('upgrade');\n    } else {\n      modalStore.closeModal();\n    }\n  });\n\n  // Reactive values from stores\n  let account = $derived($currentAccount);\n  let chain = $derived($currentChain);\n  let tokenList = $derived($tokens);\n  let portfolioValue = $derived($totalPortfolioValue);\n  let loading = $derived($isLoadingTokens);\n  let lastUpdate = $derived($lastTokenUpdate);\n\n  // Migration functions\n  async function handleMigration() {\n    const migration = new Preview2Migration({\n      dryRun: false,\n      verbose: true,\n      backupData: true\n    });\n\n    const result = await migration.execute();\n\n    if (result.success) {\n      // Refresh stores after successful migration\n      await refreshAllData();\n    } else {\n      throw new Error('Migration failed: ' + result.report.details.errors.join(', '));\n    }\n  }\n\n  async function refreshAllData() {\n    // Refresh all store data after migration\n    const { accountStore } = await import('./lib/stores/account.store');\n    const { chainStore } = await import('./lib/stores/chain.store');\n    const { tokenStore } = await import('./lib/stores/token.store');\n    const { planStore } = await import('./lib/stores/plan.store');\n\n    await Promise.all([\n      accountStore.loadAccounts(),\n      chainStore.loadChains(),\n      tokenStore.refresh(),\n      planStore.loadPlan()\n    ]);\n  }\n\n  onMount(async () => {\n    // Show loading state\n    uiStore.setGlobalLoading(true, 'Initializing Preview 2.0...');\n\n    try {\n      // Check if user is authenticated first\n      const { getSettings, syncStorageToStore } = await import('$lib/common/stores');\n      const settings = await getSettings();\n      \n      console.log('Preview2 auth check:', {\n        settings: !!settings,\n        isLocked: settings?.isLocked,\n        init: settings?.init\n      });\n      \n      // Check if user is authenticated\n      const isAuthenticated = settings && \n                             settings.isLocked === false && \n                             settings.init;\n      \n      console.log('isAuthenticated:', isAuthenticated);\n      \n      // For version 2.0.0, also check if we're already in a preview2 authenticated session\n      const isPreview2Session = sessionStorage.getItem('preview2-authenticated') === 'true';\n      \n      // Special check: if we came from another preview2 page (not login), assume authenticated\n      const referrer = document.referrer;\n      const cameFromPreview2 = referrer && referrer.includes('/preview2/') && !referrer.includes('/preview2/login');\n      \n      if (!isAuthenticated && !isPreview2Session && !cameFromPreview2) {\n        // User is not authenticated, redirect to preview2 login\n        const { goto } = await import('$app/navigation');\n        console.log('Redirecting to login...');\n        return await goto('/preview2/login');\n      }\n      \n      // Mark session as authenticated for preview2\n      if (isAuthenticated || cameFromPreview2) {\n        sessionStorage.setItem('preview2-authenticated', 'true');\n      }\n      \n      console.log('User authenticated, ensuring stores are synchronized...');\n      \n      // Ensure all stores are loaded from persistent storage\n      await syncStorageToStore();\n      console.log('Preview2: Stores synchronized from persistent storage');\n\n      // Check if migration is needed\n      const migrationNeeded = await isMigrationNeeded();\n      showMigrationBanner = migrationNeeded;\n\n      // If no migration needed, just enable preview2 for development\n      if (!migrationNeeded) {\n        await enablePreview2();\n      }\n\n      // Initialize YAKKL Core (non-blocking)\n      initializeCore().catch(err => {\n        console.warn('YAKKL Core initialization failed:', err);\n      });\n\n      // Load initial data\n      await refreshAllData();\n\n      // Welcome message for first-time users\n      if (migrationNeeded) {\n        uiStore.showInfo(\n          'Welcome to Preview 2.0!',\n          'Complete migration to access the new wallet experience'\n        );\n      } else {\n        uiStore.showSuccess(\n          'Preview 2.0 Ready!',\n          'Welcome to the enhanced wallet experience'\n        );\n      }\n\n    } catch (error) {\n      console.error('Preview 2.0 initialization failed:', error);\n      uiStore.showError(\n        'Initialization Failed',\n        'Some features may not work properly. Please refresh the page.'\n      );\n      await enablePreview2(); // Fallback to enable preview2\n    } finally {\n      uiStore.setGlobalLoading(false);\n    }\n  });\n\n  function handleSend(tx: any) {\n    showSendModal = false;\n    console.log('Transaction sent:', tx);\n\n    // Show success feedback\n    uiStore.showTransactionPending(tx.hash);\n\n    // Refresh token data after send\n    setTimeout(() => {\n      refreshAllData();\n    }, 2000);\n  }\n\n  function handleSwap(tx: any) {\n    showSwapModal = false;\n    console.log('Swap requested:', tx);\n\n    // Show swap feedback\n    uiStore.showSuccess(\n      'Swap Initiated!',\n      'Your token swap is being processed'\n    );\n\n    // Refresh data after swap\n    setTimeout(() => {\n      refreshAllData();\n    }, 2000);\n  }\n\n  function handleReceive() {\n    showReceiveModal = true;\n  }\n\n  function handleBuySell() {\n    // Check if user has access to buy feature\n    if (!canUseFeature('buy_crypto')) {\n      uiStore.showInfo(\n        'Pro Feature Required',\n        'Upgrade to Pro to buy crypto with your credit card'\n      );\n      return;\n    }\n    showBuyModal = true;\n  }\n\n  function handleSwapClick() {\n    // Check if user has access to swap feature\n    if (!canUseFeature('swap_tokens')) {\n      uiStore.showInfo(\n        'Pro Feature Required',\n        'Upgrade to Pro to swap tokens with better rates'\n      );\n      return;\n    }\n    showSwapModal = true;\n  }\n\n  function shortAddr(addr: string): string {\n    if (!addr) return '';\n    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  }\n\n  function formatCurrency(value: number): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  }\n\n  function formatTime(date: Date | null): string {\n    if (!date) return 'Never';\n    return new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n  }\n\n  function showUpgradePrompt(feature: string, requiredPlan: string) {\n    const featureNames = {\n      'swap_tokens': 'Token Swapping',\n      'buy_crypto': 'Buy/Sell Crypto',\n      'ai_assistant': 'AI Assistant',\n      'advanced_analytics': 'Advanced Analytics'\n    };\n    \n    const featureName = featureNames[feature as keyof typeof featureNames] || feature;\n    showUpgradeModal = true;\n  }\n</script>\n\n<!-- Migration Banner -->\n<!-- <MigrationBanner\n  bind:showBanner={showMigrationBanner}\n  onMigrate={handleMigration}\n  onDismiss={() => showMigrationBanner = false}\n/> -->\n\n<SendModal\n  show={showSendModal}\n  onClose={() => showSendModal = false}\n  onSend={handleSend}\n  tokens={tokenList}\n  chain={chain}\n  mode=\"send\"\n/>\n\n{#if canUseFeature('swap_tokens')}\n<SendModal\n  show={showSwapModal}\n  onClose={() => showSwapModal = false}\n  onSend={handleSwap}\n  tokens={tokenList}\n  chain={chain}\n  mode=\"swap\"\n/>\n{/if}\n\n<Receive\n  bind:show={showReceiveModal}\n/>\n\n<BuyModal\n  show={showBuyModal}\n  onClose={() => showBuyModal = false}\n/>\n\n<div class=\"max-w-[400px] mx-auto p-5 space-y-5 mt-1 pt-2 relative\">\n  <!-- Faint watermark (bull logo or 'Y') centered -->\n  <div class=\"absolute inset-0 flex items-center justify-center pointer-events-none select-none\">\n    <img src=\"/images/logoBullFav128x128.png\" class=\"w-44 h-44 opacity-10 dark:opacity-15\" alt=\"logo\" />\n  </div>\n\n  <!-- Account header -->\n  <div class=\"flex items-center justify-between relative z-10\">\n    <div>\n      <div class=\"text-xs text-gray-400 dark:text-gray-500\">Account</div>\n      {#if account}\n        <div class=\"text-lg font-semibold tracking-wide\">{account.ens || account.username || ''}</div>\n        <div class=\"text-xs text-gray-500 dark:text-gray-400\">{shortAddr(account.address)}</div>\n      {:else}\n        <div class=\"text-lg font-semibold tracking-wide\">No account</div>\n      {/if}\n      <a href=\"/preview2/accounts\" class=\"text-blue-500 dark:text-blue-400 text-xs hover:underline\">Switch Account</a>\n    </div>\n    <div class=\"flex flex-col items-end\">\n      {#if chain}\n        <div class=\"text-sm bg-green-100 dark:bg-green-900 dark:text-green-200 text-green-800 px-2 py-1 rounded font-bold\">\n          {chain.isTestnet ? 'TESTNET' : 'LIVE'}\n        </div>\n      {/if}\n    </div>\n  </div>\n\n  <!-- Portfolio Summary -->\n  <div class=\"rounded-2xl bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-700 dark:to-purple-900 shadow-md flex flex-col items-center justify-center p-6 relative z-10 group hover:shadow-lg transition-all duration-300\">\n    <span class=\"uppercase text-xs text-gray-500 dark:text-gray-300 tracking-widest mb-1\">Total Portfolio</span>\n    {#if loading}\n      <div class=\"animate-pulse h-8 w-32 bg-white/20 rounded\"></div>\n    {:else}\n      <span class=\"text-3xl font-bold tracking-tight text-zinc-900 dark:text-white group-hover:scale-105 transition-transform duration-200\">{formatCurrency(portfolioValue)}</span>\n    {/if}\n    <div class=\"flex items-center gap-2 mt-2\">\n      <span class=\"text-xs text-gray-400\">Last updated: {formatTime(lastUpdate)}</span>\n      {#if !loading}\n        <!-- svelte-ignore a11y_consider_explicit_label -->\n        <button\n          onclick={() => refreshAllData()}\n          class=\"text-xs text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-200 transition-colors p-1 rounded\"\n          title=\"Refresh portfolio\"\n        >\n          <svg class=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n          </svg>\n        </button>\n      {/if}\n    </div>\n  </div>\n\n  <!-- Action Buttons -->\n  <div class=\"grid grid-cols-4 gap-3 relative z-10\">\n    <button\n      class=\"yakkl-btn-primary yakkl-btn-send text-sm\"\n      onclick={() => showSendModal = true}\n      disabled={!account || !canUseFeature('send_tokens')}\n    >\n      Send\n    </button>\n\n    <button\n      class=\"yakkl-btn-primary bg-blue-600 hover:bg-blue-700 text-sm\"\n      onclick={handleReceive}\n      disabled={!account || !canUseFeature('receive_tokens')}\n    >\n      Receive\n    </button>\n\n    <button\n      class=\"yakkl-btn-primary yakkl-swap text-sm {!canUseFeature('swap_tokens') ? 'opacity-75' : ''}\"\n      onclick={canUseFeature('swap_tokens') ? handleSwapClick : () => showUpgradePrompt('swap_tokens', 'Pro')}\n      disabled={!account}\n      title={!canUseFeature('swap_tokens') ? 'Upgrade to Pro to unlock token swapping' : 'Swap tokens'}\n    >\n      {canUseFeature('swap_tokens') ? 'Swap' : '🔒 Swap'}\n    </button>\n\n    <button\n      class=\"yakkl-btn-primary yakkl-btn-buy text-sm {!canUseFeature('buy_crypto') ? 'opacity-75' : ''}\"\n      onclick={canUseFeature('buy_crypto') ? handleBuySell : () => showUpgradePrompt('buy_crypto', 'Pro')}\n      disabled={!account}\n      title={!canUseFeature('buy_crypto') ? 'Upgrade to Pro to unlock buy/sell features' : 'Buy and sell crypto'}\n    >\n      {canUseFeature('buy_crypto') ? 'Buy/Sell' : '🔒 Buy/Sell'}\n    </button>\n  </div>\n\n  <!-- Recent Activity -->\n  <RecentActivity className=\"yakkl-card relative z-10\" />\n\n  <!-- Token Portfolio -->\n  <TokenPortfolio\n    tokens={tokenList}\n    loading={loading}\n    className=\"yakkl-card relative z-10\"\n  />\n\n  <!-- Pro Feature: Advanced Analytics -->\n  {#if canUseFeature('advanced_analytics')}\n    <AdvancedAnalytics className=\"relative z-10\" />\n  {:else}\n    <div class=\"yakkl-card relative z-10 p-6 text-center border-2 border-dashed border-gray-300 dark:border-gray-600\">\n      <div class=\"text-gray-400 dark:text-gray-500 mb-3\">\n        <svg class=\"w-12 h-12 mx-auto mb-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <h3 class=\"text-lg font-medium mb-2\">Advanced Analytics</h3>\n        <p class=\"text-sm mb-4\">Get detailed portfolio insights, performance metrics, and market analysis.</p>\n        <button \n          onclick={() => showUpgradeModal = true}\n          class=\"bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n        >\n          Upgrade to Pro\n        </button>\n      </div>\n    </div>\n  {/if}\n\n  <!-- Private Feature: Secure Recovery -->\n  {#if canUseFeature('secure_recovery')}\n    <SecureRecovery className=\"relative z-10\" />\n  {:else if canUseFeature('advanced_analytics')}\n    <!-- Show for Pro+ users but locked -->\n    <div class=\"yakkl-card relative z-10 p-6 text-center border-2 border-dashed border-orange-300 dark:border-orange-600\">\n      <div class=\"text-orange-400 dark:text-orange-500 mb-3\">\n        <svg class=\"w-12 h-12 mx-auto mb-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n        <h3 class=\"text-lg font-medium mb-2\">Secure Recovery</h3>\n        <p class=\"text-sm mb-4\">Maximum security features including air-gapped signing and zero-knowledge proofs.</p>\n        <button \n          onclick={() => showUpgradeModal = true}\n          class=\"bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n        >\n          Upgrade to Private\n        </button>\n      </div>\n    </div>\n  {/if}\n\n  <!-- Mod System -->\n  <ModDashboard className=\"yakkl-card relative z-10\" />\n\n  <!-- Preview 2.0 Badge -->\n  <div class=\"text-center pt-4 pb-2 relative z-10\">\n    <div class=\"inline-flex items-center gap-2 bg-gradient-to-r from-purple-500 to-indigo-600 text-white px-3 py-1 rounded-full text-xs font-medium shadow-md\">\n      <svg class=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n      </svg>\n      Preview 2.0\n    </div>\n  </div>\n</div>\n\n<!-- AI Help Button - Floating Action Button (hidden during modals) -->\n{#if !modalOpen}\n  {#if canUseFeature('ai_assistant')}\n    <AIHelpButton className=\"fixed bottom-12 right-4\" />\n  {:else}\n    <!-- Show locked AI button for non-Pro users -->\n    <div class=\"fixed bottom-12 right-4 z-50\">\n      <button\n        onclick={() => showUpgradeModal = true}\n        class=\"yakkl-circle-button text-xl opacity-60 hover:opacity-80 transition-opacity\"\n        title=\"AI Assistant (Pro Feature - Upgrade Required)\"\n      >\n        🤖\n      </button>\n    </div>\n  {/if}\n{/if}\n\n<!-- Upgrade Modal -->\n<Upgrade \n  bind:show={showUpgradeModal}\n  onComplete={() => {\n    showUpgradeModal = false;\n    // Refresh all data after upgrade\n    refreshAllData();\n  }}\n  onCancel={() => showUpgradeModal = false}\n/>\n"],"file":"app/immutable/nodes/69.DouZrxeU.js"}