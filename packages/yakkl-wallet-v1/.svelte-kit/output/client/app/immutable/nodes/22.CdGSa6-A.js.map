{"version":3,"file":"22.CdGSa6-A.js","sources":["../../../../../../src/lib/extensions/chrome/signingClient.ts","../../../../../../src/routes/(dapp)/dapp/popups/sign/+page.svelte"],"sourcesContent":["import type { SigningRequest } from './signingHandler';\nimport { log } from '$lib/managers/Logger';\nimport { browser_ext, browserSvelte } from '$lib/common/environment';\nimport { sessionToken } from '$lib/common/auth/session';\nimport { get } from 'svelte/store';\nimport type { YakklResponse } from '$lib/common/interfaces';\n\n// interface SigningResponse {\n//   result?: any;\n//   error?: {\n//     message: string;\n//   };\n// }\n\nexport async function requestSigning(\n\trequestId: string,\n\ttype: string,\n\tparams: any[],\n\ttoken: string\n): Promise<YakklResponse> {\n\tif (typeof window === 'undefined') {\n\t\tthrow new Error('This function can only be called in a browser environment');\n\t}\n\n\tif (!requestId || !type || !params || !token) {\n\t\tthrow new Error('Missing required parameters for signing request');\n\t}\n\n\tlog.info('requestSigning - Sending request to background', false, {\n\t\trequestId,\n\t\ttype,\n\t\tparams,\n\t\ttoken\n\t});\n\n\ttry {\n\t\tconst response = (await browser_ext.runtime.sendMessage({\n\t\t\ttype,\n\t\t\trequestId,\n\t\t\tparams,\n\t\t\ttoken\n\t\t})) as YakklResponse;\n\n\t\tlog.info('requestSigning - Received response from background', false, { response });\n\n\t\tif (!response) {\n\t\t\tthrow new Error('No response received from background script');\n\t\t}\n\n\t\tif (response.error) {\n\t\t\tthrow new Error(response.error.message || 'Unknown error occurred');\n\t\t}\n\n\t\treturn response;\n\t} catch (error) {\n\t\tlog.error('requestSigning - Error sending request to background', false, error);\n\t\tthrow error;\n\t}\n}\n","<script lang=\"ts\">\n\timport { browser_ext, browserSvelte } from '$lib/common/environment';\n\timport { page } from '$app/state';\n\timport {\n\t\tgetYakklCurrentlySelected,\n\t\tgetMiscStore,\n\t\tyakklDappConnectRequestStore,\n\t\tgetYakklAccounts,\n\t\tgetSettings\n\t} from '$lib/common/stores';\n\timport {\n\t\ttype YakklCurrentlySelected,\n\t\ttype AccountData,\n\t\ttype TransactionRequest,\n\t\ttype YakklAccount\n\t} from '$lib/common';\n\timport {\n\t\tDEFAULT_TITLE,\n\t\tYAKKL_DAPP,\n\t\tETH_BASE_SCA_GAS_UNITS,\n\t\tETH_BASE_EOA_GAS_UNITS\n\t} from '$lib/common/constants';\n\timport { onMount } from 'svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\timport type { Runtime } from 'webextension-polyfill';\n\timport type { JsonRpcResponse, SessionInfo } from '$lib/common/interfaces';\n\timport type { BackgroundPendingRequest } from '$lib/extensions/chrome/background';\n\timport Confirmation from '$lib/components/Confirmation.svelte';\n\timport { requestSigning } from '$lib/extensions/chrome/signingClient';\n\timport Copyright from '$lib/components/Copyright.svelte';\n\timport Warning from '$lib/components/Warning.svelte';\n\timport Failed from '$lib/components/Failed.svelte';\n\timport {\n\t\tcreatePortManagerWithStream,\n\t\tPortManagerWithStream\n\t} from '$lib/managers/PortManagerWithStream';\n\timport type { PortDuplexStream } from '$lib/managers/PortStreamManager';\n\timport { sessionToken, verifySessionToken } from '$lib/common/auth/session';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\timport { decryptData } from '$lib/common/encryption';\n\timport { isEncryptedData } from '$lib/common/misc';\n\timport WalletManager from '$lib/managers/WalletManager';\n\timport type { Wallet } from '$lib/managers/Wallet';\n\timport { formatEther } from '$lib/utilities/utilities';\n\n\ttype RuntimePort = Runtime.Port | undefined;\n\n\tlet currentlySelected: YakklCurrentlySelected;\n\tlet yakklMiscStore: string;\n\tlet wallet: Wallet;\n\n\tlet showConfirm = $state(false);\n\tlet showSuccess = $state(false);\n\tlet showFailure = $state(false);\n\tlet errorValue = $state('No domain/site name was found. Access to YAKKL® is denied.');\n\n\tlet domain: string = $state('');\n\tlet domainLogo: string = $state('');\n\tlet domainTitle: string = $state('');\n\tlet title: string = $state(DEFAULT_TITLE);\n\tlet request: BackgroundPendingRequest;\n\tlet method: string = $state('');\n\tlet requestId: string | null;\n\tlet message: any = $state('');\n\tlet address: string = $state('');\n\tlet signedData: any;\n\tlet chainId: number;\n\n\tlet params: any[] = $state([]);\n\n\tlet personal_sign = {\n\t\tdataToSign: '',\n\t\taddress: '',\n\t\tdescription: ''\n\t};\n\n\tinterface SignTypedData {\n\t\taddress: string;\n\t\tdataToSign: string | Record<string, any>;\n\t}\n\n\tlet signTypedData_v3v4: SignTypedData = {\n\t\taddress: '',\n\t\tdataToSign: ''\n\t};\n\n\t// For eth_signTransaction\n\tlet transaction: TransactionRequest = $state({} as TransactionRequest);\n\tlet transactionDisplay: any = $state({});\n\tlet gasLimit: bigint = $state(0n);\n\n\tlet messageValue;\n\tlet pass = false;\n\n\tlet portManager: PortManagerWithStream | null = null;\n\tlet stream: PortDuplexStream | null = null;\n\n\tif (browserSvelte) {\n\t\ttry {\n\t\t\trequestId = page.url.searchParams.get('requestId');\n\t\t\tmethod = (page.url.searchParams.get('method') as string) ?? '';\n\t\t\t$yakklDappConnectRequestStore = requestId as string;\n\n\t\t\tif (requestId) {\n\t\t\t\tpass = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\thandleReject('No requestId or method was found. Access to YAKKL® is denied.');\n\t\t}\n\t}\n\n\t// Format transaction for user-friendly display\n\tasync function formatTransactionForDisplay() {\n\t\ttransactionDisplay = {\n\t\t\tfrom: transaction.from,\n\t\t\tto: transaction.to,\n\t\t\tvalue: transaction.quantity ? formatEther(transaction.quantity.toString()) + ' ETH' : '0 ETH',\n\t\t\tdata: transaction.data ? `Data: ${(transaction.data as string).slice(0, 10)}...` : 'No data',\n\t\t\tgasLimit: 'Will be calculated',\n\t\t\testimatedFee: 'Calculating...'\n\t\t};\n\n\t\t// Estimate gas if not provided\n\t\tif (!transaction.gasLimit) {\n\t\t\tconst blockchain = wallet?.getBlockchain();\n\t\t\tif (blockchain?.isSmartContractSupported()) {\n\t\t\t\tconst isSmartContract = await blockchain.isSmartContract(transaction.to as string);\n\t\t\t\tgasLimit = isSmartContract\n\t\t\t\t\t? BigInt(ETH_BASE_SCA_GAS_UNITS)\n\t\t\t\t\t: BigInt(ETH_BASE_EOA_GAS_UNITS);\n\n\t\t\t\t// Add extra gas for data\n\t\t\t\tif (transaction.data) {\n\t\t\t\t\tconst dataLength = (transaction.data as string).length - 2;\n\t\t\t\t\tgasLimit = BigInt(gasLimit) + BigInt(dataLength * 68);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgasLimit = BigInt(ETH_BASE_EOA_GAS_UNITS);\n\t\t\t}\n\n\t\t\t// Check for user override\n\t\t\tif (currentlySelected?.shortcuts?.gasLimit) {\n\t\t\t\tgasLimit = BigInt(currentlySelected.shortcuts.gasLimit);\n\t\t\t}\n\n\t\t\ttransactionDisplay.gasLimit = gasLimit.toString();\n\t\t}\n\t}\n\n\tasync function onMessageListener(event: any) {\n\t\ttry {\n\t\t\tif (!domainLogo) domainLogo = '/images/failIcon48x48.png';\n\n\t\t\tif (event.method === 'get_params') {\n\t\t\t\trequest = event.result;\n\t\t\t\tif (!request || !request.data) {\n\t\t\t\t\treturn await handleReject('No request was found. Access to YAKKL® is denied.');\n\t\t\t\t}\n\n\t\t\t\tconst requestData = request.data;\n\t\t\t\tif (\n\t\t\t\t\t!requestData ||\n\t\t\t\t\t!requestData.params ||\n\t\t\t\t\t!requestData.params[0] ||\n\t\t\t\t\t!requestData.metaData\n\t\t\t\t) {\n\t\t\t\t\treturn await handleReject('Invalid request data. Access to YAKKL® is denied.');\n\t\t\t\t}\n\n\t\t\t\tif (!requestData.metaData.metaData.isConnected) {\n\t\t\t\t\treturn await handleReject(\n\t\t\t\t\t\t'Domain is not connected. Connect to {domain} first via requestAccounts. Access to YAKKL® is denied.'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdomainTitle = requestData.metaData.metaData.title;\n\t\t\t\tdomain = requestData.metaData.metaData.domain;\n\t\t\t\tdomainLogo = requestData.metaData.metaData.icon;\n\t\t\t\tmessage =\n\t\t\t\t\trequestData.metaData.metaData.message ??\n\t\t\t\t\t'Nothing was passed to explain the intent of this approval. Be mindful of this request!';\n\t\t\t\tparams = requestData.params ?? [];\n\n\t\t\t\tif (!Array.isArray(params)) {\n\t\t\t\t\tparams = [params];\n\t\t\t\t}\n\n\t\t\t\tif (!requestId) requestId = requestData?.id ?? null;\n\t\t\t\tif (!requestId) {\n\t\t\t\t\treturn await handleReject('No request ID was found. Access to YAKKL® is denied.');\n\t\t\t\t}\n\n\t\t\t\ttitle = domainTitle || domain || DEFAULT_TITLE;\n\n\t\t\t\tlet data;\n\t\t\t\tswitch (method) {\n\t\t\t\t\tcase 'personal_sign':\n\t\t\t\t\t\tpersonal_sign.dataToSign = params[0];\n\t\t\t\t\t\tpersonal_sign.address = address = params[1];\n\t\t\t\t\t\tpersonal_sign.description = message;\n\t\t\t\t\t\tlog.info('Sign: personal_sign:', false, personal_sign);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'eth_signTypedData_v4':\n\t\t\t\t\t\tlog.info('Sign: eth_signTypedData_v4:', false, params);\n\t\t\t\t\t\tsignTypedData_v3v4.address = address = params[0];\n\t\t\t\t\t\tsignTypedData_v3v4.dataToSign = params[1];\n\t\t\t\t\t\tif (typeof signTypedData_v3v4.dataToSign === 'string') {\n\t\t\t\t\t\t\tdata = JSON.parse(signTypedData_v3v4.dataToSign);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdata = signTypedData_v3v4.dataToSign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmessage = data?.message?.contents || data;\n\t\t\t\t\t\tlog.info('Sign: eth_signTypedData_v4:', false, { data, message });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'eth_signTransaction':\n\t\t\t\t\t\t// Handle transaction signing\n\t\t\t\t\t\ttransaction = params[0] as TransactionRequest;\n\t\t\t\t\t\taddress = transaction.from as string;\n\n\t\t\t\t\t\tif (!wallet) {\n\t\t\t\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t\t\t\t['Ethereum'],\n\t\t\t\t\t\t\t\tchainId,\n\t\t\t\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait formatTransactionForDisplay();\n\t\t\t\t\t\tmessage = `Sign transaction from ${transaction.from} to ${transaction.to}`;\n\t\t\t\t\t\tlog.info('Sign: eth_signTransaction:', false, transaction);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmessageValue = 'No message request was passed in. Error.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\tawait handleReject(\n\t\t\t\t'An error occurred while processing the request. Access to YAKKL® is denied.'\n\t\t\t);\n\t\t}\n\t}\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tlog.info('Dapp - sign page mounted:', false);\n\n\t\t\t\tconst settings = await getSettings();\n\t\t\t\tif (!settings.init || !settings.legal.termsAgreed) {\n\t\t\t\t\terrorValue =\n\t\t\t\t\t\t\"You must register and agree to the terms of service before using YAKKL®. Click on 'Open Wallet' to register.\";\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcurrentlySelected = await getYakklCurrentlySelected();\n\t\t\t\tyakklMiscStore = getMiscStore();\n\t\t\t\tchainId = currentlySelected.shortcuts.chainId as number;\n\n\t\t\t\t// Initialize wallet for eth_signTransaction\n\t\t\t\tif (method === 'eth_signTransaction') {\n\t\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t\t['Ethereum'],\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst sessionInfo = (await browser_ext.runtime.sendMessage({\n\t\t\t\t\ttype: 'REQUEST_SESSION_PORT',\n\t\t\t\t\trequestId\n\t\t\t\t})) as SessionInfo;\n\n\t\t\t\tlog.info('Received session info:', false, sessionInfo);\n\n\t\t\t\tif (!sessionInfo || !sessionInfo.success) {\n\t\t\t\t\tlog.warn('Failed to verify session port. No response received. Using YAKKL_DAPP.');\n\t\t\t\t}\n\n\t\t\t\tportManager = createPortManagerWithStream(sessionInfo?.portName ?? YAKKL_DAPP);\n\t\t\t\tportManager.setRequestId(requestId);\n\n\t\t\t\tconst success = await portManager.createPort();\n\t\t\t\tif (!success) {\n\t\t\t\t\terrorValue = 'Failed to connect to session port.';\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tstream = portManager.getStream();\n\t\t\t\tif (!stream) {\n\t\t\t\t\terrorValue = 'Stream is not available.';\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstream.on('data', onMessageListener);\n\t\t\t\tstream.write({ method: 'get_params', id: requestId });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\terrorValue =\n\t\t\t\t'Port setup error occurred while processing the request. Access to YAKKL® is denied.';\n\t\t\tshowFailure = true;\n\t\t}\n\t});\n\n\tasync function handleReject(message: string = 'User rejected the request.') {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tshowConfirm = false;\n\t\t\t\tshowFailure = false;\n\t\t\t\tshowSuccess = false;\n\t\t\t\tif (stream) {\n\t\t\t\t\tstream.write({\n\t\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\tid: requestId,\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: 4001,\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t} finally {\n\t\t\tclose();\n\t\t}\n\t}\n\n\tasync function handleProcess() {\n\t\ttry {\n\t\t\tif (!browserSvelte) {\n\t\t\t\tawait handleReject();\n\t\t\t}\n\n\t\t\tif (!verifySessionToken($sessionToken)) {\n\t\t\t\tawait handleReject('Session token is invalid. Login again.');\n\t\t\t}\n\n\t\t\t// Handle eth_signTransaction differently\n\t\t\tif (method === 'eth_signTransaction') {\n\t\t\t\tawait handleSignTransaction();\n\t\t\t} else {\n\t\t\t\t// Use existing signingClient for other methods\n\t\t\t\tconst response = await requestSigning(requestId, method, params, $sessionToken);\n\t\t\t\tif (!response) {\n\t\t\t\t\tawait handleReject('Request failed due to no response from the signing request.');\n\t\t\t\t}\n\n\t\t\t\tif (response.error) {\n\t\t\t\t\tawait handleReject(response.error.message || 'Signing request failed');\n\t\t\t\t}\n\n\t\t\t\tif (stream) {\n\t\t\t\t\tconst jsonRpcResponse: JsonRpcResponse = {\n\t\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\tid: requestId,\n\t\t\t\t\t\tresult: response.result\n\t\t\t\t\t};\n\t\t\t\t\tstream.write(jsonRpcResponse);\n\t\t\t\t\tlog.info('Sign: handleProcess - response:', false, { jsonRpcResponse });\n\t\t\t\t} else {\n\t\t\t\t\tawait handleReject('Request failed to send to dapp due to connection port not found.');\n\t\t\t\t}\n\t\t\t}\n\t\t\tclose();\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\terrorValue = e instanceof Error ? e.message : 'Unknown error occurred';\n\t\t\tshowFailure = true;\n\t\t}\n\t}\n\n\tasync function handleSignTransaction() {\n\t\ttry {\n\t\t\t// Get the account's private key\n\t\t\tconst accounts = await getYakklAccounts();\n\t\t\tconst account = accounts.find(\n\t\t\t\t(acc) => acc.address.toLowerCase() === transaction.from?.toLowerCase()\n\t\t\t) as YakklAccount;\n\n\t\t\tif (!account) {\n\t\t\t\tawait handleReject('Account not found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Decrypt account data if needed\n\t\t\tif (isEncryptedData(account.data)) {\n\t\t\t\taccount.data = (await decryptData(account.data, yakklMiscStore)) as AccountData;\n\t\t\t}\n\n\t\t\tif (!(account.data as AccountData).privateKey) {\n\t\t\t\tawait handleReject('Account key not available.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare transaction\n\t\t\ttransaction.gasLimit = gasLimit;\n\t\t\ttransaction.nonce = transaction.nonce ?? -1; // Let provider set if not provided\n\t\t\ttransaction.type = transaction.type ?? 2; // Default to EIP-1559\n\t\t\ttransaction.chainId = chainId;\n\n\t\t\t// Create a signer with the private key\n\t\t\tawait wallet.setSigner((account.data as AccountData).privateKey);\n\n\t\t\t// Get the blockchain provider from wallet\n\t\t\tconst blockchain = wallet.getBlockchain();\n\t\t\tconst provider = blockchain.getProvider();\n\t\t\tconst signer = provider.getSigner();\n\n\t\t\t// Sign the transaction (but don't send it)\n\t\t\tconst signedTx = await signer.signTransaction(transaction);\n\n\t\t\t// Send the signed transaction back\n\t\t\tif (stream) {\n\t\t\t\tconst jsonRpcResponse: JsonRpcResponse = {\n\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: requestId,\n\t\t\t\t\tresult: signedTx\n\t\t\t\t};\n\t\t\t\tstream.write(jsonRpcResponse);\n\t\t\t\tlog.info('Sign: eth_signTransaction - response:', false, { jsonRpcResponse });\n\t\t\t} else {\n\t\t\t\tawait handleReject('Request failed to send to dapp due to connection port not found.');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Transaction signing error:', false, e);\n\t\t\terrorValue = e instanceof Error ? e.message : 'Transaction signing failed';\n\t\t\tshowFailure = true;\n\t\t}\n\t}\n\n\tasync function close() {\n\t\tif (browserSvelte) {\n\t\t\ttry {\n\t\t\t\tif (portManager) {\n\t\t\t\t\tawait portManager.waitForIdle(1500);\n\t\t\t\t\tportManager.disconnect();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlog.warn('Port did not go idle in time', false, e);\n\t\t\t}\n\t\t\tsafeLogout();\n\t\t}\n\t}\n\n\tfunction handleConfirm() {\n\t\tshowConfirm = true;\n\t}\n</script>\n\n<svelte:head>\n\t<title>{title}</title>\n</svelte:head>\n\n<!-- <Warning bind:show={showFailure} title=\"Error\" value={errorValue} /> -->\n<Failed bind:show={showFailure} title=\"Failed!\" content={errorValue} onReject={handleReject} />\n<Confirmation\n\tbind:show={showConfirm}\n\ttitle=\"Connect to {domain}\"\n\tmessage=\"This will connect {domain} to {address} and sign the transaction or message! Do you wish to continue?\"\n\tonConfirm={handleProcess}\n/>\n\n<div class=\"flex flex-col h-full max-h-screen overflow-hidden\">\n\t<!-- Header -->\n\t<div class=\"p-4 border-b border-base-300 flex-shrink-0\">\n\t\t<div class=\"flex items-center justify-between\">\n\t\t\t<div class=\"flex items-center gap-2 min-w-0\">\n\t\t\t\t<img\n\t\t\t\t\tid=\"dappImageId\"\n\t\t\t\t\tcrossorigin=\"anonymous\"\n\t\t\t\t\tsrc={domainLogo}\n\t\t\t\t\talt=\"Dapp logo\"\n\t\t\t\t\tclass=\"w-8 h-8 rounded-full flex-shrink-0\"\n\t\t\t\t/>\n\t\t\t\t<span class=\"font-semibold truncate\" title={domainTitle || domain}\n\t\t\t\t\t>{domainTitle || domain}</span\n\t\t\t\t>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\tonclick={() => handleReject()}\n\t\t\t\tclass=\"btn btn-ghost btn-sm flex-shrink-0\"\n\t\t\t\taria-label=\"Close\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"h-5 w-5\"\n\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\td=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\n\t<!-- Content-->\n\t<div class=\"flex-1 p-6 flex flex-col max-w-[428px]\">\n\t\t<div class=\"text-center mb-4 flex-shrink-0 border-2 border-red-500 rounded-md p-2\">\n\t\t\t<p class=\"text-md font-extrabold animate-pulse mb-2\">Important!:</p>\n\t\t\t<span class=\"text-sm font-bold mb-2\"\n\t\t\t\t>Signing of Message requesting permission to execute: PLEASE be mindful and know what you\n\t\t\t\tare doing.</span\n\t\t\t>\n\t\t\t<span class=\"text-sm font-bold mb-2\"\n\t\t\t\t>There is no cancel or return option! Be 100% sure or REJECT this transaction and research\n\t\t\t\tmore before trying again.</span\n\t\t\t>\n\t\t</div>\n\n\t\t<div class=\"overflow-auto flex-1 min-h-0 mb-4\">\n\t\t\t{#if method === 'eth_signTransaction'}\n\t\t\t\t<span class=\"text-sm\">Transaction Details:</span>\n\t\t\t\t<div class=\"bg-base-200 rounded-lg p-4 space-y-3 mt-2\">\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">From:</span>\n\t\t\t\t\t\t<span class=\"font-mono text-sm\">{transactionDisplay.from}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">To:</span>\n\t\t\t\t\t\t<span class=\"font-mono text-sm\">{transactionDisplay.to}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">Value:</span>\n\t\t\t\t\t\t<span class=\"font-bold text-primary\">{transactionDisplay.value}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">Gas Limit:</span>\n\t\t\t\t\t\t<span>{transactionDisplay.gasLimit}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{#if transaction.data}\n\t\t\t\t\t\t<div class=\"flex justify-between items-center\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Data:</span>\n\t\t\t\t\t\t\t<span class=\"text-sm truncate max-w-[200px]\">{transactionDisplay.data}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t<span class=\"text-sm\">Data to sign:</span>\n\t\t\t\t<pre class=\"text-md border-2 border-blue-500 rounded-md p-2 bg-opacity-25\">{message}</pre>\n\t\t\t{/if}\n\t\t</div>\n\t</div>\n\n\t<!-- Footer -->\n\t<div class=\"p-4 border-t border-base-300 flex-shrink-0\">\n\t\t<div class=\"flex gap-4 justify-end\">\n\t\t\t<button onclick={() => handleReject()} class=\"btn btn-outline\"> Reject </button>\n\t\t\t<button onclick={handleConfirm} class=\"btn btn-primary\"> Approve </button>\n\t\t</div>\n\t</div>\n</div>\n\n<Copyright />\n\n<style>\n\t/* Smooth transitions */\n\t.btn {\n\t\ttransition: all 0.2s ease;\n\t}\n\n\t.btn:hover {\n\t\ttransform: translateY(-1px);\n\t}\n\n\t/* Custom scrollbar styles */\n\t.overflow-auto {\n\t\tscrollbar-width: thin;\n\t\tscrollbar-color: hsl(var(--p)) transparent;\n\t}\n\n\t.overflow-auto::-webkit-scrollbar {\n\t\twidth: 6px;\n\t}\n\n\t.overflow-auto::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.overflow-auto::-webkit-scrollbar-thumb {\n\t\tbackground-color: hsl(var(--p));\n\t\tborder-radius: 3px;\n\t}\n</style>\n"],"names":["async","requestSigning","requestId","type","params","token","window","Error","log","info","response","browser_ext","runtime","sendMessage","error","message","handleConfirm","_","showConfirm","handleReject","currentlySelected","yakklMiscStore","wallet","$.tag","$.state","showSuccess","showFailure","errorValue","domain","domainLogo","domainTitle","title","$.proxy","DEFAULT_TITLE","request","method","address","chainId","personal_sign","dataToSign","description","signTypedData_v3v4","transaction","transactionDisplay","gasLimit","messageValue","pass","portManager","stream","browserSvelte","page","url","searchParams","get","set","$.store_set","yakklDappConnectRequestStore","e","formatTransactionForDisplay","from","$.get","to","value","quantity","formatEther","toString","data","slice","estimatedFee","blockchain","getBlockchain","isSmartContractSupported","isSmartContract","BigInt","ETH_BASE_SCA_GAS_UNITS","ETH_BASE_EOA_GAS_UNITS","dataLength","length","$.set","_a","shortcuts","onMessageListener","event","$.strict_equals","result","requestData","metaData","isConnected","icon","Array","isArray","id","log$1","JSON","parse","contents","WalletManager","getInstance","onMount","settings","getSettings","init","legal","termsAgreed","getYakklCurrentlySelected","getMiscStore","sessionInfo","success","warn","createPortManagerWithStream","portName","YAKKL_DAPP","setRequestId","createPort","getStream","on","write","jsonrpc","code","close","handleProcess","verifySessionToken","$sessionToken","handleSignTransaction","jsonRpcResponse","accounts","getYakklAccounts","account","find","acc","strict_equals","toLowerCase","isEncryptedData","decryptData","privateKey","nonce","setSigner","provider","getProvider","signer","getSigner","signedTx","signTransaction","waitForIdle","disconnect","safeLogout","$$value","$.template_effect","$.set_text","text_5","consequent","text_1","text_2","text_3","text_4","consequent_1","$$render","alternate","$.set_attribute","span","text"],"mappings":"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"}