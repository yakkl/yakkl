{"version":3,"file":"GlobalListenerManager.js","sources":["../../../../src/lib/managers/GlobalListenerManager.ts"],"sourcesContent":["// src/listeners/GlobalListenerManager.ts\nimport { ListenerManager } from './ListenerManager';\nimport { log } from '$lib/managers/Logger';\n\nexport type ListenerContext = 'background' | 'content' | 'ui' | 'inpage';\n\nexport class GlobalListenerManager {\n\tprivate contextManagers: Map<ListenerContext, ListenerManager> = new Map();\n\n\thasContext(context: ListenerContext): boolean {\n\t\treturn this.contextManagers.has(context);\n\t}\n\n\tregisterContext(context: ListenerContext, manager: ListenerManager) {\n\t\tif (!this.contextManagers.has(context)) {\n\t\t\tthis.contextManagers.set(context, manager);\n\t\t} else {\n\t\t\tlog.warn(`ListenerManager for context \"${context}\" is already registered.`);\n\t\t}\n\t}\n\n\taddListener(context: ListenerContext, event: any, handler: Function) {\n\t\tconst manager = this.contextManagers.get(context);\n\t\tif (manager) {\n\t\t\tmanager.add(event, handler);\n\t\t} else {\n\t\t\tlog.error(`ListenerManager for context \"${context}\" is not registered.`);\n\t\t}\n\t}\n\n\tremoveListener(context: ListenerContext, event: any, handler: Function) {\n\t\tconst manager = this.contextManagers.get(context);\n\t\tif (manager) {\n\t\t\tmanager.remove(event, handler);\n\t\t} else {\n\t\t\tlog.error(`ListenerManager for context \"${context}\" is not registered.`);\n\t\t}\n\t}\n\n\tremoveAllFromContext(context: ListenerContext) {\n\t\tconst manager = this.contextManagers.get(context);\n\t\tif (manager) {\n\t\t\tmanager.removeAll();\n\t\t} else {\n\t\t\tlog.error(`ListenerManager for context \"${context}\" is not registered.`);\n\t\t}\n\t}\n\n\tremoveAll() {\n\t\tthis.contextManagers.forEach((manager, context) => {\n\t\t\tmanager.removeAll();\n\t\t});\n\t}\n}\n\n// Global instance of GlobalListenerManager\nexport const globalListenerManager = new GlobalListenerManager();\n"],"names":["GlobalListenerManager","contextManagers","Map","hasContext","context","this","has","registerContext","manager","set","log","warn","addListener","event","handler","get","add","error","removeListener","remove","removeAllFromContext","removeAll","forEach","globalListenerManager"],"mappings":"kCAMO,MAAMA,sBACJC,oBAA6DC,IAErE,UAAAC,CAAWC,SACH,OAAAC,KAAKJ,gBAAgBK,IAAIF,QAAO,CAGxC,eAAAG,CAAgBH,QAA0BI,SACzC,IAAKH,KAAKJ,gBAAgBK,IAAIF,SAAU,CAClCC,KAAAJ,gBAAgBQ,IAAIL,QAASI,QAAO,KACnC,CACFE,IAAAC,KAAK,gCAAgCP,kCAAiC,CAC3E,CAGD,WAAAQ,CAAYR,QAA0BS,MAAYC,SACjD,MAAMN,QAAUH,KAAKJ,gBAAgBc,IAAIX,SACzC,GAAII,QAAS,CACJA,QAAAQ,IAAIH,MAAOC,QAAO,KACpB,CACFJ,IAAAO,MAAM,gCAAgCb,8BAA6B,CACxE,CAGD,cAAAc,CAAed,QAA0BS,MAAYC,SACpD,MAAMN,QAAUH,KAAKJ,gBAAgBc,IAAIX,SACzC,GAAII,QAAS,CACJA,QAAAW,OAAON,MAAOC,QAAO,KACvB,CACFJ,IAAAO,MAAM,gCAAgCb,8BAA6B,CACxE,CAGD,oBAAAgB,CAAqBhB,SACpB,MAAMI,QAAUH,KAAKJ,gBAAgBc,IAAIX,SACzC,GAAII,QAAS,CACZA,QAAQa,WAAU,KACZ,CACFX,IAAAO,MAAM,gCAAgCb,8BAA6B,CACxE,CAGD,SAAAiB,GACChB,KAAKJ,gBAAgBqB,QAAQ,CAACd,QAASJ,WACtCI,QAAQa,aACR,EAKU,MAAAE,sBAAwB,IAAIvB"}