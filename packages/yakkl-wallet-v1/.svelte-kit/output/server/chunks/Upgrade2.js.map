{"version":3,"file":"Upgrade2.js","sources":["../../../../src/routes/preview2/lib/types/index.ts","../../../../src/routes/preview2/lib/config/features.ts","../../../../src/routes/preview2/lib/stores/plan.store.ts","../../../../src/routes/preview2/lib/utils/logger.ts","../../../../src/routes/preview2/lib/utils/features.ts","../../../../src/routes/preview2/lib/components/Upgrade.svelte"],"sourcesContent":["// Re-export existing types from main lib\nexport type {\n  YakklAccount,\n  TokenData as Token,\n  BaseTransaction as Transaction\n  // NetworkType - not exported from interfaces\n} from '$lib/common/interfaces';\n\nexport type {\n  AccountTypeCategory,\n  PlanType as ExistingPlanType\n} from '$lib/common/types';\n\n// Preview2 specific types\nexport interface Preview2Account {\n  address: string;\n  ens?: string | null;\n  username?: string;\n  avatar?: string | null;\n  isActive: boolean;\n  balance?: string;\n  plan?: PlanType;\n}\n\nexport interface Preview2Chain {\n  key: string;\n  name: string;\n  network: string;\n  icon: string;\n  isTestnet: boolean;\n  rpcUrl?: string;\n  chainId: number;\n}\n\nexport interface Preview2Token {\n  symbol: string;\n  name?: string;\n  icon?: string;\n  value: number;\n  qty: number;\n  price?: number;\n  change24h?: number;\n  color?: string;\n  address?: string;\n  decimals?: number;\n}\n\nexport interface Preview2Transaction {\n  hash: string;\n  from: string;\n  to: string;\n  value: string;\n  timestamp: number;\n  status: 'pending' | 'confirmed' | 'failed';\n  type: 'send' | 'receive' | 'swap' | 'contract';\n  gas?: string;\n  gasPrice?: string;\n}\n\nexport enum PlanType {\n  Basic = 'basic_member',\n  Pro = 'yakkl_pro',\n  Enterprise = 'enterprise',\n  Private = 'yakkl_private'\n}\n\nexport interface UserPlan {\n  type: PlanType;\n  trialEndsAt?: string;\n  subscriptionId?: string;\n  features: string[];\n}\n\n// UI State types\nexport interface LoadingState {\n  isLoading: boolean;\n  message?: string;\n}\n\nexport interface ErrorState {\n  hasError: boolean;\n  message?: string;\n  code?: string;\n}\n\n// Service response types\nexport interface ServiceResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: ErrorState;\n}\n\n// Background message types specific to preview2\nexport interface Preview2Message {\n  type: 'PREVIEW2_REQUEST';\n  action: string;\n  data?: any;\n  id: string;\n}\n\nexport interface Preview2Response {\n  type: 'PREVIEW2_RESPONSE';\n  success: boolean;\n  data?: any;\n  error?: string;\n  id: string;\n}","// Feature flags for Basic vs Pro tier separation\nimport { PlanType } from '../types';\nexport { PlanType };\n\n// Define feature arrays first to avoid circular reference\nconst BASIC_FEATURES = [\n  'view_balance',\n  'send_tokens',\n  'receive_tokens',\n  'swap_tokens',\n  'buy_crypto',\n  'sell_crypto',\n  'view_transactions',\n  'basic_security',\n  'import_wallet',\n  'export_keys',\n  'hardware_wallet',\n  'basic_tokens', // Limited to major tokens\n  'basic_networks', // Limited to mainnet\n  'basic_features' // General basic features check\n] as const;\n\nconst PRO_FEATURES = [\n  ...BASIC_FEATURES,\n  'advanced_analytics',\n  'portfolio_tracking',\n  'price_alerts',\n  'ai_assistant',\n  'staking',\n  'yield_farming',\n  'all_tokens',\n  'testnet_access',\n  'priority_support',\n  'bulk_transactions',\n  'api_access',\n  'custom_rpc',\n  'advanced_security',\n  'multi_sig'\n] as const;\n\nconst ENTERPRISE_FEATURES = [\n  ...PRO_FEATURES,\n  'white_label',\n  'custom_branding',\n  'dedicated_support',\n  'custom_features'\n] as const;\n\nconst PRIVATE_FEATURES = [\n  ...ENTERPRISE_FEATURES,\n  'private_key_backup',\n  'secure_recovery',\n  'air_gapped_signing',\n  'hardware_integration',\n  'zero_knowledge_proofs'\n] as const;\n\nconst PAYMENT_FEATURES = [\n  'buy_crypto_card',\n  'buy_crypto_bank',\n  'crypto_payment',\n  'subscription_management'\n] as const;\n\nexport const FEATURES = {\n  [PlanType.Basic]: BASIC_FEATURES,\n  [PlanType.Pro]: PRO_FEATURES,\n  [PlanType.Enterprise]: ENTERPRISE_FEATURES,\n  [PlanType.Private]: PRIVATE_FEATURES,\n  PAYMENT: PAYMENT_FEATURES\n} as const;\n\n// Export plan features for compatibility\nexport const PLAN_FEATURES = {\n  BASIC: BASIC_FEATURES,\n  PRO: PRO_FEATURES,\n  ENTERPRISE: ENTERPRISE_FEATURES,\n  PRIVATE: PRIVATE_FEATURES\n} as const;\n\n// Type for feature keys\nexport type FeatureKey = \n  | typeof BASIC_FEATURES[number]\n  | typeof PRO_FEATURES[number] \n  | typeof ENTERPRISE_FEATURES[number]\n  | typeof PRIVATE_FEATURES[number];\n\n// Helper function to check if a feature is available\nexport function hasFeature(userPlan: PlanType, feature: string): boolean {\n  const planFeatures = FEATURES[userPlan as keyof typeof FEATURES];\n  return (planFeatures as any)?.includes(feature) ?? false;\n}\n\n// Get all features for a plan\nexport function getFeaturesForPlan(plan: PlanType): readonly string[] {\n  return FEATURES[plan as keyof typeof FEATURES] ?? FEATURES[PlanType.Basic];\n}\n\n// Check if user is on trial\nexport function isTrialUser(trialEndsAt?: string): boolean {\n  if (!trialEndsAt) return false;\n  return new Date(trialEndsAt) > new Date();\n}\n","import { writable, derived } from 'svelte/store';\nimport type { UserPlan } from '../types';\nimport { PlanType } from '../types';\nimport { hasFeature, getFeaturesForPlan, isTrialUser } from '../config/features';\nimport { getSettings } from '$lib/common/stores';\n\ninterface PlanState {\n  plan: UserPlan;\n  loading: boolean;\n}\n\nfunction createPlanStore() {\n  const { subscribe, set, update } = writable<PlanState>({\n    plan: {\n      type: PlanType.Basic,\n      features: getFeaturesForPlan(PlanType.Basic) as string[]\n    },\n    loading: false\n  });\n\n  return {\n    subscribe,\n    \n    async loadPlan() {\n      update(state => ({ ...state, loading: true }));\n      \n      try {\n        // Get plan from settings\n        const settings = await getSettings();\n        const planType = settings?.plan?.type || PlanType.Basic;\n        const trialEndsAt = (settings as any)?.plan?.trialEndsAt as string | undefined;\n        \n        // Check if user is on trial\n        const onTrial = isTrialUser(trialEndsAt);\n        const effectivePlan = onTrial ? PlanType.Pro : planType;\n        \n        set({\n          plan: {\n            type: effectivePlan as PlanType,\n            trialEndsAt: trialEndsAt,\n            subscriptionId: (settings as any)?.plan?.subscriptionId,\n            features: getFeaturesForPlan(effectivePlan as PlanType) as string[]\n          },\n          loading: false\n        });\n      } catch (error) {\n        // Default to basic plan on error\n        set({\n          plan: {\n            type: PlanType.Basic,\n            features: getFeaturesForPlan(PlanType.Basic) as string[]\n          },\n          loading: false\n        });\n      }\n    },\n\n    canUseFeature(feature: string): boolean {\n      let planState: PlanState = { \n        plan: { type: PlanType.Basic, features: [] }, \n        loading: false \n      };\n      \n      subscribe(state => { planState = state; })();\n      \n      return hasFeature(planState.plan.type, feature);\n    },\n\n    async upgradeTo(newPlan: PlanType) {\n      update(state => ({ ...state, loading: true }));\n      \n      try {\n        // In production, this would make an API call to process the upgrade\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n        \n        // Update local storage for persistence\n        const settings = await getSettings();\n        if (settings) {\n          const updatedSettings = {\n            ...settings,\n            plan: {\n              ...settings.plan,\n              type: newPlan,\n              trialEndsAt: null as string | null, // Clear trial when upgrading\n              subscriptionId: `sub_${Date.now()}`, // Mock subscription ID\n              updatedAt: new Date().toISOString()\n            }\n          };\n          \n          // In a real app, you'd save this to secure storage\n          localStorage.setItem('yakkl:plan', JSON.stringify({\n            type: newPlan,\n            subscriptionId: updatedSettings.plan.subscriptionId,\n            upgradedAt: updatedSettings.plan.updatedAt\n          }));\n        }\n        \n        // Update the store\n        update(state => ({\n          ...state,\n          plan: {\n            type: newPlan,\n            features: getFeaturesForPlan(newPlan) as string[],\n            subscriptionId: `sub_${Date.now()}`,\n            trialEndsAt: null\n          },\n          loading: false\n        }));\n        \n        console.log(`✅ Successfully upgraded to ${newPlan}`);\n        \n      } catch (error) {\n        console.error('Upgrade failed:', error);\n        update(state => ({ ...state, loading: false }));\n        throw error;\n      }\n    },\n\n    async downgradeTo(newPlan: PlanType) {\n      // Similar to upgrade but for downgrades\n      update(state => ({ ...state, loading: true }));\n      \n      try {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        update(state => ({\n          ...state,\n          plan: {\n            type: newPlan,\n            features: getFeaturesForPlan(newPlan) as string[],\n            subscriptionId: null, // Clear subscription for basic plan\n            trialEndsAt: null\n          },\n          loading: false\n        }));\n        \n      } catch (error) {\n        console.error('Downgrade failed:', error);\n        update(state => ({ ...state, loading: false }));\n        throw error;\n      }\n    },\n\n    async startTrial(trialDays = 14) {\n      update(state => ({ ...state, loading: true }));\n      \n      try {\n        const trialEndsAt = new Date();\n        trialEndsAt.setDate(trialEndsAt.getDate() + trialDays);\n        \n        update(state => ({\n          ...state,\n          plan: {\n            type: PlanType.Pro, // Trial gives Pro features\n            features: getFeaturesForPlan(PlanType.Pro) as string[],\n            trialEndsAt: trialEndsAt.toISOString(),\n            subscriptionId: null\n          },\n          loading: false\n        }));\n        \n        console.log(`✅ Started ${trialDays}-day trial`);\n        \n      } catch (error) {\n        console.error('Failed to start trial:', error);\n        update(state => ({ ...state, loading: false }));\n        throw error;\n      }\n    },\n\n    getUpgradeOptions(currentPlan: PlanType) {\n      const plans = [PlanType.Basic, PlanType.Pro, PlanType.Enterprise, PlanType.Private];\n      const currentIndex = plans.indexOf(currentPlan);\n      return plans.slice(currentIndex + 1);\n    },\n\n    getPlanStatus() {\n      let planState: PlanState = { \n        plan: { type: PlanType.Basic, features: [] }, \n        loading: false \n      };\n      \n      subscribe(state => { planState = state; })();\n      \n      const trialActive = isTrialUser(planState.plan.trialEndsAt);\n      const hasSubscription = !!planState.plan.subscriptionId;\n      \n      return {\n        current: planState.plan.type,\n        onTrial: trialActive,\n        hasSubscription,\n        canUpgrade: planState.plan.type !== PlanType.Private,\n        trialEndsAt: planState.plan.trialEndsAt\n      };\n    },\n\n    reset() {\n      // Reset to default state\n      set({\n        plan: {\n          type: PlanType.Basic,\n          features: getFeaturesForPlan(PlanType.Basic) as string[]\n        },\n        loading: false\n      });\n    }\n  };\n}\n\nexport const planStore = createPlanStore();\n\n// Derived stores for common checks\nexport const currentPlan = derived(\n  planStore,\n  $store => $store.plan.type\n);\n\nexport const isProUser = derived(\n  planStore,\n  $store => $store.plan.type === PlanType.Pro || $store.plan.type === PlanType.Enterprise\n);\n\nexport const isOnTrial = derived(\n  planStore,\n  $store => isTrialUser($store.plan.trialEndsAt)\n);\n\nexport const availableFeatures = derived(\n  planStore,\n  $store => $store.plan.features\n);\n\n// Helper to check features in components\nexport function canUseFeature(feature: string): boolean {\n  return planStore.canUseFeature(feature);\n}","/**\n * Lean logger for preview2\n * - Debug/info logs only in development\n * - Warn/error always kept\n * - Minimal overhead\n */\n\nconst isDev = import.meta.env.DEV;\nconst LOG_LEVEL = (import.meta.env.VITE_LOG_LEVEL || 'warn') as 'debug' | 'info' | 'warn' | 'error';\n\nconst LEVELS = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n} as const;\n\nconst currentLevel = LEVELS[LOG_LEVEL];\n\nclass Logger {\n  private prefix: string;\n\n  constructor(prefix = '[YAKKL]') {\n    this.prefix = prefix;\n  }\n\n  debug(...args: any[]) {\n    if (isDev && currentLevel <= LEVELS.debug) {\n      console.debug(this.prefix, ...args);\n    }\n  }\n\n  info(...args: any[]) {\n    if (isDev && currentLevel <= LEVELS.info) {\n      console.info(this.prefix, ...args);\n    }\n  }\n\n  warn(...args: any[]) {\n    // Always keep warnings\n    console.warn(this.prefix, ...args);\n  }\n\n  error(...args: any[]) {\n    // Always keep errors\n    console.error(this.prefix, ...args);\n  }\n\n  // Create a child logger with additional prefix\n  child(childPrefix: string) {\n    return new Logger(`${this.prefix} ${childPrefix}`);\n  }\n}\n\n// Export singleton instance\nexport const log = new Logger();\n\n// Export class for creating specialized loggers\nexport { Logger };","/**\n * Feature access control for preview2\n * Clean, efficient implementation with minimal dependencies\n */\n\nimport { PlanType } from '../types';\nimport { PLAN_FEATURES, type FeatureKey } from '../config/features';\nimport { log } from './logger';\n\nclass FeatureManager {\n  private currentPlan: PlanType = PlanType.Basic;\n  private enabledFeatures: Set<string> = new Set();\n\n  constructor() {\n    this.updateFeatures();\n  }\n\n  /**\n   * Set the current user's plan\n   */\n  setPlan(plan: PlanType) {\n    if (this.currentPlan !== plan) {\n      this.currentPlan = plan;\n      this.updateFeatures();\n      log.debug(`Plan updated to: ${plan}`);\n    }\n  }\n\n  /**\n   * Check if a feature is available for current plan\n   */\n  canUse(feature: string): boolean {\n    return this.enabledFeatures.has(feature);\n  }\n\n  /**\n   * Get all enabled features for current plan\n   */\n  getEnabledFeatures(): string[] {\n    return Array.from(this.enabledFeatures);\n  }\n\n  /**\n   * Get current plan\n   */\n  getCurrentPlan(): PlanType {\n    return this.currentPlan;\n  }\n\n  /**\n   * Check if user has access to a specific plan level\n   */\n  hasAccess(requiredPlan: PlanType): boolean {\n    const planHierarchy = {\n      [PlanType.Basic]: 0,\n      [PlanType.Pro]: 1,\n      [PlanType.Enterprise]: 2,\n      [PlanType.Private]: 3\n    };\n\n    const currentLevel = planHierarchy[this.currentPlan];\n    const requiredLevel = planHierarchy[requiredPlan];\n    \n    return currentLevel >= requiredLevel;\n  }\n\n  private updateFeatures() {\n    this.enabledFeatures.clear();\n    \n    // Get features for current plan\n    const planFeatures = this.getPlanFeatures(this.currentPlan);\n    planFeatures.forEach(feature => this.enabledFeatures.add(feature));\n  }\n\n  private getPlanFeatures(plan: PlanType): readonly string[] {\n    switch (plan) {\n      case PlanType.Basic:\n        return PLAN_FEATURES.BASIC;\n      case PlanType.Pro:\n        return PLAN_FEATURES.PRO;\n      case PlanType.Enterprise:\n        return PLAN_FEATURES.ENTERPRISE;\n      case PlanType.Private:\n        return PLAN_FEATURES.PRIVATE;\n      default:\n        log.warn(`Unknown plan type: ${plan}, defaulting to Basic`);\n        return PLAN_FEATURES.BASIC;\n    }\n  }\n}\n\n// Export singleton instance\nexport const featureManager = new FeatureManager();\n\n// Export convenience functions\nexport const canUseFeature = (feature: string): boolean => \n  featureManager.canUse(feature);\n\nexport const hasAccessToPlan = (plan: PlanType): boolean => \n  featureManager.hasAccess(plan);\n\nexport const setUserPlan = (plan: PlanType): void => \n  featureManager.setPlan(plan);\n\n// Export class for testing\nexport { FeatureManager };","<!--\n  Upgrade Component for Preview2 - Modern upgrade flow with plan integration\n-->\n\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { planStore, currentPlan, isOnTrial } from '../stores/plan.store';\n  import { canUseFeature } from '../utils/features';\n  import { PlanType } from '../types';\n  \n  let { \n    show = $bindable(false),\n    onComplete = () => {},\n    onCancel = () => { show = false; },\n    className = ''\n  } = $props();\n\n  // Reactive state\n  let plan = $derived($currentPlan);\n  let trial = $derived($isOnTrial);\n  let upgradeStep = $state('overview'); // 'overview', 'selecting', 'processing', 'success'\n  let isProcessing = $state(false);\n  let progress = $state(0);\n  let selectedPlan = $state(PlanType.Pro);\n  let statusMessage = $state('');\n\n  // Plan features configuration\n  const planFeatures = {\n    [PlanType.Basic]: [\n      'Basic wallet functionality',\n      'Up to 3 accounts',\n      'Standard networks',\n      'Community support'\n    ],\n    [PlanType.Pro]: [\n      'Unlimited accounts',\n      'Advanced analytics',\n      'Custom networks',\n      'Pro mods & extensions',\n      'Priority support',\n      'Early access features',\n      'Enhanced security',\n      'DeFi integrations',\n      'Portfolio tracking',\n      'Advanced trading tools'\n    ],\n    [PlanType.Enterprise]: [\n      'Everything in Pro',\n      'Multi-signature support',\n      'White label solutions',\n      'Custom integrations',\n      'Dedicated support',\n      'SLA guarantees',\n      'Advanced compliance',\n      'Audit trails',\n      'Team management',\n      'Enterprise SSO'\n    ],\n    [PlanType.Private]: [\n      'Everything in Enterprise',\n      'Maximum privacy features',\n      'Secure enclaves',\n      'Anonymous transactions',\n      'Private node access',\n      'Enhanced encryption',\n      'Compliance tools',\n      'Advanced forensics',\n      'Private cloud deployment'\n    ]\n  };\n\n  const planPricing = {\n    [PlanType.Basic]: { monthly: 0, yearly: 0 },\n    [PlanType.Pro]: { monthly: 9.99, yearly: 99.99 },\n    [PlanType.Enterprise]: { monthly: 49.99, yearly: 499.99 },\n    [PlanType.Private]: { monthly: 199.99, yearly: 1999.99 }\n  };\n\n  const planColors = {\n    [PlanType.Basic]: 'from-gray-500 to-gray-600',\n    [PlanType.Pro]: 'from-indigo-500 to-purple-600',\n    [PlanType.Enterprise]: 'from-yellow-500 to-orange-600',\n    [PlanType.Private]: 'from-red-500 to-pink-600'\n  };\n\n  function getAvailableUpgrades() {\n    const plans = [PlanType.Basic, PlanType.Pro, PlanType.Enterprise, PlanType.Private];\n    const currentIndex = plans.indexOf(plan);\n    return plans.slice(currentIndex + 1);\n  }\n\n  function formatPlanName(planType: PlanType): string {\n    return planType.replace(/_/g, ' ').split(' ').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n    ).join(' ');\n  }\n\n  function getPlanIcon(planType: PlanType): string {\n    switch (planType) {\n      case PlanType.Basic: return '🌟';\n      case PlanType.Pro: return '💎';\n      case PlanType.Enterprise: return '🏢';\n      case PlanType.Private: return '🔒';\n      default: return '📦';\n    }\n  }\n\n  async function processUpgrade() {\n    upgradeStep = 'processing';\n    isProcessing = true;\n    progress = 0;\n    statusMessage = 'Initiating upgrade...';\n\n    try {\n      // Simulate upgrade process with progress updates\n      const steps = [\n        { message: 'Validating plan selection...', duration: 1000 },\n        { message: 'Processing payment...', duration: 2000 },\n        { message: 'Updating account permissions...', duration: 1500 },\n        { message: 'Enabling new features...', duration: 1000 },\n        { message: 'Finalizing upgrade...', duration: 500 }\n      ];\n\n      let totalDuration = steps.reduce((sum, step) => sum + step.duration, 0);\n      let elapsed = 0;\n\n      for (const step of steps) {\n        statusMessage = step.message;\n        \n        // Animate progress during this step\n        const startProgress = (elapsed / totalDuration) * 100;\n        const endProgress = ((elapsed + step.duration) / totalDuration) * 100;\n        \n        const progressInterval = setInterval(() => {\n          progress = Math.min(progress + 2, endProgress);\n        }, 50);\n\n        await new Promise(resolve => setTimeout(resolve, step.duration));\n        clearInterval(progressInterval);\n        \n        elapsed += step.duration;\n        progress = endProgress;\n      }\n\n      // Update plan store\n      await planStore.upgradeTo(selectedPlan);\n      \n      upgradeStep = 'success';\n      progress = 100;\n      statusMessage = 'Upgrade completed successfully!';\n      \n      // Delay before calling completion callback\n      setTimeout(() => {\n        onComplete();\n        show = false;\n      }, 2000);\n\n    } catch (error) {\n      console.error('Upgrade failed:', error);\n      statusMessage = 'Upgrade failed. Please try again.';\n      isProcessing = false;\n      upgradeStep = 'overview';\n    }\n  }\n\n  function handleSelectPlan(planType: PlanType) {\n    selectedPlan = planType;\n    upgradeStep = 'selecting';\n  }\n\n  function confirmUpgrade() {\n    processUpgrade();\n  }\n\n  function goBack() {\n    upgradeStep = 'overview';\n  }\n</script>\n\n{#if show}\n  <div class=\"fixed inset-0 z-50 overflow-y-auto\">\n    <div class=\"flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n      <!-- Background overlay -->\n      <button class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onclick={() => show = false} aria-label=\"Close modal\"></button>\n\n      <!-- Modal content -->\n      <div class=\"relative inline-block align-bottom bg-white dark:bg-zinc-900 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full sm:p-6\">\n        \n        {#if upgradeStep === 'overview'}\n          <!-- Plan Overview -->\n          <div class=\"text-center mb-6\">\n            <div class=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-gradient-to-br {planColors[selectedPlan]} mb-4\">\n              <span class=\"text-2xl\">{getPlanIcon(selectedPlan)}</span>\n            </div>\n            <h3 class=\"text-lg font-medium text-zinc-900 dark:text-white\">\n              Upgrade Your YAKKL Wallet\n            </h3>\n            <p class=\"mt-2 text-sm text-zinc-600 dark:text-zinc-400\">\n              {trial ? 'Your trial is ending soon. ' : ''}Choose a plan that fits your needs\n            </p>\n          </div>\n\n          <!-- Current Plan Status -->\n          <div class=\"bg-zinc-50 dark:bg-zinc-800 rounded-lg p-4 mb-6\">\n            <div class=\"flex items-center justify-between\">\n              <div>\n                <span class=\"text-sm font-medium text-zinc-900 dark:text-white\">Current Plan:</span>\n                <span class=\"ml-2 px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full\">\n                  {formatPlanName(plan)}\n                </span>\n              </div>\n              {#if trial}\n                <div class=\"text-right\">\n                  <span class=\"text-xs text-orange-600 dark:text-orange-400\">Trial</span>\n                  <div class=\"text-xs text-zinc-500\">\n                    {$planStore.plan.trialEndsAt ? new Date($planStore.plan.trialEndsAt).toLocaleDateString() : 'Soon'}\n                  </div>\n                </div>\n              {/if}\n            </div>\n          </div>\n\n          <!-- Available Upgrades -->\n          <div class=\"space-y-4 mb-6\">\n            {#each getAvailableUpgrades() as planType}\n              {@const pricing = planPricing[planType]}\n              <div \n                class=\"border border-zinc-200 dark:border-zinc-700 rounded-lg p-4 hover:border-indigo-300 dark:hover:border-indigo-600 cursor-pointer transition-colors\"\n                onclick={() => handleSelectPlan(planType)}\n              >\n                <div class=\"flex items-center justify-between mb-3\">\n                  <div class=\"flex items-center\">\n                    <span class=\"text-2xl mr-3\">{getPlanIcon(planType)}</span>\n                    <div>\n                      <h4 class=\"font-medium text-zinc-900 dark:text-white\">\n                        {formatPlanName(planType)}\n                      </h4>\n                      <p class=\"text-sm text-zinc-600 dark:text-zinc-400\">\n                        Perfect for {planType === PlanType.Pro ? 'advanced users' : \n                                    planType === PlanType.Enterprise ? 'businesses' : \n                                    'maximum privacy'}\n                      </p>\n                    </div>\n                  </div>\n                  <div class=\"text-right\">\n                    <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">\n                      {pricing.monthly > 0 ? `$${pricing.monthly}` : 'Free'}\n                    </div>\n                    {#if pricing.monthly > 0}\n                      <div class=\"text-xs text-zinc-500\">/month</div>\n                    {/if}\n                  </div>\n                </div>\n                \n                <div class=\"grid grid-cols-2 gap-2\">\n                  {#each planFeatures[planType].slice(0, 4) as feature}\n                    <div class=\"flex items-center text-sm text-zinc-600 dark:text-zinc-400\">\n                      <svg class=\"w-4 h-4 text-green-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n                      </svg>\n                      {feature}\n                    </div>\n                  {/each}\n                </div>\n              </div>\n            {/each}\n          </div>\n\n        {:else if upgradeStep === 'selecting'}\n          <!-- Plan Selection Details -->\n          <div class=\"text-center mb-6\">\n            <div class=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-gradient-to-br {planColors[selectedPlan]} mb-4\">\n              <span class=\"text-2xl\">{getPlanIcon(selectedPlan)}</span>\n            </div>\n            <h3 class=\"text-lg font-medium text-zinc-900 dark:text-white\">\n              {formatPlanName(selectedPlan)} Plan\n            </h3>\n            <p class=\"mt-2 text-sm text-zinc-600 dark:text-zinc-400\">\n              Review your plan selection\n            </p>\n          </div>\n\n          <!-- Plan Details -->\n          <div class=\"bg-gradient-to-br {planColors[selectedPlan]} rounded-lg p-6 text-white mb-6\">\n            <div class=\"text-center\">\n              <div class=\"text-3xl font-bold mb-2\">\n                ${planPricing[selectedPlan].monthly}/month\n              </div>\n              <div class=\"text-sm opacity-80\">\n                or ${planPricing[selectedPlan].yearly}/year (save 17%)\n              </div>\n            </div>\n          </div>\n\n          <!-- Features List -->\n          <div class=\"space-y-3 mb-6\">\n            <h4 class=\"font-medium text-zinc-900 dark:text-white\">Included Features:</h4>\n            {#each planFeatures[selectedPlan] as feature}\n              <div class=\"flex items-center text-sm text-zinc-600 dark:text-zinc-400\">\n                <svg class=\"w-4 h-4 text-green-500 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n                </svg>\n                {feature}\n              </div>\n            {/each}\n          </div>\n\n        {:else if upgradeStep === 'processing'}\n          <!-- Processing -->\n          <div class=\"text-center\">\n            <div class=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-indigo-100 dark:bg-indigo-900 mb-4\">\n              <svg class=\"w-6 h-6 text-indigo-600 dark:text-indigo-400 animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n              </svg>\n            </div>\n            <h3 class=\"text-lg font-medium text-zinc-900 dark:text-white mb-4\">\n              Processing Upgrade\n            </h3>\n            \n            <!-- Progress Bar -->\n            <div class=\"w-full max-w-md mx-auto mb-4\">\n              <div class=\"flex mb-2 items-center justify-between\">\n                <span class=\"text-xs font-semibold text-indigo-600 dark:text-indigo-400\">\n                  {statusMessage}\n                </span>\n                <span class=\"text-xs font-semibold text-indigo-600 dark:text-indigo-400\">\n                  {Math.round(progress)}%\n                </span>\n              </div>\n              <div class=\"overflow-hidden h-2 text-xs flex rounded bg-indigo-200 dark:bg-indigo-800\">\n                <div \n                  style=\"width: {progress}%\" \n                  class=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500 transition-all duration-300\"\n                ></div>\n              </div>\n            </div>\n          </div>\n\n        {:else if upgradeStep === 'success'}\n          <!-- Success -->\n          <div class=\"text-center\">\n            <div class=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 dark:bg-green-900 mb-4\">\n              <svg class=\"w-6 h-6 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h3 class=\"text-lg font-medium text-zinc-900 dark:text-white mb-2\">\n              Upgrade Successful!\n            </h3>\n            <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n              Welcome to {formatPlanName(selectedPlan)}! Your new features are now available.\n            </p>\n            <div class=\"text-xs text-zinc-500\">\n              Redirecting to your wallet...\n            </div>\n          </div>\n        {/if}\n\n        <!-- Actions -->\n        {#if upgradeStep === 'overview'}\n          <div class=\"flex justify-end space-x-3\">\n            <button\n              onclick={onCancel}\n              class=\"px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-white dark:bg-zinc-800 border border-zinc-300 dark:border-zinc-600 rounded-md hover:bg-zinc-50 dark:hover:bg-zinc-700\"\n            >\n              Cancel\n            </button>\n          </div>\n        {:else if upgradeStep === 'selecting'}\n          <div class=\"flex justify-between\">\n            <button\n              onclick={goBack}\n              class=\"px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-white dark:bg-zinc-800 border border-zinc-300 dark:border-zinc-600 rounded-md hover:bg-zinc-50 dark:hover:bg-zinc-700\"\n            >\n              Back\n            </button>\n            <div class=\"space-x-3\">\n              <button\n                onclick={onCancel}\n                class=\"px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-white dark:bg-zinc-800 border border-zinc-300 dark:border-zinc-600 rounded-md hover:bg-zinc-50 dark:hover:bg-zinc-700\"\n              >\n                Cancel\n              </button>\n              <button\n                onclick={confirmUpgrade}\n                class=\"px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700\"\n              >\n                Upgrade Now\n              </button>\n            </div>\n          </div>\n        {:else if upgradeStep === 'processing'}\n          <!-- No actions during processing -->\n        {:else if upgradeStep === 'success'}\n          <!-- Auto-closes -->\n        {/if}\n      </div>\n    </div>\n  </div>\n{/if}"],"names":["PlanType","BASIC_FEATURES","PRO_FEATURES","ENTERPRISE_FEATURES","PRIVATE_FEATURES","PAYMENT_FEATURES","FEATURES","Basic","Pro","Enterprise","Private","PAYMENT","PLAN_FEATURES","BASIC","PRO","ENTERPRISE","PRIVATE","hasFeature","userPlan","feature","planFeatures","includes","getFeaturesForPlan","plan","isTrialUser","trialEndsAt","Date","createPlanStore","subscribe","set","update","writable","type","features","loading","loadPlan","state","settings","getSettings","planType","onTrial","effectivePlan","subscriptionId","error","canUseFeature","planState","upgradeTo","newPlan","Promise","resolve","setTimeout","updatedSettings","now","updatedAt","toISOString","localStorage","setItem","JSON","stringify","upgradedAt","console","log","downgradeTo","startTrial","trialDays","setDate","getDate","getUpgradeOptions","currentPlan","plans","currentIndex","indexOf","slice","getPlanStatus","trialActive","hasSubscription","current","canUpgrade","reset","planStore","derived","$store","isProUser","isOnTrial","Logger","prefix","constructor","this","debug","args","info","warn","child","childPrefix","FeatureManager","enabledFeatures","Set","updateFeatures","setPlan","canUse","has","getEnabledFeatures","Array","from","getCurrentPlan","hasAccess","requiredPlan","planHierarchy","currentLevel","requiredLevel","clear","getPlanFeatures","forEach","add","featureManager","show","onComplete","onCancel","className","$.store_get","$$store_subs","trial","selectedPlan","planPricing","monthly","yearly","planColors","getAvailableUpgrades","formatPlanName","replace","split","map","word","charAt","toUpperCase","toLowerCase","join","getPlanIcon","$$payload","out","$.attr_class","$.stringify","$.escape","toLocaleDateString","each_array","$$index_1","pricing","each_array_1","$.ensure_array_like","$$index"],"mappings":"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"}