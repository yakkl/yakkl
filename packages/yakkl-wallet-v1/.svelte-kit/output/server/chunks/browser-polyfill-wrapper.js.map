{"version":3,"file":"browser-polyfill-wrapper.js","sources":["../../../../src/lib/browser-polyfill-wrapper.ts"],"sourcesContent":["// $lib/browser-polyfill-wrapper.ts\nimport type { Browser } from 'webextension-polyfill';\nimport { log } from '$lib/managers/Logger';\n\nlet browser_ext: Browser | null = null;\nlet initialized = false;\n\n// Helper function to safely check the environment\nfunction isServerSide(): boolean {\n\treturn typeof window === 'undefined' || typeof document === 'undefined';\n}\n\nexport function getBrowserExt(): Browser | null {\n\t// Don't attempt to use outside a browser\n\tif (isServerSide()) {\n\t\treturn null;\n\t}\n\n\tif (!initialized) {\n\t\tinitializeBrowserAPI();\n\t}\n\n\treturn browser_ext;\n}\n\nexport function initializeBrowserAPI(): Browser | null {\n\tif (initialized) return browser_ext;\n\n\t// Skip for SSR\n\tif (isServerSide()) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t// Access the global browser object\n\t\tif (window && (window as any).browser) {\n\t\t\tbrowser_ext = (window as any).browser as Browser;\n\t\t\tinitialized = true;\n\t\t} else {\n\t\t\tlog.warn('Browser extension API not found in global scope');\n\t\t}\n\t} catch (error: unknown) {\n\t\tlog.error('Failed to initialize browser extension API:', false, error);\n\t}\n\n\treturn browser_ext;\n}\n\n// For asynchronous access\nexport async function getBrowserExtAsync(): Promise<Browser | null> {\n\tif (isServerSide()) return null;\n\treturn getBrowserExt();\n}\n"],"names":["browser_ext","initialized","isServerSide","window","document","getBrowserExt","initializeBrowserAPI","browser","log","warn","error"],"mappings":"kCAIA,IAAIA,YAA8B,KAClC,IAAIC,YAAc,MAGlB,SAASC,eACR,cAAcC,SAAW,oBAAsBC,WAAa,WAC7D,CAEO,SAASC,gBAEf,GAAIH,eAAgB,CACZ,OAAA,IAAA,CAGR,IAAKD,YAAa,CACIK,sBAAA,CAGf,OAAAN,WACR,CAEO,SAASM,uBACf,GAAIL,YAAoB,OAAAD,YAGxB,GAAIE,eAAgB,CACZ,OAAA,IAAA,CAGJ,IAEC,GAAAC,QAAWA,OAAeI,QAAS,CACtCP,YAAeG,OAAeI,QAChBN,YAAA,IAAA,KACR,CACNO,IAAIC,KAAK,kDAAiD,QAEnDC,OACJF,IAAAE,MAAM,8CAA+C,MAAOA,MAAK,CAG/D,OAAAV,WACR"}