{"version":3,"file":"Receive.js","sources":["../../../../src/lib/components/TokenDropdown.svelte","../../../../src/lib/common/stores/uiStateStore.ts","../../../../src/lib/components/SwapTokenPrice.svelte","../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/switch.svelte.js","../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/components/switch-input.svelte","../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/components/switch.svelte","../../../../../../node_modules/.pnpm/bits-ui@1.0.0-next.74_svelte@5.34.3/node_modules/bits-ui/dist/bits/switch/components/switch-thumb.svelte","../../../../src/lib/components/ui/switch/switch.svelte","../../../../src/lib/components/ToggleSwitch.svelte","../../../../src/lib/components/NumericInput.svelte","../../../../src/lib/components/SellTokenPanel.svelte","../../../../src/lib/components/BuyTokenPanel.svelte","../../../../src/lib/components/SwapSettings.svelte","../../../../src/lib/components/SwapSummary.svelte","../../../../src/lib/managers/Token.ts","../../../../src/lib/utilities/balanceUtils.ts","../../../../src/lib/common/validation.ts","../../../../src/lib/components/Swap.svelte","../../../../src/lib/components/QR.svelte","../../../../src/lib/components/Receive.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { derived } from 'svelte/store';\n\timport { sortedTokens } from '$lib/common/stores/tokens';\n\timport type { SwapToken } from '$lib/common/interfaces';\n\n\tinterface Props {\n\t\tselectedToken: SwapToken;\n\t\tdisabled?: boolean;\n\t\tonTokenSelect: (token: SwapToken) => void;\n\t}\n\n\tlet { selectedToken, disabled = false, onTokenSelect }: Props = $props();\n\n\t// svelte-ignore non_reactive_update\n\tlet isOpen = $state(false);\n\tlet searchQuery = $state('');\n\n\t// Use derived to filter tokens based on searchQuery\n\tconst filteredTokens = derived([sortedTokens], ([$sortedTokens]) =>\n\t\tsearchQuery.trim()\n\t\t\t? $sortedTokens.filter(\n\t\t\t\t\t(token) =>\n\t\t\t\t\t\ttoken.symbol.toLowerCase().includes(searchQuery.toLowerCase()) ||\n\t\t\t\t\t\ttoken.name.toLowerCase().includes(searchQuery.toLowerCase())\n\t\t\t\t)\n\t\t\t: $sortedTokens\n\t);\n\n\tfunction toggleDropdown() {\n\t\tif (disabled) return;\n\t\tisOpen = !isOpen;\n\t\tif (isOpen) {\n\t\t\tsearchQuery = '';\n\t\t}\n\t}\n\n\tfunction selectToken(token: SwapToken) {\n\t\tif (disabled) return;\n\n\t\tselectedToken = token;\n\t\tonTokenSelect(token);\n\t\tisOpen = false;\n\t\tsearchQuery = '';\n\t}\n\n\tfunction getLogoURL(logoURI: string | null | undefined): string {\n\t\tif (!logoURI || logoURI.startsWith('http://') || logoURI.startsWith('ipfs://')) {\n\t\t\treturn '/images/logoBullFav32x32.png';\n\t\t}\n\t\treturn logoURI!;\n\t}\n</script>\n\n<div class=\"relative w-full max-w-sm mx-auto\">\n\t<button\n\t\tclass=\"w-full flex items-center px-4 py-3\n      {disabled\n\t\t\t? 'bg-gray-500 text-gray-200 cursor-not-allowed'\n\t\t\t: 'bg-purple-600 text-white hover:bg-purple-700'}\n      font-bold rounded-full transition duration-300 ease-in-out focus:outline-none\"\n\t\tonclick={toggleDropdown}\n\t\t{disabled}\n\t>\n\t\t{#if selectedToken?.symbol && selectedToken?.name}\n\t\t\t<img\n\t\t\t\tsrc={getLogoURL(selectedToken.logoURI)}\n\t\t\t\talt={selectedToken.name}\n\t\t\t\tclass=\"w-8 h-8 rounded-full\"\n\t\t\t/>\n\t\t\t<div class=\"flex-1 flex flex-col ml-3\">\n\t\t\t\t<span class=\"font-bold text-lg\">{selectedToken.symbol}</span>\n\t\t\t\t<span class=\"text-sm text-gray-200 mt-0.5\">{selectedToken.name}</span>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<span class=\"ml-3\">Select Token</span>\n\t\t{/if}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\tclass=\"ml-auto h-5 w-5 transition-transform duration-300\"\n\t\t\tviewBox=\"0 0 20 20\"\n\t\t\tfill=\"currentColor\"\n\t\t>\n\t\t\t<path\n\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\td=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t/>\n\t\t</svg>\n\t</button>\n\n\t{#if isOpen && !disabled}\n\t\t<div\n\t\t\tclass=\"absolute z-10 w-full bg-white dark:text-gray-600 rounded-md shadow-lg mt-2 p-2 border border-gray-200\"\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\tclass=\"w-full px-4 py-2 mb-2 border border-gray-300 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition duration-200\"\n\t\t\t\tbind:value={searchQuery}\n\t\t\t/>\n\t\t\t<ul class=\"max-h-60 overflow-y-auto w-full\">\n\t\t\t\t{#each $filteredTokens as token}\n\t\t\t\t\t<!-- svelte-ignore a11y_click_events_have_key_events -->\n\t\t\t\t\t<!-- svelte-ignore a11y_no_noninteractive_element_interactions -->\n\t\t\t\t\t<li\n\t\t\t\t\t\tclass=\"px-4 py-2 flex items-center space-x-3 hover:bg-gray-100 cursor-pointer transition duration-200\"\n\t\t\t\t\t\tonclick={() => selectToken(token)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={getLogoURL(token.logoURI)} alt={token.name} class=\"w-8 h-8 rounded-full\" />\n\t\t\t\t\t\t<div class=\"flex-1 flex flex-col\">\n\t\t\t\t\t\t\t<span class=\"font-bold text-gray-800\">{token.symbol}</span>\n\t\t\t\t\t\t\t<span class=\"text-sm text-gray-600\">{token.name}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t{:else}\n\t\t\t\t\t<li class=\"px-4 py-2 text-gray-500\">No tokens found</li>\n\t\t\t\t{/each}\n\t\t\t</ul>\n\t\t</div>\n\t{/if}\n</div>\n","import { writable } from 'svelte/store';\n\n// Shared store for UI state\nexport const isUsdModeStore = writable(false); // Default is quantity mode\n","<script lang=\"ts\">\n\timport { formatDate } from '$lib/common/datetime';\n\timport type { SwapPriceData } from '$lib/common/interfaces';\n\timport { toBigInt } from '$lib/common/math';\n\timport { formatPrice, formatQuantity } from '$lib/utilities';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { onMount } from 'svelte';\n\timport type { Writable } from 'svelte/store';\n\timport { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\n\tlet isUsdMode = $state(isUsdModeStore);\n\n\tinterface Props {\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\ttype?: 'sell' | 'buy';\n\t\tshowLastUpdated?: boolean;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\tswapPriceDataStore,\n\t\ttype = 'sell',\n\t\tshowLastUpdated = false,\n\t\tclassName = ''\n\t}: Props = $props();\n\n\t// Display the price based on the type (sell/buy)\n\tlet price = $state(0);\n\tlet amount = $state(0n);\n\tlet decimals = $state(0);\n\n\tonMount(async () => {\n\t\tswapPriceDataUpdated();\n\t});\n\n\tfunction swapPriceDataUpdated() {\n\t\tif (swapPriceData) {\n\t\t\tconst tokenIn = swapPriceData.tokenIn;\n\t\t\tconst tokenOut = swapPriceData.tokenOut;\n\t\t\tconst amountIn = toBigInt(swapPriceData.amountIn);\n\t\t\tconst amountOut = toBigInt(swapPriceData.amountOut);\n\t\t\tconst marketPriceIn = swapPriceData.marketPriceIn;\n\t\t\tconst marketPriceOut = swapPriceData.marketPriceOut;\n\n\t\t\tprice = 0;\n\n\t\t\tif (type === 'sell') {\n\t\t\t\tdecimals = tokenIn?.decimals || 0;\n\t\t\t\tamount = amountIn;\n\t\t\t\tif (amountIn > 0n && marketPriceIn > 0) {\n\t\t\t\t\tprice = parseFloat(ethersv6.formatUnits(amountIn, tokenIn.decimals)) * marketPriceIn;\n\t\t\t\t} else {\n\t\t\t\t\tprice = Math.abs(marketPriceIn);\n\t\t\t\t}\n\t\t\t} else if (type === 'buy') {\n\t\t\t\tdecimals = tokenOut?.decimals || 0;\n\t\t\t\tamount = amountOut;\n\t\t\t\tif (amountOut > 0n && marketPriceOut > 0) {\n\t\t\t\t\tprice = parseFloat(ethersv6.formatUnits(amountOut, tokenOut.decimals)) * marketPriceOut;\n\t\t\t\t} else {\n\t\t\t\t\tprice = Math.abs(marketPriceOut);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getSymbolPair() {\n\t\tconst inSymbol = swapPriceData.tokenIn?.symbol || '';\n\t\tconst outSymbol = swapPriceData.tokenOut?.symbol || '';\n\t\treturn inSymbol && outSymbol ? `${inSymbol}/${outSymbol}` : '';\n\t}\n\n\tlet swapPriceData = $derived($swapPriceDataStore);\n\n\t// Replace run with $effect\n\t$effect(() => {\n\t\tif (swapPriceData) {\n\t\t\tswapPriceDataUpdated();\n\t\t}\n\t});\n</script>\n\n<div class=\"flex flex-col w-full gap-1 {className}\">\n\t<div class=\"flex justify-between items-center w-full\">\n\t\t<div class=\"flex items-center gap-2\">\n\t\t\t<span class=\"text-sm text-gray-600\">{getSymbolPair()}</span>\n\t\t\t<span class=\"text-sm font-semibold\"\n\t\t\t\t>{isUsdMode ? `${formatPrice(price)}` : `${formatQuantity(amount, decimals)}`}</span\n\t\t\t>\n\t\t</div>\n\t</div>\n\n\t<div class=\"flex justify-between items-center w-full text-xs text-gray-500\">\n\t\t{#if price > 0 && showLastUpdated && swapPriceData && swapPriceData.lastUpdated}\n\t\t\t<span>Last updated: {formatDate(swapPriceData.lastUpdated)}</span>\n\t\t{/if}\n\t</div>\n</div>\n","import { srOnlyStyles, styleToString, useRefById } from \"svelte-toolbelt\";\nimport { getAriaChecked, getAriaHidden, getAriaRequired, getDataChecked, getDataDisabled, getDataRequired, getDisabled, } from \"../../internal/attrs.js\";\nimport { kbd } from \"../../internal/kbd.js\";\nimport { createContext } from \"../../internal/create-context.js\";\nconst ROOT_ATTR = \"data-switch-root\";\nconst THUMB_ATTR = \"data-switch-thumb\";\nclass SwitchRootState {\n    #id;\n    #ref;\n    checked;\n    disabled;\n    required;\n    name;\n    value;\n    constructor(props) {\n        this.checked = props.checked;\n        this.disabled = props.disabled;\n        this.required = props.required;\n        this.name = props.name;\n        this.value = props.value;\n        this.#id = props.id;\n        this.#ref = props.ref;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n        });\n        this.onkeydown = this.onkeydown.bind(this);\n        this.onclick = this.onclick.bind(this);\n    }\n    #toggle() {\n        this.checked.current = !this.checked.current;\n    }\n    onkeydown(e) {\n        if (!(e.key === kbd.ENTER || e.key === kbd.SPACE) || this.disabled.current)\n            return;\n        e.preventDefault();\n        this.#toggle();\n    }\n    onclick(_) {\n        if (this.disabled.current)\n            return;\n        this.#toggle();\n    }\n    sharedProps = $derived.by(() => ({\n        \"data-disabled\": getDataDisabled(this.disabled.current),\n        \"data-state\": getDataChecked(this.checked.current),\n        \"data-required\": getDataRequired(this.required.current),\n    }));\n    props = $derived.by(() => ({\n        ...this.sharedProps,\n        id: this.#id.current,\n        role: \"switch\",\n        disabled: getDisabled(this.disabled.current),\n        \"aria-checked\": getAriaChecked(this.checked.current, false),\n        \"aria-required\": getAriaRequired(this.required.current),\n        [ROOT_ATTR]: \"\",\n        //\n        onclick: this.onclick,\n        onkeydown: this.onkeydown,\n    }));\n}\nclass SwitchInputState {\n    #root;\n    shouldRender = $derived.by(() => this.#root.name.current !== undefined);\n    constructor(root) {\n        this.#root = root;\n    }\n    props = $derived.by(() => ({\n        type: \"checkbox\",\n        name: this.#root.name.current,\n        value: this.#root.value.current,\n        checked: this.#root.checked.current,\n        disabled: this.#root.disabled.current,\n        required: this.#root.required.current,\n        \"aria-hidden\": getAriaHidden(true),\n        style: styleToString(srOnlyStyles),\n    }));\n}\nclass SwitchThumbState {\n    #id;\n    #ref;\n    root;\n    constructor(props, root) {\n        this.root = root;\n        this.#id = props.id;\n        this.#ref = props.ref;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n        });\n    }\n    props = $derived.by(() => ({\n        ...this.root.sharedProps,\n        id: this.#id.current,\n        [THUMB_ATTR]: \"\",\n    }));\n}\n//\n// CONTEXT METHODS\n//\nconst [setSwitchRootContext, getSwitchRootContext] = createContext(\"Switch.Root\");\nexport function useSwitchRoot(props) {\n    return setSwitchRootContext(new SwitchRootState(props));\n}\nexport function useSwitchInput() {\n    return new SwitchInputState(getSwitchRootContext());\n}\nexport function useSwitchThumb(props) {\n    return new SwitchThumbState(props, getSwitchRootContext());\n}\n","<script lang=\"ts\">\n\timport { useSwitchInput } from \"../switch.svelte.js\";\n\n\tconst inputState = useSwitchInput();\n</script>\n\n{#if inputState.shouldRender}\n\t<input {...inputState.props} />\n{/if}\n","<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { SwitchRootProps } from \"../types.js\";\n\timport { useSwitchRoot } from \"../switch.svelte.js\";\n\timport SwitchInput from \"./switch-input.svelte\";\n\timport { useId } from \"../../../internal/use-id.js\";\n\timport { noop } from \"../../../internal/noop.js\";\n\n\tlet {\n\t\tchild,\n\t\tchildren,\n\t\tref = $bindable(null),\n\t\tid = useId(),\n\t\tdisabled = false,\n\t\trequired = false,\n\t\tchecked = $bindable(false),\n\t\tvalue = \"on\",\n\t\tname = undefined,\n\t\ttype = \"button\",\n\t\tonCheckedChange = noop,\n\t\tcontrolledChecked = false,\n\t\t...restProps\n\t}: SwitchRootProps = $props();\n\n\tconst rootState = useSwitchRoot({\n\t\tchecked: box.with(\n\t\t\t() => checked,\n\t\t\t(v) => {\n\t\t\t\tif (controlledChecked) {\n\t\t\t\t\tonCheckedChange(v);\n\t\t\t\t} else {\n\t\t\t\t\tchecked = v;\n\t\t\t\t\tonCheckedChange?.(v);\n\t\t\t\t}\n\t\t\t}\n\t\t),\n\t\tdisabled: box.with(() => disabled ?? false),\n\t\trequired: box.with(() => required),\n\t\tvalue: box.with(() => value),\n\t\tname: box.with(() => name),\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, rootState.props, { type }));\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps, checked: rootState.checked.current })}\n{:else}\n\t<button {...mergedProps}>\n\t\t{@render children?.({ checked: rootState.checked.current })}\n\t</button>\n{/if}\n\n<SwitchInput />\n","<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { SwitchThumbProps } from \"../types.js\";\n\timport { useSwitchThumb } from \"../switch.svelte.js\";\n\timport { useId } from \"../../../internal/use-id.js\";\n\n\tlet {\n\t\tchild,\n\t\tchildren,\n\t\tref = $bindable(null),\n\t\tid = useId(),\n\t\t...restProps\n\t}: SwitchThumbProps = $props();\n\n\tconst thumbState = useSwitchThumb({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, thumbState.props));\n</script>\n\n{#if child}\n\t{@render child({ props: mergedProps, checked: thumbState.root.checked.current })}\n{:else}\n\t<span {...mergedProps}>\n\t\t{@render children?.({ checked: thumbState.root.checked.current })}\n\t</span>\n{/if}\n","<script lang=\"ts\">\n\timport { Switch as SwitchPrimitive, type WithoutChildrenOrChild } from 'bits-ui';\n\timport { cn } from '$lib/utils.js';\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tchecked = $bindable(false),\n\t\t...restProps\n\t}: WithoutChildrenOrChild<SwitchPrimitive.RootProps> = $props();\n</script>\n\n<SwitchPrimitive.Root\n\tbind:ref\n\tbind:checked\n\tclass={cn(\n\t\t'focus-visible:ring-ring focus-visible:ring-offset-background data-[state=checked]:bg-primary data-[state=unchecked]:bg-input peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t<SwitchPrimitive.Thumb\n\t\tclass={cn(\n\t\t\t'bg-slate-200 pointer-events-none block h-4 w-4 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0'\n\t\t)}\n\t/>\n</SwitchPrimitive.Root>\n","<script lang=\"ts\">\n\timport Switch from './ui/switch/switch.svelte';\n\n\tinterface Props {\n\t\tvalue: boolean;\n\t\tlabelOn: string;\n\t\tlabelOff: string;\n\t\tdisabled?: boolean;\n\t\tonChange: (value: boolean) => void; // Callback for value change\n\t\t[key: string]: any;\n\t}\n\n\tlet {\n\t\tvalue,\n\t\tlabelOn = 'USD',\n\t\tlabelOff = 'Token',\n\t\tdisabled = false,\n\t\tonChange,\n\t\t...rest\n\t}: Props = $props();\n\n\t// Create a reactive state for `value`\n\tlet checked = $state(value);\n\n\t// Watch for changes in `checked` and call onChange\n\t$effect(() => {\n\t\tif (!disabled) {\n\t\t\tonChange(checked);\n\t\t}\n\t});\n</script>\n\n<div class=\"flex items-center\">\n\t<span class=\"mr-2 text-sm w-10\">{checked ? labelOn : labelOff}</span>\n\t<Switch\n\t\tclass=\"peer inline-flex h-6 w-10 cursor-pointer items-center rounded-full border-2 border-purple-600 shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n\t\tbind:checked\n\t\t{disabled}\n\t/>\n</div>\n\n<!-- The default values for the thumb control is: \"bg-background pointer-events-none block size-5 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\" -->\n<!-- We changed it to: bg-slate-500 pointer-events-none block h-4 w-4 rounded-full shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0 -->\n","<!-- NumericInput.svelte -->\n<script lang=\"ts\">\n\tconst {\n\t\tvalue = '',\n\t\tplaceholder = '0',\n\t\tdisabled = false,\n\t\terrorClass = '',\n\t\tclassName = '',\n\t\tonChange = (value: string) => {},\n\t\tonBlur = (value: string) => {}\n\t} = $props<{\n\t\tvalue?: string;\n\t\tplaceholder?: string;\n\t\tdisabled?: boolean;\n\t\terrorClass?: string;\n\t\tclassName?: string;\n\t\tonChange?: (value: string) => void;\n\t\tonBlur?: (value: string) => void;\n\t}>();\n\n\tlet inputValue = $state(value || '');\n\n\t$effect(() => {\n\t\tif (value !== inputValue) {\n\t\t\tinputValue = value;\n\t\t}\n\t});\n\n\tfunction handleInput(e: Event) {\n\t\tconst value = (e.currentTarget as HTMLInputElement).value;\n\n\t\t// Only basic validation for numbers and decimal\n\t\tif (!/^[0-9]*\\.?[0-9]*$/.test(value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tinputValue = value;\n\t\tonChange(value);\n\t}\n</script>\n\n<input\n\ttype=\"text\"\n\t{placeholder}\n\t{disabled}\n\tvalue={inputValue}\n\toninput={handleInput}\n\tonblur={onBlur}\n\tclass=\"{className} {errorClass}\"\n/>\n","<!-- SellTokenPanel.svelte -->\n<script lang=\"ts\">\n\timport type { Writable } from 'svelte/store';\n\timport TokenDropdown from './TokenDropdown.svelte';\n\timport SwapTokenPrice from './SwapTokenPrice.svelte';\n\timport type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n\timport { debounce } from 'lodash-es';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { convertTokenToUsd, convertUsdToTokenAmount, toBigInt } from '$lib/common';\n\timport ToggleSwitch from './ToggleSwitch.svelte';\n\timport { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\timport NumericInput from './NumericInput.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\n\tinterface Props {\n\t\tdisabled?: boolean;\n\t\tresetValues?: boolean;\n\t\tinsufficientBalance?: boolean;\n\t\tbalance?: string;\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tonTokenSelect: (token: SwapToken) => void;\n\t\tonAmountChange: (amount: string) => void;\n\t\tlastModifiedPanel?: string;\n\t}\n\n\tlet {\n\t\tdisabled = false,\n\t\tresetValues = $bindable(false),\n\t\tinsufficientBalance = false,\n\t\tbalance = '0',\n\t\tswapPriceDataStore,\n\t\tonTokenSelect,\n\t\tonAmountChange,\n\t\tlastModifiedPanel = $bindable('sell')\n\t}: Props = $props();\n\n\tlet tokenValue = $state('');\n\tlet usdValue = $state('');\n\tlet displayValue = $state('');\n\n\t// Reset handling\n\t$effect(() => {\n\t\tif (resetValues) {\n\t\t\ttokenValue = '';\n\t\t\tusdValue = '';\n\t\t\tdisplayValue = '';\n\t\t\tresetValues = false;\n\t\t}\n\t});\n\n\t// Update display value based on mode\n\t$effect(() => {\n\t\tdisplayValue = $isUsdModeStore ? usdValue : tokenValue;\n\t});\n\n\t// Update values when quote changes from buy panel\n\t$effect(() => {\n\t\tif (lastModifiedPanel === 'buy') {\n\t\t\tconst tokenAmount = ethersv6.formatUnits(\n\t\t\t\ttoBigInt($swapPriceDataStore.amountIn),\n\t\t\t\t$swapPriceDataStore.tokenIn.decimals\n\t\t\t);\n\t\t\tif ($isUsdModeStore) {\n\t\t\t\ttry {\n\t\t\t\t\tconst calculatedUsdAmount = convertTokenToUsd(\n\t\t\t\t\t\tNumber(tokenAmount),\n\t\t\t\t\t\t$swapPriceDataStore.marketPriceIn\n\t\t\t\t\t);\n\t\t\t\t\tusdValue = calculatedUsdAmount.toString();\n\t\t\t\t\ttokenValue = tokenAmount;\n\t\t\t\t\tdisplayValue = usdValue;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('Token to USD conversion error:', false, error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttokenValue = tokenAmount;\n\t\t\t\tdisplayValue = tokenValue;\n\t\t\t\tif ($swapPriceDataStore.marketPriceIn > 0) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst calculatedUsdAmount = convertTokenToUsd(\n\t\t\t\t\t\t\tNumber(tokenAmount),\n\t\t\t\t\t\t\t$swapPriceDataStore.marketPriceIn\n\t\t\t\t\t\t);\n\t\t\t\t\t\tusdValue = calculatedUsdAmount.toString();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlog.error('Token to USD conversion error:', false, error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tconst debouncedAmountChange = debounce((value: string) => {\n\t\tonAmountChange(value);\n\t}, 300);\n\n\tfunction handleAmountInput(value: string) {\n\t\tlastModifiedPanel = 'sell';\n\t\tconst marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n\n\t\tif (!value) {\n\t\t\ttokenValue = '';\n\t\t\tusdValue = '';\n\t\t\tdisplayValue = '';\n\t\t\tdebouncedAmountChange('');\n\t\t\treturn;\n\t\t}\n\n\t\tif ($isUsdModeStore) {\n\t\t\t// User is entering USD amount\n\t\t\tusdValue = value;\n\t\t\tif (marketPrice > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tconst calculatedTokenAmount = convertUsdToTokenAmount(\n\t\t\t\t\t\tNumber(value),\n\t\t\t\t\t\tmarketPrice,\n\t\t\t\t\t\t$swapPriceDataStore.tokenIn.decimals\n\t\t\t\t\t);\n\t\t\t\t\ttokenValue = calculatedTokenAmount.toString();\n\t\t\t\t\tdebouncedAmountChange(tokenValue);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('USD to Token conversion error:', false, error);\n\t\t\t\t\tdebouncedAmountChange('');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// User is entering token amount\n\t\t\ttokenValue = value;\n\t\t\tif (marketPrice > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tconst calculatedUsdAmount = convertTokenToUsd(Number(value), marketPrice);\n\t\t\t\t\tusdValue = calculatedUsdAmount.toString();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error('Token to USD conversion error:', false, error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdebouncedAmountChange(value);\n\t\t}\n\t}\n\n\tfunction handleTokenSelection(token: SwapToken) {\n\t\ttokenValue = '';\n\t\tusdValue = '';\n\t\tdisplayValue = '';\n\t\tonTokenSelect(token);\n\t}\n\n\tfunction handleBlur(value: string) {\n\t\t// No formatting on blur, maintain exact input values\n\t}\n</script>\n\n<div\n\tclass=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\"\n>\n\t<div class=\"flex justify-between items-center\">\n\t\t<NumericInput\n\t\t\tvalue={displayValue}\n\t\t\tonChange={handleAmountInput}\n\t\t\tonBlur={handleBlur}\n\t\t\t{disabled}\n\t\t\tclassName=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        {insufficientBalance ? 'text-red-500 dark:text-red-400 ' : 'text-black dark:text-white '}\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n\t\t/>\n\t\t<TokenDropdown\n\t\t\t{disabled}\n\t\t\tselectedToken={$swapPriceDataStore.tokenIn}\n\t\t\tonTokenSelect={handleTokenSelection}\n\t\t/>\n\t</div>\n\t<div class=\"flex justify-between items-center mt-2 text-sm\">\n\t\t<div class=\"flex items-center\">\n\t\t\t<ToggleSwitch\n\t\t\t\tvalue={$isUsdModeStore}\n\t\t\t\tlabelOn=\"USD\"\n\t\t\t\tlabelOff=\"Token\"\n\t\t\t\tclassName=\"bg-purple-300\"\n\t\t\t\tonChange={(value) => isUsdModeStore.set(value)}\n\t\t\t/>\n\t\t</div>\n\t\t<div class=\"flex flex-col items-end text-right\">\n\t\t\t<SwapTokenPrice {swapPriceDataStore} type=\"sell\" />\n\t\t\t<span>Balance: {balance}</span>\n\t\t</div>\n\t</div>\n\t{#if insufficientBalance}\n\t\t<div class=\"text-red-500 dark:text-red-400 text-sm mt-1\">\n\t\t\tInsufficient balance for this swap\n\t\t</div>\n\t{/if}\n</div>\n\n<!-- <script lang=\"ts\">\n  import type { Writable } from 'svelte/store';\n  import TokenDropdown from './TokenDropdown.svelte';\n  import SwapTokenPrice from './SwapTokenPrice.svelte';\n  import type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n  import { debounce } from 'lodash-es';\n  import { ethers as ethersv6 } from 'ethers-v6';\n  import { convertTokenToUsd, convertUsdToTokenAmount, toBigInt } from '$lib/common';\n  import ToggleSwitch from './ToggleSwitch.svelte';\n  import { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\timport NumericInput from './NumericInput.svelte';\n\n  interface Props {\n    disabled?: boolean;\n    resetValues?: boolean;\n    insufficientBalance?: boolean;\n    balance?: string;\n    swapPriceDataStore: Writable<SwapPriceData>;\n    onTokenSelect: (token: SwapToken) => void;\n    onAmountChange: (amount: string) => void;\n  }\n\n  let {\n    disabled = false,\n    resetValues = $bindable(false),\n    insufficientBalance = false,\n    balance = '0',\n    swapPriceDataStore,\n    onTokenSelect,\n    onAmountChange,\n  }: Props = $props();\n\n  let userInput = $state('');\n  let formattedAmount = $state('');\n\n  // Ensure resetValues resets inputs\n  $effect(() => {\n    if (resetValues) {\n      userInput = '';\n      formattedAmount = '';\n      resetValues = false;\n    }\n  });\n\n  // Calculate formattedAmount dynamically\n  $effect(() => {\n    const tokenAmount = ethersv6.formatUnits(toBigInt($swapPriceDataStore.amountIn), $swapPriceDataStore.tokenIn.decimals);\n    const usdAmount = $swapPriceDataStore.marketPriceIn > 0\n      ? convertTokenToUsd(Number(tokenAmount), $swapPriceDataStore.marketPriceIn)\n      : 0;\n\n    formattedAmount = $isUsdModeStore ? usdAmount.toFixed(2) : tokenAmount;\n    userInput = '';\n  });\n\n  // Debounced amount change handler\n  const debouncedAmountChange = debounce((value: string) => {\n    onAmountChange(value);\n  }, 300);\n\n  // Handle user input changes\n  function handleAmountInputEvent(event: Event) {\n    const input = event.target as HTMLInputElement;\n    let value = input.value;\n\n    // Allow only valid numbers\n    value = value.replace(/[^0-9.]/g, '');\n\n    // Handle decimals\n    const parts = value.split('.');\n    if (parts.length > 2) value = `${parts[0]}.${parts.slice(1).join('')}`;\n\n    // Limit decimal precision\n    if ($isUsdModeStore && parts[1]?.length > 2) {\n      value = `${parts[0]}.${parts[1].slice(0, 2)}`;\n    } else if (!$isUsdModeStore) {\n      const tokenDecimals = $swapPriceDataStore.tokenIn.decimals || 18;\n      if (parts[1]?.length > tokenDecimals) {\n        value = `${parts[0]}.${parts[1].slice(0, tokenDecimals)}`;\n      }\n    }\n\n    userInput = value;\n    if (value === '' || value === '.') {\n      formattedAmount = '';\n      debouncedAmountChange('');\n    } else {\n      formattedAmount = value;\n\n      if ($isUsdModeStore) {\n        const marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n        if (marketPrice > 0) {\n          const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenIn.decimals);\n          debouncedAmountChange(tokenAmount.toString());\n        } else {\n          debouncedAmountChange('');\n        }\n      } else {\n        debouncedAmountChange(value);\n      }\n    }\n  }\n\n  function handleAmountInput(value: string) {\n    // No need to get value from event.target anymore\n    if (value === '') { // || value === '.') {\n      formattedAmount = '';\n      debouncedAmountChange('');\n    } else {\n      formattedAmount = value;\n\n      if ($isUsdModeStore) {\n        const marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n        if (marketPrice > 0) {\n          const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenIn.decimals);\n          debouncedAmountChange(tokenAmount.toString());\n        } else {\n          debouncedAmountChange('');\n        }\n      } else {\n        debouncedAmountChange(value);\n      }\n    }\n  }\n\n  //   function handleAmountInputEvent(e: Event) {\n  //   const value = (e.currentTarget as HTMLInputElement).value;\n  //   // No need to get value from event.target anymore\n  //   if (value === '' || value === '.') {\n  //     formattedAmount = '';\n  //     debouncedAmountChange('');\n  //   } else {\n  //     formattedAmount = value;\n\n  //     if ($isUsdModeStore) {\n  //       const marketPrice = $swapPriceDataStore.marketPriceIn || 0;\n  //       if (marketPrice > 0) {\n  //         const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenIn.decimals);\n  //         debouncedAmountChange(tokenAmount.toString());\n  //       } else {\n  //         debouncedAmountChange('');\n  //       }\n  //     } else {\n  //       debouncedAmountChange(value);\n  //     }\n  //   }\n  // }\n\n  // Two versions for testing... (same for input and blur)\n  function handleBlurEvent() {\n    if (!userInput || userInput === '.') {\n      userInput = '';\n      formattedAmount = '';\n    } else {\n      formattedAmount = userInput;\n    }\n  }\n\n  function handleBlur(value: string) {\n    // if (!value || value === '.') {\n    //   userInput = '';\n    //   formattedAmount = '';\n    // } else {\n      formattedAmount = value;\n    // }\n  }\n</script>\n\n<div class=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\">\n  <div class=\"flex justify-between items-center\">\n    <NumericInput\n      value={userInput}\n      onChange={handleAmountInput}\n      onBlur={handleBlur}\n      disabled={disabled}\n      className=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        text-black dark:text-white\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n    />\n\n          oninput={handleAmountInput}\n      onblur={handleBlur}\n\n    <input\n      type=\"text\"\n      placeholder=\"0\"\n      value={userInput || formattedAmount}\n      disabled={disabled}\n      oninput={handleAmountInputEvent}\n      onblur={handleBlurEvent}\n      class=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        {insufficientBalance\n          ? 'text-red-500 dark:text-red-400 '\n          : 'text-black dark:text-white '}\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n    />\n\n    <TokenDropdown\n      disabled={disabled}\n      selectedToken={$swapPriceDataStore.tokenIn}\n      onTokenSelect={onTokenSelect}\n    />\n  </div>\n  <div class=\"flex justify-between items-center mt-2 text-sm\">\n    <div class=\"flex items-center\">\n      <ToggleSwitch\n        value={$isUsdModeStore}\n        labelOn=\"USD\"\n        labelOff=\"Token\"\n        className=\"bg-purple-300\"\n        onChange={(value) => isUsdModeStore.set(value)} />\n    </div>\n    <div class=\"flex flex-col items-end text-right\">\n      <SwapTokenPrice {swapPriceDataStore} type=\"sell\" />\n      <span>Balance: {balance}</span>\n    </div>\n  </div>\n  {#if insufficientBalance}\n    <div class=\"text-red-500 dark:text-red-400 text-sm mt-1\">\n      Insufficient balance for this swap\n    </div>\n  {/if}\n</div>\n -->\n","<!-- BuyTokenPanel.svelte -->\n<script lang=\"ts\">\n\timport type { Writable } from 'svelte/store';\n\timport TokenDropdown from './TokenDropdown.svelte';\n\timport SwapTokenPrice from './SwapTokenPrice.svelte';\n\timport type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n\timport { debounce } from 'lodash-es';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { toBigInt } from '$lib/common';\n\timport NumericInput from './NumericInput.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\n\tinterface Props {\n\t\tdisabled?: boolean;\n\t\tresetValues?: boolean;\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tonTokenSelect: (token: SwapToken) => void;\n\t\tonAmountChange: (amount: string) => void;\n\t\tlastModifiedPanel?: string;\n\t}\n\n\tlet {\n\t\tdisabled = false,\n\t\tresetValues = $bindable(false),\n\t\tswapPriceDataStore,\n\t\tonTokenSelect,\n\t\tonAmountChange,\n\t\tlastModifiedPanel = $bindable('sell')\n\t}: Props = $props();\n\n\tlet userInput = $state('');\n\tlet formattedAmount = $state('');\n\n\t// Reset handling\n\t$effect(() => {\n\t\tif (resetValues) {\n\t\t\tuserInput = '';\n\t\t\tformattedAmount = '';\n\t\t\tresetValues = false;\n\t\t}\n\t});\n\n\t// Update display amount when quote changes from sell panel\n\t$effect(() => {\n\t\tif (lastModifiedPanel === 'sell') {\n\t\t\t// Removed the !userInput check\n\t\t\tuserInput = ''; // Clear user input when sell panel changes\n\t\t\tconst tokenAmount = ethersv6.formatUnits(\n\t\t\t\ttoBigInt($swapPriceDataStore.amountOut),\n\t\t\t\t$swapPriceDataStore.tokenOut.decimals\n\t\t\t);\n\t\t\tformattedAmount = tokenAmount;\n\t\t}\n\t});\n\n\tconst debouncedAmountChange = debounce((value: string) => {\n\t\tonAmountChange(value);\n\t}, 300);\n\n\tfunction handleAmountInput(value: string) {\n\t\tlastModifiedPanel = 'buy';\n\n\t\tif (!value) {\n\t\t\tuserInput = '';\n\t\t\tformattedAmount = '';\n\t\t\tdebouncedAmountChange('');\n\t\t\treturn;\n\t\t}\n\n\t\tuserInput = value;\n\t\tformattedAmount = value;\n\t\tdebouncedAmountChange(value);\n\t}\n\n\tfunction handleTokenSelection(token: SwapToken) {\n\t\tuserInput = '';\n\t\tformattedAmount = '';\n\t\tonTokenSelect(token);\n\t}\n\n\tfunction handleBlur(value: string) {\n\t\tif (!value) {\n\t\t\tuserInput = '';\n\t\t\tformattedAmount = '';\n\t\t}\n\t}\n</script>\n\n<div\n\tclass=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\"\n>\n\t<div class=\"flex justify-between items-center\">\n\t\t<NumericInput\n\t\t\tvalue={userInput || formattedAmount}\n\t\t\tonChange={handleAmountInput}\n\t\t\tonBlur={handleBlur}\n\t\t\t{disabled}\n\t\t\tclassName=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        text-black dark:text-white\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n\t\t/>\n\t\t<TokenDropdown\n\t\t\t{disabled}\n\t\t\tselectedToken={$swapPriceDataStore.tokenOut}\n\t\t\tonTokenSelect={handleTokenSelection}\n\t\t/>\n\t</div>\n\t<div class=\"flex justify-between items-center mt-2 text-sm\">\n\t\t<SwapTokenPrice {swapPriceDataStore} type=\"buy\" />\n\t</div>\n</div>\n\n<!-- <script lang=\"ts\">\n  import type { Writable } from 'svelte/store';\n  import TokenDropdown from './TokenDropdown.svelte';\n  import SwapTokenPrice from './SwapTokenPrice.svelte';\n  import type { SwapToken, SwapPriceData } from '$lib/common/interfaces';\n  import { debounce } from 'lodash-es';\n  import { ethers as ethersv6 } from 'ethers-v6';\n  import { convertTokenToUsd, convertUsdToTokenAmount, toBigInt } from '$lib/common';\n  import { isUsdModeStore } from '$lib/common/stores/uiStateStore';\n\n  interface Props {\n    disabled?: boolean;\n    resetValues?: boolean;\n    swapPriceDataStore: Writable<SwapPriceData>;\n    onTokenSelect: (token: SwapToken) => void;\n    onAmountChange: (amount: string) => void;\n  }\n\n  let {\n    disabled = false,\n    resetValues = $bindable(false),\n    swapPriceDataStore,\n    onTokenSelect,\n    onAmountChange,\n  }: Props = $props();\n\n  // Input states\n  let userInput = $state('');\n  let formattedAmount = $state('');\n\n  // Reset handling\n  $effect(() => {\n    if (resetValues) {\n      userInput = '';\n      formattedAmount = '';\n      resetValues = false;\n    }\n  });\n\n  // Sync formatted amount with store data\n  $effect(() => {\n    const tokenAmount = ethersv6.formatUnits(toBigInt($swapPriceDataStore.amountOut), $swapPriceDataStore.tokenOut.decimals);\n\n    // Convert token amount to USD\n    const usdAmount = $swapPriceDataStore.marketPriceOut > 0\n      ? convertTokenToUsd(Number(tokenAmount), $swapPriceDataStore.marketPriceOut)\n      : 0;\n\n    const displayAmount = $isUsdModeStore ? usdAmount.toFixed(2) : tokenAmount;\n\n    if (!userInput) {\n      formattedAmount = displayAmount;\n    }\n  });\n\n  // Debounced amount change handler\n  const debouncedAmountChange = debounce((value: string) => {\n    onAmountChange(value);\n  }, 300);\n\n  // Handle input changes\n  function handleAmountInput(event: Event) {\n    const input = event.target as HTMLInputElement;\n    let value = input.value;\n\n    // Sanitize input: Allow only numbers and a single dot\n    value = value.replace(/[^0-9.]/g, '');\n\n    // Split input into integer and decimal parts\n    const parts = value.split('.');\n    if (parts.length > 2) {\n      value = `${parts[0]}.${parts.slice(1).join('')}`;\n    }\n\n    // Adjust decimal precision based on mode\n    if ($isUsdModeStore) {\n      // Limit to 2 decimal places for USD\n      if (parts[1]?.length > 2) {\n        value = `${parts[0]}.${parts[1].slice(0, 2)}`;\n      }\n    } else {\n      // Use tokenOut decimals for precision\n      const tokenDecimals = $swapPriceDataStore.tokenOut.decimals || 18;\n      if (parts[1]?.length > tokenDecimals) {\n        value = `${parts[0]}.${parts[1].slice(0, tokenDecimals)}`;\n      }\n    }\n\n    if (userInput !== value) {\n      userInput = value;\n\n      if (value === '' || value === '.') {\n        userInput = '';\n        formattedAmount = '';\n        debouncedAmountChange('');\n        return;\n      }\n\n      formattedAmount = value;\n\n      if ($isUsdModeStore) {\n        // Convert USD value to token quantity\n        const marketPrice = $swapPriceDataStore.marketPriceOut || 0;\n        if (marketPrice > 0) {\n          const tokenAmount = convertUsdToTokenAmount(Number(value), marketPrice, $swapPriceDataStore.tokenOut.decimals);\n          debouncedAmountChange(tokenAmount.toString());\n        } else {\n          debouncedAmountChange('');\n        }\n      } else {\n        // Pass the token quantity directly\n        debouncedAmountChange(value);\n      }\n    }\n  }\n\n  // Handle blur (input losing focus)\n  function handleBlur() {\n    if (!userInput || userInput === '.' || userInput === '') {\n      userInput = '';\n      if (!formattedAmount || formattedAmount === '0') formattedAmount = '';\n    } else {\n      formattedAmount = userInput;\n    }\n  }\n</script>\n\n<div class=\"border border-gray-300 shadow-md p-4 rounded-lg bg-gray-50 dark:bg-gray-800\n  {disabled ? ' opacity-50 pointer-events-none' : ''}\">\n  <div class=\"flex justify-between items-center\">\n    <input\n      type=\"text\"\n      placeholder=\"0\"\n      value={userInput || formattedAmount}\n      oninput={handleAmountInput}\n      onblur={handleBlur}\n      disabled={disabled}\n      class=\"\n        bg-transparent\n        text-3xl\n        font-bold\n        w-1/2\n        mr-4\n        focus:outline-none\n        focus:border-b-2\n        focus:border-blue-500\n        text-black dark:text-white\n        {disabled ? 'cursor-not-allowed' : ''}\n      \"\n    />\n    <TokenDropdown\n      disabled={disabled}\n      selectedToken={$swapPriceDataStore.tokenOut}\n      onTokenSelect={onTokenSelect}\n    />\n  </div>\n  <div class=\"flex justify-between items-center mt-2 text-sm\">\n    <SwapTokenPrice {swapPriceDataStore} type=\"buy\" />\n  </div>\n</div> -->\n","<script lang=\"ts\">\n\timport { type SwapPriceData } from '$lib/common';\n\timport type { Writable } from 'svelte/store';\n\n\tinterface Props {\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tonSlippageChange: (value: number) => void;\n\t\tonDeadlineChange: (value: number) => void;\n\t\tonPoolFeeChange: (value: number) => void;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\tswapPriceDataStore,\n\t\tonSlippageChange,\n\t\tonDeadlineChange,\n\t\tonPoolFeeChange,\n\t\tclassName = 'text-gray-700'\n\t}: Props = $props();\n\n\tconst slippageOptions = [0.1, 0.5, 1, 3];\n\tconst deadlineOptions = [10, 20, 30, 60];\n\tconst poolFeeOptions = [500, 3000, 10000];\n\n\t// Reactive store value\n\tlet swapPriceData = $derived($swapPriceDataStore);\n\n\tlet slippageTolerance = $state(0.5);\n\tlet deadline = $state(10);\n\tlet poolFee = $state($swapPriceDataStore.fee || 3000);\n\n\t// Replace first run with $effect\n\t$effect(() => {\n\t\tif (swapPriceData) {\n\t\t\tif (swapPriceData.slippageTolerance !== undefined) {\n\t\t\t\tslippageTolerance = swapPriceData.slippageTolerance;\n\t\t\t}\n\t\t\tif (swapPriceData.deadline !== undefined) {\n\t\t\t\tdeadline = swapPriceData.deadline;\n\t\t\t}\n\t\t\tif (swapPriceData.fee !== undefined) {\n\t\t\t\tconst newFee = poolFeeOptions.includes(swapPriceData.fee)\n\t\t\t\t\t? swapPriceData.fee\n\t\t\t\t\t: findClosestPoolFee(swapPriceData.fee);\n\t\t\t\tpoolFee = newFee;\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction findClosestPoolFee(fee: number): number {\n\t\tif (poolFeeOptions.includes(fee)) {\n\t\t\treturn fee;\n\t\t}\n\t\treturn poolFeeOptions.reduce((prev, curr) =>\n\t\t\tMath.abs(curr - fee) < Math.abs(prev - fee) ? curr : prev\n\t\t);\n\t}\n\n\tfunction handleSlippageChange(event: Event) {\n\t\tconst value = Number((event.target as HTMLSelectElement).value);\n\t\tslippageTolerance = value;\n\t\tonSlippageChange(value);\n\t}\n\n\tfunction handleDeadlineChange(event: Event) {\n\t\tconst value = Number((event.target as HTMLSelectElement).value);\n\t\tdeadline = value;\n\t\tonDeadlineChange(value);\n\t}\n\n\tfunction handlePoolFeeChange(event: Event) {\n\t\tconst value = Number((event.target as HTMLSelectElement).value);\n\t\tpoolFee = value;\n\t\tonPoolFeeChange(value);\n\t}\n</script>\n\n<div class=\"flex justify-between items-center space-x-4 {className}\">\n\t<div>\n\t\t<label for=\"slippage\" class=\"block text-sm font-medium\"> Slippage </label>\n\t\t<select\n\t\t\tid=\"slippage\"\n\t\t\tvalue={slippageTolerance}\n\t\t\tonchange={handleSlippageChange}\n\t\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n\t\t>\n\t\t\t{#each slippageOptions as option}\n\t\t\t\t<option value={option}>{option}%</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n\n\t<div>\n\t\t<label for=\"deadline\" class=\"block text-sm font-medium\"> Deadline </label>\n\t\t<select\n\t\t\tid=\"deadline\"\n\t\t\tvalue={deadline}\n\t\t\tonchange={handleDeadlineChange}\n\t\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n\t\t>\n\t\t\t{#each deadlineOptions as option}\n\t\t\t\t<option value={option}>{option} minutes</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n\n\t<div>\n\t\t<label for=\"poolFee\" class=\"block text-sm font-medium\"> Pool Fee </label>\n\t\t<select\n\t\t\tid=\"poolFee\"\n\t\t\tvalue={poolFee}\n\t\t\tonchange={handlePoolFeeChange}\n\t\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n\t\t>\n\t\t\t{#each poolFeeOptions as option}\n\t\t\t\t<option value={option}>{option / 10000}%</option>\n\t\t\t{/each}\n\t\t</select>\n\t</div>\n</div>\n","<script lang=\"ts\">\n\timport { type Writable } from 'svelte/store';\n\timport type { SwapPriceData } from '$lib/common/interfaces';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport {\n\t\tcalculateFeeAmount,\n\t\tcalculateFeeBasisPointsPercent,\n\t\tformatFeeToUSD\n\t} from '$lib/utilities/utilities';\n\timport { toBigInt } from '$lib/common/math';\n\timport { YAKKL_FEE_BASIS_POINTS_DIVISOR } from '$lib/common';\n\n\tinterface Props {\n\t\tswapPriceDataStore: Writable<SwapPriceData>;\n\t\tdisabled?: boolean; // This assumes for wrapping and unwrapping of ETH WETH\n\t}\n\n\tlet { swapPriceDataStore, disabled = false }: Props = $props();\n\n\tlet exchangeRate = $state(0);\n\tlet feeBasisPointsToPercent = $state('0.0000%');\n\n\t// Declare reactive variables\n\tlet swapPriceData = $derived($swapPriceDataStore);\n\tlet tokenOutPriceInUSD = $derived(swapPriceData.tokenOutPriceInUSD || '--');\n\tlet gasEstimateInUSD = $derived(swapPriceData.gasEstimateInUSD || '--');\n\n\t// Replace first run with $effect\n\t$effect(() => {\n\t\tfeeBasisPointsToPercent = swapPriceData\n\t\t\t? calculateFeeBasisPointsPercent(swapPriceData.feeBasisPoints)\n\t\t\t: '0.0000%';\n\t});\n\n\t// Replace second run with $effect\n\t$effect(() => {\n\t\tif (\n\t\t\tswapPriceData &&\n\t\t\ttoBigInt(swapPriceData.amountIn) > 0n &&\n\t\t\ttoBigInt(swapPriceData.amountOut) > 0n\n\t\t) {\n\t\t\tconst tokenIn = swapPriceData.tokenIn;\n\t\t\tconst tokenOut = swapPriceData.tokenOut;\n\n\t\t\t// More precise exchange rate calculation\n\t\t\tconst amountInFormatted = parseFloat(\n\t\t\t\tethersv6.formatUnits(toBigInt(swapPriceData.amountIn) || 0n, tokenIn.decimals)\n\t\t\t);\n\t\t\tconst amountOutFormatted = parseFloat(\n\t\t\t\tethersv6.formatUnits(toBigInt(swapPriceData.amountOut) || 0n, tokenOut.decimals)\n\t\t\t);\n\n\t\t\tif (amountInFormatted > 0 && amountOutFormatted > 0) {\n\t\t\t\texchangeRate = amountOutFormatted / amountInFormatted;\n\t\t\t} else {\n\t\t\t\texchangeRate = 0;\n\t\t\t}\n\t\t} else {\n\t\t\texchangeRate = 0;\n\t\t}\n\t});\n\n\tlet feeAmountInUSD = $derived(\n\t\t(() => {\n\t\t\tif (\n\t\t\t\tswapPriceData &&\n\t\t\t\ttoBigInt(swapPriceData.amountIn) > 0n &&\n\t\t\t\tswapPriceData.marketPriceIn > 0 &&\n\t\t\t\tswapPriceData.tokenIn &&\n\t\t\t\tswapPriceData.tokenIn.decimals &&\n\t\t\t\tswapPriceData.feeBasisPoints &&\n\t\t\t\tdisabled === false\n\t\t\t) {\n\t\t\t\t// Convert basis points to precise decimal\n\t\t\t\tconst feeDecimal = swapPriceData.feeBasisPoints / YAKKL_FEE_BASIS_POINTS_DIVISOR;\n\n\t\t\t\t// Calculate fee amount in token units without rounding\n\t\t\t\tconst feeAmount = calculateFeeAmount(\n\t\t\t\t\ttoBigInt(swapPriceData.amountIn),\n\t\t\t\t\tswapPriceData.feeBasisPoints\n\t\t\t\t);\n\t\t\t\treturn formatFeeToUSD(\n\t\t\t\t\tfeeAmount,\n\t\t\t\t\tswapPriceData.tokenIn.decimals,\n\t\t\t\t\tswapPriceData.marketPriceIn\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Fallback value until all data is available or valid\n\t\t\t\treturn disabled ? '' : 'Calculating...';\n\t\t\t}\n\t\t})()\n\t);\n</script>\n\n<div class=\"space-y-2 text-sm text-gray-500\">\n\t<!-- Exchange Rate Display -->\n\t{#if !disabled}\n\t\t<div class=\"flex justify-between w-full\">\n\t\t\t<span class=\"text-left truncate\">\n\t\t\t\t{#if exchangeRate && exchangeRate > 0}\n\t\t\t\t\tExchange Rate: 1 {swapPriceData.tokenOut.symbol} ≈ {(1 / exchangeRate).toFixed(6)}\n\t\t\t\t\t{swapPriceData.tokenIn.symbol}\n\t\t\t\t{:else}\n\t\t\t\t\tExchange Rate: ~N/A~\n\t\t\t\t{/if}\n\t\t\t</span>\n\t\t</div>\n\n\t\t<!-- Token Out Price in USD -->\n\t\t<div class=\"flex justify-between w-full\">\n\t\t\t<span class=\"text-left truncate\">\n\t\t\t\tToken Price (USD): {tokenOutPriceInUSD}\n\t\t\t</span>\n\t\t</div>\n\t{/if}\n\n\t<!-- Gas Fee Estimate -->\n\t<div class=\"flex justify-between items-center w-full\">\n\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t<img src=\"/images/gas.svg\" alt=\"Gas Estimate\" class=\"w-3 h-3\" />\n\t\t\t<span>Gas Fee ≈ {gasEstimateInUSD}</span>\n\t\t</div>\n\t</div>\n\n\t<!-- Fee Estimate -->\n\t{#if !disabled}\n\t\t<div class=\"flex justify-between w-full\">\n\t\t\t<span class=\"text-left truncate\">\n\t\t\t\tFee ({feeBasisPointsToPercent}): ≈ {feeAmountInUSD}\n\t\t\t</span>\n\t\t</div>\n\t{/if}\n</div>\n","// Token.ts\nimport type { BigNumberish, SwapToken, TransactionResponse } from '$lib/common';\nimport type { AbstractContract } from '$managers/Contract';\nimport type { Blockchain } from '$managers/Blockchain';\nimport type { Provider } from '$managers/Provider';\n\nexport interface IToken {\n\taddress: string;\n\tname: string;\n\tsymbol: string;\n\tdecimals: number;\n\tisNative?: boolean;\n\tisStablecoin?: boolean;\n\tlogoURI: string;\n\tdescription: string;\n\tchainId: number;\n\tblockchain?: Blockchain;\n\tprovider?: Provider;\n\tbalance?: BigNumberish;\n\tprivateKey?: string;\n\turl?: string;\n\tgetContract(): Promise<AbstractContract | null>;\n\tgetBalance(userAddress: string): Promise<BigNumberish>;\n\ttransfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse>;\n}\n\nexport abstract class Token implements IToken {\n\treadonly address: string;\n\treadonly name: string;\n\treadonly symbol: string;\n\treadonly decimals: number;\n\treadonly logoURI: string;\n\treadonly description: string;\n\treadonly chainId: number;\n\treadonly isNative?: boolean;\n\treadonly isStablecoin?: boolean;\n\treadonly blockchain?: Blockchain;\n\treadonly provider?: Provider;\n\treadonly privateKey?: string;\n\treadonly url?: string;\n\tbalance?: BigNumberish = 0n;\n\n\tconstructor(\n\t\taddress: string,\n\t\tname: string,\n\t\tsymbol: string,\n\t\tdecimals: number,\n\t\tlogoURI: string,\n\t\tdescription: string,\n\t\tchainId: number,\n\t\tisNative?: boolean,\n\t\tisStablecoin?: boolean,\n\t\tblockchain?: Blockchain,\n\t\tprovider?: Provider,\n\t\tbalance?: BigNumberish,\n\t\tprivateKey?: string,\n\t\turl?: string\n\t) {\n\t\tthis.address = address;\n\t\tthis.name = name;\n\t\tthis.symbol = symbol;\n\t\tthis.decimals = decimals;\n\t\tthis.logoURI = logoURI;\n\t\tthis.description = description || `${name} token`;\n\t\tthis.chainId = chainId || 1;\n\t\tthis.isNative = isNative || false;\n\t\tthis.isStablecoin = isStablecoin || false;\n\t\tthis.blockchain = blockchain;\n\t\tthis.provider = provider;\n\t\tthis.balance = balance || 0n;\n\t\tthis.privateKey = privateKey || '';\n\t\tthis.url = url || '';\n\t}\n\n\tabstract getContract(): Promise<AbstractContract | null>;\n\tabstract getBalance(userAddress: string): Promise<BigNumberish>;\n\tabstract transfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse>;\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\taddress: this.address,\n\t\t\tname: this.name,\n\t\t\tsymbol: this.symbol,\n\t\t\tdecimals: this.decimals,\n\t\t\tbalance: this.balance?.toString(),\n\t\t\tlogoURI: this.logoURI,\n\t\t\tdescription: this.description,\n\t\t\tchainId: this.chainId,\n\t\t\tisNative: this.isNative,\n\t\t\tisStablecoin: this.isStablecoin,\n\t\t\turl: this.url\n\t\t};\n\t}\n\n\t// New static method to create a Token from a SwapToken\n\tstatic fromSwapToken(\n\t\tswapToken: SwapToken,\n\t\tblockchain: Blockchain,\n\t\tprovider: Provider,\n\t\tprivateKey?: string\n\t): Token {\n\t\t// This is a factory method that returns a concrete implementation of Token\n\t\t// You'll need to create a concrete class that extends Token, let's call it ConcreteToken\n\t\treturn new ConcreteToken(\n\t\t\tswapToken.address,\n\t\t\tswapToken.name,\n\t\t\tswapToken.symbol,\n\t\t\tswapToken.decimals,\n\t\t\tswapToken.logoURI || '', // Use an empty string if logoURI is undefined\n\t\t\tswapToken.description || `${swapToken.name} token`, // Use an empty string if description is undefined\n\t\t\tswapToken.chainId,\n\t\t\tswapToken.isNative || false, // Use false if isNative is undefined\n\t\t\tswapToken.isStablecoin || false, // Use false if isStablecoin is undefined\n\t\t\tblockchain,\n\t\t\tprovider,\n\t\t\tswapToken.balance || 0n, // Use 0 if balance is undefined\n\t\t\tprivateKey,\n\t\t\tswapToken.url || ''\n\t\t);\n\t}\n}\n\n// Concrete implementation of Token\nclass ConcreteToken extends Token {\n\tasync getContract(): Promise<AbstractContract | null> {\n\t\t// Implement contract creation logic here\n\t\t// For example:\n\t\treturn this.blockchain.createContract(this.address, [\n\t\t\t'function balanceOf(address account) view returns (uint256)',\n\t\t\t'function transfer(address to, uint256 amount) returns (bool)'\n\t\t]);\n\t}\n\n\tasync getBalance(userAddress: string): Promise<BigNumberish> {\n\t\tconst contract = await this.getContract();\n\t\tif (!contract) return 0n; // Return 0 if contract is null\n\t\tthis.balance = await contract.call('balanceOf', userAddress);\n\t\treturn this.balance;\n\t}\n\n\tasync transfer(toAddress: string, amount: BigNumberish): Promise<TransactionResponse> {\n\t\tconst contract = await this.getContract();\n\t\tif (!contract) throw new Error('Invalid contract');\n\t\treturn await contract.sendTransaction('transfer', toAddress, amount);\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// balanceUtils.ts\nimport type { SwapToken } from '$lib/common/interfaces';\nimport type { Provider } from '$managers/Provider';\nimport type { TokenService } from '$lib/managers/blockchains/evm/TokenService';\nimport { log } from '$lib/managers/Logger';\n\n// Helper function to determine if an error should be shown to the user\nfunction shouldShowErrorToUser(error: any): boolean {\n\tconst errorMessage = error?.message || error?.toString() || '';\n\n\t// Network/API errors that should be handled silently\n\tconst networkErrors = [\n\t\t'missing response',\n\t\t'timeout',\n\t\t'TIMEOUT',\n\t\t'SERVER_ERROR',\n\t\t'NETWORK_ERROR',\n\t\t'Failed to fetch',\n\t\t'fetch',\n\t\t'Connection failed',\n\t\t'Request timeout',\n\t\t'eth_getBalance',\n\t\t'call revert exception',\n\t\t'alchemy.com',\n\t\t'infura.io',\n\t\t'requestBody',\n\t\t'serverError',\n\t\t'code=SERVER_ERROR',\n\t\t'version=web/',\n\t\t'JsonRpcError',\n\t\t'RPC Error',\n\t\t'getBalance',\n\t\t'Balance fetch'\n\t];\n\n\treturn !networkErrors.some((pattern) =>\n\t\terrorMessage.toLowerCase().includes(pattern.toLowerCase())\n\t);\n}\n\nexport async function getTokenBalance(\n\ttoken: SwapToken,\n\taddress: string,\n\tprovider: Provider | null,\n\ttokenService: TokenService<any> | null // TokenService and may want to change this for specific blockchain\n): Promise<bigint> {\n\t// Needs a better return type. It needs to be a BigNumberish plus a code and message. This would allow for 0n to be returned and for the code and message to be used to determine if there was an error or not\n\ttry {\n\t\tif (!token) return 0n;\n\t\tif (token.isNative) {\n\t\t\t// token.isNative needs to be implemented!\n\t\t\tif (!provider) return 0n;\n\t\t\tconst retBal = await provider.getBalance(address);\n\t\t\ttoken.balance = retBal;\n\n\t\t\t// Update cache with native token balance\n\t\t\tconst { balanceCacheManager } = await import('$lib/managers/BalanceCacheManager');\n\t\t\tconst { yakklPricingStore } = await import('$lib/common/stores');\n\t\t\tconst { get } = await import('svelte/store');\n\t\t\tconst currentPrice = get(yakklPricingStore)?.price;\n\t\t\tif (currentPrice) {\n\t\t\t\tbalanceCacheManager.setCachedBalance(address, retBal, currentPrice);\n\t\t\t}\n\n\t\t\treturn retBal;\n\t\t}\n\n\t\tif (!tokenService) return 0n;\n\t\tconst retBal = await tokenService.getBalance(token.address, address); // address is the user's address. This checks the contract to see if it has the given userAddress registered and if it has a balance\n\t\ttoken.balance = retBal;\n\n\t\t// Update cache with token balance (for non-native tokens)\n\t\t// Note: This is for individual token balances, not ETH balance\n\t\t// You may want to create a separate token balance cache if needed\n\n\t\treturn retBal;\n\t} catch (error) {\n\t\t// Only log non-network errors, suppress network timeouts\n\t\tif (shouldShowErrorToUser(error)) {\n\t\t\tlog.error('getTokenBalance - error', false, error);\n\t\t}\n\t\treturn 0n;\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { BigNumberish } from '$lib/common/bignumber';\nimport { safeConvertToBigInt } from './math';\nimport type { SwapPriceData, SwapToken } from '$lib/common/interfaces';\n\n// Validation Types\nexport type ValidationRuleType =\n\t| 'number'\n\t| 'bigint'\n\t| 'string'\n\t| 'boolean'\n\t| 'array'\n\t| 'object'\n\t| 'bignumberish';\n\n// Validation Constraint Types\nexport type ValidationConstraint<T> = {\n\ttype?: ValidationRuleType;\n\trequired?: boolean;\n\tmin?: T;\n\tmax?: T;\n\tequals?: T;\n\tnotEquals?: T;\n\toneOf?: T[];\n\tnotOneOf?: T[];\n\tcustomValidation?: (value: T) => boolean;\n};\n\n// Generic Validation Rules Type\nexport type ValidationRules<T> = {\n\t[K in keyof T]?: ValidationConstraint<T[K]>;\n};\n\n// Validation Result\nexport interface ValidationResult {\n\tisValid: boolean;\n\terror: string;\n}\n\n/**\n * Generic object validation function\n * @param data Object to validate\n * @param rules Validation rules for the object\n * @returns Validation result\n */\nexport function validateObject<T extends Record<string, any>>(\n\tdata: T,\n\trules: ValidationRules<T>\n): ValidationResult {\n\t// Validation function for a single rule\n\tconst validateValue = <V>(value: V, rule: ValidationConstraint<V>): boolean => {\n\t\t// Handle undefined or null\n\t\tif (value === undefined || value === null) {\n\t\t\treturn !rule.required;\n\t\t}\n\n\t\tlet bigIntValue: bigint | undefined;\n\n\t\t// Type checking with more robust handling\n\t\tif (rule.type) {\n\t\t\tswitch (rule.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tif (typeof value !== 'number' || isNaN(value as number)) return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bigint':\n\t\t\t\tcase 'bignumberish':\n\t\t\t\t\tbigIntValue = safeConvertToBigInt(value as BigNumberish);\n\t\t\t\t\tif (bigIntValue === undefined) return false;\n\t\t\t\t\t// Reassign value for further checks\n\t\t\t\t\tvalue = bigIntValue as V;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (typeof value !== 'string') return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tif (typeof value !== 'boolean') return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\tif (!Array.isArray(value)) return false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\tif (typeof value !== 'object' || value === null) return false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Min/Max validation with safe bigint conversion\n\t\tif (rule.min !== undefined) {\n\t\t\tif (typeof rule.min === 'number' && (value as number) < (rule.min as number)) return false;\n\n\t\t\t// For bigint and bignumberish\n\t\t\tif (rule.type === 'bigint' || rule.type === 'bignumberish') {\n\t\t\t\tconst minBigInt = safeConvertToBigInt(rule.min as BigNumberish);\n\t\t\t\tconst valueBigInt = safeConvertToBigInt(value as BigNumberish);\n\n\t\t\t\tif (minBigInt === undefined || valueBigInt === undefined) return false;\n\t\t\t\tif (valueBigInt < minBigInt) return false;\n\t\t\t}\n\t\t}\n\n\t\tif (rule.max !== undefined) {\n\t\t\tif (typeof rule.max === 'number' && (value as number) > (rule.max as number)) return false;\n\n\t\t\t// For bigint and bignumberish\n\t\t\tif (rule.type === 'bigint' || rule.type === 'bignumberish') {\n\t\t\t\tconst maxBigInt = safeConvertToBigInt(rule.max as BigNumberish);\n\t\t\t\tconst valueBigInt = safeConvertToBigInt(value as BigNumberish);\n\n\t\t\t\tif (maxBigInt === undefined || valueBigInt === undefined) return false;\n\t\t\t\tif (valueBigInt > maxBigInt) return false;\n\t\t\t}\n\t\t}\n\n\t\t// Equality checks\n\t\tif (rule.equals !== undefined && value !== rule.equals) return false;\n\t\tif (rule.notEquals !== undefined && value === rule.notEquals) return false;\n\n\t\t// One of / Not One of checks\n\t\tif (rule.oneOf !== undefined && !rule.oneOf.includes(value)) return false;\n\t\tif (rule.notOneOf !== undefined && rule.notOneOf.includes(value)) return false;\n\n\t\t// Custom validation\n\t\tif (rule.customValidation && !rule.customValidation(value)) return false;\n\n\t\treturn true;\n\t};\n\n\t// Validate all rules\n\tfor (const [key, rule] of Object.entries(rules)) {\n\t\tconst value = data[key];\n\n\t\tif (!validateValue(value, rule as ValidationConstraint<any>)) {\n\t\t\t// Generate user-friendly error message\n\t\t\tlet errorMessage = `Invalid ${key}: `;\n\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\terrorMessage += (rule as ValidationConstraint<any>).required\n\t\t\t\t\t? 'is required'\n\t\t\t\t\t: 'is missing but not required';\n\t\t\t} else {\n\t\t\t\tconst currentRule = rule as ValidationConstraint<any>;\n\t\t\t\tif (currentRule.min !== undefined) errorMessage += `must be at least ${currentRule.min}`;\n\t\t\t\tif (currentRule.max !== undefined) errorMessage += `must be at most ${currentRule.max}`;\n\t\t\t\tif (currentRule.equals !== undefined) errorMessage += `must equal ${currentRule.equals}`;\n\t\t\t\tif (currentRule.notEquals !== undefined)\n\t\t\t\t\terrorMessage += `cannot equal ${currentRule.notEquals}`;\n\t\t\t\tif (currentRule.oneOf !== undefined)\n\t\t\t\t\terrorMessage += `must be one of ${currentRule.oneOf.join(', ')}`;\n\t\t\t\tif (currentRule.notOneOf !== undefined)\n\t\t\t\t\terrorMessage += `cannot be one of ${currentRule.notOneOf.join(', ')}`;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisValid: false,\n\t\t\t\terror: errorMessage\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tisValid: true,\n\t\terror: ''\n\t};\n}\n\n// Specific validation for SwapQuote\nexport function validateSwapQuote(quote: SwapPriceData): ValidationResult {\n\treturn validateObject(quote, {\n\t\tamountIn: {\n\t\t\trequired: true,\n\t\t\ttype: 'bignumberish',\n\t\t\tmin: 0n,\n\t\t\tcustomValidation: (amount: BigNumberish) => {\n\t\t\t\tconst bigIntAmount = safeConvertToBigInt(amount);\n\t\t\t\treturn bigIntAmount !== undefined && bigIntAmount > 0n;\n\t\t\t}\n\t\t},\n\t\tamountOut: {\n\t\t\trequired: true,\n\t\t\ttype: 'bignumberish',\n\t\t\tmin: 0n,\n\t\t\tcustomValidation: (amount: BigNumberish) => {\n\t\t\t\tconst bigIntAmount = safeConvertToBigInt(amount);\n\t\t\t\treturn bigIntAmount !== undefined && bigIntAmount > 0n;\n\t\t\t}\n\t\t},\n\t\ttokenIn: {\n\t\t\trequired: true,\n\t\t\ttype: 'object',\n\t\t\tcustomValidation: (token: SwapToken) => {\n\t\t\t\treturn !!(token && token.address && token.symbol);\n\t\t\t}\n\t\t},\n\t\ttokenOut: {\n\t\t\trequired: true,\n\t\t\ttype: 'object',\n\t\t\tcustomValidation: (token: SwapToken) => {\n\t\t\t\treturn !!(token && token.address && token.symbol);\n\t\t\t}\n\t\t},\n\t\tfee: {\n\t\t\toneOf: [500, 3000, 10000]\n\t\t}\n\t});\n}\n\n// Comprehensive example usages below...\n// function exampleUsage() {\n//   const swapQuote: SwapPriceData = { /* your swap quote data */ };\n//   const validationResult = validateSwapQuote( swapQuote );\n\n//   if ( !validationResult.isValid ) {\n//     console.log( 'Validation failed:', validationResult.error );\n//   }\n// }\n\n// function exampleUsage() {\n//   // Basic object validation\n//   interface User {\n//     name: string;\n//     age: number;\n//     email?: string;\n//   }\n\n//   const user: User = {\n//     name: 'John Doe',\n//     age: 30\n//   };\n\n//   const userValidation = validateObject( user, {\n//     name: {\n//       required: true,\n//       type: 'string',\n//       min: 2,\n//       max: 50\n//     },\n//     age: {\n//       required: true,\n//       type: 'number',\n//       min: 18,\n//       max: 120\n//     },\n//     email: {\n//       type: 'string',\n//       customValidation: ( email ) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test( email )\n//     }\n//   } );\n\n//   // Swap quote validation\n//   const swapQuote: SwapPriceData = { /* your swap quote data */ };\n//   const swapValidation = validateSwapQuote( swapQuote );\n\n//   // Advanced validation with multiple constraints\n//   interface Product {\n//     name: string;\n//     price: number;\n//     categories: string[];\n//   }\n\n//   const product: Product = {\n//     name: 'Awesome Product',\n//     price: 19.99,\n//     categories: [ 'Electronics', 'Gadgets' ]\n//   };\n\n//   const productValidation = validateObject( product, {\n//     name: {\n//       required: true,\n//       type: 'string',\n//       min: 3,\n//       max: 100\n//     },\n//     price: {\n//       required: true,\n//       type: 'number',\n//       min: 0,\n//       max: 1000\n//     },\n//     categories: {\n//       type: 'array',\n//       customValidation: ( cats ) => cats.length > 0,\n//       oneOf: [ 'Electronics', 'Clothing', 'Books', 'Gadgets' ]\n//     }\n//   } );\n\n//   // Logging results\n//   console.log( 'User Validation:', userValidation );\n//   console.log( 'Swap Quote Validation:', swapValidation );\n//   console.log( 'Product Validation:', productValidation );\n// }\n","<script lang=\"ts\">\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { onDestroy, onMount } from 'svelte';\n\timport type {\n\t\tProfile,\n\t\tProfileData,\n\t\tSwapParams,\n\t\tSwapPriceData,\n\t\tSwapToken\n\t} from '$lib/common/interfaces';\n\timport SellTokenPanel from './SellTokenPanel.svelte';\n\timport BuyTokenPanel from './BuyTokenPanel.svelte';\n\timport SwapSettings from './SwapSettings.svelte';\n\timport SwapSummary from './SwapSummary.svelte';\n\timport Modal from './Modal.svelte';\n\timport {\n\t\tBigNumber,\n\t\tdecryptData,\n\t\tETH_BASE_SWAP_GAS_UNITS,\n\t\tisEncryptedData,\n\t\tparseAmount,\n\t\tTIMER_SWAP_FETCH_PRICES_TIME,\n\t\tYAKKL_FEE_BASIS_POINTS,\n\t\ttype BigNumberish\n\t} from '$lib/common';\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { UniswapSwapManager } from '$lib/managers/UniswapSwapManager';\n\timport { TokenService } from '$lib/managers/blockchains/evm/TokenService';\n\timport { Ethereum } from '$lib/managers/blockchains/evm/ethereum/Ethereum';\n\timport { Token } from '$lib/managers/Token';\n\timport type { Provider } from '$lib/managers/Provider';\n\timport { derived, writable } from 'svelte/store';\n\timport { getTokenBalance } from '$lib/utilities/balanceUtils';\n\timport debounce from 'lodash/debounce';\n\timport { toBigInt } from '$lib/common/math';\n\timport { GasToken } from '$lib/managers/GasToken';\n\timport { validateSwapQuote, type ValidationResult } from '$lib/common/validation';\n\timport { getMiscStore, getProfile } from '$lib/common/stores';\n\timport { deepCopy } from '$lib/utilities';\n\timport ErrorNoAction from './ErrorNoAction.svelte';\n\timport Warning from './Warning.svelte';\n\timport PincodeVerify from './PincodeVerify.svelte';\n\timport Confirmation from './Confirmation.svelte';\n\timport { sendNotificationMessage } from '$lib/common/notifications';\n\timport { getTimerManager } from '$lib/managers/TimerManager';\n\n\t// import { browserSvelte } from '$lib/utilities/browserSvelte';\n\t// import { getBrowserExt } from '$lib/browser-polyfill-wrapper';\n\t// import type { Browser } from 'webextension-polyfill';\n\n\t// import { multiHopQuoteAlphaRouter } from '$lib/managers/alphaRouter';\n\t// Add back to package.json - \t\t\"@yakkl/uniswap-alpha-router-service\": \"workspace:*\",\n\n\t///////////////////////\n\t// NOTE: The swap pricing process was done by the calling routine before calling this component. However, this caused unnecessary calls to the API. So, this now requires anything using it to set up the\n\t// swapPriceDataStore and then remove it when done with this component.\n\t// NOTE: To use a turnkey swap solution, use SwapModal.svelte which is a thin wrapper that implments the price checks and this component.\n\t///////////////////////\n\n\tinterface Props {\n\t\t// Props\n\t\tfundingAddress: string;\n\t\tprovider: Provider; // Provider must have Signer set before calling Swap!\n\t\tblockchain: Ethereum;\n\t\tswapManager: UniswapSwapManager;\n\t\ttokenService: TokenService<any>;\n\t\tshow?: boolean;\n\t\tclassName?: string;\n\t\tonSwap?: (\n\t\t\tfundingAddress: string,\n\t\t\ttokenIn: SwapToken,\n\t\t\ttokenOut: SwapToken,\n\t\t\tfromAmount: BigNumberish,\n\t\t\ttoAmount: BigNumberish\n\t\t) => void;\n\t}\n\n\tlet {\n\t\tfundingAddress,\n\t\tprovider,\n\t\tblockchain,\n\t\tswapManager,\n\t\ttokenService,\n\t\tshow = $bindable(false),\n\t\tclassName = 'text-gray-600 z-[699]',\n\t\tonSwap = () => {}\n\t}: Props = $props();\n\n\tconst SUPPORTED_STABLECOINS = ['USDC', 'USDT', 'DAI', 'BUSD'];\n\n\t// May could have passed this in as a prop\n\tlet gasToken: GasToken = $state();\n\n\t// Initial token values\n\tlet initialToken: SwapToken = {\n\t\tchainId: 1,\n\t\taddress: '',\n\t\tname: '',\n\t\tsymbol: '',\n\t\tdecimals: 0,\n\t\tbalance: 0n,\n\t\tlogoURI: '',\n\t\tisNative: false,\n\t\tisStablecoin: false\n\t};\n\n\t// Central store for swap price data\n\tconst initialSwapPriceData: SwapPriceData = {\n\t\tprovider: 'Uniswap V3',\n\t\tlastUpdated: new Date(),\n\t\tchainId: 1,\n\t\ttokenIn: initialToken,\n\t\ttokenOut: initialToken,\n\t\tquoteAmount: 0n,\n\t\tfundingAddress: '',\n\t\tfeeAmount: 0n,\n\t\tamountAfterFee: 0n,\n\t\tamountIn: 0n,\n\t\tamountOut: 0n,\n\t\texchangeRate: 0n,\n\t\tmarketPriceIn: 0,\n\t\tmarketPriceOut: 0,\n\t\tmarketPriceGas: 0,\n\t\tpriceImpactRatio: 0,\n\t\tpath: [],\n\t\tfee: 0,\n\t\tfeeBasisPoints: YAKKL_FEE_BASIS_POINTS,\n\t\tfeeAmountPrice: 0,\n\t\tfeeAmountInUSD: '',\n\t\tgasEstimate: 0n,\n\t\tgasEstimateInUSD: '',\n\t\ttokenOutPriceInUSD: '',\n\t\tmultiHop: false,\n\t\tslippageTolerance: 0.5,\n\t\tdeadline: 10,\n\t\terror: null,\n\t\tisLoading: false\n\t};\n\n\t// Create stores\n\tinterface SwapStateStore {\n\t\ttokenIn: SwapToken;\n\t\ttokenOut: SwapToken;\n\t\tfromAmount: string;\n\t\ttoAmount: string;\n\t\tfromBalance: string;\n\t\terror: string;\n\t\tdeadline: number; // Default value for deadline\n\t\tslippageTolerance: number; // Default slippage tolerance in percentage\n\t\tpoolFee: number; // Default pool fee in basis points (e.g., 0.3%)\n\t\tmultiHop: boolean;\n\t}\n\n\tinterface UIStateStore {\n\t\tresetValues: boolean;\n\t\tisLoading: boolean;\n\t\tisSwapping: boolean;\n\t}\n\n\tconst swapPriceDataStore = writable<SwapPriceData>(initialSwapPriceData);\n\tconst insufficientBalanceStore = writable(false);\n\n\tlet swapStateStore = writable<SwapStateStore>({\n\t\ttokenIn: initialToken,\n\t\ttokenOut: initialToken,\n\t\tfromAmount: '',\n\t\ttoAmount: '',\n\t\tfromBalance: '0',\n\t\terror: '',\n\t\tdeadline: 10, // Default value for deadline\n\t\tslippageTolerance: 0.5, // Default slippage tolerance in percentage\n\t\tpoolFee: 3000, // Default pool fee in basis points (e.g., 0.3%)\n\t\tmultiHop: false\n\t});\n\n\tlet uiStateStore = writable<UIStateStore>({\n\t\tresetValues: false,\n\t\tisLoading: false,\n\t\tisSwapping: false\n\t});\n\n\t// State\n\t// let tokenIn: SwapToken = $state(initialToken);\n\t// let tokenOut: SwapToken = $state(initialToken);\n\t// let fromAmount = $state('');\n\t// let toAmount = $state('');\n\t// let fromBalance = $state('0');\n\t// let slippageTolerance = $state(0.5);  // 0.5% default - amount in percentage of acceptable slippage from quoted price\n\t// let deadline = $state(10);  // 10 minutes default\n\t// let poolFee = $state(3000); // 0.3% fee default\n\t// let error: string | null = $state(null);\n\t// let isLoading = $state(false);\n\t// let isSwapping = $state(false);\n\t// let resetValues = $state(false);\n\t// let multiHop = $state(false);\n\n\t// eslint-disable-next-line svelte/non-reactive-declaration\n\t// let tokens: SwapToken[] = [];\n\n\t// svelte-ignore non_reactive_update\n\t// let preferredTokens: SwapToken[] = [];\n\n\tlet lastModifiedPanel: 'sell' | 'buy' = $state('sell');\n\tlet swapManagerName = '';\n\tlet isEthWethSwap = $state(false);\n\tlet showVerify = $state(false);\n\tlet showError = $state(false);\n\tlet errorValue = $state('');\n\tlet showWarning = $state(false);\n\tlet warningValue = $state('');\n\tlet showConfirmation = $state(false);\n\tlet pincodeVerified = false;\n\n\t// Initialize\n\tonMount(async () => {\n\t\ttry {\n\t\t\treset();\n\t\t\tconst yakklMiscStore = getMiscStore();\n\t\t\tif (!yakklMiscStore) {\n\t\t\t\tlog.info('User is not logged in yet, so no swap is possible.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Provider must have Signer set before calling Swap!\n\t\t\tgasToken = new GasToken('YAKKL GasToken', 'ETH', blockchain, provider, fundingAddress); // Native token for now\n\n\t\t\t// Defaulting gas price check as last thing in onMount\n\t\t\tif (gasToken) {\n\t\t\t\tconst price = await gasToken.getMarketPrice(); //.then(price => {\n\t\t\t\tupdateSwapPriceData({ marketPriceGas: price.price });\n\t\t\t}\n\t\t\t// Add and start timer\n\t\t\tgetTimerManager().addTimer('swap_fetchPrices', fetchPrices, TIMER_SWAP_FETCH_PRICES_TIME);\n\t\t\tgetTimerManager().startTimer('swap_fetchPrices');\n\t\t} catch (error) {\n\t\t\tlog.error('Error initializing swap:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to initialize swap. Please try again.';\n\t\t}\n\t});\n\n\tonDestroy(() => {\n\t\tconst yakklMiscStore = getMiscStore();\n\t\tif (yakklMiscStore) {\n\t\t\tgetTimerManager().stopTimer('swap_fetchPrices');\n\t\t\tdebouncedGetQuote.cancel();\n\t\t\tdebouncedCheckBalance.cancel();\n\t\t\tdebouncedGetMarketPrice.cancel();\n\t\t\treset();\n\t\t}\n\t});\n\n\tconst quoteTrigger = derived([swapStateStore], ([$swapStateStore]) => {\n\t\tconst { deadline, slippageTolerance, poolFee } = $swapStateStore;\n\t\treturn { deadline, slippageTolerance, poolFee };\n\t});\n\n\t$effect(() => {\n\t\tif (quoteTrigger) {\n\t\t\tdebouncedGetQuote();\n\t\t}\n\t});\n\n\t$effect(() => {\n\t\t$swapStateStore.multiHop = $swapPriceDataStore.multiHop;\n\t});\n\n\t$effect(() => {\n\t\tconst { tokenIn, tokenOut } = $swapPriceDataStore;\n\t\tif (\n\t\t\t(tokenIn.symbol === 'ETH' && tokenOut.symbol === 'WETH') ||\n\t\t\t(tokenIn.symbol === 'WETH' && tokenOut.symbol === 'ETH') ||\n\t\t\t(tokenIn.symbol === 'ETH' && tokenOut.symbol === 'ETH') ||\n\t\t\t(tokenIn.symbol === 'WETH' && tokenOut.symbol === 'WETH')\n\t\t) {\n\t\t\tisEthWethSwap = true;\n\t\t} else {\n\t\t\tisEthWethSwap = false;\n\t\t}\n\t});\n\n\t$effect(() => {\n\t\t(async () => {\n\t\t\tconst { tokenIn, fromAmount } = $swapStateStore;\n\t\t\tif (tokenIn && fromAmount) {\n\t\t\t\tawait debouncedCheckBalance(tokenIn, fromAmount, fundingAddress);\n\n\t\t\t\tif (gasToken && $swapPriceDataStore.marketPriceGas === 0) {\n\t\t\t\t\tawait debouncedGetGasTokenPrice();\n\t\t\t\t\t// gasToken.getMarketPrice().then(price => {\n\t\t\t\t\t//   if ($swapPriceDataStore.marketPriceGas === 0) {\n\t\t\t\t\t//       updateSwapPriceData({ marketPriceGas: price.price });\n\t\t\t\t\t//   }\n\t\t\t\t\t// });\n\t\t\t\t}\n\n\t\t\t\tif (tokenIn.symbol && swapManager && $swapPriceDataStore.marketPriceIn === 0) {\n\t\t\t\t\tawait debouncedGetMarketPrice(tokenIn);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n\n\t$effect(() => {\n\t\t(async () => {\n\t\t\tif ($swapStateStore.tokenOut && $swapStateStore.toAmount) {\n\t\t\t\t// Only need to update if we have a tokenOut and the market price is 0\n\t\t\t\tif ($swapStateStore.tokenOut.symbol && $swapPriceDataStore.marketPriceOut === 0) {\n\t\t\t\t\tawait debouncedGetMarketPrice($swapStateStore.tokenOut);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n\n\t// Debounced quote handler, check balance, and market price\n\tconst debouncedGetQuote = debounce(async () => {\n\t\tawait getQuote();\n\t}, 300);\n\n\tconst debouncedCheckBalance = debounce(checkBalance, 300);\n\n\tconst debouncedGetGasTokenPrice = debounce(async () => {\n\t\tconst price = await gasToken.getMarketPrice();\n\t\tif ($swapPriceDataStore.marketPriceGas === 0) {\n\t\t\tupdateSwapPriceData({ marketPriceGas: price.price });\n\t\t}\n\t}, 500);\n\n\tconst debouncedGetMarketPrice = debounce(async (token) => {\n\t\tconst price = await swapManager.getMarketPrice(`${token.symbol}-USD`);\n\t\tif (price.price > 0) {\n\t\t\tupdateSwapPriceData({ marketPriceIn: price.price });\n\t\t}\n\t}, 500);\n\n\t// Function to fetch the gas price\n\tasync function fetchPrices() {\n\t\tif (gasToken) {\n\t\t\ttry {\n\t\t\t\t// Always the native token except where we sponsor the gas\n\t\t\t\tconst price = await gasToken.getMarketPrice();\n\t\t\t\tupdateSwapPriceData({ marketPriceGas: price.price });\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error fetching gas price:', false, error);\n\t\t\t}\n\t\t}\n\n\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenIn.symbol && swapManager) {\n\t\t\ttry {\n\t\t\t\tconst price = await swapManager.getMarketPrice(`${$swapStateStore.tokenIn.symbol}-USD`);\n\t\t\t\tupdateSwapPriceData({ marketPriceIn: price.price });\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error fetching market price:', false, error);\n\t\t\t}\n\t\t}\n\n\t\tif ($swapStateStore.tokenOut && $swapStateStore.tokenOut.symbol && swapManager) {\n\t\t\ttry {\n\t\t\t\tconst price = await swapManager.getMarketPrice(`${$swapStateStore.tokenOut.symbol}-USD`);\n\t\t\t\tupdateSwapPriceData({ marketPriceOut: price.price });\n\t\t\t} catch (error) {\n\t\t\t\tlog.error('Error fetching market price:', false, error);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handler functions\n\tasync function handleSellAmountChange(amount: string) {\n\t\t$swapStateStore.error = '';\n\t\t$swapStateStore.fromAmount = amount;\n\t\tlastModifiedPanel = 'sell';\n\n\t\tif (amount !== '.' && isNaN(parseFloat(amount))) {\n\t\t\tlog.info('Swap - Invalid sell amount:', false, amount);\n\n\t\t\t$swapStateStore.fromAmount = '';\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountIn: 0n,\n\t\t\t\tamountOut: 0n\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst parsedAmount = parseAmount(amount, $swapStateStore.tokenIn.decimals);\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountIn: parsedAmount\n\t\t\t});\n\t\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) {\n\t\t\t\tawait getQuote(true);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('Error handling sell amount change:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to process sell amount';\n\t\t}\n\t}\n\n\tasync function handleBuyAmountChange(amount: string) {\n\t\t$swapStateStore.error = '';\n\t\t$swapStateStore.toAmount = amount;\n\t\tlastModifiedPanel = 'buy';\n\n\t\tif (amount !== '.' && isNaN(parseFloat(amount))) {\n\t\t\t$swapStateStore.toAmount = '';\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountOut: 0n\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst parsedAmount = parseAmount(amount, $swapStateStore.tokenOut.decimals);\n\t\t\tupdateSwapPriceData({\n\t\t\t\tamountOut: parsedAmount\n\t\t\t});\n\t\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) await getQuote(false);\n\t\t} catch (error) {\n\t\t\tlog.error('Error handling buy amount change:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to process buy amount';\n\t\t}\n\t}\n\n\tasync function handleTokenSelect(token: SwapToken, type: 'sell' | 'buy') {\n\t\t$swapStateStore.error = '';\n\n\t\t// Check if selecting the same token\n\t\tconst otherToken = type === 'sell' ? $swapStateStore.tokenOut : $swapStateStore.tokenIn;\n\t\tif (otherToken.symbol && areTokensEqual(token, otherToken)) {\n\t\t\t$swapStateStore.error = `Cannot swap ${token.symbol} for itself`;\n\t\t\treturn;\n\t\t}\n\n\t\t// This is a helper function to set the pool fee for stablecoins\n\t\tif (token.isStablecoin || SUPPORTED_STABLECOINS.includes(token.symbol)) {\n\t\t\t$swapStateStore.poolFee = 500;\n\t\t\ttoken.isStablecoin = true;\n\t\t\tupdateSwapPriceData({ fee: $swapStateStore.poolFee });\n\t\t}\n\n\t\tif (!token.balance || toBigInt(token.balance) <= 0n) {\n\t\t\ttoken.balance = await getTokenBalance(token, fundingAddress, provider, tokenService);\n\t\t}\n\t\tconst formattedBalance = ethersv6.formatUnits(toBigInt(token.balance), token.decimals); // NOTE: This and all ethers specific code should be moved to the TokenService - maybe\n\n\t\tif (type === 'sell') {\n\t\t\t$swapStateStore.tokenIn = token;\n\t\t\tupdateSwapPriceData({ tokenIn: token });\n\t\t\t$swapStateStore.fromBalance = formattedBalance;\n\t\t} else {\n\t\t\t$swapStateStore.tokenOut = token;\n\t\t\tupdateSwapPriceData({ tokenOut: token });\n\t\t}\n\n\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) {\n\t\t\tif (lastModifiedPanel === 'sell' && $swapStateStore.fromAmount) {\n\t\t\t\tawait handleSellAmountChange($swapStateStore.fromAmount);\n\t\t\t} else if (lastModifiedPanel === 'buy' && $swapStateStore.toAmount) {\n\t\t\t\tawait handleBuyAmountChange($swapStateStore.toAmount);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function switchTokens() {\n\t\t[$swapStateStore.tokenIn, $swapStateStore.tokenOut] = [\n\t\t\t$swapStateStore.tokenOut,\n\t\t\t$swapStateStore.tokenIn\n\t\t];\n\t\t[$swapStateStore.fromAmount, $swapStateStore.toAmount] = [\n\t\t\t$swapStateStore.toAmount,\n\t\t\t$swapStateStore.fromAmount\n\t\t];\n\n\t\tupdateSwapPriceData({\n\t\t\ttokenIn: $swapStateStore.tokenIn,\n\t\t\ttokenOut: $swapStateStore.tokenOut,\n\t\t\tamountIn: $swapStateStore.toAmount\n\t\t\t\t? parseAmount($swapStateStore.toAmount, $swapStateStore.tokenIn.decimals)\n\t\t\t\t: 0n,\n\t\t\tamountOut: $swapStateStore.fromAmount\n\t\t\t\t? parseAmount($swapStateStore.fromAmount, $swapStateStore.tokenOut.decimals)\n\t\t\t\t: 0n\n\t\t});\n\n\t\tif ($swapStateStore.tokenIn && $swapStateStore.tokenOut) {\n\t\t\tif ($swapStateStore.fromAmount) await handleSellAmountChange($swapStateStore.fromAmount);\n\t\t\telse if ($swapStateStore.toAmount) await handleBuyAmountChange($swapStateStore.toAmount);\n\t\t}\n\t}\n\n\t// Helper functions\n\tfunction updateSwapPriceData(newData: Partial<SwapPriceData>) {\n\t\tswapPriceDataStore.update((currentData) => ({ ...currentData, ...newData }));\n\t}\n\n\tasync function checkBalance(token: SwapToken, amount: string, fundingAddress: string) {\n\t\ttry {\n\t\t\tif (!token || !amount || !fundingAddress) {\n\t\t\t\tinsufficientBalanceStore.set(false);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst balance = await getTokenBalance(token, fundingAddress, provider, tokenService);\n\t\t\tconst formattedBalance = ethersv6.formatUnits(balance, token.decimals);\n\n\t\t\t// Only update if the balance actually changes\n\t\t\tif (formattedBalance !== $swapStateStore.fromBalance) {\n\t\t\t\t$swapStateStore.fromBalance = formattedBalance;\n\t\t\t\ttoken.balance = balance;\n\t\t\t}\n\n\t\t\tconst requiredAmount = parseAmount(amount, token.decimals);\n\t\t\tconst isInsufficient = balance < requiredAmount;\n\t\t\tinsufficientBalanceStore.set(isInsufficient);\n\n\t\t\treturn isInsufficient;\n\t\t} catch (error) {\n\t\t\tinsufficientBalanceStore.set(false);\n\t\t\tlog.error('Error checking balance:', false, error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// async function fetchTokenList(): Promise<SwapToken[]> {\n\t//   try {\n\t//     if ( browserSvelte ) {\n\t//       const response = await fetch(browser_ext.runtime.getURL('/data/uniswap.json')); // 'https://tokens.uniswap.org' );\n\t//       const data = await response.json();\n\t//       data.tokens\n\t//         .filter( ( token: SwapToken ) => token.chainId === (blockchain ? blockchain.getChainId() || 1 : 1))\n\t//         .map( ( token: SwapToken ) => {\n\t//           if ( SUPPORTED_STABLECOINS.includes( token.symbol ) ) {\n\t//             token.isStablecoin = true;\n\t//           }\n\t//           return token;\n\t//         } );\n\t//       return data.tokens.filter((token: SwapToken) => token.chainId === 1); // blockchain.getChainId() || 1);\n\t//     }\n\t//     return [];\n\t//   } catch (error) {\n\t//     log.error('Error fetching token list:', false, error);\n\t//     return [];\n\t//   }\n\t// }\n\n\t// function getPreferredTokens(tokens: SwapToken[]): SwapToken[] {\n\t//   const preferredTokenSymbols = [\"ETH\", \"WETH\", \"USDC\", \"USDT\", \"WBTC\"];\n\t//   return preferredTokenSymbols\n\t//     .map(symbol => tokens.find(token => token.symbol === symbol))\n\t//     .filter((token): token is SwapToken => token !== undefined);\n\t// }\n\n\tasync function validateBalance(): Promise<boolean> {\n\t\ttry {\n\t\t\tif (!$swapStateStore.tokenIn || !$swapStateStore.fromAmount || !fundingAddress) return false;\n\t\t\t// Get token or native balance\n\t\t\tconst balance = await getTokenBalance(\n\t\t\t\t$swapStateStore.tokenIn,\n\t\t\t\tfundingAddress,\n\t\t\t\tprovider,\n\t\t\t\ttokenService\n\t\t\t);\n\t\t\t// Parse amounts\n\t\t\tconst swapAmount = ethersv6.parseUnits(\n\t\t\t\t$swapStateStore.fromAmount,\n\t\t\t\t$swapStateStore.tokenIn.decimals\n\t\t\t);\n\n\t\t\t// If native token (ETH), account for gas\n\t\t\tif ($swapStateStore.tokenIn.isNative) {\n\t\t\t\tconst gasEstimate = $swapPriceDataStore.gasEstimate || 0n;\n\t\t\t\tconst totalRequiredAmount = swapAmount + (BigNumber.toBigInt(gasEstimate) || 0n);\n\t\t\t\tif (balance < totalRequiredAmount) {\n\t\t\t\t\t$swapStateStore.error = `Insufficient ${$swapStateStore.tokenIn.symbol} balance. Need ${ethersv6.formatUnits(totalRequiredAmount, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}, but have ${ethersv6.formatUnits(balance, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}`;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// For ERC20 tokens, check swap amount\n\t\t\t\tconst totalRequiredAmount = swapAmount;\n\t\t\t\tif (balance < totalRequiredAmount) {\n\t\t\t\t\t$swapStateStore.error = `Insufficient ${$swapStateStore.tokenIn.symbol} balance. Need ${ethersv6.formatUnits(totalRequiredAmount, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}, but have ${ethersv6.formatUnits(balance, $swapStateStore.tokenIn.decimals)} ${$swapStateStore.tokenIn.symbol}`;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlog.error('Error validating balance:', false, error);\n\t\t\t$swapStateStore.error = 'Failed to validate balance. Please try again.';\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Fix for the quote formatting issue\n\tasync function getQuote(isExactIn: boolean = true) {\n\t\tif (\n\t\t\t!$swapStateStore.tokenIn.symbol ||\n\t\t\t!$swapStateStore.tokenOut.symbol ||\n\t\t\t(!$swapStateStore.fromAmount && !$swapStateStore.toAmount)\n\t\t)\n\t\t\treturn;\n\n\t\t// Add token equality check\n\t\tif (areTokensEqual($swapStateStore.tokenIn, $swapStateStore.tokenOut)) {\n\t\t\t$swapStateStore.error = `Cannot swap ${$swapStateStore.tokenIn.symbol} for itself`;\n\t\t\treturn;\n\t\t}\n\n\t\tif (isEthWethSwap) {\n\t\t\tupdateSwapPriceData({ feeAmount: 0n }); // May want to force fees, slippage, etc. to 0 here\n\t\t\treturn; // Do nothing here for now\n\t\t}\n\n\t\ttry {\n\t\t\t$uiStateStore.isLoading = true;\n\t\t\tconst amount = isExactIn\n\t\t\t\t? parseAmount($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals)\n\t\t\t\t: parseAmount($swapStateStore.toAmount, $swapStateStore.tokenOut.decimals);\n\n\t\t\t$swapStateStore.slippageTolerance = $swapPriceDataStore.slippageTolerance || 0.5;\n\t\t\t$swapStateStore.deadline = $swapPriceDataStore.deadline || 10;\n\t\t\t$swapStateStore.poolFee = $swapPriceDataStore.fee || 3000;\n\n\t\t\tconst quote = await swapManager.getQuote(\n\t\t\t\tToken.fromSwapToken($swapStateStore.tokenIn, blockchain, provider),\n\t\t\t\tToken.fromSwapToken($swapStateStore.tokenOut, blockchain, provider),\n\t\t\t\tamount,\n\t\t\t\tfundingAddress,\n\t\t\t\tisExactIn,\n\t\t\t\t$swapStateStore.poolFee\n\t\t\t);\n\n\t\t\t// const { multiHopQuoteAlphaRouter } = await import('../plugins/alphaRouter');\n\n\t\t\t// multiHopQuoteAlphaRouter(\n\t\t\t//   Token.fromSwapToken($swapStateStore.tokenIn, blockchain, provider),\n\t\t\t//   Token.fromSwapToken($swapStateStore.tokenOut, blockchain, provider),\n\t\t\t//   amount,\n\t\t\t//   fundingAddress,\n\t\t\t//   isExactIn );\n\n\t\t\tif (!quote || quote.error) {\n\t\t\t\t$swapStateStore.error =\n\t\t\t\t\t'No valid pool found for this token pair. Try a different combination.';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Reset the slippage and deadline to correct values\n\t\t\tif (quote) {\n\t\t\t\tquote.slippageTolerance = $swapStateStore.slippageTolerance;\n\t\t\t\tquote.deadline = $swapStateStore.deadline;\n\t\t\t}\n\n\t\t\t// Handle the BigNumberish type safely\n\t\t\tif (isExactIn) {\n\t\t\t\tconst amountOut = quote.amountOut ?? 0n;\n\t\t\t\t$swapStateStore.toAmount = ethersv6.formatUnits(\n\t\t\t\t\ttoBigInt(amountOut),\n\t\t\t\t\t$swapStateStore.tokenOut.decimals\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst amountIn = quote.amountIn ?? 0n;\n\t\t\t\t$swapStateStore.fromAmount = ethersv6.formatUnits(\n\t\t\t\t\ttoBigInt(amountIn),\n\t\t\t\t\t$swapStateStore.tokenIn.decimals\n\t\t\t\t);\n\t\t\t}\n\t\t\tupdateSwapPriceData(quote);\n\t\t} catch (error) {\n\t\t\tlog.error('Quote Error:', false, error);\n\t\t\t$swapStateStore.error = `Failed to get quote: ${error}`;\n\t\t\t$swapStateStore.toAmount = '';\n\t\t} finally {\n\t\t\t$uiStateStore.isLoading = false;\n\t\t}\n\t}\n\n\t// May want to make this a little less dependent on the store and move to a more generic function\n\tasync function validateQuote() {\n\t\tlet returnCode: boolean = false;\n\n\t\tif (\n\t\t\t!$swapStateStore.tokenIn ||\n\t\t\t!$swapStateStore.tokenOut ||\n\t\t\t!$swapStateStore.fromAmount ||\n\t\t\t!$swapStateStore.toAmount ||\n\t\t\t!fundingAddress ||\n\t\t\t!swapManager\n\t\t) {\n\t\t\t$swapStateStore.error = 'Invalid swap parameters';\n\t\t\treturn returnCode;\n\t\t}\n\n\t\t// Add token equality check\n\t\tif (areTokensEqual($swapStateStore.tokenIn, $swapStateStore.tokenOut)) {\n\t\t\t$swapStateStore.error = `Cannot swap ${$swapStateStore.tokenIn.symbol} for itself`;\n\t\t\treturn returnCode;\n\t\t}\n\n\t\tif (!$swapPriceDataStore) {\n\t\t\t$swapStateStore.error = 'Failed to get quote';\n\t\t\treturn returnCode;\n\t\t}\n\t\tif ($swapPriceDataStore.error) {\n\t\t\t$swapStateStore.error = $swapPriceDataStore.error;\n\t\t\treturn returnCode;\n\t\t}\n\t\tif ($insufficientBalanceStore) {\n\t\t\t$swapStateStore.error = `Insufficient balance for the given swap. You need ETH for gas fees and enough ${$swapStateStore.tokenIn.symbol} to sell/swap.`;\n\t\t\treturn returnCode;\n\t\t}\n\n\t\tif (!(await validateBalance())) {\n\t\t\t// Redundant check for now\n\t\t\t$swapStateStore.error = 'Insufficient balance for the given swap';\n\t\t\treturn;\n\t\t}\n\n\t\tconst results: ValidationResult = validateSwapQuote($swapPriceDataStore);\n\n\t\tif (results.error) {\n\t\t\t$swapStateStore.error = results.error;\n\t\t\tlog.error('Validation error:', false, $swapStateStore.error);\n\t\t\treturn returnCode;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction areTokensEqual(token1: SwapToken, token2: SwapToken): boolean {\n\t\t// Check for native token variants (ETH/WETH)\n\t\tconst isEthVariant = (symbol: string) => ['ETH', 'WETH'].includes(symbol);\n\n\t\tif (token1.address && token2.address) {\n\t\t\t// Compare addresses if both tokens have them\n\t\t\treturn token1.address.toLowerCase() === token2.address.toLowerCase();\n\t\t} else if (token1.symbol && token2.symbol) {\n\t\t\t// If one is ETH and other is WETH, they're considered different\n\t\t\tif (isEthVariant(token1.symbol) && isEthVariant(token2.symbol)) {\n\t\t\t\treturn token1.symbol === token2.symbol;\n\t\t\t}\n\t\t\t// Compare symbols as fallback\n\t\t\treturn token1.symbol === token2.symbol;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync function swapTokens() {\n\t\ttry {\n\t\t\t// Verify pin for one more security check before calling this function!\n\n\t\t\tif (!pincodeVerified) {\n\t\t\t\tshowVerify = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isEthWethSwap) {\n\t\t\t\tupdateSwapPriceData({ feeAmount: 0n }); // May want to force fees, slippage, etc. to 0 here\n\t\t\t\t// May want to do something with receipts later...\n\t\t\t\tif (\n\t\t\t\t\t$swapStateStore.tokenIn.symbol === 'ETH' &&\n\t\t\t\t\t$swapStateStore.tokenOut.symbol === 'WETH'\n\t\t\t\t) {\n\t\t\t\t\t// Wrap ETH to WETH\n\t\t\t\t\tconst receipt = await swapManager.wrapETH(\n\t\t\t\t\t\tethersv6.parseUnits($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals),\n\t\t\t\t\t\tfundingAddress\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\t$swapStateStore.tokenIn.symbol === 'WETH' &&\n\t\t\t\t\t$swapStateStore.tokenOut.symbol === 'ETH'\n\t\t\t\t) {\n\t\t\t\t\t// Unwrap WETH to ETH\n\t\t\t\t\tconst receipt = await swapManager.unwrapWETH(\n\t\t\t\t\t\tethersv6.parseUnits($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals),\n\t\t\t\t\t\tfundingAddress\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$uiStateStore.isSwapping = true;\n\t\t\t$swapStateStore.error = '';\n\t\t\t// Make sure getQuote has been called successfully\n\t\t\tif (!(await validateQuote())) {\n\t\t\t\t$uiStateStore.isSwapping = false;\n\t\t\t\treturn; // Error message is set in validateQuote\n\t\t\t}\n\n\t\t\tconst tokenInInstance = Token.fromSwapToken(\n\t\t\t\t$swapPriceDataStore.tokenIn,\n\t\t\t\tblockchain,\n\t\t\t\tprovider\n\t\t\t);\n\t\t\tconst tokenOutInstance = Token.fromSwapToken(\n\t\t\t\t$swapPriceDataStore.tokenOut,\n\t\t\t\tblockchain,\n\t\t\t\tprovider\n\t\t\t);\n\n\t\t\tif (!$swapPriceDataStore.tokenIn.isNative) {\n\t\t\t\tconst allowance = await swapManager.checkAllowance(tokenInInstance, fundingAddress);\n\t\t\t\tconst requiredAmount = ethersv6.parseUnits(\n\t\t\t\t\t$swapStateStore.fromAmount,\n\t\t\t\t\ttokenInInstance.decimals\n\t\t\t\t);\n\n\t\t\t\tif (allowance < requiredAmount) {\n\t\t\t\t\tconst receipt = await swapManager.approveToken(\n\t\t\t\t\t\ttokenInInstance,\n\t\t\t\t\t\t$swapStateStore.fromAmount\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { maxFeePerGas, maxPriorityFeePerGas } = await getCurrentGasPrices();\n\n\t\t\tconst params: SwapParams = {\n\t\t\t\ttokenIn: tokenInInstance,\n\t\t\t\ttokenOut: tokenOutInstance,\n\t\t\t\tamount: ethersv6.parseUnits(\n\t\t\t\t\t$swapStateStore.fromAmount,\n\t\t\t\t\t$swapPriceDataStore.tokenIn.decimals\n\t\t\t\t),\n\t\t\t\tfee: $swapPriceDataStore.fee || $swapStateStore.poolFee, // Basis points - not used here for multihops\n\t\t\t\tslippage: $swapPriceDataStore.slippageTolerance || $swapStateStore.slippageTolerance,\n\t\t\t\tdeadline: $swapPriceDataStore.deadline || $swapStateStore.deadline,\n\t\t\t\trecipient: $swapPriceDataStore.fundingAddress,\n\t\t\t\tfeeRecipient: import.meta.env.VITE_YAKKL_FEE_RECIPIENT || 'aifees.eth', // Fee recipient address\n\t\t\t\tfeeAmount: $swapPriceDataStore.feeAmount || 0n,\n\t\t\t\tgasLimit: toBigInt($swapPriceDataStore.gasEstimate) || ETH_BASE_SWAP_GAS_UNITS,\n\t\t\t\tmaxFeePerGas: maxFeePerGas,\n\t\t\t\tmaxPriorityFeePerGas: maxPriorityFeePerGas\n\t\t\t};\n\n\t\t\tconst [receiptTrans, receiptFee] = await swapManager.executeFullSwap(params); // May want to do something with receipts later...\n\n\t\t\tonSwap(\n\t\t\t\tfundingAddress,\n\t\t\t\t$swapStateStore.tokenIn,\n\t\t\t\t$swapStateStore.tokenOut,\n\t\t\t\tethersv6.parseUnits($swapStateStore.fromAmount, $swapStateStore.tokenIn.decimals),\n\t\t\t\tethersv6.parseUnits($swapStateStore.toAmount, $swapStateStore.tokenOut.decimals)\n\t\t\t); // Notify parent component - could add more data here such as fee, feeAmount, etc.\n\n\t\t\t$swapStateStore.error = '';\n\n\t\t\t// Add more details to the notification in the future\n\t\t\tawait sendNotificationMessage(\n\t\t\t\t'Swap completed successfully',\n\t\t\t\t'Your swap has been completed successfully.'\n\t\t\t);\n\n\t\t\treset();\n\t\t\tshow = false;\n\t\t} catch (err: any) {\n\t\t\t$uiStateStore.isSwapping = false;\n\t\t\tlog.error('Error executing swap:', err);\n\t\t\t$swapStateStore.error = `Failed to execute swap: ${err.message}`;\n\t\t}\n\t}\n\n\tasync function getCurrentGasPrices(): Promise<{\n\t\tmaxFeePerGas: bigint;\n\t\tmaxPriorityFeePerGas: bigint;\n\t}> {\n\t\ttry {\n\t\t\t// Use a gas price API or provider method\n\t\t\tconst feeData = await provider.getFeeData();\n\n\t\t\treturn {\n\t\t\t\tmaxFeePerGas: toBigInt(feeData.maxFeePerGas),\n\t\t\t\tmaxPriorityFeePerGas: toBigInt(feeData.maxPriorityFeePerGas)\n\t\t\t};\n\t\t} catch (error) {\n\t\t\t// Fallback to manual rates\n\t\t\treturn {\n\t\t\t\tmaxFeePerGas: ethersv6.parseUnits('30', 'gwei'),\n\t\t\t\tmaxPriorityFeePerGas: ethersv6.parseUnits('1', 'gwei')\n\t\t\t};\n\t\t}\n\t}\n\n\tfunction reset() {\n\t\tshowConfirmation = false;\n\t\tshowError = false;\n\t\terrorValue = '';\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tpincodeVerified = false;\n\t\tshowVerify = false;\n\n\t\t$swapStateStore.tokenIn = initialToken;\n\t\t$swapStateStore.tokenOut = initialToken;\n\t\t$swapStateStore.fromAmount = '';\n\t\t$swapStateStore.toAmount = '';\n\t\t$swapStateStore.fromBalance = '0';\n\t\t$swapStateStore.poolFee = 3000;\n\t\t$swapStateStore.error = '';\n\t\tlastModifiedPanel = 'sell';\n\t\tinsufficientBalanceStore.set(false);\n\t\tswapPriceDataStore.set(initialSwapPriceData);\n\t\t$uiStateStore.resetValues = true;\n\t}\n\n\tfunction handleConfirmSwap() {\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tshowConfirmation = true;\n\t}\n\n\tfunction handleCancelSwap() {\n\t\tshowConfirmation = false;\n\t}\n\n\tfunction handleConfirm() {\n\t\tshowConfirmation = false;\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\thandleSwap();\n\t}\n\n\tfunction handleSwap() {\n\t\tpincodeVerified = false;\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tshowVerify = true;\n\t}\n\n\tfunction handleClose() {\n\t\tshowConfirmation = false;\n\t\tshowError = false;\n\t\terrorValue = '';\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tpincodeVerified = false;\n\t\tshowVerify = false;\n\t}\n\n\t// Pincode verification\n\tfunction handleReject(\n\t\trejection: string = 'You have rejected or Pincode was not validated. No swap transaction was sent.'\n\t) {\n\t\ttry {\n\t\t\tshowConfirmation = false;\n\t\t\tshowVerify = false;\n\t\t\tshowError = false;\n\t\t\tpincodeVerified = false;\n\t\t\tshowWarning = true;\n\t\t\twarningValue = rejection;\n\t\t} catch (e: any) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n\n\tasync function handleVerified(pincode: string) {\n\t\ttry {\n\t\t\tlet profile: Profile | null = await verifyWithPin(pincode, pincodeVerified);\n\t\t\tif (profile === null) {\n\t\t\t\tthrow 'Profile was not found.';\n\t\t\t}\n\n\t\t\tpincodeVerified = true;\n\t\t\tshowVerify = false;\n\n\t\t\tawait swapTokens();\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n\n\t// One more internal check to verify the pincode\n\tasync function verifyWithPin(pincode: string, pincodeVerified: boolean): Promise<Profile | null> {\n\t\ttry {\n\t\t\tconst yakklMiscStore = getMiscStore();\n\t\t\tlet profile: Profile | null = await getProfile();\n\t\t\tif (profile === null) {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'Profile was not found.';\n\t\t\t}\n\n\t\t\tlet profileEncrypted = null;\n\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tprofileEncrypted = deepCopy(profile);\n\t\t\t\tawait decryptData(profile?.data, yakklMiscStore).then((result) => {\n\t\t\t\t\t(profile as Profile).data = result as ProfileData;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ((profile.data as ProfileData).pincode !== pincode && pincodeVerified === false) {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'PINCODE was not verified.';\n\t\t\t}\n\n\t\t\tif (pincode === (profile.data as ProfileData).pincode) {\n\t\t\t\tprofile = null;\n\t\t\t\treturn profileEncrypted;\n\t\t\t} else {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'PINCODE did not match.';\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tlog.error(e);\n\t\t\tpincodeVerified = false;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tfunction handleCloseModal() {\n\t\treset();\n\t\tshow = false;\n\t}\n</script>\n\n<!-- TODO: Maybe - Move these two to a SecurityBaseLayout.svelte and wrap the content in them -->\n<Confirmation\n\tbind:show={showConfirmation}\n\tclassName=\"z-[990]\"\n\tonConfirm={handleConfirm}\n\tonReject={handleCancelSwap}\n/>\n<PincodeVerify\n\tbind:show={showVerify}\n\tclassName=\"text-gray-600 z-[990]\"\n\tonRejected={handleReject}\n\tonVerified={handleVerified}\n/>\n\n<!-- TODO: Maybe - Move these two to layout and use stores -->\n<ErrorNoAction bind:show={showError} className=\"z-[999]\" value={errorValue} handle={handleClose} />\n<Warning bind:show={showWarning} className=\"z-[999]\" value={warningValue} handle={handleClose} />\n\n<Modal bind:show title=\"Swap\" {className} onClose={handleCloseModal}>\n\t<div class=\"p-6 space-y-4\">\n\t\t<!-- Sell Section -->\n\t\t<span>Sell</span>\n\t\t<SellTokenPanel\n\t\t\t{swapPriceDataStore}\n\t\t\tdisabled={false}\n\t\t\tinsufficientBalance={$insufficientBalanceStore}\n\t\t\tbalance={$swapStateStore.fromBalance}\n\t\t\tbind:resetValues={$uiStateStore.resetValues}\n\t\t\tbind:lastModifiedPanel\n\t\t\tonTokenSelect={(token) => handleTokenSelect(token, 'sell')}\n\t\t\tonAmountChange={handleSellAmountChange}\n\t\t/>\n\n\t\t<!-- Switch Button -->\n\t\t<!-- svelte-ignore a11y_consider_explicit_label -->\n\t\t<button\n\t\t\tonclick={switchTokens}\n\t\t\tclass=\"mx-auto block bg-gray-200 p-2 rounded-full transform transition-transform hover:rotate-180\"\n\t\t>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"h-6 w-6 text-gray-600\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</button>\n\n\t\t<!-- Buy Section -->\n\t\t<span>Buy</span>\n\t\t<BuyTokenPanel\n\t\t\t{swapPriceDataStore}\n\t\t\tdisabled={false}\n\t\t\tbind:resetValues={$uiStateStore.resetValues}\n\t\t\tbind:lastModifiedPanel\n\t\t\tonTokenSelect={(token) => handleTokenSelect(token, 'buy')}\n\t\t\tonAmountChange={handleBuyAmountChange}\n\t\t/>\n\n\t\t<!-- Error Message (need to look at wrap blocking)-->\n\t\t{#if $swapStateStore.error && !isEthWethSwap}\n\t\t\t<div class=\"w-full bg-red-50 border border-red-200 rounded-lg p-3\">\n\t\t\t\t<div class=\"flex items-center justify-center\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tclass=\"h-5 w-5 text-red-500 mr-2\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t\t<div class=\"text-red-500 text-center overflow-x-auto max-w-full\">\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\">{$swapStateStore.error}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<div class=\"w-full bg-blue-400 border border-blue-800 rounded-lg p-3\">\n\t\t\t<div class=\"flex items-center justify-center\">\n\t\t\t\t<div class=\"text-blue-700 text-center overflow-x-auto max-w-full\">\n\t\t\t\t\t{#if $swapStateStore.multiHop}\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\">This swap requires multiple hops to complete.</span>\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\">This swap requires a single hop to complete.</span>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Settings -->\n\t\t{#if isEthWethSwap === false}\n\t\t\t<SwapSettings\n\t\t\t\t{swapPriceDataStore}\n\t\t\t\tonSlippageChange={(value) => ($swapStateStore.slippageTolerance = value)}\n\t\t\t\tonDeadlineChange={(value) => ($swapStateStore.deadline = value)}\n\t\t\t\tonPoolFeeChange={(value) => {\n\t\t\t\t\t$swapStateStore.poolFee = value;\n\t\t\t\t\tif (\n\t\t\t\t\t\t($swapStateStore.tokenIn?.isStablecoin || $swapStateStore.tokenOut?.isStablecoin) &&\n\t\t\t\t\t\tswapManagerName.includes('uniswap')\n\t\t\t\t\t) {\n\t\t\t\t\t\t$swapStateStore.poolFee = 500;\n\t\t\t\t\t}\n\t\t\t\t\tupdateSwapPriceData({ fee: $swapStateStore.poolFee });\n\t\t\t\t}}\n\t\t\t/>\n\t\t{:else}\n\t\t\t<div class=\"w-full bg-blue-400 border border-blue-800 rounded-lg p-3\">\n\t\t\t\t<div class=\"flex items-center justify-center\">\n\t\t\t\t\t<div class=\"text-blue-700 text-center overflow-x-auto max-w-full\">\n\t\t\t\t\t\t<span class=\"whitespace-nowrap\"\n\t\t\t\t\t\t\t>ETH-WETH swap is a simple wrap so no additional information needed.</span\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Summary -->\n\t\t<SwapSummary {swapPriceDataStore} disabled={isEthWethSwap} />\n\n\t\t<!-- Reset Button -->\n\t\t<button\n\t\t\tonclick={reset}\n\t\t\tclass=\"w-full px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center\"\n\t\t>\n\t\t\t<svg\n\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\tclass=\"h-5 w-5 mr-2\"\n\t\t\t\tfill=\"none\"\n\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\tstroke=\"currentColor\"\n\t\t\t>\n\t\t\t\t<path\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t\tReset Swap\n\t\t</button>\n\n\t\t<!-- Swap Button -->\n\t\t<button\n\t\t\tonclick={handleConfirmSwap}\n\t\t\tclass=\"w-full px-4 py-3 text-lg font-medium text-white bg-blue-600 rounded-lg shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n\t\t\tdisabled={!$swapStateStore.tokenIn ||\n\t\t\t\t!$swapStateStore.tokenOut ||\n\t\t\t\t!$swapStateStore.fromAmount ||\n\t\t\t\t!$swapStateStore.toAmount}\n\t\t>\n\t\t\t{#if !isEthWethSwap}\n\t\t\t\t{$uiStateStore.isLoading ? 'Loading...' : $uiStateStore.isSwapping ? 'Swapping...' : 'Swap'}\n\t\t\t{:else}\n\t\t\t\t{$uiStateStore.isLoading\n\t\t\t\t\t? 'Loading...'\n\t\t\t\t\t: $swapStateStore.tokenIn.symbol === 'WETH'\n\t\t\t\t\t\t? 'Unwrap'\n\t\t\t\t\t\t: 'Wrap'}\n\t\t\t{/if}\n\t\t</button>\n\t\t<!-- Cancel Button -->\n\t\t<button\n\t\t\tonclick={handleCloseModal}\n\t\t\tclass=\"w-full px-4 py-3 text-lg font-medium text-white bg-red-500 rounded-lg shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400\"\n\t\t>\n\t\t\tCancel\n\t\t</button>\n\t</div>\n</Modal>\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QRCode from 'easyqrcodejs';\n\n\tlet { qrText } = $props();\n\texport const width = 220;\n\texport const height = 220;\n\t// export const radius = 1;\n\tlet node: HTMLDivElement = $state();\n\n\tonMount(() => {\n\t\tconst options = {\n\t\t\ttext: qrText,\n\t\t\t// ... other options\n\t\t\twidth: 220,\n\t\t\theight: 220,\n\t\t\tquietZone: 20,\n\t\t\tlogo: '/images/logoBullFav48x48.png',\n\t\t\tlogoBackgroundTransparent: true\n\t\t};\n\t\tnew QRCode(node, options);\n\t});\n</script>\n\n<div class=\"flex mx-auto justify-center w-full h-full\" bind:this={node}></div>\n\n<style>\n\t/* make QR-wrapper squared */\n\t/* div {\n     width: 100%;\n     position: relative;\n     padding: 50%;\n     z-index: 1;\n   } */\n\n\t/* fit QR to wrapper */\n\tdiv :global(canvas) {\n\t\tborder-radius: 1rem;\n\t}\n</style>\n","<!-- Receive.svelte -->\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QR from './QR.svelte';\n\timport { YAKKL_ZERO_ADDRESS } from '$lib/common/constants';\n\timport { yakklCurrentlySelectedStore } from '$lib/common/stores';\n\timport Modal from './Modal.svelte';\n\timport Copy from './Copy.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\taddress?: string;\n\t\ttitle?: string;\n\t}\n\n\tlet { show = $bindable(false), address = $bindable(''), title = 'Receive' }: Props = $props();\n\n\tonMount(() => {\n\t\tif (\n\t\t\t$yakklCurrentlySelectedStore &&\n\t\t\t$yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS\n\t\t) {\n\t\t\taddress = $yakklCurrentlySelectedStore.shortcuts.address;\n\t\t}\n\t});\n\n\t// function copyAddress() {\n\t//   navigator.clipboard.writeText(address);\n\t// }\n</script>\n\n<Modal bind:show {title}>\n\t<div class=\"p-6\">\n\t\t{#if $yakklCurrentlySelectedStore && $yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS}\n\t\t\t<!-- Modern card layout with QR code -->\n\t\t\t<div class=\"bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-6 mb-6 text-center\">\n\t\t\t\t<div class=\"mb-6\">\n\t\t\t\t\t<QR qrText={address} />\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-800 mb-2\">Your Wallet Address</h3>\n\t\t\t\t<p class=\"text-sm text-gray-600 mb-4\">Share this address to receive payments</p>\n\t\t\t</div>\n\n\t\t\t<!-- Address display with copy button on same line -->\n\t\t\t<div class=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n\t\t\t\t<div class=\"flex items-center justify-between p-4\">\n\t\t\t\t\t<div class=\"flex-1 min-w-0 mr-3\">\n\t\t\t\t\t\t<div class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-1\">\n\t\t\t\t\t\t\tEthereum Address\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p class=\"text-sm font-mono text-gray-900 truncate\" title={address} id=\"eth-address\">\n\t\t\t\t\t\t\t{address}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<Copy target={{ value: address }} className=\"p-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Info card -->\n\t\t\t<div class=\"mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<svg class=\"w-5 h-5 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"ml-3\">\n\t\t\t\t\t\t<p class=\"text-sm text-blue-800\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Scan the QR code</span> with your mobile wallet or \n\t\t\t\t\t\t\t<span class=\"font-medium\">copy the address</span> to receive payments\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<!-- Empty state -->\n\t\t\t<div class=\"text-center py-12\">\n\t\t\t\t<div class=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n\t\t\t\t\t<svg class=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-700 mb-2\">No Portfolio Accounts</h3>\n\t\t\t\t<p class=\"text-gray-500\">Create at least one Portfolio account to receive payments</p>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</Modal>\n"],"names":["selectedToken","disabled","onTokenSelect","searchQuery","derived","sortedTokens","$sortedTokens","trim","filter","token","symbol","toLowerCase","includes","name","getLogoURL","logoURI","startsWith","$.attr","$$payload","out","$.escape","isUsdModeStore","writable","isUsdMode","swapPriceDataStore","type","showLastUpdated","className","price","amount","decimals","getSymbolPair","inSymbol","swapPriceData","tokenIn","outSymbol","tokenOut","$.store_get","$$store_subs","formatPrice","formatQuantity","ROOT_ATTR","THUMB_ATTR","SwitchRootState","checked","required","value","constructor","props","this","id","ref","useRefById","onkeydown","bind","onclick","toggle","current","e","key","kbd.ENTER","kbd.SPACE","preventDefault","_","getDataDisabled","getDataChecked","getDataRequired","sharedProps","role","getDisabled","getAriaChecked","getAriaRequired","SwitchInputState","shouldRender","$.derived","root","getAriaHidden","style","styleToString","srOnlyStyles","SwitchThumbState","setSwitchRootContext","getSwitchRootContext","createContext","useSwitchRoot","useSwitchInput","useSwitchThumb","inputState","$.spread_attributes","child","children","useId","onCheckedChange","noop","controlledChecked","$$slots","restProps","rootState","box","with","v","mergedProps","mergeProps","thumbState","class","cn","labelOn","labelOff","onChange","rest","placeholder","errorClass","onBlur","inputValue","$.attr_class","$.stringify","resetValues","insufficientBalance","balance","onAmountChange","lastModifiedPanel","tokenValue","usdValue","displayValue","debouncedAmountChange","debounce","handleAmountInput","marketPrice","marketPriceIn","calculatedTokenAmount","convertUsdToTokenAmount","Number","toString","error","log","calculatedUsdAmount","convertTokenToUsd","handleTokenSelection","handleBlur","set","userInput","formattedAmount","onSlippageChange","onDeadlineChange","onPoolFeeChange","slippageOptions","deadlineOptions","poolFeeOptions","slippageTolerance","deadline","poolFee","fee","option","each_array","$$index","each_array_1","$$index_1","each_array_2","$$index_2","$$props","feeBasisPointsToPercent","tokenOutPriceInUSD","gasEstimateInUSD","feeAmountInUSD","toBigInt","amountIn","feeBasisPoints","YAKKL_FEE_BASIS_POINTS_DIVISOR","feeAmount","calculateFeeAmount","formatFeeToUSD","Token","address","description","chainId","isNative","isStablecoin","blockchain","provider","privateKey","url","toJSON","fromSwapToken","swapToken","ConcreteToken","getContract","createContract","getBalance","userAddress","contract","call","transfer","toAddress","Error","sendTransaction","shouldShowErrorToUser","errorMessage","message","networkErrors","some","pattern","async","getTokenBalance","tokenService","retBal","balanceCacheManager","import","yakklPricingStore","then","n","b3","get","currentPrice","setCachedBalance","log$1","validateObject","data","rules","validateValue","rule","bigIntValue","isNaN","safeConvertToBigInt","Array","isArray","min","minBigInt","valueBigInt","max","maxBigInt","equals","notEquals","oneOf","notOneOf","customValidation","Object","entries","currentRule","join","isValid","validateSwapQuote","quote","bigIntAmount","amountOut","fundingAddress","swapManager","show","onSwap","SUPPORTED_STABLECOINS","gasToken","initialToken","initialSwapPriceData","lastUpdated","Date","quoteAmount","amountAfterFee","exchangeRate","marketPriceOut","marketPriceGas","priceImpactRatio","path","YAKKL_FEE_BASIS_POINTS","feeAmountPrice","gasEstimate","multiHop","isLoading","insufficientBalanceStore","swapStateStore","fromAmount","toAmount","fromBalance","uiStateStore","isSwapping","swapManagerName","isEthWethSwap","showVerify","showError","errorValue","showWarning","warningValue","showConfirmation","pincodeVerified","onDestroy","yakklMiscStore","getMiscStore","getTimerManager","stopTimer","debouncedGetQuote","cancel","debouncedCheckBalance","debouncedGetMarketPrice","reset","$swapStateStore","getQuote","checkBalance","getMarketPrice","updateSwapPriceData","handleSellAmountChange","parseFloat","info","parsedAmount","parseAmount","handleBuyAmountChange","handleTokenSelect","otherToken","areTokensEqual","$.store_mutate","formattedBalance","ethersv6","formatUnits","newData","update","currentData","requiredAmount","isInsufficient","validateBalance","swapAmount","parseUnits","totalRequiredAmount","BigNumber","isExactIn","store_mutate","validateQuote","returnCode","results","token1","token2","isEthVariant","swapTokens","tokenInInstance","tokenOutInstance","allowance","checkAllowance","receipt","approveToken","maxFeePerGas","maxPriorityFeePerGas","getCurrentGasPrices","params","slippage","recipient","feeRecipient","gasLimit","ETH_BASE_SWAP_GAS_UNITS","receiptTrans","receiptFee","executeFullSwap","sendNotificationMessage","err","feeData","getFeeData","handleCancelSwap","handleConfirm","handleSwap","handleClose","handleReject","rejection","handleVerified","pincode","profile","verifyWithPin","getProfile","pincodeVerified2","profileEncrypted","isEncryptedData","deepCopy","decryptData","result","handleCloseModal","$$value","$$payload3","qrText","width","height","title","shortcuts","YAKKL_ZERO_ADDRESS","target"],"mappings":"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","x_google_ignoreList":[3,4,5,6]}