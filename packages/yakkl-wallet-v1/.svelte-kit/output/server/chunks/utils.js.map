{"version":3,"file":"utils.js","sources":["../../../../../../node_modules/.pnpm/esm-env@1.2.2/node_modules/esm-env/true.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/shared/utils.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/reactivity/equality.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/constants.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/errors.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/flags/index.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/constants.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/dev/tracing.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/context.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/proxy.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/reactivity/deriveds.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/reactivity/sources.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/warnings.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/dev/equality.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/dom/operations.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/reactivity/effects.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/dom/task.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/error-handling.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/internal/client/runtime.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/index-client.js","../../../../../../node_modules/.pnpm/svelte@5.34.3/node_modules/svelte/src/store/utils.js"],"sourcesContent":["export default true;\n","// Store the references to globals in case someone tries to monkey patch these, causing the below\n// to de-opt (this occurs often when using popular extensions).\nexport var is_array = Array.isArray;\nexport var index_of = Array.prototype.indexOf;\nexport var array_from = Array.from;\nexport var object_keys = Object.keys;\nexport var define_property = Object.defineProperty;\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\nexport var object_prototype = Object.prototype;\nexport var array_prototype = Array.prototype;\nexport var get_prototype_of = Object.getPrototypeOf;\nexport var is_extensible = Object.isExtensible;\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\nexport const noop = () => {};\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n\n/**\n * @template [T=any]\n * @param {any} value\n * @returns {value is PromiseLike<T>}\n */\nexport function is_promise(value) {\n\treturn typeof value?.then === 'function';\n}\n\n/** @param {Function} fn */\nexport function run(fn) {\n\treturn fn();\n}\n\n/** @param {Array<() => void>} arr */\nexport function run_all(arr) {\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tarr[i]();\n\t}\n}\n\n/**\n * TODO replace with Promise.withResolvers once supported widely enough\n * @template T\n */\nexport function deferred() {\n\t/** @type {(value: T) => void} */\n\tvar resolve;\n\n\t/** @type {(reason: any) => void} */\n\tvar reject;\n\n\t/** @type {Promise<T>} */\n\tvar promise = new Promise((res, rej) => {\n\t\tresolve = res;\n\t\treject = rej;\n\t});\n\n\t// @ts-expect-error\n\treturn { promise, resolve, reject };\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {V | (() => V)} fallback\n * @param {boolean} [lazy]\n * @returns {V}\n */\nexport function fallback(value, fallback, lazy = false) {\n\treturn value === undefined\n\t\t? lazy\n\t\t\t? /** @type {() => V} */ (fallback)()\n\t\t\t: /** @type {V} */ (fallback)\n\t\t: value;\n}\n\n/**\n * When encountering a situation like `let [a, b, c] = $derived(blah())`,\n * we need to stash an intermediate value that `a`, `b`, and `c` derive\n * from, in case it's an iterable\n * @template T\n * @param {ArrayLike<T> | Iterable<T>} value\n * @param {number} [n]\n * @returns {Array<T>}\n */\nexport function to_array(value, n) {\n\t// return arrays unchanged\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t}\n\n\t// if value is not iterable, or `n` is unspecified (indicates a rest\n\t// element, which means we're not concerned about unbounded iterables)\n\t// convert to an array with `Array.from`\n\tif (n === undefined || !(Symbol.iterator in value)) {\n\t\treturn Array.from(value);\n\t}\n\n\t// otherwise, populate an array with `n` values\n\n\t/** @type {T[]} */\n\tconst array = [];\n\n\tfor (const element of value) {\n\t\tarray.push(element);\n\t\tif (array.length === n) break;\n\t}\n\n\treturn array;\n}\n","/** @import { Equals } from '#client' */\n\n/** @type {Equals} */\nexport function equals(value) {\n\treturn value === this.v;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function safe_not_equal(a, b) {\n\treturn a != a\n\t\t? b == b\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function not_equal(a, b) {\n\treturn a !== b;\n}\n\n/** @type {Equals} */\nexport function safe_equals(value) {\n\treturn !safe_not_equal(value, this.v);\n}\n","export const DERIVED = 1 << 1;\nexport const EFFECT = 1 << 2;\nexport const RENDER_EFFECT = 1 << 3;\nexport const BLOCK_EFFECT = 1 << 4;\nexport const BRANCH_EFFECT = 1 << 5;\nexport const ROOT_EFFECT = 1 << 6;\nexport const BOUNDARY_EFFECT = 1 << 7;\nexport const UNOWNED = 1 << 8;\nexport const DISCONNECTED = 1 << 9;\nexport const CLEAN = 1 << 10;\nexport const DIRTY = 1 << 11;\nexport const MAYBE_DIRTY = 1 << 12;\nexport const INERT = 1 << 13;\nexport const DESTROYED = 1 << 14;\nexport const EFFECT_RAN = 1 << 15;\n/** 'Transparent' effects do not create a transition boundary */\nexport const EFFECT_TRANSPARENT = 1 << 16;\n/** Svelte 4 legacy mode props need to be handled with deriveds and be recognized elsewhere, hence the dedicated flag */\nexport const LEGACY_DERIVED_PROP = 1 << 17;\nexport const INSPECT_EFFECT = 1 << 18;\nexport const HEAD_EFFECT = 1 << 19;\nexport const EFFECT_HAS_DERIVED = 1 << 20;\nexport const EFFECT_IS_UPDATING = 1 << 21;\n\nexport const STATE_SYMBOL = Symbol('$state');\nexport const LEGACY_PROPS = Symbol('legacy props');\nexport const LOADING_ATTR_SYMBOL = Symbol('');\nexport const PROXY_PATH_SYMBOL = Symbol('proxy path');\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\n/**\n * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead\n * @returns {never}\n */\nexport function bind_invalid_checkbox_value() {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_checkbox_value\\nUsing \\`bind:value\\` together with a checkbox input is not allowed. Use \\`bind:checked\\` instead\\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_checkbox_value`);\n\t}\n}\n\n/**\n * Component %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)\n * @param {string} component\n * @param {string} key\n * @param {string} name\n * @returns {never}\n */\nexport function bind_invalid_export(component, key, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_export\\nComponent ${component} has an export named \\`${key}\\` that a consumer component is trying to access using \\`bind:${key}\\`, which is disallowed. Instead, use \\`bind:this\\` (e.g. \\`<${name} bind:this={component} />\\`) and then access the property on the bound component instance (e.g. \\`component.${key}\\`)\\nhttps://svelte.dev/e/bind_invalid_export`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_export`);\n\t}\n}\n\n/**\n * A component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`\n * @param {string} key\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function bind_not_bindable(key, component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_not_bindable\\nA component is attempting to bind to a non-bindable property \\`${key}\\` belonging to ${component} (i.e. \\`<${name} bind:${key}={...}>\\`). To mark a property as bindable: \\`let { ${key} = $bindable() } = $props()\\`\\nhttps://svelte.dev/e/bind_not_bindable`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_not_bindable`);\n\t}\n}\n\n/**\n * Calling `%method%` on a component instance (of %component%) is no longer valid in Svelte 5\n * @param {string} method\n * @param {string} component\n * @returns {never}\n */\nexport function component_api_changed(method, component) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_changed\\nCalling \\`${method}\\` on a component instance (of ${component}) is no longer valid in Svelte 5\\nhttps://svelte.dev/e/component_api_changed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_changed`);\n\t}\n}\n\n/**\n * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function component_api_invalid_new(component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_invalid_new\\nAttempted to instantiate ${component} with \\`new ${name}\\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \\`compatibility.componentApi\\` compiler option to \\`4\\` to keep it working.\\nhttps://svelte.dev/e/component_api_invalid_new`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_invalid_new`);\n\t}\n}\n\n/**\n * A derived value cannot reference itself recursively\n * @returns {never}\n */\nexport function derived_references_self() {\n\tif (DEV) {\n\t\tconst error = new Error(`derived_references_self\\nA derived value cannot reference itself recursively\\nhttps://svelte.dev/e/derived_references_self`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/derived_references_self`);\n\t}\n}\n\n/**\n * Keyed each block has duplicate key `%value%` at indexes %a% and %b%\n * @param {string} a\n * @param {string} b\n * @param {string | undefined | null} [value]\n * @returns {never}\n */\nexport function each_key_duplicate(a, b, value) {\n\tif (DEV) {\n\t\tconst error = new Error(`each_key_duplicate\\n${value ? `Keyed each block has duplicate key \\`${value}\\` at indexes ${a} and ${b}` : `Keyed each block has duplicate key at indexes ${a} and ${b}`}\\nhttps://svelte.dev/e/each_key_duplicate`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/each_key_duplicate`);\n\t}\n}\n\n/**\n * `%rune%` cannot be used inside an effect cleanup function\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_in_teardown(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_teardown\\n\\`${rune}\\` cannot be used inside an effect cleanup function\\nhttps://svelte.dev/e/effect_in_teardown`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_teardown`);\n\t}\n}\n\n/**\n * Effect cannot be created inside a `$derived` value that was not itself created inside an effect\n * @returns {never}\n */\nexport function effect_in_unowned_derived() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_unowned_derived\\nEffect cannot be created inside a \\`$derived\\` value that was not itself created inside an effect\\nhttps://svelte.dev/e/effect_in_unowned_derived`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_unowned_derived`);\n\t}\n}\n\n/**\n * `%rune%` can only be used inside an effect (e.g. during component initialisation)\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_orphan(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_orphan\\n\\`${rune}\\` can only be used inside an effect (e.g. during component initialisation)\\nhttps://svelte.dev/e/effect_orphan`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_orphan`);\n\t}\n}\n\n/**\n * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\n * @returns {never}\n */\nexport function effect_update_depth_exceeded() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_update_depth_exceeded\\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\\nhttps://svelte.dev/e/effect_update_depth_exceeded`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);\n\t}\n}\n\n/**\n * Failed to hydrate the application\n * @returns {never}\n */\nexport function hydration_failed() {\n\tif (DEV) {\n\t\tconst error = new Error(`hydration_failed\\nFailed to hydrate the application\\nhttps://svelte.dev/e/hydration_failed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/hydration_failed`);\n\t}\n}\n\n/**\n * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`\n * @returns {never}\n */\nexport function invalid_snippet() {\n\tif (DEV) {\n\t\tconst error = new Error(`invalid_snippet\\nCould not \\`{@render}\\` snippet due to the expression being \\`null\\` or \\`undefined\\`. Consider using optional chaining \\`{@render snippet?.()}\\`\\nhttps://svelte.dev/e/invalid_snippet`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/invalid_snippet`);\n\t}\n}\n\n/**\n * `%name%(...)` cannot be used in runes mode\n * @param {string} name\n * @returns {never}\n */\nexport function lifecycle_legacy_only(name) {\n\tif (DEV) {\n\t\tconst error = new Error(`lifecycle_legacy_only\\n\\`${name}(...)\\` cannot be used in runes mode\\nhttps://svelte.dev/e/lifecycle_legacy_only`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_legacy_only`);\n\t}\n}\n\n/**\n * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value\n * @param {string} key\n * @returns {never}\n */\nexport function props_invalid_value(key) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_invalid_value\\nCannot do \\`bind:${key}={undefined}\\` when \\`${key}\\` has a fallback value\\nhttps://svelte.dev/e/props_invalid_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_invalid_value`);\n\t}\n}\n\n/**\n * Rest element properties of `$props()` such as `%property%` are readonly\n * @param {string} property\n * @returns {never}\n */\nexport function props_rest_readonly(property) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_rest_readonly\\nRest element properties of \\`$props()\\` such as \\`${property}\\` are readonly\\nhttps://svelte.dev/e/props_rest_readonly`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_rest_readonly`);\n\t}\n}\n\n/**\n * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files\n * @param {string} rune\n * @returns {never}\n */\nexport function rune_outside_svelte(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`rune_outside_svelte\\nThe \\`${rune}\\` rune is only available inside \\`.svelte\\` and \\`.svelte.js/ts\\` files\\nhttps://svelte.dev/e/rune_outside_svelte`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/rune_outside_svelte`);\n\t}\n}\n\n/**\n * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.\n * @returns {never}\n */\nexport function state_descriptors_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_descriptors_fixed\\nProperty descriptors defined on \\`$state\\` objects must contain \\`value\\` and always be \\`enumerable\\`, \\`configurable\\` and \\`writable\\`.\\nhttps://svelte.dev/e/state_descriptors_fixed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_descriptors_fixed`);\n\t}\n}\n\n/**\n * Cannot set prototype of `$state` object\n * @returns {never}\n */\nexport function state_prototype_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_prototype_fixed\\nCannot set prototype of \\`$state\\` object\\nhttps://svelte.dev/e/state_prototype_fixed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_prototype_fixed`);\n\t}\n}\n\n/**\n * Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without `$state`\n * @returns {never}\n */\nexport function state_unsafe_mutation() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_unsafe_mutation\\nUpdating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \\`$state\\`\\nhttps://svelte.dev/e/state_unsafe_mutation`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_unsafe_mutation`);\n\t}\n}","export let legacy_mode_flag = false;\nexport let tracing_mode_flag = false;\n\nexport function enable_legacy_mode_flag() {\n\tlegacy_mode_flag = true;\n}\n\nexport function enable_tracing_mode_flag() {\n\ttracing_mode_flag = true;\n}\n","export const EACH_ITEM_REACTIVE = 1;\nexport const EACH_INDEX_REACTIVE = 1 << 1;\n/** See EachBlock interface metadata.is_controlled for an explanation what this is */\nexport const EACH_IS_CONTROLLED = 1 << 2;\nexport const EACH_IS_ANIMATED = 1 << 3;\nexport const EACH_ITEM_IMMUTABLE = 1 << 4;\n\nexport const PROPS_IS_IMMUTABLE = 1;\nexport const PROPS_IS_RUNES = 1 << 1;\nexport const PROPS_IS_UPDATED = 1 << 2;\nexport const PROPS_IS_BINDABLE = 1 << 3;\nexport const PROPS_IS_LAZY_INITIAL = 1 << 4;\n\nexport const TRANSITION_IN = 1;\nexport const TRANSITION_OUT = 1 << 1;\nexport const TRANSITION_GLOBAL = 1 << 2;\n\nexport const TEMPLATE_FRAGMENT = 1;\nexport const TEMPLATE_USE_IMPORT_NODE = 1 << 1;\nexport const TEMPLATE_USE_SVG = 1 << 2;\nexport const TEMPLATE_USE_MATHML = 1 << 3;\n\nexport const HYDRATION_START = '[';\n/** used to indicate that an `{:else}...` block was rendered */\nexport const HYDRATION_START_ELSE = '[!';\nexport const HYDRATION_END = ']';\nexport const HYDRATION_ERROR = {};\n\nexport const ELEMENT_IS_NAMESPACED = 1;\nexport const ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;\n\nexport const UNINITIALIZED = Symbol();\n\n// Dev-time component properties\nexport const FILENAME = Symbol('filename');\nexport const HMR = Symbol('hmr');\n\nexport const NAMESPACE_HTML = 'http://www.w3.org/1999/xhtml';\nexport const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\nexport const NAMESPACE_MATHML = 'http://www.w3.org/1998/Math/MathML';\n\n// we use a list of ignorable runtime warnings because not every runtime warning\n// can be ignored and we want to keep the validation for svelte-ignore in place\nexport const IGNORABLE_RUNTIME_WARNINGS = /** @type {const} */ ([\n\t'state_snapshot_uncloneable',\n\t'binding_property_non_reactive',\n\t'hydration_attribute_changed',\n\t'hydration_html_changed',\n\t'ownership_invalid_binding',\n\t'ownership_invalid_mutation'\n]);\n\n/**\n * Whitespace inside one of these elements will not result in\n * a whitespace node being created in any circumstances. (This\n * list is almost certainly very incomplete)\n * TODO this is currently unused\n */\nexport const ELEMENTS_WITHOUT_TEXT = ['audio', 'datalist', 'dl', 'optgroup', 'select', 'video'];\n\nexport const ATTACHMENT_KEY = '@attach';\n","/** @import { Derived, Reaction, Value } from '#client' */\nimport { UNINITIALIZED } from '../../../constants.js';\nimport { snapshot } from '../../shared/clone.js';\nimport { define_property } from '../../shared/utils.js';\nimport { DERIVED, PROXY_PATH_SYMBOL, STATE_SYMBOL } from '#client/constants';\nimport { effect_tracking } from '../reactivity/effects.js';\nimport { active_reaction, captured_signals, set_captured_signals, untrack } from '../runtime.js';\n\n/**\n * @typedef {{\n *   traces: Error[];\n * }} TraceEntry\n */\n\n/** @type {{ reaction: Reaction | null, entries: Map<Value, TraceEntry> } | null} */\nexport let tracing_expressions = null;\n\n/**\n * @param {Value} signal\n * @param {TraceEntry} [entry]\n */\nfunction log_entry(signal, entry) {\n\tconst value = signal.v;\n\n\tif (value === UNINITIALIZED) {\n\t\treturn;\n\t}\n\n\tconst type = (signal.f & DERIVED) !== 0 ? '$derived' : '$state';\n\tconst current_reaction = /** @type {Reaction} */ (active_reaction);\n\tconst dirty = signal.wv > current_reaction.wv || current_reaction.wv === 0;\n\tconst style = dirty\n\t\t? 'color: CornflowerBlue; font-weight: bold'\n\t\t: 'color: grey; font-weight: normal';\n\n\t// eslint-disable-next-line no-console\n\tconsole.groupCollapsed(\n\t\tsignal.label ? `%c${type}%c ${signal.label}` : `%c${type}%c`,\n\t\tstyle,\n\t\tdirty ? 'font-weight: normal' : style,\n\t\ttypeof value === 'object' && value !== null && STATE_SYMBOL in value\n\t\t\t? snapshot(value, true)\n\t\t\t: value\n\t);\n\n\tif (type === '$derived') {\n\t\tconst deps = new Set(/** @type {Derived} */ (signal).deps);\n\t\tfor (const dep of deps) {\n\t\t\tlog_entry(dep);\n\t\t}\n\t}\n\n\tif (signal.created) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(signal.created);\n\t}\n\n\tif (dirty && signal.updated) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(signal.updated);\n\t}\n\n\tif (entry) {\n\t\tfor (var trace of entry.traces) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(trace);\n\t\t}\n\t}\n\n\t// eslint-disable-next-line no-console\n\tconsole.groupEnd();\n}\n\n/**\n * @template T\n * @param {() => string} label\n * @param {() => T} fn\n */\nexport function trace(label, fn) {\n\tvar previously_tracing_expressions = tracing_expressions;\n\n\ttry {\n\t\ttracing_expressions = { entries: new Map(), reaction: active_reaction };\n\n\t\tvar start = performance.now();\n\t\tvar value = fn();\n\t\tvar time = (performance.now() - start).toFixed(2);\n\n\t\tvar prefix = untrack(label);\n\n\t\tif (!effect_tracking()) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(`${prefix} %cran outside of an effect (${time}ms)`, 'color: grey');\n\t\t} else if (tracing_expressions.entries.size === 0) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(`${prefix} %cno reactive dependencies (${time}ms)`, 'color: grey');\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.group(`${prefix} %c(${time}ms)`, 'color: grey');\n\n\t\t\tvar entries = tracing_expressions.entries;\n\n\t\t\tuntrack(() => {\n\t\t\t\tfor (const [signal, traces] of entries) {\n\t\t\t\t\tlog_entry(signal, traces);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttracing_expressions = null;\n\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.groupEnd();\n\t\t}\n\n\t\treturn value;\n\t} finally {\n\t\ttracing_expressions = previously_tracing_expressions;\n\t}\n}\n\n/**\n * @param {string} label\n */\nexport function get_stack(label) {\n\tlet error = Error();\n\tconst stack = error.stack;\n\n\tif (stack) {\n\t\tconst lines = stack.split('\\n');\n\t\tconst new_lines = ['\\n'];\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tconst line = lines[i];\n\n\t\t\tif (line === 'Error') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (line.includes('validate_each_keys')) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (line.includes('svelte/src/internal')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnew_lines.push(line);\n\t\t}\n\n\t\tif (new_lines.length === 1) {\n\t\t\treturn null;\n\t\t}\n\n\t\tdefine_property(error, 'stack', {\n\t\t\tvalue: new_lines.join('\\n')\n\t\t});\n\n\t\tdefine_property(error, 'name', {\n\t\t\t// 'Error' suffix is required for stack traces to be rendered properly\n\t\t\tvalue: `${label}Error`\n\t\t});\n\t}\n\treturn error;\n}\n\n/**\n * @param {Value} source\n * @param {string} label\n */\nexport function tag(source, label) {\n\tsource.label = label;\n\ttag_proxy(source.v, label);\n\n\treturn source;\n}\n\n/**\n * @param {unknown} value\n * @param {string} label\n */\nexport function tag_proxy(value, label) {\n\t// @ts-expect-error\n\tvalue?.[PROXY_PATH_SYMBOL]?.(label);\n\treturn value;\n}\n\n/**\n * @param {unknown} value\n */\nexport function label(value) {\n\tif (typeof value === 'symbol') return `Symbol(${value.description})`;\n\tif (typeof value === 'function') return '<function>';\n\tif (typeof value === 'object' && value) return '<object>';\n\treturn String(value);\n}\n","/** @import { ComponentContext } from '#client' */\n\nimport { DEV } from 'esm-env';\nimport { lifecycle_outside_component } from '../shared/errors.js';\nimport { source } from './reactivity/sources.js';\nimport {\n\tactive_effect,\n\tactive_reaction,\n\tset_active_effect,\n\tset_active_reaction\n} from './runtime.js';\nimport { effect, teardown } from './reactivity/effects.js';\nimport { legacy_mode_flag } from '../flags/index.js';\n\n/** @type {ComponentContext | null} */\nexport let component_context = null;\n\n/** @param {ComponentContext | null} context */\nexport function set_component_context(context) {\n\tcomponent_context = context;\n}\n\n/**\n * The current component function. Different from current component context:\n * ```html\n * <!-- App.svelte -->\n * <Foo>\n *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->\n * </Foo>\n * ```\n * @type {ComponentContext['function']}\n */\nexport let dev_current_component_function = null;\n\n/** @param {ComponentContext['function']} fn */\nexport function set_dev_current_component_function(fn) {\n\tdev_current_component_function = fn;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\tconst context_map = get_or_init_context_map('getContext');\n\tconst result = /** @type {T} */ (context_map.get(key));\n\treturn result;\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tconst context_map = get_or_init_context_map('setContext');\n\tcontext_map.set(key, context);\n\treturn context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\tconst context_map = get_or_init_context_map('hasContext');\n\treturn context_map.has(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\tconst context_map = get_or_init_context_map('getAllContexts');\n\treturn /** @type {T} */ (context_map);\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {any} runes\n * @param {Function} [fn]\n * @returns {void}\n */\nexport function push(props, runes = false, fn) {\n\tvar ctx = (component_context = {\n\t\tp: component_context,\n\t\tc: null,\n\t\td: false,\n\t\te: null,\n\t\tm: false,\n\t\ts: props,\n\t\tx: null,\n\t\tl: null\n\t});\n\n\tif (legacy_mode_flag && !runes) {\n\t\tcomponent_context.l = {\n\t\t\ts: null,\n\t\t\tu: null,\n\t\t\tr1: [],\n\t\t\tr2: source(false)\n\t\t};\n\t}\n\n\tteardown(() => {\n\t\t/** @type {ComponentContext} */ (ctx).d = true;\n\t});\n\n\tif (DEV) {\n\t\t// component function\n\t\tcomponent_context.function = fn;\n\t\tdev_current_component_function = fn;\n\t}\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} [component]\n * @returns {T}\n */\nexport function pop(component) {\n\tconst context_stack_item = component_context;\n\tif (context_stack_item !== null) {\n\t\tif (component !== undefined) {\n\t\t\tcontext_stack_item.x = component;\n\t\t}\n\t\tconst component_effects = context_stack_item.e;\n\t\tif (component_effects !== null) {\n\t\t\tvar previous_effect = active_effect;\n\t\t\tvar previous_reaction = active_reaction;\n\t\t\tcontext_stack_item.e = null;\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < component_effects.length; i++) {\n\t\t\t\t\tvar component_effect = component_effects[i];\n\t\t\t\t\tset_active_effect(component_effect.effect);\n\t\t\t\t\tset_active_reaction(component_effect.reaction);\n\t\t\t\t\teffect(component_effect.fn);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tset_active_effect(previous_effect);\n\t\t\t\tset_active_reaction(previous_reaction);\n\t\t\t}\n\t\t}\n\t\tcomponent_context = context_stack_item.p;\n\t\tif (DEV) {\n\t\t\tdev_current_component_function = context_stack_item.p?.function ?? null;\n\t\t}\n\t\tcontext_stack_item.m = true;\n\t}\n\t// Micro-optimization: Don't set .a above to the empty object\n\t// so it can be garbage-collected when the return here is unused\n\treturn component || /** @type {T} */ ({});\n}\n\n/** @returns {boolean} */\nexport function is_runes() {\n\treturn !legacy_mode_flag || (component_context !== null && component_context.l === null);\n}\n\n/**\n * @param {string} name\n * @returns {Map<unknown, unknown>}\n */\nfunction get_or_init_context_map(name) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component(name);\n\t}\n\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\n}\n\n/**\n * @param {ComponentContext} component_context\n * @returns {Map<unknown, unknown> | null}\n */\nfunction get_parent_context(component_context) {\n\tlet parent = component_context.p;\n\twhile (parent !== null) {\n\t\tconst context_map = parent.c;\n\t\tif (context_map !== null) {\n\t\t\treturn context_map;\n\t\t}\n\t\tparent = parent.p;\n\t}\n\treturn null;\n}\n","/** @import { Source } from '#client' */\nimport { DEV } from 'esm-env';\nimport { get, active_effect, active_reaction, set_active_reaction } from './runtime.js';\nimport {\n\tarray_prototype,\n\tget_descriptor,\n\tget_prototype_of,\n\tis_array,\n\tobject_prototype\n} from '../shared/utils.js';\nimport { state as source, set } from './reactivity/sources.js';\nimport { PROXY_PATH_SYMBOL, STATE_SYMBOL } from '#client/constants';\nimport { UNINITIALIZED } from '../../constants.js';\nimport * as e from './errors.js';\nimport { get_stack, tag } from './dev/tracing.js';\nimport { tracing_mode_flag } from '../flags/index.js';\n\n// TODO move all regexes into shared module?\nconst regex_is_valid_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\n/**\n * @template T\n * @param {T} value\n * @returns {T}\n */\nexport function proxy(value) {\n\t// if non-proxyable, or is already a proxy, return `value`\n\tif (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {\n\t\treturn value;\n\t}\n\n\tconst prototype = get_prototype_of(value);\n\n\tif (prototype !== object_prototype && prototype !== array_prototype) {\n\t\treturn value;\n\t}\n\n\t/** @type {Map<any, Source<any>>} */\n\tvar sources = new Map();\n\tvar is_proxied_array = is_array(value);\n\tvar version = source(0);\n\n\tvar stack = DEV && tracing_mode_flag ? get_stack('CreatedAt') : null;\n\tvar reaction = active_reaction;\n\n\t/**\n\t * @template T\n\t * @param {() => T} fn\n\t */\n\tvar with_parent = (fn) => {\n\t\tvar previous_reaction = active_reaction;\n\t\tset_active_reaction(reaction);\n\n\t\t/** @type {T} */\n\t\tvar result = fn();\n\n\t\tset_active_reaction(previous_reaction);\n\t\treturn result;\n\t};\n\n\tif (is_proxied_array) {\n\t\t// We need to create the length source eagerly to ensure that\n\t\t// mutations to the array are properly synced with our proxy\n\t\tsources.set('length', source(/** @type {any[]} */ (value).length, stack));\n\t}\n\n\t/** Used in dev for $inspect.trace() */\n\tvar path = '';\n\n\t/** @param {string} new_path */\n\tfunction update_path(new_path) {\n\t\tpath = new_path;\n\n\t\ttag(version, `${path} version`);\n\n\t\t// rename all child sources and child proxies\n\t\tfor (const [prop, source] of sources) {\n\t\t\ttag(source, get_label(path, prop));\n\t\t}\n\t}\n\n\treturn new Proxy(/** @type {any} */ (value), {\n\t\tdefineProperty(_, prop, descriptor) {\n\t\t\tif (\n\t\t\t\t!('value' in descriptor) ||\n\t\t\t\tdescriptor.configurable === false ||\n\t\t\t\tdescriptor.enumerable === false ||\n\t\t\t\tdescriptor.writable === false\n\t\t\t) {\n\t\t\t\t// we disallow non-basic descriptors, because unless they are applied to the\n\t\t\t\t// target object — which we avoid, so that state can be forked — we will run\n\t\t\t\t// afoul of the various invariants\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants\n\t\t\t\te.state_descriptors_fixed();\n\t\t\t}\n\n\t\t\twith_parent(() => {\n\t\t\t\tvar s = sources.get(prop);\n\n\t\t\t\tif (s === undefined) {\n\t\t\t\t\ts = source(descriptor.value, stack);\n\t\t\t\t\tsources.set(prop, s);\n\n\t\t\t\t\tif (DEV && typeof prop === 'string') {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tset(s, descriptor.value, true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn true;\n\t\t},\n\n\t\tdeleteProperty(target, prop) {\n\t\t\tvar s = sources.get(prop);\n\n\t\t\tif (s === undefined) {\n\t\t\t\tif (prop in target) {\n\t\t\t\t\tconst s = with_parent(() => source(UNINITIALIZED, stack));\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t\tupdate_version(version);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// When working with arrays, we need to also ensure we update the length when removing\n\t\t\t\t// an indexed property\n\t\t\t\tif (is_proxied_array && typeof prop === 'string') {\n\t\t\t\t\tvar ls = /** @type {Source<number>} */ (sources.get('length'));\n\t\t\t\t\tvar n = Number(prop);\n\n\t\t\t\t\tif (Number.isInteger(n) && n < ls.v) {\n\t\t\t\t\t\tset(ls, n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tset(s, UNINITIALIZED);\n\t\t\t\tupdate_version(version);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tget(target, prop, receiver) {\n\t\t\tif (prop === STATE_SYMBOL) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (DEV && prop === PROXY_PATH_SYMBOL) {\n\t\t\t\treturn update_path;\n\t\t\t}\n\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar exists = prop in target;\n\n\t\t\t// create a source, but only if it's an own property and not a prototype property\n\t\t\tif (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {\n\t\t\t\ts = with_parent(() => {\n\t\t\t\t\tvar p = proxy(exists ? target[prop] : UNINITIALIZED);\n\t\t\t\t\tvar s = source(p, stack);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn s;\n\t\t\t\t});\n\n\t\t\t\tsources.set(prop, s);\n\t\t\t}\n\n\t\t\tif (s !== undefined) {\n\t\t\t\tvar v = get(s);\n\t\t\t\treturn v === UNINITIALIZED ? undefined : v;\n\t\t\t}\n\n\t\t\treturn Reflect.get(target, prop, receiver);\n\t\t},\n\n\t\tgetOwnPropertyDescriptor(target, prop) {\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\n\t\t\tif (descriptor && 'value' in descriptor) {\n\t\t\t\tvar s = sources.get(prop);\n\t\t\t\tif (s) descriptor.value = get(s);\n\t\t\t} else if (descriptor === undefined) {\n\t\t\t\tvar source = sources.get(prop);\n\t\t\t\tvar value = source?.v;\n\n\t\t\t\tif (source !== undefined && value !== UNINITIALIZED) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\twritable: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn descriptor;\n\t\t},\n\n\t\thas(target, prop) {\n\t\t\tif (prop === STATE_SYMBOL) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);\n\n\t\t\tif (\n\t\t\t\ts !== undefined ||\n\t\t\t\t(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))\n\t\t\t) {\n\t\t\t\tif (s === undefined) {\n\t\t\t\t\ts = with_parent(() => {\n\t\t\t\t\t\tvar p = has ? proxy(target[prop]) : UNINITIALIZED;\n\t\t\t\t\t\tvar s = source(p, stack);\n\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t});\n\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t}\n\n\t\t\t\tvar value = get(s);\n\t\t\t\tif (value === UNINITIALIZED) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn has;\n\t\t},\n\n\t\tset(target, prop, value, receiver) {\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar has = prop in target;\n\n\t\t\t// variable.length = value -> clear all signals with index >= value\n\t\t\tif (is_proxied_array && prop === 'length') {\n\t\t\t\tfor (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {\n\t\t\t\t\tvar other_s = sources.get(i + '');\n\t\t\t\t\tif (other_s !== undefined) {\n\t\t\t\t\t\tset(other_s, UNINITIALIZED);\n\t\t\t\t\t} else if (i in target) {\n\t\t\t\t\t\t// If the item exists in the original, we need to create a uninitialized source,\n\t\t\t\t\t\t// else a later read of the property would result in a source being created with\n\t\t\t\t\t\t// the value of the original item at that index.\n\t\t\t\t\t\tother_s = with_parent(() => source(UNINITIALIZED, stack));\n\t\t\t\t\t\tsources.set(i + '', other_s);\n\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\ttag(other_s, get_label(path, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we haven't yet created a source for this property, we need to ensure\n\t\t\t// we do so otherwise if we read it later, then the write won't be tracked and\n\t\t\t// the heuristics of effects will be different vs if we had read the proxied\n\t\t\t// object property before writing to that property.\n\t\t\tif (s === undefined) {\n\t\t\t\tif (!has || get_descriptor(target, prop)?.writable) {\n\t\t\t\t\ts = with_parent(() => {\n\t\t\t\t\t\tvar s = source(undefined, stack);\n\t\t\t\t\t\tset(s, proxy(value));\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t});\n\n\t\t\t\t\tsources.set(prop, s);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thas = s.v !== UNINITIALIZED;\n\n\t\t\t\tvar p = with_parent(() => proxy(value));\n\t\t\t\tset(s, p);\n\t\t\t}\n\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\n\t\t\t// Set the new value before updating any signals so that any listeners get the new value\n\t\t\tif (descriptor?.set) {\n\t\t\t\tdescriptor.set.call(receiver, value);\n\t\t\t}\n\n\t\t\tif (!has) {\n\t\t\t\t// If we have mutated an array directly, we might need to\n\t\t\t\t// signal that length has also changed. Do it before updating metadata\n\t\t\t\t// to ensure that iterating over the array as a result of a metadata update\n\t\t\t\t// will not cause the length to be out of sync.\n\t\t\t\tif (is_proxied_array && typeof prop === 'string') {\n\t\t\t\t\tvar ls = /** @type {Source<number>} */ (sources.get('length'));\n\t\t\t\t\tvar n = Number(prop);\n\n\t\t\t\t\tif (Number.isInteger(n) && n >= ls.v) {\n\t\t\t\t\t\tset(ls, n + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdate_version(version);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\townKeys(target) {\n\t\t\tget(version);\n\n\t\t\tvar own_keys = Reflect.ownKeys(target).filter((key) => {\n\t\t\t\tvar source = sources.get(key);\n\t\t\t\treturn source === undefined || source.v !== UNINITIALIZED;\n\t\t\t});\n\n\t\t\tfor (var [key, source] of sources) {\n\t\t\t\tif (source.v !== UNINITIALIZED && !(key in target)) {\n\t\t\t\t\town_keys.push(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn own_keys;\n\t\t},\n\n\t\tsetPrototypeOf() {\n\t\t\te.state_prototype_fixed();\n\t\t}\n\t});\n}\n\n/**\n * @param {string} path\n * @param {string | symbol} prop\n */\nfunction get_label(path, prop) {\n\tif (typeof prop === 'symbol') return `${path}[Symbol(${prop.description ?? ''})]`;\n\tif (regex_is_valid_identifier.test(prop)) return `${path}.${prop}`;\n\treturn /^\\d+$/.test(prop) ? `${path}[${prop}]` : `${path}['${prop}']`;\n}\n\n/**\n * @param {Source<number>} signal\n * @param {1 | -1} [d]\n */\nfunction update_version(signal, d = 1) {\n\tset(signal, signal.v + d);\n}\n\n/**\n * @param {any} value\n */\nexport function get_proxied_value(value) {\n\ttry {\n\t\tif (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {\n\t\t\treturn value[STATE_SYMBOL];\n\t\t}\n\t} catch {\n\t\t// the above if check can throw an error if the value in question\n\t\t// is the contentWindow of an iframe on another domain, in which\n\t\t// case we want to just return the value (because it's definitely\n\t\t// not a proxied value) so we don't break any JavaScript interacting\n\t\t// with that iframe (such as various payment companies client side\n\t\t// JavaScript libraries interacting with their iframes on the same\n\t\t// domain)\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {any} a\n * @param {any} b\n */\nexport function is(a, b) {\n\treturn Object.is(get_proxied_value(a), get_proxied_value(b));\n}\n","/** @import { Derived, Effect } from '#client' */\nimport { DEV } from 'esm-env';\nimport { CLEAN, DERIVED, DIRTY, EFFECT_HAS_DERIVED, MAYBE_DIRTY, UNOWNED } from '#client/constants';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tset_signal_status,\n\tskip_reaction,\n\tupdate_reaction,\n\tincrement_write_version,\n\tset_active_effect,\n\tpush_reaction_value,\n\tis_destroying_effect\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport { destroy_effect } from './effects.js';\nimport { inspect_effects, set_inspect_effects } from './sources.js';\nimport { get_stack } from '../dev/tracing.js';\nimport { tracing_mode_flag } from '../../flags/index.js';\nimport { component_context } from '../context.js';\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived(fn) {\n\tvar flags = DERIVED | DIRTY;\n\tvar parent_derived =\n\t\tactive_reaction !== null && (active_reaction.f & DERIVED) !== 0\n\t\t\t? /** @type {Derived} */ (active_reaction)\n\t\t\t: null;\n\n\tif (active_effect === null || (parent_derived !== null && (parent_derived.f & UNOWNED) !== 0)) {\n\t\tflags |= UNOWNED;\n\t} else {\n\t\t// Since deriveds are evaluated lazily, any effects created inside them are\n\t\t// created too late to ensure that the parent effect is added to the tree\n\t\tactive_effect.f |= EFFECT_HAS_DERIVED;\n\t}\n\n\t/** @type {Derived<V>} */\n\tconst signal = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\teffects: null,\n\t\tequals,\n\t\tf: flags,\n\t\tfn,\n\t\treactions: null,\n\t\trv: 0,\n\t\tv: /** @type {V} */ (null),\n\t\twv: 0,\n\t\tparent: parent_derived ?? active_effect\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = get_stack('CreatedAt');\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function user_derived(fn) {\n\tconst d = derived(fn);\n\n\tpush_reaction_value(d);\n\n\treturn d;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived_safe_equal(fn) {\n\tconst signal = derived(fn);\n\tsignal.equals = safe_equals;\n\treturn signal;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function destroy_derived_effects(derived) {\n\tvar effects = derived.effects;\n\n\tif (effects !== null) {\n\t\tderived.effects = null;\n\n\t\tfor (var i = 0; i < effects.length; i += 1) {\n\t\t\tdestroy_effect(/** @type {Effect} */ (effects[i]));\n\t\t}\n\t}\n}\n\n/**\n * The currently updating deriveds, used to detect infinite recursion\n * in dev mode and provide a nicer error than 'too much recursion'\n * @type {Derived[]}\n */\nlet stack = [];\n\n/**\n * @param {Derived} derived\n * @returns {Effect | null}\n */\nfunction get_derived_parent_effect(derived) {\n\tvar parent = derived.parent;\n\twhile (parent !== null) {\n\t\tif ((parent.f & DERIVED) === 0) {\n\t\t\treturn /** @type {Effect} */ (parent);\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\treturn null;\n}\n\n/**\n * @template T\n * @param {Derived} derived\n * @returns {T}\n */\nexport function execute_derived(derived) {\n\tvar value;\n\tvar prev_active_effect = active_effect;\n\n\tset_active_effect(get_derived_parent_effect(derived));\n\n\tif (DEV) {\n\t\tlet prev_inspect_effects = inspect_effects;\n\t\tset_inspect_effects(new Set());\n\t\ttry {\n\t\t\tif (stack.includes(derived)) {\n\t\t\t\te.derived_references_self();\n\t\t\t}\n\n\t\t\tstack.push(derived);\n\n\t\t\tdestroy_derived_effects(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t\tset_inspect_effects(prev_inspect_effects);\n\t\t\tstack.pop();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tdestroy_derived_effects(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function update_derived(derived) {\n\tvar value = execute_derived(derived);\n\n\tif (!derived.equals(value)) {\n\t\tderived.v = value;\n\t\tderived.wv = increment_write_version();\n\t}\n\n\t// don't mark derived clean if we're reading it inside a\n\t// cleanup function, or it will cache a stale value\n\tif (is_destroying_effect) return;\n\n\tvar status =\n\t\t(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;\n\n\tset_signal_status(derived, status);\n}\n","/** @import { Derived, Effect, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tuntracked_writes,\n\tget,\n\tschedule_effect,\n\tset_untracked_writes,\n\tset_signal_status,\n\tuntrack,\n\tincrement_write_version,\n\tupdate_effect,\n\treaction_sources,\n\tcheck_dirtiness,\n\tuntracking,\n\tis_destroying_effect,\n\tpush_reaction_value\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport {\n\tCLEAN,\n\tDERIVED,\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tINSPECT_EFFECT,\n\tUNOWNED,\n\tMAYBE_DIRTY,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT\n} from '#client/constants';\nimport * as e from '../errors.js';\nimport { legacy_mode_flag, tracing_mode_flag } from '../../flags/index.js';\nimport { get_stack, tag_proxy } from '../dev/tracing.js';\nimport { component_context, is_runes } from '../context.js';\nimport { proxy } from '../proxy.js';\nimport { execute_derived } from './deriveds.js';\n\nexport let inspect_effects = new Set();\n\n/** @type {Map<Source, any>} */\nexport const old_values = new Map();\n\n/**\n * @param {Set<any>} v\n */\nexport function set_inspect_effects(v) {\n\tinspect_effects = v;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n * @returns {Source<V>}\n */\n// TODO rename this to `state` throughout the codebase\nexport function source(v, stack) {\n\t/** @type {Value} */\n\tvar signal = {\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\n\t\tv,\n\t\treactions: null,\n\t\tequals,\n\t\trv: 0,\n\t\twv: 0\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = stack ?? get_stack('CreatedAt');\n\t\tsignal.updated = null;\n\t\tsignal.set_during_effect = false;\n\t\tsignal.trace = null;\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function state(v, stack) {\n\tconst s = source(v, stack);\n\n\tpush_reaction_value(s);\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {V} initial_value\n * @param {boolean} [immutable]\n * @returns {Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mutable_source(initial_value, immutable = false, trackable = true) {\n\tconst s = source(initial_value);\n\tif (!immutable) {\n\t\ts.equals = safe_equals;\n\t}\n\n\t// bind the signal to the component context, in case we need to\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\n\tif (legacy_mode_flag && trackable && component_context !== null && component_context.l !== null) {\n\t\t(component_context.l.s ??= []).push(s);\n\t}\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {Value<V>} source\n * @param {V} value\n */\nexport function mutate(source, value) {\n\tset(\n\t\tsource,\n\t\tuntrack(() => get(source))\n\t);\n\treturn value;\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @param {boolean} [should_proxy]\n * @returns {V}\n */\nexport function set(source, value, should_proxy = false) {\n\tif (\n\t\tactive_reaction !== null &&\n\t\t!untracking &&\n\t\tis_runes() &&\n\t\t(active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 &&\n\t\t!reaction_sources?.includes(source)\n\t) {\n\t\te.state_unsafe_mutation();\n\t}\n\n\tlet new_value = should_proxy ? proxy(value) : value;\n\n\tif (DEV) {\n\t\ttag_proxy(new_value, /** @type {string} */ (source.label));\n\t}\n\n\treturn internal_set(source, new_value);\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @returns {V}\n */\nexport function internal_set(source, value) {\n\tif (!source.equals(value)) {\n\t\tvar old_value = source.v;\n\n\t\tif (is_destroying_effect) {\n\t\t\told_values.set(source, value);\n\t\t} else {\n\t\t\told_values.set(source, old_value);\n\t\t}\n\n\t\tsource.v = value;\n\n\t\tif (DEV && tracing_mode_flag) {\n\t\t\tsource.updated = get_stack('UpdatedAt');\n\n\t\t\tif (active_effect !== null) {\n\t\t\t\tsource.set_during_effect = true;\n\t\t\t}\n\t\t}\n\n\t\tif ((source.f & DERIVED) !== 0) {\n\t\t\t// if we are assigning to a dirty derived we set it to clean/maybe dirty but we also eagerly execute it to track the dependencies\n\t\t\tif ((source.f & DIRTY) !== 0) {\n\t\t\t\texecute_derived(/** @type {Derived} */ (source));\n\t\t\t}\n\t\t\tset_signal_status(source, (source.f & UNOWNED) === 0 ? CLEAN : MAYBE_DIRTY);\n\t\t}\n\n\t\tsource.wv = increment_write_version();\n\n\t\tmark_reactions(source, DIRTY);\n\n\t\t// It's possible that the current reaction might not have up-to-date dependencies\n\t\t// whilst it's actively running. So in the case of ensuring it registers the reaction\n\t\t// properly for itself, we need to ensure the current effect actually gets\n\t\t// scheduled. i.e: `$effect(() => x++)`\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tactive_effect !== null &&\n\t\t\t(active_effect.f & CLEAN) !== 0 &&\n\t\t\t(active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0\n\t\t) {\n\t\t\tif (untracked_writes === null) {\n\t\t\t\tset_untracked_writes([source]);\n\t\t\t} else {\n\t\t\t\tuntracked_writes.push(source);\n\t\t\t}\n\t\t}\n\n\t\tif (DEV && inspect_effects.size > 0) {\n\t\t\tconst inspects = Array.from(inspect_effects);\n\n\t\t\tfor (const effect of inspects) {\n\t\t\t\t// Mark clean inspect-effects as maybe dirty and then check their dirtiness\n\t\t\t\t// instead of just updating the effects - this way we avoid overfiring.\n\t\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t\t}\n\t\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\t\tupdate_effect(effect);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinspect_effects.clear();\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Source<T>} source\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update(source, d = 1) {\n\tvar value = get(source);\n\tvar result = d === 1 ? value++ : value--;\n\n\tset(source, value);\n\n\t// @ts-expect-error\n\treturn result;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Source<T>} source\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update_pre(source, d = 1) {\n\tvar value = get(source);\n\n\t// @ts-expect-error\n\treturn set(source, d === 1 ? ++value : --value);\n}\n\n/**\n * @param {Value} signal\n * @param {number} status should be DIRTY or MAYBE_DIRTY\n * @returns {void}\n */\nfunction mark_reactions(signal, status) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tvar runes = is_runes();\n\tvar length = reactions.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar reaction = reactions[i];\n\t\tvar flags = reaction.f;\n\n\t\t// Skip any effects that are already dirty\n\t\tif ((flags & DIRTY) !== 0) continue;\n\n\t\t// In legacy mode, skip the current effect to prevent infinite loops\n\t\tif (!runes && reaction === active_effect) continue;\n\n\t\t// Inspect effects need to run immediately, so that the stack trace makes sense\n\t\tif (DEV && (flags & INSPECT_EFFECT) !== 0) {\n\t\t\tinspect_effects.add(reaction);\n\t\t\tcontinue;\n\t\t}\n\n\t\tset_signal_status(reaction, status);\n\n\t\t// If the signal a) was previously clean or b) is an unowned derived, then mark it\n\t\tif ((flags & (CLEAN | UNOWNED)) !== 0) {\n\t\t\tif ((flags & DERIVED) !== 0) {\n\t\t\t\tmark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);\n\t\t\t} else {\n\t\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t\t}\n\t\t}\n\t}\n}\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\nvar bold = 'font-weight: bold';\nvar normal = 'font-weight: normal';\n\n/**\n * Assignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.\n * @param {string} property\n * @param {string} location\n */\nexport function assignment_value_stale(property, location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] assignment_value_stale\\n%cAssignment to \\`${property}\\` property (${location}) will evaluate to the right-hand side, not the value of \\`${property}\\` following the assignment. This may result in unexpected behaviour.\\nhttps://svelte.dev/e/assignment_value_stale`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/assignment_value_stale`);\n\t}\n}\n\n/**\n * `%binding%` (%location%) is binding to a non-reactive property\n * @param {string} binding\n * @param {string | undefined | null} [location]\n */\nexport function binding_property_non_reactive(binding, location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] binding_property_non_reactive\\n%c${location ? `\\`${binding}\\` (${location}) is binding to a non-reactive property` : `\\`${binding}\\` is binding to a non-reactive property`}\\nhttps://svelte.dev/e/binding_property_non_reactive`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/binding_property_non_reactive`);\n\t}\n}\n\n/**\n * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead\n * @param {string} method\n */\nexport function console_log_state(method) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] console_log_state\\n%cYour \\`console.${method}\\` contained \\`$state\\` proxies. Consider using \\`$inspect(...)\\` or \\`$state.snapshot(...)\\` instead\\nhttps://svelte.dev/e/console_log_state`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/console_log_state`);\n\t}\n}\n\n/**\n * %handler% should be a function. Did you mean to %suggestion%?\n * @param {string} handler\n * @param {string} suggestion\n */\nexport function event_handler_invalid(handler, suggestion) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] event_handler_invalid\\n%c${handler} should be a function. Did you mean to ${suggestion}?\\nhttps://svelte.dev/e/event_handler_invalid`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/event_handler_invalid`);\n\t}\n}\n\n/**\n * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\n * @param {string} attribute\n * @param {string} html\n * @param {string} value\n */\nexport function hydration_attribute_changed(attribute, html, value) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_attribute_changed\\n%cThe \\`${attribute}\\` attribute on \\`${html}\\` changed its value between server and client renders. The client value, \\`${value}\\`, will be ignored in favour of the server value\\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_attribute_changed`);\n\t}\n}\n\n/**\n * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\n * @param {string | undefined | null} [location]\n */\nexport function hydration_html_changed(location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_html_changed\\n%c${location ? `The value of an \\`{@html ...}\\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value` : 'The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value'}\\nhttps://svelte.dev/e/hydration_html_changed`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_html_changed`);\n\t}\n}\n\n/**\n * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%\n * @param {string | undefined | null} [location]\n */\nexport function hydration_mismatch(location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_mismatch\\n%c${location ? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}` : 'Hydration failed because the initial UI does not match what was rendered on the server'}\\nhttps://svelte.dev/e/hydration_mismatch`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_mismatch`);\n\t}\n}\n\n/**\n * The `render` function passed to `createRawSnippet` should return HTML for a single element\n */\nexport function invalid_raw_snippet_render() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] invalid_raw_snippet_render\\n%cThe \\`render\\` function passed to \\`createRawSnippet\\` should return HTML for a single element\\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/invalid_raw_snippet_render`);\n\t}\n}\n\n/**\n * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.\n * @param {string} filename\n */\nexport function legacy_recursive_reactive_block(filename) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] legacy_recursive_reactive_block\\n%cDetected a migrated \\`$:\\` reactive block in \\`${filename}\\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \\`$effect\\`.\\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/legacy_recursive_reactive_block`);\n\t}\n}\n\n/**\n * Tried to unmount a component that was not mounted\n */\nexport function lifecycle_double_unmount() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] lifecycle_double_unmount\\n%cTried to unmount a component that was not mounted\\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/lifecycle_double_unmount`);\n\t}\n}\n\n/**\n * %parent% passed property `%prop%` to %child% with `bind:`, but its parent component %owner% did not declare `%prop%` as a binding. Consider creating a binding between %owner% and %parent% (e.g. `bind:%prop%={...}` instead of `%prop%={...}`)\n * @param {string} parent\n * @param {string} prop\n * @param {string} child\n * @param {string} owner\n */\nexport function ownership_invalid_binding(parent, prop, child, owner) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] ownership_invalid_binding\\n%c${parent} passed property \\`${prop}\\` to ${child} with \\`bind:\\`, but its parent component ${owner} did not declare \\`${prop}\\` as a binding. Consider creating a binding between ${owner} and ${parent} (e.g. \\`bind:${prop}={...}\\` instead of \\`${prop}={...}\\`)\\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_binding`);\n\t}\n}\n\n/**\n * Mutating unbound props (`%name%`, at %location%) is strongly discouraged. Consider using `bind:%prop%={...}` in %parent% (or using a callback) instead\n * @param {string} name\n * @param {string} location\n * @param {string} prop\n * @param {string} parent\n */\nexport function ownership_invalid_mutation(name, location, prop, parent) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] ownership_invalid_mutation\\n%cMutating unbound props (\\`${name}\\`, at ${location}) is strongly discouraged. Consider using \\`bind:${prop}={...}\\` in ${parent} (or using a callback) instead\\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_mutation`);\n\t}\n}\n\n/**\n * The `value` property of a `<select multiple>` element should be an array, but it received a non-array value. The selection will be kept as is.\n */\nexport function select_multiple_invalid_value() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] select_multiple_invalid_value\\n%cThe \\`value\\` property of a \\`<select multiple>\\` element should be an array, but it received a non-array value. The selection will be kept as is.\\nhttps://svelte.dev/e/select_multiple_invalid_value`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/select_multiple_invalid_value`);\n\t}\n}\n\n/**\n * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results\n * @param {string} operator\n */\nexport function state_proxy_equality_mismatch(operator) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] state_proxy_equality_mismatch\\n%cReactive \\`$state(...)\\` proxies and the values they proxy have different identities. Because of this, comparisons with \\`${operator}\\` will produce unexpected results\\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/state_proxy_equality_mismatch`);\n\t}\n}\n\n/**\n * The `slide` transition does not work correctly for elements with `display: %value%`\n * @param {string} value\n */\nexport function transition_slide_display(value) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] transition_slide_display\\n%cThe \\`slide\\` transition does not work correctly for elements with \\`display: ${value}\\`\\nhttps://svelte.dev/e/transition_slide_display`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/transition_slide_display`);\n\t}\n}","import * as w from '../warnings.js';\nimport { get_proxied_value } from '../proxy.js';\n\nexport function init_array_prototype_warnings() {\n\tconst array_prototype = Array.prototype;\n\t// The REPL ends up here over and over, and this prevents it from adding more and more patches\n\t// of the same kind to the prototype, which would slow down everything over time.\n\t// @ts-expect-error\n\tconst cleanup = Array.__svelte_cleanup;\n\tif (cleanup) {\n\t\tcleanup();\n\t}\n\n\tconst { indexOf, lastIndexOf, includes } = array_prototype;\n\n\tarray_prototype.indexOf = function (item, from_index) {\n\t\tconst index = indexOf.call(this, item, from_index);\n\n\t\tif (index === -1) {\n\t\t\tfor (let i = from_index ?? 0; i < this.length; i += 1) {\n\t\t\t\tif (get_proxied_value(this[i]) === item) {\n\t\t\t\t\tw.state_proxy_equality_mismatch('array.indexOf(...)');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t};\n\n\tarray_prototype.lastIndexOf = function (item, from_index) {\n\t\t// we need to specify this.length - 1 because it's probably using something like\n\t\t// `arguments` inside so passing undefined is different from not passing anything\n\t\tconst index = lastIndexOf.call(this, item, from_index ?? this.length - 1);\n\n\t\tif (index === -1) {\n\t\t\tfor (let i = 0; i <= (from_index ?? this.length - 1); i += 1) {\n\t\t\t\tif (get_proxied_value(this[i]) === item) {\n\t\t\t\t\tw.state_proxy_equality_mismatch('array.lastIndexOf(...)');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t};\n\n\tarray_prototype.includes = function (item, from_index) {\n\t\tconst has = includes.call(this, item, from_index);\n\n\t\tif (!has) {\n\t\t\tfor (let i = 0; i < this.length; i += 1) {\n\t\t\t\tif (get_proxied_value(this[i]) === item) {\n\t\t\t\t\tw.state_proxy_equality_mismatch('array.includes(...)');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn has;\n\t};\n\n\t// @ts-expect-error\n\tArray.__svelte_cleanup = () => {\n\t\tarray_prototype.indexOf = indexOf;\n\t\tarray_prototype.lastIndexOf = lastIndexOf;\n\t\tarray_prototype.includes = includes;\n\t};\n}\n\n/**\n * @param {any} a\n * @param {any} b\n * @param {boolean} equal\n * @returns {boolean}\n */\nexport function strict_equals(a, b, equal = true) {\n\t// try-catch needed because this tries to read properties of `a` and `b`,\n\t// which could be disallowed for example in a secure context\n\ttry {\n\t\tif ((a === b) !== (get_proxied_value(a) === get_proxied_value(b))) {\n\t\t\tw.state_proxy_equality_mismatch(equal ? '===' : '!==');\n\t\t}\n\t} catch {}\n\n\treturn (a === b) === equal;\n}\n\n/**\n * @param {any} a\n * @param {any} b\n * @param {boolean} equal\n * @returns {boolean}\n */\nexport function equals(a, b, equal = true) {\n\tif ((a == b) !== (get_proxied_value(a) == get_proxied_value(b))) {\n\t\tw.state_proxy_equality_mismatch(equal ? '==' : '!=');\n\t}\n\n\treturn (a == b) === equal;\n}\n","/** @import { TemplateNode } from '#client' */\nimport { hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\nimport { DEV } from 'esm-env';\nimport { init_array_prototype_warnings } from '../dev/equality.js';\nimport { get_descriptor, is_extensible } from '../../shared/utils.js';\n\n// export these for reference in the compiled code, making global name deduplication unnecessary\n/** @type {Window} */\nexport var $window;\n\n/** @type {Document} */\nexport var $document;\n\n/** @type {boolean} */\nexport var is_firefox;\n\n/** @type {() => Node | null} */\nvar first_child_getter;\n/** @type {() => Node | null} */\nvar next_sibling_getter;\n\n/**\n * Initialize these lazily to avoid issues when using the runtime in a server context\n * where these globals are not available while avoiding a separate server entry point\n */\nexport function init_operations() {\n\tif ($window !== undefined) {\n\t\treturn;\n\t}\n\n\t$window = window;\n\t$document = document;\n\tis_firefox = /Firefox/.test(navigator.userAgent);\n\n\tvar element_prototype = Element.prototype;\n\tvar node_prototype = Node.prototype;\n\tvar text_prototype = Text.prototype;\n\n\t// @ts-ignore\n\tfirst_child_getter = get_descriptor(node_prototype, 'firstChild').get;\n\t// @ts-ignore\n\tnext_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;\n\n\tif (is_extensible(element_prototype)) {\n\t\t// the following assignments improve perf of lookups on DOM nodes\n\t\t// @ts-expect-error\n\t\telement_prototype.__click = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__className = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__attributes = null;\n\t\t// @ts-expect-error\n\t\telement_prototype.__style = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__e = undefined;\n\t}\n\n\tif (is_extensible(text_prototype)) {\n\t\t// @ts-expect-error\n\t\ttext_prototype.__t = undefined;\n\t}\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\telement_prototype.__svelte_meta = null;\n\n\t\tinit_array_prototype_warnings();\n\t}\n}\n\n/**\n * @param {string} value\n * @returns {Text}\n */\nexport function create_text(value = '') {\n\treturn document.createTextNode(value);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_first_child(node) {\n\treturn first_child_getter.call(node);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_next_sibling(node) {\n\treturn next_sibling_getter.call(node);\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @template {Node} N\n * @param {N} node\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function child(node, is_text) {\n\tif (!hydrating) {\n\t\treturn get_first_child(node);\n\t}\n\n\tvar child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));\n\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\n\tif (child === null) {\n\t\tchild = hydrate_node.appendChild(create_text());\n\t} else if (is_text && child.nodeType !== 3) {\n\t\tvar text = create_text();\n\t\tchild?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(child);\n\treturn child;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {DocumentFragment | TemplateNode[]} fragment\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function first_child(fragment, is_text) {\n\tif (!hydrating) {\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\n\t\tvar first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));\n\n\t\t// TODO prevent user comments with the empty string when preserveComments is true\n\t\tif (first instanceof Comment && first.data === '') return get_next_sibling(first);\n\n\t\treturn first;\n\t}\n\n\t// if an {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && hydrate_node?.nodeType !== 3) {\n\t\tvar text = create_text();\n\n\t\thydrate_node?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\treturn hydrate_node;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {TemplateNode} node\n * @param {number} count\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function sibling(node, count = 1, is_text = false) {\n\tlet next_sibling = hydrating ? hydrate_node : node;\n\tvar last_sibling;\n\n\twhile (count--) {\n\t\tlast_sibling = next_sibling;\n\t\tnext_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));\n\t}\n\n\tif (!hydrating) {\n\t\treturn next_sibling;\n\t}\n\n\tvar type = next_sibling?.nodeType;\n\n\t// if a sibling {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && type !== 3) {\n\t\tvar text = create_text();\n\t\t// If the next sibling is `null` and we're handling text then it's because\n\t\t// the SSR content was empty for the text, so we need to generate a new text\n\t\t// node and insert it after the last sibling\n\t\tif (next_sibling === null) {\n\t\t\tlast_sibling?.after(text);\n\t\t} else {\n\t\t\tnext_sibling.before(text);\n\t\t}\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(next_sibling);\n\treturn /** @type {TemplateNode} */ (next_sibling);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {void}\n */\nexport function clear_text_content(node) {\n\tnode.textContent = '';\n}\n\n/**\n *\n * @param {string} tag\n * @param {string} [namespace]\n * @param {string} [is]\n * @returns\n */\nexport function create_element(tag, namespace, is) {\n\tlet options = is ? { is } : undefined;\n\tif (namespace) {\n\t\treturn document.createElementNS(namespace, tag, options);\n\t}\n\treturn document.createElement(tag, options);\n}\n\nexport function create_fragment() {\n\treturn document.createDocumentFragment();\n}\n\n/**\n * @param {string} data\n * @returns\n */\nexport function create_comment(data = '') {\n\treturn document.createComment(data);\n}\n\n/**\n * @param {Element} element\n * @param {string} key\n * @param {string} value\n * @returns\n */\nexport function set_attribute(element, key, value = '') {\n\tif (key.startsWith('xlink:')) {\n\t\telement.setAttributeNS('http://www.w3.org/1999/xlink', key, value);\n\t\treturn;\n\t}\n\treturn element.setAttribute(key, value);\n}\n","/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */\nimport {\n\tcheck_dirtiness,\n\tactive_effect,\n\tactive_reaction,\n\tupdate_effect,\n\tget,\n\tis_destroying_effect,\n\tremove_reactions,\n\tschedule_effect,\n\tset_active_reaction,\n\tset_is_destroying_effect,\n\tset_signal_status,\n\tuntrack,\n\tuntracking\n} from '../runtime.js';\nimport {\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tRENDER_EFFECT,\n\tEFFECT,\n\tDESTROYED,\n\tINERT,\n\tEFFECT_RAN,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tEFFECT_TRANSPARENT,\n\tDERIVED,\n\tUNOWNED,\n\tCLEAN,\n\tINSPECT_EFFECT,\n\tHEAD_EFFECT,\n\tMAYBE_DIRTY,\n\tEFFECT_HAS_DERIVED,\n\tBOUNDARY_EFFECT\n} from '#client/constants';\nimport { set } from './sources.js';\nimport * as e from '../errors.js';\nimport { DEV } from 'esm-env';\nimport { define_property } from '../../shared/utils.js';\nimport { get_next_sibling } from '../dom/operations.js';\nimport { derived } from './deriveds.js';\nimport { component_context, dev_current_component_function } from '../context.js';\n\n/**\n * @param {'$effect' | '$effect.pre' | '$inspect'} rune\n */\nexport function validate_effect(rune) {\n\tif (active_effect === null && active_reaction === null) {\n\t\te.effect_orphan(rune);\n\t}\n\n\tif (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0 && active_effect === null) {\n\t\te.effect_in_unowned_derived();\n\t}\n\n\tif (is_destroying_effect) {\n\t\te.effect_in_teardown(rune);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {Effect} parent_effect\n */\nfunction push_effect(effect, parent_effect) {\n\tvar parent_last = parent_effect.last;\n\tif (parent_last === null) {\n\t\tparent_effect.last = parent_effect.first = effect;\n\t} else {\n\t\tparent_last.next = effect;\n\t\teffect.prev = parent_last;\n\t\tparent_effect.last = effect;\n\t}\n}\n\n/**\n * @param {number} type\n * @param {null | (() => void | (() => void))} fn\n * @param {boolean} sync\n * @param {boolean} push\n * @returns {Effect}\n */\nfunction create_effect(type, fn, sync, push = true) {\n\tvar parent = active_effect;\n\n\tif (DEV) {\n\t\t// Ensure the parent is never an inspect effect\n\t\twhile (parent !== null && (parent.f & INSPECT_EFFECT) !== 0) {\n\t\t\tparent = parent.parent;\n\t\t}\n\t}\n\n\t/** @type {Effect} */\n\tvar effect = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\tnodes_start: null,\n\t\tnodes_end: null,\n\t\tf: type | DIRTY,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\tnext: null,\n\t\tparent,\n\t\tprev: null,\n\t\tteardown: null,\n\t\ttransitions: null,\n\t\twv: 0\n\t};\n\n\tif (DEV) {\n\t\teffect.component_function = dev_current_component_function;\n\t}\n\n\tif (sync) {\n\t\ttry {\n\t\t\tupdate_effect(effect);\n\t\t\teffect.f |= EFFECT_RAN;\n\t\t} catch (e) {\n\t\t\tdestroy_effect(effect);\n\t\t\tthrow e;\n\t\t}\n\t} else if (fn !== null) {\n\t\tschedule_effect(effect);\n\t}\n\n\t// if an effect has no dependencies, no DOM and no teardown function,\n\t// don't bother adding it to the effect tree\n\tvar inert =\n\t\tsync &&\n\t\teffect.deps === null &&\n\t\teffect.first === null &&\n\t\teffect.nodes_start === null &&\n\t\teffect.teardown === null &&\n\t\t(effect.f & (EFFECT_HAS_DERIVED | BOUNDARY_EFFECT)) === 0;\n\n\tif (!inert && push) {\n\t\tif (parent !== null) {\n\t\t\tpush_effect(effect, parent);\n\t\t}\n\n\t\t// if we're in a derived, add the effect there too\n\t\tif (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {\n\t\t\tvar derived = /** @type {Derived} */ (active_reaction);\n\t\t\t(derived.effects ??= []).push(effect);\n\t\t}\n\t}\n\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect.tracking()`\n * @returns {boolean}\n */\nexport function effect_tracking() {\n\treturn active_reaction !== null && !untracking;\n}\n\n/**\n * @param {() => void} fn\n */\nexport function teardown(fn) {\n\tconst effect = create_effect(RENDER_EFFECT, null, false);\n\tset_signal_status(effect, CLEAN);\n\teffect.teardown = fn;\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect(...)`\n * @param {() => void | (() => void)} fn\n */\nexport function user_effect(fn) {\n\tvalidate_effect('$effect');\n\n\t// Non-nested `$effect(...)` in a component should be deferred\n\t// until the component is mounted\n\tvar defer =\n\t\tactive_effect !== null &&\n\t\t(active_effect.f & BRANCH_EFFECT) !== 0 &&\n\t\tcomponent_context !== null &&\n\t\t!component_context.m;\n\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect'\n\t\t});\n\t}\n\n\tif (defer) {\n\t\tvar context = /** @type {ComponentContext} */ (component_context);\n\t\t(context.e ??= []).push({\n\t\t\tfn,\n\t\t\teffect: active_effect,\n\t\t\treaction: active_reaction\n\t\t});\n\t} else {\n\t\tvar signal = effect(fn);\n\t\treturn signal;\n\t}\n}\n\n/**\n * Internal representation of `$effect.pre(...)`\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function user_pre_effect(fn) {\n\tvalidate_effect('$effect.pre');\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect.pre'\n\t\t});\n\t}\n\treturn render_effect(fn);\n}\n\n/** @param {() => void | (() => void)} fn */\nexport function inspect_effect(fn) {\n\treturn create_effect(INSPECT_EFFECT, fn, true);\n}\n\n/**\n * Internal representation of `$effect.root(...)`\n * @param {() => void | (() => void)} fn\n * @returns {() => void}\n */\nexport function effect_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\n\treturn () => {\n\t\tdestroy_effect(effect);\n\t};\n}\n\n/**\n * An effect root whose children can transition out\n * @param {() => void} fn\n * @returns {(options?: { outro?: boolean }) => Promise<void>}\n */\nexport function component_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\n\treturn (options = {}) => {\n\t\treturn new Promise((fulfil) => {\n\t\t\tif (options.outro) {\n\t\t\t\tpause_effect(effect, () => {\n\t\t\t\t\tdestroy_effect(effect);\n\t\t\t\t\tfulfil(undefined);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdestroy_effect(effect);\n\t\t\t\tfulfil(undefined);\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function effect(fn) {\n\treturn create_effect(EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$: ..`\n * @param {() => any} deps\n * @param {() => void | (() => void)} fn\n */\nexport function legacy_pre_effect(deps, fn) {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\t/** @type {{ effect: null | Effect, ran: boolean }} */\n\tvar token = { effect: null, ran: false };\n\tcontext.l.r1.push(token);\n\n\ttoken.effect = render_effect(() => {\n\t\tdeps();\n\n\t\t// If this legacy pre effect has already run before the end of the reset, then\n\t\t// bail out to emulate the same behavior.\n\t\tif (token.ran) return;\n\n\t\ttoken.ran = true;\n\t\tset(context.l.r2, true);\n\t\tuntrack(fn);\n\t});\n}\n\nexport function legacy_pre_effect_reset() {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\trender_effect(() => {\n\t\tif (!get(context.l.r2)) return;\n\n\t\t// Run dirty `$:` statements\n\t\tfor (var token of context.l.r1) {\n\t\t\tvar effect = token.effect;\n\n\t\t\t// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through\n\t\t\t// the effects dependencies and correctly ensure each dependency is up-to-date.\n\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t}\n\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\tupdate_effect(effect);\n\t\t\t}\n\n\t\t\ttoken.ran = false;\n\t\t}\n\n\t\tcontext.l.r2.v = false; // set directly to avoid rerunning this effect\n\t});\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function render_effect(fn) {\n\treturn create_effect(RENDER_EFFECT, fn, true);\n}\n\n/**\n * @param {(...expressions: any) => void | (() => void)} fn\n * @param {Array<() => any>} thunks\n * @param {<T>(fn: () => T) => Derived<T>} d\n * @returns {Effect}\n */\nexport function template_effect(fn, thunks = [], d = derived) {\n\tif (DEV) {\n\t\t// wrap the effect so that we can decorate stack trace with `in {expression}`\n\t\t// (TODO maybe there's a better approach?)\n\t\treturn render_effect(() => {\n\t\t\tvar outer = /** @type {Effect} */ (active_effect);\n\t\t\tvar inner = () => fn(...deriveds.map(get));\n\n\t\t\tdefine_property(outer.fn, 'name', { value: '{expression}' });\n\t\t\tdefine_property(inner, 'name', { value: '{expression}' });\n\n\t\t\tconst deriveds = thunks.map(d);\n\t\t\tblock(inner);\n\t\t});\n\t}\n\n\tconst deriveds = thunks.map(d);\n\treturn block(() => fn(...deriveds.map(get)));\n}\n\n/**\n * @param {(() => void)} fn\n * @param {number} flags\n */\nexport function block(fn, flags = 0) {\n\treturn create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);\n}\n\n/**\n * @param {(() => void)} fn\n * @param {boolean} [push]\n */\nexport function branch(fn, push = true) {\n\treturn create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push);\n}\n\n/**\n * @param {Effect} effect\n */\nexport function execute_effect_teardown(effect) {\n\tvar teardown = effect.teardown;\n\tif (teardown !== null) {\n\t\tconst previously_destroying_effect = is_destroying_effect;\n\t\tconst previous_reaction = active_reaction;\n\t\tset_is_destroying_effect(true);\n\t\tset_active_reaction(null);\n\t\ttry {\n\t\t\tteardown.call(null);\n\t\t} finally {\n\t\t\tset_is_destroying_effect(previously_destroying_effect);\n\t\t\tset_active_reaction(previous_reaction);\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @param {boolean} remove_dom\n * @returns {void}\n */\nexport function destroy_effect_children(signal, remove_dom = false) {\n\tvar effect = signal.first;\n\tsignal.first = signal.last = null;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\n\t\tif ((effect.f & ROOT_EFFECT) !== 0) {\n\t\t\t// this is now an independent root\n\t\t\teffect.parent = null;\n\t\t} else {\n\t\t\tdestroy_effect(effect, remove_dom);\n\t\t}\n\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function destroy_block_effect_children(signal) {\n\tvar effect = signal.first;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\t\tif ((effect.f & BRANCH_EFFECT) === 0) {\n\t\t\tdestroy_effect(effect);\n\t\t}\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} [remove_dom]\n * @returns {void}\n */\nexport function destroy_effect(effect, remove_dom = true) {\n\tvar removed = false;\n\n\tif (\n\t\t(remove_dom || (effect.f & HEAD_EFFECT) !== 0) &&\n\t\teffect.nodes_start !== null &&\n\t\teffect.nodes_end !== null\n\t) {\n\t\tremove_effect_dom(effect.nodes_start, /** @type {TemplateNode} */ (effect.nodes_end));\n\t\tremoved = true;\n\t}\n\n\tdestroy_effect_children(effect, remove_dom && !removed);\n\tremove_reactions(effect, 0);\n\tset_signal_status(effect, DESTROYED);\n\n\tvar transitions = effect.transitions;\n\n\tif (transitions !== null) {\n\t\tfor (const transition of transitions) {\n\t\t\ttransition.stop();\n\t\t}\n\t}\n\n\texecute_effect_teardown(effect);\n\n\tvar parent = effect.parent;\n\n\t// If the parent doesn't have any children, then skip this work altogether\n\tif (parent !== null && parent.first !== null) {\n\t\tunlink_effect(effect);\n\t}\n\n\tif (DEV) {\n\t\teffect.component_function = null;\n\t}\n\n\t// `first` and `child` are nulled out in destroy_effect_children\n\t// we don't null out `parent` so that error propagation can work correctly\n\teffect.next =\n\t\teffect.prev =\n\t\teffect.teardown =\n\t\teffect.ctx =\n\t\teffect.deps =\n\t\teffect.fn =\n\t\teffect.nodes_start =\n\t\teffect.nodes_end =\n\t\t\tnull;\n}\n\n/**\n *\n * @param {TemplateNode | null} node\n * @param {TemplateNode} end\n */\nexport function remove_effect_dom(node, end) {\n\twhile (node !== null) {\n\t\t/** @type {TemplateNode | null} */\n\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n\n\t\tnode.remove();\n\t\tnode = next;\n\t}\n}\n\n/**\n * Detach an effect from the effect tree, freeing up memory and\n * reducing the amount of work that happens on subsequent traversals\n * @param {Effect} effect\n */\nexport function unlink_effect(effect) {\n\tvar parent = effect.parent;\n\tvar prev = effect.prev;\n\tvar next = effect.next;\n\n\tif (prev !== null) prev.next = next;\n\tif (next !== null) next.prev = prev;\n\n\tif (parent !== null) {\n\t\tif (parent.first === effect) parent.first = next;\n\t\tif (parent.last === effect) parent.last = prev;\n\t}\n}\n\n/**\n * When a block effect is removed, we don't immediately destroy it or yank it\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\n * It stays around (in memory, and in the DOM) until outro transitions have\n * completed, and if the state change is reversed then we _resume_ it.\n * A paused effect does not update, and the DOM subtree becomes inert.\n * @param {Effect} effect\n * @param {() => void} [callback]\n */\nexport function pause_effect(effect, callback) {\n\t/** @type {TransitionManager[]} */\n\tvar transitions = [];\n\n\tpause_children(effect, transitions, true);\n\n\trun_out_transitions(transitions, () => {\n\t\tdestroy_effect(effect);\n\t\tif (callback) callback();\n\t});\n}\n\n/**\n * @param {TransitionManager[]} transitions\n * @param {() => void} fn\n */\nexport function run_out_transitions(transitions, fn) {\n\tvar remaining = transitions.length;\n\tif (remaining > 0) {\n\t\tvar check = () => --remaining || fn();\n\t\tfor (var transition of transitions) {\n\t\t\ttransition.out(check);\n\t\t}\n\t} else {\n\t\tfn();\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {TransitionManager[]} transitions\n * @param {boolean} local\n */\nexport function pause_children(effect, transitions, local) {\n\tif ((effect.f & INERT) !== 0) return;\n\teffect.f ^= INERT;\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransitions.push(transition);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tpause_children(child, transitions, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n}\n\n/**\n * The opposite of `pause_effect`. We call this if (for example)\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\n * @param {Effect} effect\n */\nexport function resume_effect(effect) {\n\tresume_children(effect, true);\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} local\n */\nfunction resume_children(effect, local) {\n\tif ((effect.f & INERT) === 0) return;\n\teffect.f ^= INERT;\n\n\t// If a dependency of this effect changed while it was paused,\n\t// schedule the effect to update. we don't use `check_dirtiness`\n\t// here because we don't want to eagerly recompute a derived like\n\t// `{#if foo}{foo.bar()}{/if}` if `foo` is now `undefined\n\tif ((effect.f & CLEAN) !== 0) {\n\t\tset_signal_status(effect, DIRTY);\n\t\tschedule_effect(effect);\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tresume_children(child, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransition.in();\n\t\t\t}\n\t\t}\n\t}\n}\n","import { run_all } from '../../shared/utils.js';\n\n// Fallback for when requestIdleCallback is not available\nconst request_idle_callback =\n\ttypeof requestIdleCallback === 'undefined'\n\t\t? (/** @type {() => void} */ cb) => setTimeout(cb, 1)\n\t\t: requestIdleCallback;\n\n/** @type {Array<() => void>} */\nlet micro_tasks = [];\n\n/** @type {Array<() => void>} */\nlet idle_tasks = [];\n\nfunction run_micro_tasks() {\n\tvar tasks = micro_tasks;\n\tmicro_tasks = [];\n\trun_all(tasks);\n}\n\nfunction run_idle_tasks() {\n\tvar tasks = idle_tasks;\n\tidle_tasks = [];\n\trun_all(tasks);\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_micro_task(fn) {\n\tif (micro_tasks.length === 0) {\n\t\tqueueMicrotask(run_micro_tasks);\n\t}\n\n\tmicro_tasks.push(fn);\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_idle_task(fn) {\n\tif (idle_tasks.length === 0) {\n\t\trequest_idle_callback(run_idle_tasks);\n\t}\n\n\tidle_tasks.push(fn);\n}\n\n/**\n * Synchronously run any queued tasks.\n */\nexport function flush_tasks() {\n\tif (micro_tasks.length > 0) {\n\t\trun_micro_tasks();\n\t}\n\n\tif (idle_tasks.length > 0) {\n\t\trun_idle_tasks();\n\t}\n}\n","/** @import { Effect } from '#client' */\nimport { DEV } from 'esm-env';\nimport { FILENAME } from '../../constants.js';\nimport { is_firefox } from './dom/operations.js';\nimport { BOUNDARY_EFFECT, EFFECT_RAN } from './constants.js';\nimport { define_property, get_descriptor } from '../shared/utils.js';\nimport { active_effect } from './runtime.js';\n\n/**\n * @param {unknown} error\n */\nexport function handle_error(error) {\n\tvar effect = /** @type {Effect} */ (active_effect);\n\n\tif (DEV && error instanceof Error) {\n\t\tadjust_error(error, effect);\n\t}\n\n\tif ((effect.f & EFFECT_RAN) === 0) {\n\t\t// if the error occurred while creating this subtree, we let it\n\t\t// bubble up until it hits a boundary that can handle it\n\t\tif ((effect.f & BOUNDARY_EFFECT) === 0) {\n\t\t\tthrow error;\n\t\t}\n\n\t\t// @ts-expect-error\n\t\teffect.fn(error);\n\t} else {\n\t\t// otherwise we bubble up the effect tree ourselves\n\t\tinvoke_error_boundary(error, effect);\n\t}\n}\n\n/**\n * @param {unknown} error\n * @param {Effect | null} effect\n */\nexport function invoke_error_boundary(error, effect) {\n\twhile (effect !== null) {\n\t\tif ((effect.f & BOUNDARY_EFFECT) !== 0) {\n\t\t\ttry {\n\t\t\t\t// @ts-expect-error\n\t\t\t\teffect.fn(error);\n\t\t\t\treturn;\n\t\t\t} catch {}\n\t\t}\n\n\t\teffect = effect.parent;\n\t}\n\n\tthrow error;\n}\n\n/** @type {WeakSet<Error>} */\nconst adjusted_errors = new WeakSet();\n\n/**\n * Add useful information to the error message/stack in development\n * @param {Error} error\n * @param {Effect} effect\n */\nfunction adjust_error(error, effect) {\n\tif (adjusted_errors.has(error)) return;\n\tadjusted_errors.add(error);\n\n\tconst message_descriptor = get_descriptor(error, 'message');\n\n\t// if the message was already changed and it's not configurable we can't change it\n\t// or it will throw a different error swallowing the original error\n\tif (message_descriptor && !message_descriptor.configurable) return;\n\n\tvar indent = is_firefox ? '  ' : '\\t';\n\tvar component_stack = `\\n${indent}in ${effect.fn?.name || '<unknown>'}`;\n\tvar context = effect.ctx;\n\n\twhile (context !== null) {\n\t\tcomponent_stack += `\\n${indent}in ${context.function?.[FILENAME].split('/').pop()}`;\n\t\tcontext = context.p;\n\t}\n\n\tdefine_property(error, 'message', {\n\t\tvalue: error.message + `\\n${component_stack}\\n`\n\t});\n\n\tif (error.stack) {\n\t\t// Filter out internal modules\n\t\tdefine_property(error, 'stack', {\n\t\t\tvalue: error.stack\n\t\t\t\t.split('\\n')\n\t\t\t\t.filter((line) => !line.includes('svelte/src/internal'))\n\t\t\t\t.join('\\n')\n\t\t});\n\t}\n}\n","/** @import { Derived, Effect, Reaction, Signal, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport { define_property, get_descriptors, get_prototype_of, index_of } from '../shared/utils.js';\nimport {\n\tdestroy_block_effect_children,\n\tdestroy_effect_children,\n\texecute_effect_teardown,\n\tunlink_effect\n} from './reactivity/effects.js';\nimport {\n\tEFFECT,\n\tDIRTY,\n\tMAYBE_DIRTY,\n\tCLEAN,\n\tDERIVED,\n\tUNOWNED,\n\tDESTROYED,\n\tINERT,\n\tBRANCH_EFFECT,\n\tSTATE_SYMBOL,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tLEGACY_DERIVED_PROP,\n\tDISCONNECTED,\n\tEFFECT_IS_UPDATING\n} from './constants.js';\nimport { flush_tasks } from './dom/task.js';\nimport { internal_set, old_values } from './reactivity/sources.js';\nimport { destroy_derived_effects, update_derived } from './reactivity/deriveds.js';\nimport * as e from './errors.js';\n\nimport { tracing_mode_flag } from '../flags/index.js';\nimport { tracing_expressions, get_stack } from './dev/tracing.js';\nimport {\n\tcomponent_context,\n\tdev_current_component_function,\n\tis_runes,\n\tset_component_context,\n\tset_dev_current_component_function\n} from './context.js';\nimport { handle_error, invoke_error_boundary } from './error-handling.js';\nimport { snapshot } from '../shared/clone.js';\n\nlet is_flushing = false;\n\n/** @type {Effect | null} */\nlet last_scheduled_effect = null;\n\nlet is_updating_effect = false;\n\nexport let is_destroying_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_destroying_effect(value) {\n\tis_destroying_effect = value;\n}\n\n// Handle effect queues\n\n/** @type {Effect[]} */\nlet queued_root_effects = [];\n\n/** @type {Effect[]} Stack of effects, dev only */\nlet dev_effect_stack = [];\n// Handle signal reactivity tree dependencies and reactions\n\n/** @type {null | Reaction} */\nexport let active_reaction = null;\n\nexport let untracking = false;\n\n/** @param {null | Reaction} reaction */\nexport function set_active_reaction(reaction) {\n\tactive_reaction = reaction;\n}\n\n/** @type {null | Effect} */\nexport let active_effect = null;\n\n/** @param {null | Effect} effect */\nexport function set_active_effect(effect) {\n\tactive_effect = effect;\n}\n\n/**\n * When sources are created within a reaction, reading and writing\n * them should not cause a re-run\n * @type {null | Source[]}\n */\nexport let reaction_sources = null;\n\n/** @param {Value} value */\nexport function push_reaction_value(value) {\n\tif (active_reaction !== null && active_reaction.f & EFFECT_IS_UPDATING) {\n\t\tif (reaction_sources === null) {\n\t\t\treaction_sources = [value];\n\t\t} else {\n\t\t\treaction_sources.push(value);\n\t\t}\n\t}\n}\n\n/**\n * The dependencies of the reaction that is currently being executed. In many cases,\n * the dependencies are unchanged between runs, and so this will be `null` unless\n * and until a new dependency is accessed — we track this via `skipped_deps`\n * @type {null | Value[]}\n */\nlet new_deps = null;\n\nlet skipped_deps = 0;\n\n/**\n * Tracks writes that the effect it's executed in doesn't listen to yet,\n * so that the dependency can be added to the effect later on if it then reads it\n * @type {null | Source[]}\n */\nexport let untracked_writes = null;\n\n/** @param {null | Source[]} value */\nexport function set_untracked_writes(value) {\n\tuntracked_writes = value;\n}\n\n/**\n * @type {number} Used by sources and deriveds for handling updates.\n * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing\n **/\nlet write_version = 1;\n\n/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */\nlet read_version = 0;\n\n// If we are working with a get() chain that has no active container,\n// to prevent memory leaks, we skip adding the reaction.\nexport let skip_reaction = false;\n// Handle collecting all signals which are read during a specific time frame\n/** @type {Set<Value> | null} */\nexport let captured_signals = null;\n\n/** @param {Set<Value> | null} value */\nexport function set_captured_signals(value) {\n\tcaptured_signals = value;\n}\n\nexport function increment_write_version() {\n\treturn ++write_version;\n}\n\n/**\n * Determines whether a derived or effect is dirty.\n * If it is MAYBE_DIRTY, will set the status to CLEAN\n * @param {Reaction} reaction\n * @returns {boolean}\n */\nexport function check_dirtiness(reaction) {\n\tvar flags = reaction.f;\n\n\tif ((flags & DIRTY) !== 0) {\n\t\treturn true;\n\t}\n\n\tif ((flags & MAYBE_DIRTY) !== 0) {\n\t\tvar dependencies = reaction.deps;\n\t\tvar is_unowned = (flags & UNOWNED) !== 0;\n\n\t\tif (dependencies !== null) {\n\t\t\tvar i;\n\t\t\tvar dependency;\n\t\t\tvar is_disconnected = (flags & DISCONNECTED) !== 0;\n\t\t\tvar is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;\n\t\t\tvar length = dependencies.length;\n\n\t\t\t// If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)\n\t\t\t// then we need to re-connect the reaction to the dependency\n\t\t\tif (is_disconnected || is_unowned_connected) {\n\t\t\t\tvar derived = /** @type {Derived} */ (reaction);\n\t\t\t\tvar parent = derived.parent;\n\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\t\t// We always re-add all reactions (even duplicates) if the derived was\n\t\t\t\t\t// previously disconnected, however we don't if it was unowned as we\n\t\t\t\t\t// de-duplicate dependencies in that case\n\t\t\t\t\tif (is_disconnected || !dependency?.reactions?.includes(derived)) {\n\t\t\t\t\t\t(dependency.reactions ??= []).push(derived);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (is_disconnected) {\n\t\t\t\t\tderived.f ^= DISCONNECTED;\n\t\t\t\t}\n\t\t\t\t// If the unowned derived is now fully connected to the graph again (it's unowned and reconnected, has a parent\n\t\t\t\t// and the parent is not unowned), then we can mark it as connected again, removing the need for the unowned\n\t\t\t\t// flag\n\t\t\t\tif (is_unowned_connected && parent !== null && (parent.f & UNOWNED) === 0) {\n\t\t\t\t\tderived.f ^= UNOWNED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\tif (check_dirtiness(/** @type {Derived} */ (dependency))) {\n\t\t\t\t\tupdate_derived(/** @type {Derived} */ (dependency));\n\t\t\t\t}\n\n\t\t\t\tif (dependency.wv > reaction.wv) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unowned signals should never be marked as clean unless they\n\t\t// are used within an active_effect without skip_reaction\n\t\tif (!is_unowned || (active_effect !== null && !skip_reaction)) {\n\t\t\tset_signal_status(reaction, CLEAN);\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {Value} signal\n * @param {Effect} effect\n * @param {boolean} [root]\n */\nfunction schedule_possible_effect_self_invalidation(signal, effect, root = true) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tfor (var i = 0; i < reactions.length; i++) {\n\t\tvar reaction = reactions[i];\n\n\t\tif (reaction_sources?.includes(signal)) continue;\n\n\t\tif ((reaction.f & DERIVED) !== 0) {\n\t\t\tschedule_possible_effect_self_invalidation(/** @type {Derived} */ (reaction), effect, false);\n\t\t} else if (effect === reaction) {\n\t\t\tif (root) {\n\t\t\t\tset_signal_status(reaction, DIRTY);\n\t\t\t} else if ((reaction.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(reaction, MAYBE_DIRTY);\n\t\t\t}\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t}\n\t}\n}\n\n/** @param {Reaction} reaction */\nexport function update_reaction(reaction) {\n\tvar previous_deps = new_deps;\n\tvar previous_skipped_deps = skipped_deps;\n\tvar previous_untracked_writes = untracked_writes;\n\tvar previous_reaction = active_reaction;\n\tvar previous_skip_reaction = skip_reaction;\n\tvar previous_reaction_sources = reaction_sources;\n\tvar previous_component_context = component_context;\n\tvar previous_untracking = untracking;\n\n\tvar flags = reaction.f;\n\n\tnew_deps = /** @type {null | Value[]} */ (null);\n\tskipped_deps = 0;\n\tuntracked_writes = null;\n\tskip_reaction =\n\t\t(flags & UNOWNED) !== 0 && (untracking || !is_updating_effect || active_reaction === null);\n\tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n\n\treaction_sources = null;\n\tset_component_context(reaction.ctx);\n\tuntracking = false;\n\tread_version++;\n\n\treaction.f |= EFFECT_IS_UPDATING;\n\n\ttry {\n\t\tvar result = /** @type {Function} */ (0, reaction.fn)();\n\t\tvar deps = reaction.deps;\n\n\t\tif (new_deps !== null) {\n\t\t\tvar i;\n\n\t\t\tremove_reactions(reaction, skipped_deps);\n\n\t\t\tif (deps !== null && skipped_deps > 0) {\n\t\t\t\tdeps.length = skipped_deps + new_deps.length;\n\t\t\t\tfor (i = 0; i < new_deps.length; i++) {\n\t\t\t\t\tdeps[skipped_deps + i] = new_deps[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treaction.deps = deps = new_deps;\n\t\t\t}\n\n\t\t\tif (!skip_reaction) {\n\t\t\t\tfor (i = skipped_deps; i < deps.length; i++) {\n\t\t\t\t\t(deps[i].reactions ??= []).push(reaction);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (deps !== null && skipped_deps < deps.length) {\n\t\t\tremove_reactions(reaction, skipped_deps);\n\t\t\tdeps.length = skipped_deps;\n\t\t}\n\n\t\t// If we're inside an effect and we have untracked writes, then we need to\n\t\t// ensure that if any of those untracked writes result in re-invalidation\n\t\t// of the current effect, then that happens accordingly\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tuntracked_writes !== null &&\n\t\t\t!untracking &&\n\t\t\tdeps !== null &&\n\t\t\t(reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0\n\t\t) {\n\t\t\tfor (i = 0; i < /** @type {Source[]} */ (untracked_writes).length; i++) {\n\t\t\t\tschedule_possible_effect_self_invalidation(\n\t\t\t\t\tuntracked_writes[i],\n\t\t\t\t\t/** @type {Effect} */ (reaction)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// If we are returning to an previous reaction then\n\t\t// we need to increment the read version to ensure that\n\t\t// any dependencies in this reaction aren't marked with\n\t\t// the same version\n\t\tif (previous_reaction !== null && previous_reaction !== reaction) {\n\t\t\tread_version++;\n\n\t\t\tif (untracked_writes !== null) {\n\t\t\t\tif (previous_untracked_writes === null) {\n\t\t\t\t\tprevious_untracked_writes = untracked_writes;\n\t\t\t\t} else {\n\t\t\t\t\tprevious_untracked_writes.push(.../** @type {Source[]} */ (untracked_writes));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t} catch (error) {\n\t\thandle_error(error);\n\t} finally {\n\t\tnew_deps = previous_deps;\n\t\tskipped_deps = previous_skipped_deps;\n\t\tuntracked_writes = previous_untracked_writes;\n\t\tactive_reaction = previous_reaction;\n\t\tskip_reaction = previous_skip_reaction;\n\t\treaction_sources = previous_reaction_sources;\n\t\tset_component_context(previous_component_context);\n\t\tuntracking = previous_untracking;\n\n\t\treaction.f ^= EFFECT_IS_UPDATING;\n\t}\n}\n\n/**\n * @template V\n * @param {Reaction} signal\n * @param {Value<V>} dependency\n * @returns {void}\n */\nfunction remove_reaction(signal, dependency) {\n\tlet reactions = dependency.reactions;\n\tif (reactions !== null) {\n\t\tvar index = index_of.call(reactions, signal);\n\t\tif (index !== -1) {\n\t\t\tvar new_length = reactions.length - 1;\n\t\t\tif (new_length === 0) {\n\t\t\t\treactions = dependency.reactions = null;\n\t\t\t} else {\n\t\t\t\t// Swap with last element and then remove.\n\t\t\t\treactions[index] = reactions[new_length];\n\t\t\t\treactions.pop();\n\t\t\t}\n\t\t}\n\t}\n\t// If the derived has no reactions, then we can disconnect it from the graph,\n\t// allowing it to either reconnect in the future, or be GC'd by the VM.\n\tif (\n\t\treactions === null &&\n\t\t(dependency.f & DERIVED) !== 0 &&\n\t\t// Destroying a child effect while updating a parent effect can cause a dependency to appear\n\t\t// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`\n\t\t// allows us to skip the expensive work of disconnecting and immediately reconnecting it\n\t\t(new_deps === null || !new_deps.includes(dependency))\n\t) {\n\t\tset_signal_status(dependency, MAYBE_DIRTY);\n\t\t// If we are working with a derived that is owned by an effect, then mark it as being\n\t\t// disconnected.\n\t\tif ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {\n\t\t\tdependency.f ^= DISCONNECTED;\n\t\t}\n\t\t// Disconnect any reactions owned by this reaction\n\t\tdestroy_derived_effects(/** @type {Derived} **/ (dependency));\n\t\tremove_reactions(/** @type {Derived} **/ (dependency), 0);\n\t}\n}\n\n/**\n * @param {Reaction} signal\n * @param {number} start_index\n * @returns {void}\n */\nexport function remove_reactions(signal, start_index) {\n\tvar dependencies = signal.deps;\n\tif (dependencies === null) return;\n\n\tfor (var i = start_index; i < dependencies.length; i++) {\n\t\tremove_reaction(signal, dependencies[i]);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @returns {void}\n */\nexport function update_effect(effect) {\n\tvar flags = effect.f;\n\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn;\n\t}\n\n\tset_signal_status(effect, CLEAN);\n\n\tvar previous_effect = active_effect;\n\tvar was_updating_effect = is_updating_effect;\n\n\tactive_effect = effect;\n\tis_updating_effect = true;\n\n\tif (DEV) {\n\t\tvar previous_component_fn = dev_current_component_function;\n\t\tset_dev_current_component_function(effect.component_function);\n\t}\n\n\ttry {\n\t\tif ((flags & BLOCK_EFFECT) !== 0) {\n\t\t\tdestroy_block_effect_children(effect);\n\t\t} else {\n\t\t\tdestroy_effect_children(effect);\n\t\t}\n\n\t\texecute_effect_teardown(effect);\n\t\tvar teardown = update_reaction(effect);\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\n\t\teffect.wv = write_version;\n\n\t\t// In DEV, increment versions of any sources that were written to during the effect,\n\t\t// so that they are correctly marked as dirty when the effect re-runs\n\t\tif (DEV && tracing_mode_flag && (effect.f & DIRTY) !== 0 && effect.deps !== null) {\n\t\t\tfor (var dep of effect.deps) {\n\t\t\t\tif (dep.set_during_effect) {\n\t\t\t\t\tdep.wv = increment_write_version();\n\t\t\t\t\tdep.set_during_effect = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (DEV) {\n\t\t\tdev_effect_stack.push(effect);\n\t\t}\n\t} finally {\n\t\tis_updating_effect = was_updating_effect;\n\t\tactive_effect = previous_effect;\n\n\t\tif (DEV) {\n\t\t\tset_dev_current_component_function(previous_component_fn);\n\t\t}\n\t}\n}\n\nfunction log_effect_stack() {\n\t// eslint-disable-next-line no-console\n\tconsole.error(\n\t\t'Last ten effects were: ',\n\t\tdev_effect_stack.slice(-10).map((d) => d.fn)\n\t);\n\tdev_effect_stack = [];\n}\n\nfunction infinite_loop_guard() {\n\ttry {\n\t\te.effect_update_depth_exceeded();\n\t} catch (error) {\n\t\tif (DEV) {\n\t\t\t// stack is garbage, ignore. Instead add a console.error message.\n\t\t\tdefine_property(error, 'stack', {\n\t\t\t\tvalue: ''\n\t\t\t});\n\t\t}\n\t\t// Try and handle the error so it can be caught at a boundary, that's\n\t\t// if there's an effect available from when it was last scheduled\n\t\tif (last_scheduled_effect !== null) {\n\t\t\tif (DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tinvoke_error_boundary(error, last_scheduled_effect);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Only log the effect stack if the error is re-thrown\n\t\t\t\t\tlog_effect_stack();\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinvoke_error_boundary(error, last_scheduled_effect);\n\t\t\t}\n\t\t} else {\n\t\t\tif (DEV) {\n\t\t\t\tlog_effect_stack();\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nfunction flush_queued_root_effects() {\n\tvar was_updating_effect = is_updating_effect;\n\n\ttry {\n\t\tvar flush_count = 0;\n\t\tis_updating_effect = true;\n\n\t\twhile (queued_root_effects.length > 0) {\n\t\t\tif (flush_count++ > 1000) {\n\t\t\t\tinfinite_loop_guard();\n\t\t\t}\n\n\t\t\tvar root_effects = queued_root_effects;\n\t\t\tvar length = root_effects.length;\n\n\t\t\tqueued_root_effects = [];\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar collected_effects = process_effects(root_effects[i]);\n\t\t\t\tflush_queued_effects(collected_effects);\n\t\t\t}\n\t\t\told_values.clear();\n\t\t}\n\t} finally {\n\t\tis_flushing = false;\n\t\tis_updating_effect = was_updating_effect;\n\n\t\tlast_scheduled_effect = null;\n\t\tif (DEV) {\n\t\t\tdev_effect_stack = [];\n\t\t}\n\t}\n}\n\n/**\n * @param {Array<Effect>} effects\n * @returns {void}\n */\nfunction flush_queued_effects(effects) {\n\tvar length = effects.length;\n\tif (length === 0) return;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar effect = effects[i];\n\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0) {\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\tupdate_effect(effect);\n\n\t\t\t\t// Effects with no dependencies or teardown do not get added to the effect tree.\n\t\t\t\t// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we\n\t\t\t\t// don't know if we need to keep them until they are executed. Doing the check\n\t\t\t\t// here (rather than in `update_effect`) allows us to skip the work for\n\t\t\t\t// immediate effects.\n\t\t\t\tif (effect.deps === null && effect.first === null && effect.nodes_start === null) {\n\t\t\t\t\tif (effect.teardown === null) {\n\t\t\t\t\t\t// remove this effect from the graph\n\t\t\t\t\t\tunlink_effect(effect);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep the effect in the graph, but free up some memory\n\t\t\t\t\t\teffect.fn = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function schedule_effect(signal) {\n\tif (!is_flushing) {\n\t\tis_flushing = true;\n\t\tqueueMicrotask(flush_queued_root_effects);\n\t}\n\n\tvar effect = (last_scheduled_effect = signal);\n\n\twhile (effect.parent !== null) {\n\t\teffect = effect.parent;\n\t\tvar flags = effect.f;\n\n\t\tif ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {\n\t\t\tif ((flags & CLEAN) === 0) return;\n\t\t\teffect.f ^= CLEAN;\n\t\t}\n\t}\n\n\tqueued_root_effects.push(effect);\n}\n\n/**\n *\n * This function both runs render effects and collects user effects in topological order\n * from the starting effect passed in. Effects will be collected when they match the filtered\n * bitwise flag passed in only. The collected effects array will be populated with all the user\n * effects to be flushed.\n *\n * @param {Effect} root\n * @returns {Effect[]}\n */\nfunction process_effects(root) {\n\t/** @type {Effect[]} */\n\tvar effects = [];\n\n\t/** @type {Effect | null} */\n\tvar effect = root;\n\n\twhile (effect !== null) {\n\t\tvar flags = effect.f;\n\t\tvar is_branch = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) !== 0;\n\t\tvar is_skippable_branch = is_branch && (flags & CLEAN) !== 0;\n\n\t\tif (!is_skippable_branch && (flags & INERT) === 0) {\n\t\t\tif ((flags & EFFECT) !== 0) {\n\t\t\t\teffects.push(effect);\n\t\t\t} else if (is_branch) {\n\t\t\t\teffect.f ^= CLEAN;\n\t\t\t} else {\n\t\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\t\tupdate_effect(effect);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {Effect | null} */\n\t\t\tvar child = effect.first;\n\n\t\t\tif (child !== null) {\n\t\t\t\teffect = child;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tvar parent = effect.parent;\n\t\teffect = effect.next;\n\n\t\twhile (effect === null && parent !== null) {\n\t\t\teffect = parent.next;\n\t\t\tparent = parent.parent;\n\t\t}\n\t}\n\n\treturn effects;\n}\n\n/**\n * Synchronously flush any pending updates.\n * Returns void if no callback is provided, otherwise returns the result of calling the callback.\n * @template [T=void]\n * @param {(() => T) | undefined} [fn]\n * @returns {T}\n */\nexport function flushSync(fn) {\n\tvar result;\n\n\tif (fn) {\n\t\tis_flushing = true;\n\t\tflush_queued_root_effects();\n\n\t\tis_flushing = true;\n\t\tresult = fn();\n\t}\n\n\twhile (true) {\n\t\tflush_tasks();\n\n\t\tif (queued_root_effects.length === 0) {\n\t\t\t// this would be reset in `flush_queued_root_effects` but since we are early returning here,\n\t\t\t// we need to reset it here as well in case the first time there's 0 queued root effects\n\t\t\tis_flushing = false;\n\t\t\tlast_scheduled_effect = null;\n\t\t\tif (DEV) {\n\t\t\t\tdev_effect_stack = [];\n\t\t\t}\n\t\t\treturn /** @type {T} */ (result);\n\t\t}\n\n\t\tis_flushing = true;\n\t\tflush_queued_root_effects();\n\t}\n}\n\n/**\n * Returns a promise that resolves once any pending state changes have been applied.\n * @returns {Promise<void>}\n */\nexport async function tick() {\n\tawait Promise.resolve();\n\t// By calling flushSync we guarantee that any pending state changes are applied after one tick.\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\n\tflushSync();\n}\n\n/**\n * @template V\n * @param {Value<V>} signal\n * @returns {V}\n */\nexport function get(signal) {\n\tvar flags = signal.f;\n\tvar is_derived = (flags & DERIVED) !== 0;\n\n\tif (captured_signals !== null) {\n\t\tcaptured_signals.add(signal);\n\t}\n\n\t// Register the dependency on the current reaction signal.\n\tif (active_reaction !== null && !untracking) {\n\t\tif (!reaction_sources?.includes(signal)) {\n\t\t\tvar deps = active_reaction.deps;\n\t\t\tif (signal.rv < read_version) {\n\t\t\t\tsignal.rv = read_version;\n\t\t\t\t// If the signal is accessing the same dependencies in the same\n\t\t\t\t// order as it did last time, increment `skipped_deps`\n\t\t\t\t// rather than updating `new_deps`, which creates GC cost\n\t\t\t\tif (new_deps === null && deps !== null && deps[skipped_deps] === signal) {\n\t\t\t\t\tskipped_deps++;\n\t\t\t\t} else if (new_deps === null) {\n\t\t\t\t\tnew_deps = [signal];\n\t\t\t\t} else if (!skip_reaction || !new_deps.includes(signal)) {\n\t\t\t\t\t// Normally we can push duplicated dependencies to `new_deps`, but if we're inside\n\t\t\t\t\t// an unowned derived because skip_reaction is true, then we need to ensure that\n\t\t\t\t\t// we don't have duplicates\n\t\t\t\t\tnew_deps.push(signal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (\n\t\tis_derived &&\n\t\t/** @type {Derived} */ (signal).deps === null &&\n\t\t/** @type {Derived} */ (signal).effects === null\n\t) {\n\t\tvar derived = /** @type {Derived} */ (signal);\n\t\tvar parent = derived.parent;\n\n\t\tif (parent !== null && (parent.f & UNOWNED) === 0) {\n\t\t\t// If the derived is owned by another derived then mark it as unowned\n\t\t\t// as the derived value might have been referenced in a different context\n\t\t\t// since and thus its parent might not be its true owner anymore\n\t\t\tderived.f ^= UNOWNED;\n\t\t}\n\t}\n\n\tif (is_derived) {\n\t\tderived = /** @type {Derived} */ (signal);\n\n\t\tif (check_dirtiness(derived)) {\n\t\t\tupdate_derived(derived);\n\t\t}\n\t}\n\n\tif (\n\t\tDEV &&\n\t\ttracing_mode_flag &&\n\t\t!untracking &&\n\t\ttracing_expressions !== null &&\n\t\tactive_reaction !== null &&\n\t\ttracing_expressions.reaction === active_reaction\n\t) {\n\t\t// Used when mapping state between special blocks like `each`\n\t\tif (signal.trace) {\n\t\t\tsignal.trace();\n\t\t} else {\n\t\t\tvar trace = get_stack('TracedAt');\n\n\t\t\tif (trace) {\n\t\t\t\tvar entry = tracing_expressions.entries.get(signal);\n\n\t\t\t\tif (entry === undefined) {\n\t\t\t\t\tentry = { traces: [] };\n\t\t\t\t\ttracing_expressions.entries.set(signal, entry);\n\t\t\t\t}\n\n\t\t\t\tvar last = entry.traces[entry.traces.length - 1];\n\n\t\t\t\t// traces can be duplicated, e.g. by `snapshot` invoking both\n\t\t\t\t// both `getOwnPropertyDescriptor` and `get` traps at once\n\t\t\t\tif (trace.stack !== last?.stack) {\n\t\t\t\t\tentry.traces.push(trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (is_destroying_effect && old_values.has(signal)) {\n\t\treturn old_values.get(signal);\n\t}\n\n\treturn signal.v;\n}\n\n/**\n * Like `get`, but checks for `undefined`. Used for `var` declarations because they can be accessed before being declared\n * @template V\n * @param {Value<V> | undefined} signal\n * @returns {V | undefined}\n */\nexport function safe_get(signal) {\n\treturn signal && get(signal);\n}\n\n/**\n * Capture an array of all the signals that are read when `fn` is called\n * @template T\n * @param {() => T} fn\n */\nfunction capture_signals(fn) {\n\tvar previous_captured_signals = captured_signals;\n\tcaptured_signals = new Set();\n\n\tvar captured = captured_signals;\n\tvar signal;\n\n\ttry {\n\t\tuntrack(fn);\n\t\tif (previous_captured_signals !== null) {\n\t\t\tfor (signal of captured_signals) {\n\t\t\t\tprevious_captured_signals.add(signal);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tcaptured_signals = previous_captured_signals;\n\t}\n\n\treturn captured;\n}\n\n/**\n * Invokes a function and captures all signals that are read during the invocation,\n * then invalidates them.\n * @param {() => any} fn\n */\nexport function invalidate_inner_signals(fn) {\n\tvar captured = capture_signals(() => untrack(fn));\n\n\tfor (var signal of captured) {\n\t\t// Go one level up because derived signals created as part of props in legacy mode\n\t\tif ((signal.f & LEGACY_DERIVED_PROP) !== 0) {\n\t\t\tfor (const dep of /** @type {Derived} */ (signal).deps || []) {\n\t\t\t\tif ((dep.f & DERIVED) === 0) {\n\t\t\t\t\t// Use internal_set instead of set here and below to avoid mutation validation\n\t\t\t\t\tinternal_set(dep, dep.v);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tinternal_set(signal, signal.v);\n\t\t}\n\t}\n}\n\n/**\n * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),\n * any state read inside `fn` will not be treated as a dependency.\n *\n * ```ts\n * $effect(() => {\n *   // this will run when `data` changes, but not when `time` changes\n *   save(data, {\n *     timestamp: untrack(() => time)\n *   });\n * });\n * ```\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nexport function untrack(fn) {\n\tvar previous_untracking = untracking;\n\ttry {\n\t\tuntracking = true;\n\t\treturn fn();\n\t} finally {\n\t\tuntracking = previous_untracking;\n\t}\n}\n\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\n\n/**\n * @param {Signal} signal\n * @param {number} status\n * @returns {void}\n */\nexport function set_signal_status(signal, status) {\n\tsignal.f = (signal.f & STATUS_MASK) | status;\n}\n\n/**\n * @param {Record<string, unknown>} obj\n * @param {string[]} keys\n * @returns {Record<string, unknown>}\n */\nexport function exclude_from_object(obj, keys) {\n\t/** @type {Record<string, unknown>} */\n\tvar result = {};\n\n\tfor (var key in obj) {\n\t\tif (!keys.includes(key)) {\n\t\t\tresult[key] = obj[key];\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\n * @param {any} value\n * @returns {void}\n */\nexport function deep_read_state(value) {\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\n\t\treturn;\n\t}\n\n\tif (STATE_SYMBOL in value) {\n\t\tdeep_read(value);\n\t} else if (!Array.isArray(value)) {\n\t\tfor (let key in value) {\n\t\t\tconst prop = value[key];\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\n\t\t\t\tdeep_read(prop);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Deeply traverse an object and read all its properties\n * so that they're all reactive in case this is `$state`\n * @param {any} value\n * @param {Set<any>} visited\n * @returns {void}\n */\nexport function deep_read(value, visited = new Set()) {\n\tif (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t// We don't want to traverse DOM elements\n\t\t!(value instanceof EventTarget) &&\n\t\t!visited.has(value)\n\t) {\n\t\tvisited.add(value);\n\t\t// When working with a possible SvelteDate, this\n\t\t// will ensure we capture changes to it.\n\t\tif (value instanceof Date) {\n\t\t\tvalue.getTime();\n\t\t}\n\t\tfor (let key in value) {\n\t\t\ttry {\n\t\t\t\tdeep_read(value[key], visited);\n\t\t\t} catch (e) {\n\t\t\t\t// continue\n\t\t\t}\n\t\t}\n\t\tconst proto = get_prototype_of(value);\n\t\tif (\n\t\t\tproto !== Object.prototype &&\n\t\t\tproto !== Array.prototype &&\n\t\t\tproto !== Map.prototype &&\n\t\t\tproto !== Set.prototype &&\n\t\t\tproto !== Date.prototype\n\t\t) {\n\t\t\tconst descriptors = get_descriptors(proto);\n\t\t\tfor (let key in descriptors) {\n\t\t\t\tconst get = descriptors[key].get;\n\t\t\t\tif (get) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tget.call(value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/** @import { ComponentContext, ComponentContextLegacy } from '#client' */\n/** @import { EventDispatcher } from './index.js' */\n/** @import { NotFunction } from './internal/types.js' */\nimport { untrack } from './internal/client/runtime.js';\nimport { is_array } from './internal/shared/utils.js';\nimport { user_effect } from './internal/client/index.js';\nimport * as e from './internal/client/errors.js';\nimport { lifecycle_outside_component } from './internal/shared/errors.js';\nimport { legacy_mode_flag } from './internal/flags/index.js';\nimport { component_context } from './internal/client/context.js';\nimport { DEV } from 'esm-env';\n\nif (DEV) {\n\t/**\n\t * @param {string} rune\n\t */\n\tfunction throw_rune_error(rune) {\n\t\tif (!(rune in globalThis)) {\n\t\t\t// TODO if people start adjusting the \"this can contain runes\" config through v-p-s more, adjust this message\n\t\t\t/** @type {any} */\n\t\t\tlet value; // let's hope noone modifies this global, but belts and braces\n\t\t\tObject.defineProperty(globalThis, rune, {\n\t\t\t\tconfigurable: true,\n\t\t\t\t// eslint-disable-next-line getter-return\n\t\t\t\tget: () => {\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\n\t\t\t\t\te.rune_outside_svelte(rune);\n\t\t\t\t},\n\t\t\t\tset: (v) => {\n\t\t\t\t\tvalue = v;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tthrow_rune_error('$state');\n\tthrow_rune_error('$effect');\n\tthrow_rune_error('$derived');\n\tthrow_rune_error('$inspect');\n\tthrow_rune_error('$props');\n\tthrow_rune_error('$bindable');\n}\n\n/**\n * `onMount`, like [`$effect`](https://svelte.dev/docs/svelte/$effect), schedules a function to run as soon as the component has been mounted to the DOM.\n * Unlike `$effect`, the provided function only runs once.\n *\n * It must be called during the component's initialisation (but doesn't need to live _inside_ the component;\n * it can be called from an external module). If a function is returned _synchronously_ from `onMount`,\n * it will be called when the component is unmounted.\n *\n * `onMount` functions do not run during [server-side rendering](https://svelte.dev/docs/svelte/svelte-server#render).\n *\n * @template T\n * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('onMount');\n\t}\n\n\tif (legacy_mode_flag && component_context.l !== null) {\n\t\tinit_update_callbacks(component_context).m.push(fn);\n\t} else {\n\t\tuser_effect(() => {\n\t\t\tconst cleanup = untrack(fn);\n\t\t\tif (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);\n\t\t});\n\t}\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('onDestroy');\n\t}\n\n\tonMount(() => () => untrack(fn));\n}\n\n/**\n * @template [T=any]\n * @param {string} type\n * @param {T} [detail]\n * @param {any}params_0\n * @returns {CustomEvent<T>}\n */\nfunction create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs/svelte/legacy-on#Component-events).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: null; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * @deprecated Use callback props and/or the `$host()` rune instead — see [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Event-changes-Component-events)\n * @template {Record<string, any>} [EventMap = any]\n * @returns {EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst active_component_context = component_context;\n\tif (active_component_context === null) {\n\t\tlifecycle_outside_component('createEventDispatcher');\n\t}\n\n\treturn (type, detail, options) => {\n\t\tconst events = /** @type {Record<string, Function | Function[]>} */ (\n\t\t\tactive_component_context.s.$$events\n\t\t)?.[/** @type {any} */ (type)];\n\n\t\tif (events) {\n\t\t\tconst callbacks = is_array(events) ? events.slice() : [events];\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = create_custom_event(/** @type {string} */ (type), detail, options);\n\t\t\tfor (const fn of callbacks) {\n\t\t\t\tfn.call(active_component_context.x, event);\n\t\t\t}\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\n\t\treturn true;\n\t};\n}\n\n// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`.\n *\n * In runes mode use `$effect.pre` instead.\n *\n * @deprecated Use [`$effect.pre`](https://svelte.dev/docs/svelte/$effect#$effect.pre) instead\n * @param {() => void} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('beforeUpdate');\n\t}\n\n\tif (component_context.l === null) {\n\t\te.lifecycle_legacy_only('beforeUpdate');\n\t}\n\n\tinit_update_callbacks(component_context).b.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`.\n *\n * In runes mode use `$effect` instead.\n *\n * @deprecated Use [`$effect`](https://svelte.dev/docs/svelte/$effect) instead\n * @param {() => void} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component('afterUpdate');\n\t}\n\n\tif (component_context.l === null) {\n\t\te.lifecycle_legacy_only('afterUpdate');\n\t}\n\n\tinit_update_callbacks(component_context).a.push(fn);\n}\n\n/**\n * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate\n * @param {ComponentContext} context\n */\nfunction init_update_callbacks(context) {\n\tvar l = /** @type {ComponentContextLegacy} */ (context).l;\n\treturn (l.u ??= { a: [], b: [], m: [] });\n}\n\nexport { flushSync } from './internal/client/runtime.js';\nexport { getContext, getAllContexts, hasContext, setContext } from './internal/client/context.js';\nexport { hydrate, mount, unmount } from './internal/client/render.js';\nexport { tick, untrack } from './internal/client/runtime.js';\nexport { createRawSnippet } from './internal/client/dom/blocks/snippet.js';\n","/** @import { Readable } from './public' */\nimport { untrack } from '../index-client.js';\nimport { noop } from '../internal/shared/utils.js';\n\n/**\n * @template T\n * @param {Readable<T> | null | undefined} store\n * @param {(value: T) => void} run\n * @param {(value: T) => void} [invalidate]\n * @returns {() => void}\n */\nexport function subscribe_to_store(store, run, invalidate) {\n\tif (store == null) {\n\t\t// @ts-expect-error\n\t\trun(undefined);\n\n\t\t// @ts-expect-error\n\t\tif (invalidate) invalidate(undefined);\n\n\t\treturn noop;\n\t}\n\n\t// Svelte store takes a private second argument\n\t// StartStopNotifier could mutate state, and we want to silence the corresponding validation error\n\tconst unsub = untrack(() =>\n\t\tstore.subscribe(\n\t\t\trun,\n\t\t\t// @ts-expect-error\n\t\t\tinvalidate\n\t\t)\n\t);\n\n\t// Also support RxJS\n\t// @ts-expect-error TODO fix this in the types?\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n"],"names":["DEV","is_array","Array","isArray","index_of","prototype","indexOf","array_from","from","define_property","Object","defineProperty","get_descriptor","getOwnPropertyDescriptor","object_prototype","array_prototype","get_prototype_of","getPrototypeOf","is_extensible","isExtensible","noop","is_promise","value","then","run_all","arr","i","length","fallback","lazy","equals","this","v","safe_not_equal","a","b","safe_equals","DERIVED","EFFECT","RENDER_EFFECT","BLOCK_EFFECT","BRANCH_EFFECT","ROOT_EFFECT","BOUNDARY_EFFECT","UNOWNED","DISCONNECTED","CLEAN","DIRTY","MAYBE_DIRTY","INERT","DESTROYED","EFFECT_RAN","EFFECT_TRANSPARENT","INSPECT_EFFECT","HEAD_EFFECT","EFFECT_HAS_DERIVED","EFFECT_IS_UPDATING","STATE_SYMBOL","Symbol","LEGACY_PROPS","PROXY_PATH_SYMBOL","derived_references_self","error","Error","name","effect_update_depth_exceeded","hydration_failed","rune_outside_svelte","rune","state_descriptors_fixed","state_prototype_fixed","state_unsafe_mutation","tracing_mode_flag","HYDRATION_START","HYDRATION_START_ELSE","HYDRATION_END","HYDRATION_ERROR","ELEMENT_IS_NAMESPACED","ELEMENT_PRESERVE_ATTRIBUTE_CASE","UNINITIALIZED","FILENAME","tag","source","label","tag_proxy","component_context","set_component_context","context","dev_current_component_function","set_dev_current_component_function","fn","push","props","runes","ctx","p","c","d","e","m","s","x","l","teardown","function","pop","component","context_stack_item","component_effects","previous_effect","active_effect","previous_reaction","active_reaction","component_effect","set_active_effect","effect","set_active_reaction","reaction","is_runes","regex_is_valid_identifier","proxy","sources","Map","is_proxied_array","version","with_parent","result","set","path","update_path","new_path","prop","get_label","Proxy","_","descriptor","configurable","enumerable","writable","get","deleteProperty","target","update_version","ls","n","Number","isInteger","receiver","exists","Reflect","has","other_s","state","call","ownKeys","own_keys","filter","key","setPrototypeOf","description","test","signal","get_proxied_value","destroy_derived_effects","derived","effects","destroy_effect","stack","get_derived_parent_effect","parent","f","execute_derived","prev_active_effect","prev_inspect_effects","inspect_effects","set_inspect_effects","Set","includes","update_reaction","update_derived","wv","increment_write_version","is_destroying_effect","status","skip_reaction","deps","set_signal_status","old_values","reactions","rv","push_reaction_value","mutable_source","initial_value","immutable","trackable","should_proxy","untracking","reaction_sources","new_value","internal_set","old_value","mark_reactions","untracked_writes","set_untracked_writes","size","inspects","check_dirtiness","update_effect","clear","flags","add","schedule_effect","bold","normal","hydration_mismatch","location","console","warn","lifecycle_double_unmount","state_proxy_equality_mismatch","operator","transition_slide_display","init_array_prototype_warnings","cleanup","__svelte_cleanup","lastIndexOf","item","from_index","index","w.state_proxy_equality_mismatch","$window","is_firefox","first_child_getter","next_sibling_getter","init_operations","window","navigator","userAgent","element_prototype","Element","node_prototype","Node","text_prototype","Text","__click","__className","__attributes","__style","__e","__t","__svelte_meta","create_text","document","createTextNode","get_first_child","node","get_next_sibling","clear_text_content","textContent","push_effect","parent_effect","parent_last","last","first","next","prev","create_effect","type","sync","nodes_start","nodes_end","transitions","component_function","inert","component_root","options","Promise","fulfil","outro","pause_effect","branch","execute_effect_teardown","previously_destroying_effect","set_is_destroying_effect","destroy_effect_children","remove_dom","destroy_block_effect_children","removed","remove_effect_dom","remove_reactions","transition","stop","unlink_effect","end","remove","callback","run_out_transitions","remaining","check","out","pause_children","local","is_global","child","sibling","transparent","micro_tasks","idle_tasks","run_micro_tasks","tasks","run_idle_tasks","flush_tasks","handle_error","adjust_error","invoke_error_boundary","adjusted_errors","WeakSet","message_descriptor","indent","component_stack","split","message","line","join","is_flushing","last_scheduled_effect","is_updating_effect","queued_root_effects","dev_effect_stack","new_deps","skipped_deps","write_version","read_version","dependencies","is_unowned","dependency","is_disconnected","is_unowned_connected","schedule_possible_effect_self_invalidation","root","previous_deps","previous_skipped_deps","previous_untracked_writes","previous_skip_reaction","previous_reaction_sources","previous_component_context","previous_untracking","remove_reaction","new_length","start_index","was_updating_effect","previous_component_fn","dep","log_effect_stack","slice","map","infinite_loop_guard","flush_queued_root_effects","flush_count","root_effects","collected_effects","process_effects","flush_queued_effects","queueMicrotask","is_branch","is_skippable_branch","flushSync","is_derived","untrack","STATUS_MASK","throw_rune_error","globalThis","e.rune_outside_svelte","subscribe_to_store","store","run","invalidate","unsub","subscribe","unsubscribe"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}