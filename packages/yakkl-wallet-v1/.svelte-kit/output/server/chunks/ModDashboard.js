import{p as push,s as store_get,f as attr_class,a as push_element,b as pop_element,v as ensure_array_like,m as attr,e as escape_html,g as stringify,u as unsubscribe_stores,c as pop}from"./index2.js";import{w as writable}from"./index.js";import{F as FILENAME}from"./utils.js";class NetworkManagerMod{manifest={id:"system-network-manager",name:"Enhanced Network Manager",version:"1.0.0",description:"Advanced network switching and management with custom networks support",author:"YAKKL Team",license:"MIT",tier:"community",category:"network",tags:["network","switching","management","custom"],permissions:["storage","network"],minimumWalletVersion:"2.0.0",supportedPlatforms:["web","extension"],discoverable:true,enhances:["wallet-core","header-component"],conflicts:[],iconUrl:"/icons/network-manager.svg",screenshotUrls:[],capabilities:{ui:{hasComponents:true,hasWidgets:true,mountPoints:["header","settings","modal"]},background:{hasWorkers:false,hasScheduledTasks:false},apis:{endpoints:["switch-network","add-network","get-networks"],webhooks:[]},storage:{maxSize:1024*1024,encrypted:false},network:{allowedHosts:["chainlist.org","ethereum.org"],requiresProxy:false}}};engine=null;loaded=false;active=false;customNetworks=[];async initialize(engine){this.engine=engine;this.loaded=true;this.active=true;await this.loadCustomNetworks();console.log("🌐 Network Manager mod initialized");this.setupEventListeners()}async destroy(){this.loaded=false;this.active=false;this.engine=null;this.customNetworks=[];console.log("🌐 Network Manager mod destroyed")}isLoaded(){return this.loaded}isActive(){return this.active}getComponent(id){switch(id){case"network-switcher-enhanced":return this.createNetworkSwitcher();case"custom-network-form":return this.createCustomNetworkForm();case"network-status-indicator":return this.createNetworkStatusIndicator();default:return null}}getWidget(id){switch(id){case"network-performance":return this.createPerformanceWidget();case"network-security":return this.createSecurityWidget();default:return null}}getBackgroundScript(id){return null}async handleAPICall(endpoint,data){switch(endpoint){case"switch-network":return await this.switchNetwork(data.chainId);case"add-network":return await this.addCustomNetwork(data.network);case"get-networks":return await this.getAvailableNetworks();default:throw new Error(`Unknown API endpoint: ${endpoint}`)}}emit(event,data){if(this.engine){this.engine.emit(event,data)}}on(event,handler){if(this.engine){this.engine.on(event,handler)}}off(event,handler){if(this.engine){this.engine.off(event,handler)}}async enhance(otherMod){if(otherMod.manifest.id==="header-component"){return true}if(otherMod.manifest.id==="wallet-core"){return true}return false}getEnhancements(){return[{id:"enhanced-network-switching",name:"Enhanced Network Switching",description:"Faster network switching with visual feedback",targetMod:["header-component"],type:"ui-enhancement"},{id:"custom-network-support",name:"Custom Network Support",description:"Add and manage custom RPC networks",targetMod:["wallet-core"],type:"feature-enhancement"},{id:"network-performance-monitoring",name:"Network Performance Monitoring",description:"Monitor RPC performance and suggest optimal endpoints",targetMod:["wallet-core"],type:"performance-enhancement"}]}async loadCustomNetworks(){try{const stored=localStorage.getItem("yakkl:custom-networks");this.customNetworks=stored?JSON.parse(stored):[]}catch(error){console.warn("Failed to load custom networks:",error);this.customNetworks=[]}}async saveCustomNetworks(){try{localStorage.setItem("yakkl:custom-networks",JSON.stringify(this.customNetworks))}catch(error){console.error("Failed to save custom networks:",error)}}setupEventListeners(){if(!this.engine)return;this.engine.on("network:changed",network=>{console.log("🌐 Network changed via Network Manager:",network.name);this.emit("mod:network:changed",{network:network,source:"network-manager"})});this.engine.on("network:error",error=>{console.warn("🌐 Network error detected:",error);this.emit("mod:network:error",{error:error,suggestions:this.getErrorSuggestions(error)})})}async switchNetwork(chainId){if(!this.engine)throw new Error("Engine not available");try{const network=await this.validateNetwork(chainId);if(!network){throw new Error(`Network with chain ID ${chainId} not found or invalid`)}await this.engine.networks.switch(chainId.toString());this.emit("mod:network:switched",{chainId:chainId,network:network,timestamp:Date.now(),source:"network-manager-mod"});return{success:true,network:network}}catch(error){this.emit("mod:network:switch-failed",{chainId:chainId,error:error.message});throw error}}async addCustomNetwork(networkData){try{const validated=await this.validateCustomNetwork(networkData);this.customNetworks.push(validated);await this.saveCustomNetworks();if(this.engine?.networks.add){await this.engine.networks.add(validated)}this.emit("mod:network:added",{network:validated});return{success:true,network:validated}}catch(error){this.emit("mod:network:add-failed",{networkData:networkData,error:error.message});throw error}}async getAvailableNetworks(){const standardNetworks=this.engine?.networks.getSupported()||[];return[...standardNetworks,...this.customNetworks]}async validateNetwork(chainId){const networks=await this.getAvailableNetworks();return networks.find(n=>n.chainId===chainId)}async validateCustomNetwork(data){if(!data.name||!data.rpcUrl||!data.chainId){throw new Error("Network must have name, rpcUrl, and chainId")}const existing=this.customNetworks.find(n=>n.chainId===data.chainId);if(existing){throw new Error(`Network with chain ID ${data.chainId} already exists`)}try{const response=await fetch(data.rpcUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",method:"eth_chainId",params:[],id:1})});const result=await response.json();const chainId=parseInt(result.result,16);if(chainId!==data.chainId){throw new Error(`RPC returned different chain ID: ${chainId} vs ${data.chainId}`)}}catch(error){throw new Error(`RPC validation failed: ${error.message}`)}return{...data,id:`custom-${data.chainId}`,isCustom:true,addedAt:Date.now()}}getErrorSuggestions(error){const suggestions=[];if(error.code==="NETWORK_ERROR"){suggestions.push("Check your internet connection");suggestions.push("Try switching to a different RPC endpoint")}if(error.code==="TIMEOUT"){suggestions.push("RPC endpoint is slow, consider using a faster one");suggestions.push("Check if the network is experiencing congestion")}return suggestions}createNetworkSwitcher(){return{type:"enhanced-network-switcher",props:{networks:this.getAvailableNetworks(),customNetworks:this.customNetworks,onSwitch:chainId=>this.switchNetwork(chainId),onAddCustom:network=>this.addCustomNetwork(network)}}}createCustomNetworkForm(){return{type:"custom-network-form",props:{onSubmit:data=>this.addCustomNetwork(data),onValidate:data=>this.validateCustomNetwork(data)}}}createNetworkStatusIndicator(){return{type:"network-status",props:{currentNetwork:this.engine?.networks.getCurrent(),onRefresh:()=>this.checkNetworkHealth()}}}createPerformanceWidget(){return{type:"network-performance-widget",props:{metrics:this.getNetworkMetrics(),onOptimize:()=>this.suggestOptimalEndpoint()}}}createSecurityWidget(){return{type:"network-security-widget",props:{securityLevel:this.assessNetworkSecurity(),warnings:this.getSecurityWarnings()}}}async checkNetworkHealth(){return{healthy:true,latency:250,reliability:99.5}}getNetworkMetrics(){return{latency:250,successRate:99.2,avgBlockTime:12.5}}async suggestOptimalEndpoint(){return["https://eth.llamarpc.com","https://cloudflare-eth.com"]}assessNetworkSecurity(){return"high"}getSecurityWarnings(){return[]}}class AccountManagerMod{manifest={id:"system-account-manager",name:"Enhanced Account Manager",version:"1.0.0",description:"Advanced account management with security features and multi-sig support",author:"YAKKL Team",license:"MIT",tier:"community",category:"account",tags:["account","security","management","multi-sig"],permissions:["storage","accounts","signatures"],minimumWalletVersion:"2.0.0",supportedPlatforms:["web","extension"],discoverable:true,enhances:["wallet-core","header-component","transaction-manager"],conflicts:[],iconUrl:"/icons/account-manager.svg",screenshotUrls:[],capabilities:{ui:{hasComponents:true,hasWidgets:true,mountPoints:["header","accounts","settings","modal"]},background:{hasWorkers:false,hasScheduledTasks:true},apis:{endpoints:["create-account","import-account","export-account","backup-accounts"],webhooks:[]},storage:{maxSize:5*1024*1024,encrypted:true},network:{allowedHosts:["api.ens.domains"],requiresProxy:false}}};engine=null;loaded=false;active=false;accountCache=new Map;securitySettings={};async initialize(engine){this.engine=engine;this.loaded=true;this.active=true;await this.loadSecuritySettings();await this.initializeAccountCache();console.log("👤 Account Manager mod initialized");this.setupEventListeners();this.startSecurityMonitoring()}async destroy(){this.loaded=false;this.active=false;this.engine=null;this.accountCache.clear();this.securitySettings={};console.log("👤 Account Manager mod destroyed")}isLoaded(){return this.loaded}isActive(){return this.active}getComponent(id){switch(id){case"account-switcher-enhanced":return this.createAccountSwitcher();case"account-creation-wizard":return this.createAccountWizard();case"account-security-panel":return this.createSecurityPanel();case"account-backup-manager":return this.createBackupManager();case"multi-sig-manager":return this.createMultiSigManager();default:return null}}getWidget(id){switch(id){case"account-health":return this.createAccountHealthWidget();case"security-status":return this.createSecurityStatusWidget();case"balance-overview":return this.createBalanceOverviewWidget();default:return null}}getBackgroundScript(id){switch(id){case"security-monitor":return this.createSecurityMonitor();default:return null}}async handleAPICall(endpoint,data){switch(endpoint){case"create-account":return await this.createAccount(data);case"import-account":return await this.importAccount(data);case"export-account":return await this.exportAccount(data);case"backup-accounts":return await this.backupAccounts(data);default:throw new Error(`Unknown API endpoint: ${endpoint}`)}}emit(event,data){if(this.engine){this.engine.emit(event,data)}}on(event,handler){if(this.engine){this.engine.on(event,handler)}}off(event,handler){if(this.engine){this.engine.off(event,handler)}}async enhance(otherMod){if(otherMod.manifest.id==="transaction-manager"){return true}if(otherMod.manifest.id==="header-component"){return true}if(otherMod.manifest.id==="wallet-core"){return true}return false}getEnhancements(){return[{id:"enhanced-account-switching",name:"Enhanced Account Switching",description:"Faster account switching with ENS resolution and balance preview",targetMod:["header-component"],type:"ui-enhancement"},{id:"transaction-security-validation",name:"Transaction Security Validation",description:"Enhanced security checks for transactions",targetMod:["transaction-manager"],type:"security-enhancement"},{id:"multi-sig-support",name:"Multi-Signature Support",description:"Support for multi-signature wallets and transactions",targetMod:["wallet-core"],type:"feature-enhancement"},{id:"account-health-monitoring",name:"Account Health Monitoring",description:"Monitor account activity and detect suspicious behavior",targetMod:["wallet-core"],type:"security-enhancement"}]}async loadSecuritySettings(){try{const stored=localStorage.getItem("yakkl:account-security");this.securitySettings=stored?JSON.parse(stored):{autoLockTimeout:15,requireBiometric:false,allowScreenshots:false,maxFailedAttempts:3,enabledFeatures:["ens-resolution","balance-monitoring"]}}catch(error){console.warn("Failed to load security settings:",error);this.securitySettings={}}}async saveSecuritySettings(){try{localStorage.setItem("yakkl:account-security",JSON.stringify(this.securitySettings))}catch(error){console.error("Failed to save security settings:",error)}}async initializeAccountCache(){if(!this.engine)return;try{const accounts=await this.engine.accounts.getAll();for(const account of accounts){await this.cacheAccountData(account)}}catch(error){console.warn("Failed to initialize account cache:",error)}}async cacheAccountData(account){try{const enrichedAccount={...account,balance:await this.getAccountBalance(account.address),ensName:await this.resolveENS(account.address),lastActivity:await this.getLastActivity(account.address),securityScore:await this.calculateSecurityScore(account),cached:Date.now()};this.accountCache.set(account.address,enrichedAccount)}catch(error){console.warn(`Failed to cache data for account ${account.address}:`,error)}}setupEventListeners(){if(!this.engine)return;this.engine.on("account:created",async account=>{console.log("👤 New account created:",account.address);await this.cacheAccountData(account);this.emit("mod:account:created",{account:account,enhanced:true})});this.engine.on("account:selected",async account=>{console.log("👤 Account selected:",account.address);await this.refreshAccountCache(account.address);this.emit("mod:account:selected",{account:account,cached:this.accountCache.get(account.address)})});this.engine.on("transaction:signed",transaction=>{this.recordAccountActivity(transaction.from,"transaction_signed")})}startSecurityMonitoring(){setInterval(()=>{this.performSecurityCheck()},6e4)}async createAccount(data){if(!this.engine)throw new Error("Engine not available");try{const account=await this.engine.accounts.create(data.name);if(this.securitySettings.requireBiometric){}await this.cacheAccountData(account);this.emit("mod:account:created-enhanced",{account:account,securityLevel:this.calculateSecurityLevel(account),timestamp:Date.now()});return{success:true,account:account}}catch(error){this.emit("mod:account:creation-failed",{error:error.message,data:data});throw error}}async importAccount(data){if(!this.engine)throw new Error("Engine not available");try{await this.validateImportData(data);let account;if(data.type==="private-key"){account=await this.engine.accounts.importPrivateKey(data.privateKey,data.name)}else if(data.type==="mnemonic"){account=await this.engine.accounts.importMnemonic(data.mnemonic,data.name)}else if(data.type==="watch-only"){account=await this.engine.accounts.importWatchOnly(data.address,data.name)}else{throw new Error(`Unsupported import type: ${data.type}`)}await this.cacheAccountData(account);this.emit("mod:account:imported",{account:account,type:data.type});return{success:true,account:account}}catch(error){this.emit("mod:account:import-failed",{error:error.message,type:data.type});throw error}}async exportAccount(data){try{if(!this.validateExportPermissions(data.address)){throw new Error("Export not allowed for this account")}this.emit("mod:account:exported",{address:data.address,type:data.type});return{success:true,warning:"Keep exported data secure"}}catch(error){this.emit("mod:account:export-failed",{error:error.message,address:data.address});throw error}}async backupAccounts(data){try{const accounts=await(this.engine?.accounts.getAll())||[];const backup={version:"1.0",timestamp:Date.now(),accountCount:accounts.length,encrypted:true};this.emit("mod:account:backup-created",{backup:backup});return{success:true,backup:backup}}catch(error){this.emit("mod:account:backup-failed",{error:error.message});throw error}}async getAccountBalance(address){return"0.0"}async resolveENS(address){if(!this.securitySettings.enabledFeatures?.includes("ens-resolution")){return null}try{return null}catch(error){return null}}async getLastActivity(address){return Date.now()}async calculateSecurityScore(account){let score=50;if(account.type==="hardware")score+=30;if(account.type==="multi-sig")score+=25;if(this.securitySettings.requireBiometric)score+=15;return Math.min(score,100)}calculateSecurityLevel(account){const score=this.calculateSecurityScore(account);if(score>=80)return"high";if(score>=60)return"medium";return"low"}async refreshAccountCache(address){const account=await(this.engine?.accounts.get(address));if(account){await this.cacheAccountData(account)}}async validateImportData(data){if(!data.type){throw new Error("Import type is required")}if(data.type==="private-key"&&!data.privateKey){throw new Error("Private key is required")}if(data.type==="mnemonic"&&!data.mnemonic){throw new Error("Mnemonic phrase is required")}if(data.type==="watch-only"&&!data.address){throw new Error("Address is required for watch-only accounts")}}validateExportPermissions(address){return true}recordAccountActivity(address,activity){console.log(`👤 Activity recorded for ${address}: ${activity}`)}async performSecurityCheck(){}createAccountSwitcher(){return{type:"enhanced-account-switcher",props:{accounts:Array.from(this.accountCache.values()),onSwitch:address=>this.switchAccount(address),showBalances:true,showENS:true}}}createAccountWizard(){return{type:"account-creation-wizard",props:{onCreateNew:data=>this.createAccount(data),onImport:data=>this.importAccount(data),securityOptions:this.securitySettings}}}createSecurityPanel(){return{type:"account-security-panel",props:{settings:this.securitySettings,onUpdateSettings:settings=>this.updateSecuritySettings(settings)}}}createBackupManager(){return{type:"account-backup-manager",props:{onCreateBackup:options=>this.backupAccounts(options),onRestoreBackup:backup=>this.restoreBackup(backup)}}}createMultiSigManager(){return{type:"multi-sig-manager",props:{multiSigAccounts:this.getMultiSigAccounts(),onCreateMultiSig:config=>this.createMultiSig(config)}}}createAccountHealthWidget(){return{type:"account-health-widget",props:{accounts:Array.from(this.accountCache.values()),healthScores:this.getAccountHealthScores()}}}createSecurityStatusWidget(){return{type:"security-status-widget",props:{overallStatus:this.getOverallSecurityStatus(),alerts:this.getSecurityAlerts()}}}createBalanceOverviewWidget(){return{type:"balance-overview-widget",props:{totalBalance:this.calculateTotalBalance(),accountBalances:this.getAccountBalances()}}}createSecurityMonitor(){return{type:"security-monitor-worker",script:()=>{setInterval(()=>{this.performSecurityCheck()},3e5)}}}async switchAccount(address){if(this.engine){await this.engine.accounts.select(address)}}async updateSecuritySettings(settings){this.securitySettings={...this.securitySettings,...settings};await this.saveSecuritySettings()}async restoreBackup(backup){return{success:true}}getMultiSigAccounts(){return Array.from(this.accountCache.values()).filter(acc=>acc.type==="multi-sig")}async createMultiSig(config){return{success:true}}getAccountHealthScores(){const scores={};for(const[address,account]of this.accountCache){scores[address]=account.securityScore||50}return scores}getOverallSecurityStatus(){return"secure"}getSecurityAlerts(){return[]}calculateTotalBalance(){return"0.0"}getAccountBalances(){const balances={};for(const[address,account]of this.accountCache){balances[address]=account.balance||"0.0"}return balances}}class SystemModRegistry{static instance;mods=new Map;loadedMods=new Map;static getInstance(){if(!SystemModRegistry.instance){SystemModRegistry.instance=new SystemModRegistry}return SystemModRegistry.instance}constructor(){this.registerSystemMods()}registerSystemMods(){this.mods.set("system-network-manager",{id:"system-network-manager",name:"Enhanced Network Manager",description:"Advanced network switching and management with custom networks support",category:"network",tier:"community",loader:async()=>new NetworkManagerMod,enabled:true,systemMod:true});this.mods.set("system-account-manager",{id:"system-account-manager",name:"Enhanced Account Manager",description:"Advanced account management with security features and multi-sig support",category:"account",tier:"community",loader:async()=>new AccountManagerMod,enabled:true,systemMod:true});console.log("📋 System mod registry initialized with",this.mods.size,"mods")}getAvailableMods(){return Array.from(this.mods.values())}getModsByCategory(category){return Array.from(this.mods.values()).filter(mod=>mod.category===category)}getEnabledMods(){return Array.from(this.mods.values()).filter(mod=>mod.enabled)}getSystemMods(){return Array.from(this.mods.values()).filter(mod=>mod.systemMod)}async loadMod(modId){const entry=this.mods.get(modId);if(!entry){console.warn(`Mod ${modId} not found in registry`);return null}if(!entry.enabled){console.warn(`Mod ${modId} is disabled`);return null}if(this.loadedMods.has(modId)){return this.loadedMods.get(modId)}try{console.log(`📦 Loading mod: ${entry.name}`);const mod=await entry.loader();this.loadedMods.set(modId,mod);console.log(`✅ Loaded mod: ${entry.name}`);return mod}catch(error){console.error(`Failed to load mod ${modId}:`,error);return null}}async loadAllEnabledMods(){const enabledMods=this.getEnabledMods();const loadPromises=enabledMods.map(entry=>this.loadMod(entry.id));const results=await Promise.allSettled(loadPromises);return results.filter(result=>result.status==="fulfilled"&&result.value!==null).map(result=>result.value)}async loadSystemMods(){const systemMods=this.getSystemMods();const loadPromises=systemMods.map(entry=>this.loadMod(entry.id));const results=await Promise.allSettled(loadPromises);return results.filter(result=>result.status==="fulfilled"&&result.value!==null).map(result=>result.value)}setModEnabled(modId,enabled){const entry=this.mods.get(modId);if(!entry){return false}entry.enabled=enabled;if(!enabled&&this.loadedMods.has(modId)){const mod=this.loadedMods.get(modId);if(mod&&mod.destroy){mod.destroy().catch(err=>console.warn(`Error destroying mod ${modId}:`,err))}this.loadedMods.delete(modId)}return true}getLoadedMod(modId){return this.loadedMods.get(modId)||null}getLoadedMods(){return Array.from(this.loadedMods.values())}isModLoaded(modId){return this.loadedMods.has(modId)}async unloadMod(modId){const mod=this.loadedMods.get(modId);if(!mod){return false}try{if(mod.destroy){await mod.destroy()}this.loadedMods.delete(modId);console.log(`🗑️ Unloaded mod: ${modId}`);return true}catch(error){console.error(`Failed to unload mod ${modId}:`,error);return false}}async unloadAllMods(){const unloadPromises=Array.from(this.loadedMods.keys()).map(modId=>this.unloadMod(modId));await Promise.allSettled(unloadPromises);this.loadedMods.clear()}registerMod(entry){if(this.mods.has(entry.id)){console.warn(`Mod ${entry.id} is already registered`);return false}this.mods.set(entry.id,{...entry,systemMod:false});console.log(`📝 Registered mod: ${entry.name}`);return true}async unregisterMod(modId){const entry=this.mods.get(modId);if(!entry){return false}if(entry.systemMod){console.warn(`Cannot unregister system mod: ${modId}`);return false}if(this.loadedMods.has(modId)){await this.unloadMod(modId)}this.mods.delete(modId);console.log(`🗑️ Unregistered mod: ${entry.name}`);return true}searchMods(query){const lowerQuery=query.toLowerCase();return Array.from(this.mods.values()).filter(mod=>mod.name.toLowerCase().includes(lowerQuery)||mod.description.toLowerCase().includes(lowerQuery)||mod.category.toLowerCase().includes(lowerQuery))}getStatistics(){const mods2=Array.from(this.mods.values());const byCategory={};for(const mod of mods2){byCategory[mod.category]=(byCategory[mod.category]||0)+1}return{total:mods2.length,enabled:mods2.filter(m=>m.enabled).length,loaded:this.loadedMods.size,system:mods2.filter(m=>m.systemMod).length,thirdParty:mods2.filter(m=>!m.systemMod).length,byCategory:byCategory}}}const systemModRegistry=SystemModRegistry.getInstance();console.log("📋 System mod registry exported");class CoreIntegration{engine=null;initialized=false;mods=writable([]);enhancements=writable([]);discoveredMods=writable([]);static getInstance(){if(!globalThis.coreIntegration){globalThis.coreIntegration=new CoreIntegration}return globalThis.coreIntegration}async initialize(){if(this.initialized)return;try{this.engine=this.createMockEngine();console.log("🔧 Using mock engine - YAKKL Core integration ready for future");this.setupEventListeners();await this.loadSystemMods();this.updateStores();this.initialized=true}catch(error){console.error("Failed to initialize core integration:",error);this.engine=this.createMockEngine();this.initialized=true;console.warn("⚠️ Using mock engine - YAKKL Core initialization failed")}}createMockEngine(){return{initialize(){return Promise.resolve()},async destroy(){},on(event,handler){},emit(event,data){},off(event,handler){},async loadMod(id){return await systemModRegistry.loadMod(id)},async discoverMods(){return systemModRegistry.getAvailableMods()},async getLoadedMods(){return systemModRegistry.getLoadedMods()},accounts:{getAll:()=>[],getCurrent:()=>null,create:name=>Promise.resolve({address:"0x...",name:name}),select:address=>Promise.resolve()},networks:{getSupported:()=>[],getCurrent:()=>({chainId:1,name:"Ethereum"}),switch:chainId=>Promise.resolve()},transactions:{getHistory:()=>[]}}}async loadSystemMods(){try{console.log("📦 Loading system mods...");const systemMods=await systemModRegistry.loadSystemMods();for(const mod of systemMods){try{if(this.engine&&mod.initialize){await mod.initialize(this.engine);console.log(`✅ Initialized system mod: ${mod.manifest?.name||"Unknown"}`)}}catch(error){console.error(`Failed to initialize system mod ${mod.manifest?.id}:`,error)}}console.log(`📦 Loaded ${systemMods.length} system mods`)}catch(error){console.error("Failed to load system mods:",error)}}async loadMod(modId){try{let mod=await systemModRegistry.loadMod(modId);if(mod&&this.engine){if(mod.initialize){await mod.initialize(this.engine)}this.updateStores();return mod}if(this.engine){mod=await this.engine.loadMod(modId);this.updateStores();return mod}return null}catch(error){console.error(`Failed to load mod ${modId}:`,error);return null}}async discoverMods(){try{const systemMods=systemModRegistry.getAvailableMods();let engineMods=[];if(this.engine){try{engineMods=await this.engine.discoverMods()}catch(error){console.warn("Engine mod discovery failed:",error)}}const allDiscovered=[...systemMods,...engineMods];this.discoveredMods.set(allDiscovered);return allDiscovered}catch(error){console.error("Failed to discover mods:",error);return[]}}async getModsByCategory(category){if(!this.engine)return[];try{const loadedMods=await this.engine.getLoadedMods();return loadedMods.filter(mod=>mod.manifest.category===category)}catch(error){console.error("Failed to get mods by category:",error);return[]}}async checkEnhancements(feature){if(!this.engine)return[];try{const loadedMods=await this.engine.getLoadedMods();const enhancements2=[];for(const mod of loadedMods){const modEnhancements=mod.getEnhancements();const relevantEnhancements=modEnhancements.filter(e=>e.targetMod.includes(feature)||e.description.toLowerCase().includes(feature.toLowerCase()));enhancements2.push(...relevantEnhancements)}return enhancements2}catch(error){console.error("Failed to check enhancements:",error);return[]}}setupEventListeners(){if(!this.engine)return;this.engine.on("mod:loaded",()=>{this.updateStores()});this.engine.on("mod:discovered",mods2=>{this.discoveredMods.set(mods2)})}async updateStores(){try{const systemMods=systemModRegistry.getLoadedMods();let engineMods=[];if(this.engine){try{engineMods=await this.engine.getLoadedMods()}catch(error){console.warn("Engine mod loading failed:",error)}}const allLoadedMods=[...systemMods,...engineMods];this.mods.set(allLoadedMods);const allEnhancements=[];for(const mod of allLoadedMods){if(mod.getEnhancements){try{allEnhancements.push(...mod.getEnhancements())}catch(error){console.warn(`Failed to get enhancements from mod ${mod.manifest?.id}:`,error)}}}this.enhancements.set(allEnhancements);console.log(`📊 Updated stores: ${allLoadedMods.length} mods, ${allEnhancements.length} enhancements`)}catch(error){console.error("Failed to update stores:",error)}}isAvailable(){return this.initialized&&this.engine!==null}getEngine(){return this.engine}getAccountManager(){return this.engine?.accounts||null}getNetworkManager(){return this.engine?.networks||null}getTransactionManager(){return this.engine?.transactions||null}async destroy(){if(this.engine){await this.engine.destroy();this.engine=null}this.initialized=false}}const coreIntegration=CoreIntegration.getInstance();const{mods:mods,enhancements:enhancements,discoveredMods:discoveredMods}=coreIntegration;function isCoreAvailable(){return coreIntegration.isAvailable()}ModDashboard[FILENAME]="src/routes/preview2/lib/components/mods/ModDashboard.svelte";function ModDashboard($$payload,$$props){push(ModDashboard);var $$store_subs;let{className:className=""}=$$props;let loading=false;let selectedCategory="all";let loadedMods=store_get($$store_subs??={},"$mods",mods);let discovered=store_get($$store_subs??={},"$discoveredMods",discoveredMods);const categories=[{id:"all",name:"All",icon:"📦"},{id:"portfolio",name:"Portfolio",icon:"💼"},{id:"trading",name:"Trading",icon:"📈"},{id:"defi",name:"DeFi",icon:"🏦"},{id:"security",name:"Security",icon:"🔒"},{id:"analytics",name:"Analytics",icon:"📊"},{id:"utility",name:"Utility",icon:"🛠️"}];let filteredMods=()=>{{return loadedMods}};function getTierColor(tier){switch(tier){case"community":return"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200";case"verified":return"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200";case"pro":return"bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-200";case"private":return"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200";case"enterprise":return"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200";default:return"bg-zinc-100 text-zinc-800 dark:bg-zinc-800 dark:text-zinc-200"}}function getCategoryIcon(category){const cat=categories.find(c=>c.id===category);return cat?.icon||"📦"}$$payload.out+=`<div${attr_class(`mod-dashboard ${className}`,"svelte-efadq")}>`;push_element($$payload,"div",69,0);if(!isCoreAvailable()){$$payload.out+="\x3c!--[--\x3e";$$payload.out+=`<div class="p-6 text-center">`;push_element($$payload,"div",71,4);$$payload.out+=`<div class="mb-4">`;push_element($$payload,"div",72,6);$$payload.out+=`<svg class="w-12 h-12 mx-auto text-zinc-400 dark:text-zinc-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">`;push_element($$payload,"svg",73,8);$$payload.out+=`<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4">`;push_element($$payload,"path",74,10);$$payload.out+=`</path>`;pop_element();$$payload.out+=`</svg>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <h3 class="text-lg font-semibold text-zinc-900 dark:text-white mb-2">`;push_element($$payload,"h3",77,6);$$payload.out+=`Mod System</h3>`;pop_element();$$payload.out+=` <p class="text-sm text-zinc-600 dark:text-zinc-400 mb-4">`;push_element($$payload,"p",78,6);$$payload.out+=`YAKKL Core is not available. Mod functionality is disabled.</p>`;pop_element();$$payload.out+=` <div class="text-xs text-zinc-500 dark:text-zinc-500">`;push_element($$payload,"div",81,6);$$payload.out+=`The mod system will be available once YAKKL Core is integrated.</div>`;pop_element();$$payload.out+=`</div>`;pop_element()}else{$$payload.out+="\x3c!--[!--\x3e";const each_array=ensure_array_like(categories);$$payload.out+=`<div class="flex items-center justify-between mb-6">`;push_element($$payload,"div",87,4);$$payload.out+=`<div class="flex items-center gap-3">`;push_element($$payload,"div",88,6);$$payload.out+=`<div class="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center text-white">`;push_element($$payload,"div",89,8);$$payload.out+=`<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">`;push_element($$payload,"svg",90,10);$$payload.out+=`<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10">`;push_element($$payload,"path",91,12);$$payload.out+=`</path>`;pop_element();$$payload.out+=`</svg>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <div>`;push_element($$payload,"div",94,8);$$payload.out+=`<h2 class="text-xl font-bold text-zinc-900 dark:text-white">`;push_element($$payload,"h2",95,10);$$payload.out+=`Mods</h2>`;pop_element();$$payload.out+=` <p class="text-sm text-zinc-600 dark:text-zinc-400">`;push_element($$payload,"p",96,10);$$payload.out+=`Extend your wallet with plugins</p>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <button${attr("disabled",loading,true)}${attr_class(`yakkl-btn-secondary text-sm ${stringify("")}`)}>`;push_element($$payload,"button",100,6);{$$payload.out+="\x3c!--[!--\x3e"}$$payload.out+=`\x3c!--]--\x3e Discover</button>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <div class="flex gap-1 mb-6">`;push_element($$payload,"div",115,4);$$payload.out+=`<button${attr_class(`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${stringify("bg-indigo-100 text-indigo-700 dark:bg-indigo-900/50 dark:text-indigo-300")}`)}>`;push_element($$payload,"button",116,6);$$payload.out+=`Installed (${escape_html(loadedMods.length)})</button>`;pop_element();$$payload.out+=` <button${attr_class(`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${stringify("text-zinc-600 dark:text-zinc-400 hover:bg-zinc-100 dark:hover:bg-zinc-800")}`)}>`;push_element($$payload,"button",126,6);$$payload.out+=`Discover (${escape_html(discovered.length)})</button>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <div class="flex flex-wrap gap-2 mb-6">`;push_element($$payload,"div",139,4);$$payload.out+=`\x3c!--[--\x3e`;for(let $$index=0,$$length=each_array.length;$$index<$$length;$$index++){let category=each_array[$$index];$$payload.out+=`<button${attr_class(`px-3 py-1 text-sm rounded-full transition-colors ${stringify(selectedCategory===category.id?"bg-indigo-100 text-indigo-700 dark:bg-indigo-900/50 dark:text-indigo-300":"bg-zinc-100 text-zinc-600 dark:bg-zinc-800 dark:text-zinc-400 hover:bg-zinc-200 dark:hover:bg-zinc-700")}`)}>`;push_element($$payload,"button",141,8);$$payload.out+=`${escape_html(category.icon)} ${escape_html(category.name)}</button>`;pop_element()}$$payload.out+=`\x3c!--]--\x3e</div>`;pop_element();$$payload.out+=` `;{$$payload.out+="\x3c!--[--\x3e";if(filteredMods.length===0){$$payload.out+="\x3c!--[--\x3e";$$payload.out+=`<div class="text-center py-12">`;push_element($$payload,"div",158,8);$$payload.out+=`<div class="mb-4">`;push_element($$payload,"div",159,10);$$payload.out+=`<svg class="w-16 h-16 mx-auto text-zinc-300 dark:text-zinc-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">`;push_element($$payload,"svg",160,12);$$payload.out+=`<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4">`;push_element($$payload,"path",161,14);$$payload.out+=`</path>`;pop_element();$$payload.out+=`</svg>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <h3 class="text-lg font-medium text-zinc-900 dark:text-white mb-2">`;push_element($$payload,"h3",164,10);$$payload.out+=`${escape_html("No mods installed")}</h3>`;pop_element();$$payload.out+=` <p class="text-sm text-zinc-600 dark:text-zinc-400 mb-4">`;push_element($$payload,"p",167,10);$$payload.out+=`${escape_html("Discover and install mods to extend your wallet functionality")}</p>`;pop_element();$$payload.out+=` <button class="yakkl-btn-primary text-sm">`;push_element($$payload,"button",173,10);$$payload.out+=`Discover Mods</button>`;pop_element();$$payload.out+=`</div>`;pop_element()}else{$$payload.out+="\x3c!--[!--\x3e";const each_array_1=ensure_array_like(filteredMods);$$payload.out+=`<div class="grid grid-cols-1 md:grid-cols-2 gap-4">`;push_element($$payload,"div",181,8);$$payload.out+=`\x3c!--[--\x3e`;for(let $$index_1=0,$$length=each_array_1.length;$$index_1<$$length;$$index_1++){let mod=each_array_1[$$index_1];$$payload.out+=`<div class="bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-xl p-4 hover:shadow-md transition-shadow">`;push_element($$payload,"div",183,12);$$payload.out+=`<div class="flex items-start gap-3 mb-3">`;push_element($$payload,"div",184,14);$$payload.out+=`<div class="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-sm font-bold">`;push_element($$payload,"div",185,16);$$payload.out+=`${escape_html(getCategoryIcon(mod.manifest.category))}</div>`;pop_element();$$payload.out+=` <div class="flex-1 min-w-0">`;push_element($$payload,"div",188,16);$$payload.out+=`<div class="flex items-center gap-2 mb-1">`;push_element($$payload,"div",189,18);$$payload.out+=`<h3 class="font-medium text-zinc-900 dark:text-white truncate">`;push_element($$payload,"h3",190,20);$$payload.out+=`${escape_html(mod.manifest.name)}</h3>`;pop_element();$$payload.out+=` <span${attr_class(`px-2 py-0.5 text-xs font-medium rounded-full ${getTierColor(mod.manifest.tier)}`,"svelte-efadq")}>`;push_element($$payload,"span",193,20);$$payload.out+=`${escape_html(mod.manifest.tier)}</span>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <p class="text-sm text-zinc-600 dark:text-zinc-400 line-clamp-2 svelte-efadq">`;push_element($$payload,"p",197,18);$$payload.out+=`${escape_html(mod.manifest.description)}</p>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=` <div class="flex items-center justify-between">`;push_element($$payload,"div",203,14);$$payload.out+=`<div class="text-xs text-zinc-500 dark:text-zinc-500">`;push_element($$payload,"div",204,16);$$payload.out+=`v${escape_html(mod.manifest.version)}</div>`;pop_element();$$payload.out+=` <div class="flex gap-2">`;push_element($$payload,"div",207,16);$$payload.out+=`<span class="inline-flex items-center px-2 py-1 bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300 text-xs rounded-full">`;push_element($$payload,"span",208,18);$$payload.out+=`✓ Active</span>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=`</div>`;pop_element()}$$payload.out+=`\x3c!--]--\x3e</div>`;pop_element()}$$payload.out+=`\x3c!--]--\x3e`}$$payload.out+=`\x3c!--]--\x3e`}$$payload.out+=`\x3c!--]--\x3e</div>`;pop_element();if($$store_subs)unsubscribe_stores($$store_subs);pop()}ModDashboard.render=function(){throw new Error("Component.render(...) is no longer valid in Svelte 5. See https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes for more information")};export{ModDashboard as M};
//# sourceMappingURL=ModDashboard.js.map
