{"version":3,"file":"ModDashboard.js","sources":["../../../../src/routes/preview2/lib/mods/network-manager/index.ts","../../../../src/routes/preview2/lib/mods/account-manager/index.ts","../../../../src/routes/preview2/lib/mods/registry.ts","../../../../src/routes/preview2/lib/core/integration.ts","../../../../src/routes/preview2/lib/components/mods/ModDashboard.svelte"],"sourcesContent":["/**\n * Network Manager Mod - Enhanced network switching and management\n */\n\n// @ts-nocheck - Mock implementation for system mod\ntype Mod = any;\ntype WalletEngine = any;\ntype ModManifest = any;\n\nexport class NetworkManagerMod implements Mod {\n  manifest: ModManifest = {\n    id: 'system-network-manager',\n    name: 'Enhanced Network Manager',\n    version: '1.0.0',\n    description: 'Advanced network switching and management with custom networks support',\n    author: 'YAKKL Team',\n    license: 'MIT',\n    tier: 'community',\n    category: 'network',\n    tags: ['network', 'switching', 'management', 'custom'],\n    permissions: ['storage', 'network'],\n    minimumWalletVersion: '2.0.0',\n    supportedPlatforms: ['web', 'extension'],\n    discoverable: true,\n    enhances: ['wallet-core', 'header-component'],\n    conflicts: [],\n    iconUrl: '/icons/network-manager.svg',\n    screenshotUrls: [],\n    capabilities: {\n      ui: {\n        hasComponents: true,\n        hasWidgets: true,\n        mountPoints: ['header', 'settings', 'modal']\n      },\n      background: {\n        hasWorkers: false,\n        hasScheduledTasks: false\n      },\n      apis: {\n        endpoints: ['switch-network', 'add-network', 'get-networks'],\n        webhooks: []\n      },\n      storage: {\n        maxSize: 1024 * 1024, // 1MB\n        encrypted: false\n      },\n      network: {\n        allowedHosts: ['chainlist.org', 'ethereum.org'],\n        requiresProxy: false\n      }\n    }\n  };\n\n  private engine: WalletEngine | null = null;\n  private loaded = false;\n  private active = false;\n  private customNetworks: any[] = [];\n\n  async initialize(engine: WalletEngine): Promise<void> {\n    this.engine = engine;\n    this.loaded = true;\n    this.active = true;\n    \n    // Load custom networks from storage\n    await this.loadCustomNetworks();\n    \n    console.log('üåê Network Manager mod initialized');\n    \n    // Setup network change listeners\n    this.setupEventListeners();\n  }\n\n  async destroy(): Promise<void> {\n    this.loaded = false;\n    this.active = false;\n    this.engine = null;\n    this.customNetworks = [];\n    \n    console.log('üåê Network Manager mod destroyed');\n  }\n\n  isLoaded(): boolean {\n    return this.loaded;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  getComponent(id: string): any {\n    switch (id) {\n      case 'network-switcher-enhanced':\n        return this.createNetworkSwitcher();\n      case 'custom-network-form':\n        return this.createCustomNetworkForm();\n      case 'network-status-indicator':\n        return this.createNetworkStatusIndicator();\n      default:\n        return null;\n    }\n  }\n\n  getWidget(id: string): any {\n    switch (id) {\n      case 'network-performance':\n        return this.createPerformanceWidget();\n      case 'network-security':\n        return this.createSecurityWidget();\n      default:\n        return null;\n    }\n  }\n\n  getBackgroundScript(id: string): any {\n    // No background scripts for this mod\n    return null;\n  }\n\n  async handleAPICall(endpoint: string, data: any): Promise<any> {\n    switch (endpoint) {\n      case 'switch-network':\n        return await this.switchNetwork(data.chainId);\n      case 'add-network':\n        return await this.addCustomNetwork(data.network);\n      case 'get-networks':\n        return await this.getAvailableNetworks();\n      default:\n        throw new Error(`Unknown API endpoint: ${endpoint}`);\n    }\n  }\n\n  emit(event: string, data: any): void {\n    if (this.engine) {\n      this.engine.emit(event, data);\n    }\n  }\n\n  on(event: string, handler: (data: any) => void): void {\n    if (this.engine) {\n      this.engine.on(event, handler);\n    }\n  }\n\n  off(event: string, handler: (data: any) => void): void {\n    if (this.engine) {\n      this.engine.off(event, handler);\n    }\n  }\n\n  async enhance(otherMod: Mod): Promise<boolean> {\n    // Enhance the header component with better network switching\n    if (otherMod.manifest.id === 'header-component') {\n      // Inject enhanced network switcher\n      return true;\n    }\n    \n    // Enhance wallet core with custom network support\n    if (otherMod.manifest.id === 'wallet-core') {\n      // Add custom network validation and management\n      return true;\n    }\n    \n    return false;\n  }\n\n  getEnhancements(): any[] {\n    return [\n      {\n        id: 'enhanced-network-switching',\n        name: 'Enhanced Network Switching',\n        description: 'Faster network switching with visual feedback',\n        targetMod: ['header-component'],\n        type: 'ui-enhancement'\n      },\n      {\n        id: 'custom-network-support',\n        name: 'Custom Network Support',\n        description: 'Add and manage custom RPC networks',\n        targetMod: ['wallet-core'],\n        type: 'feature-enhancement'\n      },\n      {\n        id: 'network-performance-monitoring',\n        name: 'Network Performance Monitoring',\n        description: 'Monitor RPC performance and suggest optimal endpoints',\n        targetMod: ['wallet-core'],\n        type: 'performance-enhancement'\n      }\n    ];\n  }\n\n  /**\n   * Private methods\n   */\n  private async loadCustomNetworks(): Promise<void> {\n    try {\n      // In production, this would load from secure storage\n      const stored = localStorage.getItem('yakkl:custom-networks');\n      this.customNetworks = stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Failed to load custom networks:', error);\n      this.customNetworks = [];\n    }\n  }\n\n  private async saveCustomNetworks(): Promise<void> {\n    try {\n      localStorage.setItem('yakkl:custom-networks', JSON.stringify(this.customNetworks));\n    } catch (error) {\n      console.error('Failed to save custom networks:', error);\n    }\n  }\n\n  private setupEventListeners(): void {\n    if (!this.engine) return;\n\n    this.engine.on('network:changed', (network) => {\n      console.log('üåê Network changed via Network Manager:', network.name);\n      this.emit('mod:network:changed', { network, source: 'network-manager' });\n    });\n\n    this.engine.on('network:error', (error) => {\n      console.warn('üåê Network error detected:', error);\n      this.emit('mod:network:error', { error, suggestions: this.getErrorSuggestions(error) });\n    });\n  }\n\n  private async switchNetwork(chainId: number): Promise<any> {\n    if (!this.engine) throw new Error('Engine not available');\n\n    try {\n      // Enhanced network switching with validation\n      const network = await this.validateNetwork(chainId);\n      if (!network) {\n        throw new Error(`Network with chain ID ${chainId} not found or invalid`);\n      }\n\n      // Switch using engine\n      await this.engine.networks.switch(chainId.toString());\n      \n      this.emit('mod:network:switched', { \n        chainId, \n        network,\n        timestamp: Date.now(),\n        source: 'network-manager-mod'\n      });\n\n      return { success: true, network };\n    } catch (error) {\n      this.emit('mod:network:switch-failed', { chainId, error: error.message });\n      throw error;\n    }\n  }\n\n  private async addCustomNetwork(networkData: any): Promise<any> {\n    try {\n      // Validate network data\n      const validated = await this.validateCustomNetwork(networkData);\n      \n      // Add to custom networks\n      this.customNetworks.push(validated);\n      await this.saveCustomNetworks();\n      \n      // Notify engine if it supports custom networks\n      if (this.engine?.networks.add) {\n        await this.engine.networks.add(validated);\n      }\n\n      this.emit('mod:network:added', { network: validated });\n      \n      return { success: true, network: validated };\n    } catch (error) {\n      this.emit('mod:network:add-failed', { networkData, error: error.message });\n      throw error;\n    }\n  }\n\n  private async getAvailableNetworks(): Promise<any[]> {\n    const standardNetworks = this.engine?.networks.getSupported() || [];\n    return [...standardNetworks, ...this.customNetworks];\n  }\n\n  private async validateNetwork(chainId: number): Promise<any> {\n    const networks = await this.getAvailableNetworks();\n    return networks.find(n => n.chainId === chainId);\n  }\n\n  private async validateCustomNetwork(data: any): Promise<any> {\n    // Basic validation\n    if (!data.name || !data.rpcUrl || !data.chainId) {\n      throw new Error('Network must have name, rpcUrl, and chainId');\n    }\n\n    // Check for duplicates\n    const existing = this.customNetworks.find(n => n.chainId === data.chainId);\n    if (existing) {\n      throw new Error(`Network with chain ID ${data.chainId} already exists`);\n    }\n\n    // Test RPC connection\n    try {\n      const response = await fetch(data.rpcUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_chainId',\n          params: [],\n          id: 1\n        })\n      });\n      \n      const result = await response.json();\n      const chainId = parseInt(result.result, 16);\n      \n      if (chainId !== data.chainId) {\n        throw new Error(`RPC returned different chain ID: ${chainId} vs ${data.chainId}`);\n      }\n    } catch (error) {\n      throw new Error(`RPC validation failed: ${error.message}`);\n    }\n\n    return {\n      ...data,\n      id: `custom-${data.chainId}`,\n      isCustom: true,\n      addedAt: Date.now()\n    };\n  }\n\n  private getErrorSuggestions(error: any): string[] {\n    const suggestions = [];\n    \n    if (error.code === 'NETWORK_ERROR') {\n      suggestions.push('Check your internet connection');\n      suggestions.push('Try switching to a different RPC endpoint');\n    }\n    \n    if (error.code === 'TIMEOUT') {\n      suggestions.push('RPC endpoint is slow, consider using a faster one');\n      suggestions.push('Check if the network is experiencing congestion');\n    }\n    \n    return suggestions;\n  }\n\n  private createNetworkSwitcher(): any {\n    return {\n      type: 'enhanced-network-switcher',\n      props: {\n        networks: this.getAvailableNetworks(),\n        customNetworks: this.customNetworks,\n        onSwitch: (chainId: number) => this.switchNetwork(chainId),\n        onAddCustom: (network: any) => this.addCustomNetwork(network)\n      }\n    };\n  }\n\n  private createCustomNetworkForm(): any {\n    return {\n      type: 'custom-network-form',\n      props: {\n        onSubmit: (data: any) => this.addCustomNetwork(data),\n        onValidate: (data: any) => this.validateCustomNetwork(data)\n      }\n    };\n  }\n\n  private createNetworkStatusIndicator(): any {\n    return {\n      type: 'network-status',\n      props: {\n        currentNetwork: this.engine?.networks.getCurrent(),\n        onRefresh: () => this.checkNetworkHealth()\n      }\n    };\n  }\n\n  private createPerformanceWidget(): any {\n    return {\n      type: 'network-performance-widget',\n      props: {\n        metrics: this.getNetworkMetrics(),\n        onOptimize: () => this.suggestOptimalEndpoint()\n      }\n    };\n  }\n\n  private createSecurityWidget(): any {\n    return {\n      type: 'network-security-widget',\n      props: {\n        securityLevel: this.assessNetworkSecurity(),\n        warnings: this.getSecurityWarnings()\n      }\n    };\n  }\n\n  private async checkNetworkHealth(): Promise<any> {\n    // Implementation for network health check\n    return { healthy: true, latency: 250, reliability: 99.5 };\n  }\n\n  private getNetworkMetrics(): any {\n    // Implementation for network performance metrics\n    return {\n      latency: 250,\n      successRate: 99.2,\n      avgBlockTime: 12.5\n    };\n  }\n\n  private async suggestOptimalEndpoint(): Promise<string[]> {\n    // Implementation for suggesting optimal RPC endpoints\n    return ['https://eth.llamarpc.com', 'https://cloudflare-eth.com'];\n  }\n\n  private assessNetworkSecurity(): 'high' | 'medium' | 'low' {\n    // Implementation for network security assessment\n    return 'high';\n  }\n\n  private getSecurityWarnings(): string[] {\n    // Implementation for security warnings\n    return [];\n  }\n}\n\nexport default NetworkManagerMod;","/**\n * Account Manager Mod - Enhanced account management and security\n */\n\n// @ts-nocheck - Mock implementation for system mod\ntype Mod = any;\ntype WalletEngine = any;\ntype ModManifest = any;\n\nexport class AccountManagerMod implements Mod {\n  manifest: ModManifest = {\n    id: 'system-account-manager',\n    name: 'Enhanced Account Manager',\n    version: '1.0.0',\n    description: 'Advanced account management with security features and multi-sig support',\n    author: 'YAKKL Team',\n    license: 'MIT',\n    tier: 'community',\n    category: 'account',\n    tags: ['account', 'security', 'management', 'multi-sig'],\n    permissions: ['storage', 'accounts', 'signatures'],\n    minimumWalletVersion: '2.0.0',\n    supportedPlatforms: ['web', 'extension'],\n    discoverable: true,\n    enhances: ['wallet-core', 'header-component', 'transaction-manager'],\n    conflicts: [],\n    iconUrl: '/icons/account-manager.svg',\n    screenshotUrls: [],\n    capabilities: {\n      ui: {\n        hasComponents: true,\n        hasWidgets: true,\n        mountPoints: ['header', 'accounts', 'settings', 'modal']\n      },\n      background: {\n        hasWorkers: false,\n        hasScheduledTasks: true\n      },\n      apis: {\n        endpoints: ['create-account', 'import-account', 'export-account', 'backup-accounts'],\n        webhooks: []\n      },\n      storage: {\n        maxSize: 5 * 1024 * 1024, // 5MB\n        encrypted: true\n      },\n      network: {\n        allowedHosts: ['api.ens.domains'],\n        requiresProxy: false\n      }\n    }\n  };\n\n  private engine: WalletEngine | null = null;\n  private loaded = false;\n  private active = false;\n  private accountCache = new Map<string, any>();\n  private securitySettings: any = {};\n\n  async initialize(engine: WalletEngine): Promise<void> {\n    this.engine = engine;\n    this.loaded = true;\n    this.active = true;\n    \n    // Load security settings\n    await this.loadSecuritySettings();\n    \n    // Initialize account cache\n    await this.initializeAccountCache();\n    \n    console.log('üë§ Account Manager mod initialized');\n    \n    // Setup event listeners\n    this.setupEventListeners();\n    \n    // Start security monitoring\n    this.startSecurityMonitoring();\n  }\n\n  async destroy(): Promise<void> {\n    this.loaded = false;\n    this.active = false;\n    this.engine = null;\n    this.accountCache.clear();\n    this.securitySettings = {};\n    \n    console.log('üë§ Account Manager mod destroyed');\n  }\n\n  isLoaded(): boolean {\n    return this.loaded;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  getComponent(id: string): any {\n    switch (id) {\n      case 'account-switcher-enhanced':\n        return this.createAccountSwitcher();\n      case 'account-creation-wizard':\n        return this.createAccountWizard();\n      case 'account-security-panel':\n        return this.createSecurityPanel();\n      case 'account-backup-manager':\n        return this.createBackupManager();\n      case 'multi-sig-manager':\n        return this.createMultiSigManager();\n      default:\n        return null;\n    }\n  }\n\n  getWidget(id: string): any {\n    switch (id) {\n      case 'account-health':\n        return this.createAccountHealthWidget();\n      case 'security-status':\n        return this.createSecurityStatusWidget();\n      case 'balance-overview':\n        return this.createBalanceOverviewWidget();\n      default:\n        return null;\n    }\n  }\n\n  getBackgroundScript(id: string): any {\n    switch (id) {\n      case 'security-monitor':\n        return this.createSecurityMonitor();\n      default:\n        return null;\n    }\n  }\n\n  async handleAPICall(endpoint: string, data: any): Promise<any> {\n    switch (endpoint) {\n      case 'create-account':\n        return await this.createAccount(data);\n      case 'import-account':\n        return await this.importAccount(data);\n      case 'export-account':\n        return await this.exportAccount(data);\n      case 'backup-accounts':\n        return await this.backupAccounts(data);\n      default:\n        throw new Error(`Unknown API endpoint: ${endpoint}`);\n    }\n  }\n\n  emit(event: string, data: any): void {\n    if (this.engine) {\n      this.engine.emit(event, data);\n    }\n  }\n\n  on(event: string, handler: (data: any) => void): void {\n    if (this.engine) {\n      this.engine.on(event, handler);\n    }\n  }\n\n  off(event: string, handler: (data: any) => void): void {\n    if (this.engine) {\n      this.engine.off(event, handler);\n    }\n  }\n\n  async enhance(otherMod: Mod): Promise<boolean> {\n    // Enhance transaction manager with account validation\n    if (otherMod.manifest.id === 'transaction-manager') {\n      // Add enhanced account validation for transactions\n      return true;\n    }\n    \n    // Enhance header component with better account switching\n    if (otherMod.manifest.id === 'header-component') {\n      // Inject enhanced account switcher\n      return true;\n    }\n    \n    // Enhance wallet core with security features\n    if (otherMod.manifest.id === 'wallet-core') {\n      // Add account security monitoring\n      return true;\n    }\n    \n    return false;\n  }\n\n  getEnhancements(): any[] {\n    return [\n      {\n        id: 'enhanced-account-switching',\n        name: 'Enhanced Account Switching',\n        description: 'Faster account switching with ENS resolution and balance preview',\n        targetMod: ['header-component'],\n        type: 'ui-enhancement'\n      },\n      {\n        id: 'transaction-security-validation',\n        name: 'Transaction Security Validation',\n        description: 'Enhanced security checks for transactions',\n        targetMod: ['transaction-manager'],\n        type: 'security-enhancement'\n      },\n      {\n        id: 'multi-sig-support',\n        name: 'Multi-Signature Support',\n        description: 'Support for multi-signature wallets and transactions',\n        targetMod: ['wallet-core'],\n        type: 'feature-enhancement'\n      },\n      {\n        id: 'account-health-monitoring',\n        name: 'Account Health Monitoring',\n        description: 'Monitor account activity and detect suspicious behavior',\n        targetMod: ['wallet-core'],\n        type: 'security-enhancement'\n      }\n    ];\n  }\n\n  /**\n   * Private methods\n   */\n  private async loadSecuritySettings(): Promise<void> {\n    try {\n      const stored = localStorage.getItem('yakkl:account-security');\n      this.securitySettings = stored ? JSON.parse(stored) : {\n        autoLockTimeout: 15, // minutes\n        requireBiometric: false,\n        allowScreenshots: false,\n        maxFailedAttempts: 3,\n        enabledFeatures: ['ens-resolution', 'balance-monitoring']\n      };\n    } catch (error) {\n      console.warn('Failed to load security settings:', error);\n      this.securitySettings = {};\n    }\n  }\n\n  private async saveSecuritySettings(): Promise<void> {\n    try {\n      localStorage.setItem('yakkl:account-security', JSON.stringify(this.securitySettings));\n    } catch (error) {\n      console.error('Failed to save security settings:', error);\n    }\n  }\n\n  private async initializeAccountCache(): Promise<void> {\n    if (!this.engine) return;\n\n    try {\n      const accounts = await this.engine.accounts.getAll();\n      for (const account of accounts) {\n        await this.cacheAccountData(account);\n      }\n    } catch (error) {\n      console.warn('Failed to initialize account cache:', error);\n    }\n  }\n\n  private async cacheAccountData(account: any): Promise<void> {\n    try {\n      const enrichedAccount = {\n        ...account,\n        balance: await this.getAccountBalance(account.address),\n        ensName: await this.resolveENS(account.address),\n        lastActivity: await this.getLastActivity(account.address),\n        securityScore: await this.calculateSecurityScore(account),\n        cached: Date.now()\n      };\n\n      this.accountCache.set(account.address, enrichedAccount);\n    } catch (error) {\n      console.warn(`Failed to cache data for account ${account.address}:`, error);\n    }\n  }\n\n  private setupEventListeners(): void {\n    if (!this.engine) return;\n\n    this.engine.on('account:created', async (account) => {\n      console.log('üë§ New account created:', account.address);\n      await this.cacheAccountData(account);\n      this.emit('mod:account:created', { account, enhanced: true });\n    });\n\n    this.engine.on('account:selected', async (account) => {\n      console.log('üë§ Account selected:', account.address);\n      await this.refreshAccountCache(account.address);\n      this.emit('mod:account:selected', { account, cached: this.accountCache.get(account.address) });\n    });\n\n    this.engine.on('transaction:signed', (transaction) => {\n      this.recordAccountActivity(transaction.from, 'transaction_signed');\n    });\n  }\n\n  private startSecurityMonitoring(): void {\n    // Start periodic security checks\n    setInterval(() => {\n      this.performSecurityCheck();\n    }, 60000); // Every minute\n  }\n\n  private async createAccount(data: any): Promise<any> {\n    if (!this.engine) throw new Error('Engine not available');\n\n    try {\n      // Enhanced account creation with security features\n      const account = await this.engine.accounts.create(data.name);\n      \n      // Apply security settings\n      if (this.securitySettings.requireBiometric) {\n        // TODO: Setup biometric protection\n      }\n      \n      // Cache account data\n      await this.cacheAccountData(account);\n      \n      this.emit('mod:account:created-enhanced', { \n        account,\n        securityLevel: this.calculateSecurityLevel(account),\n        timestamp: Date.now()\n      });\n\n      return { success: true, account };\n    } catch (error) {\n      this.emit('mod:account:creation-failed', { error: error.message, data });\n      throw error;\n    }\n  }\n\n  private async importAccount(data: any): Promise<any> {\n    if (!this.engine) throw new Error('Engine not available');\n\n    try {\n      // Validate import data\n      await this.validateImportData(data);\n      \n      // Import account using engine\n      let account;\n      if (data.type === 'private-key') {\n        account = await this.engine.accounts.importPrivateKey(data.privateKey, data.name);\n      } else if (data.type === 'mnemonic') {\n        account = await this.engine.accounts.importMnemonic(data.mnemonic, data.name);\n      } else if (data.type === 'watch-only') {\n        account = await this.engine.accounts.importWatchOnly(data.address, data.name);\n      } else {\n        throw new Error(`Unsupported import type: ${data.type}`);\n      }\n      \n      // Cache account data\n      await this.cacheAccountData(account);\n      \n      this.emit('mod:account:imported', { account, type: data.type });\n\n      return { success: true, account };\n    } catch (error) {\n      this.emit('mod:account:import-failed', { error: error.message, type: data.type });\n      throw error;\n    }\n  }\n\n  private async exportAccount(data: any): Promise<any> {\n    try {\n      // Security check\n      if (!this.validateExportPermissions(data.address)) {\n        throw new Error('Export not allowed for this account');\n      }\n      \n      // TODO: Implement secure export\n      // For now, return placeholder\n      this.emit('mod:account:exported', { address: data.address, type: data.type });\n      \n      return { success: true, warning: 'Keep exported data secure' };\n    } catch (error) {\n      this.emit('mod:account:export-failed', { error: error.message, address: data.address });\n      throw error;\n    }\n  }\n\n  private async backupAccounts(data: any): Promise<any> {\n    try {\n      // Create encrypted backup\n      const accounts = await this.engine?.accounts.getAll() || [];\n      const backup = {\n        version: '1.0',\n        timestamp: Date.now(),\n        accountCount: accounts.length,\n        encrypted: true,\n        // TODO: Add encrypted account data\n      };\n      \n      this.emit('mod:account:backup-created', { backup });\n      \n      return { success: true, backup };\n    } catch (error) {\n      this.emit('mod:account:backup-failed', { error: error.message });\n      throw error;\n    }\n  }\n\n  private async getAccountBalance(address: string): Promise<string> {\n    // TODO: Implement balance fetching\n    return '0.0';\n  }\n\n  private async resolveENS(address: string): Promise<string | null> {\n    if (!this.securitySettings.enabledFeatures?.includes('ens-resolution')) {\n      return null;\n    }\n    \n    try {\n      // TODO: Implement ENS resolution\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  private async getLastActivity(address: string): Promise<number> {\n    // TODO: Implement activity tracking\n    return Date.now();\n  }\n\n  private async calculateSecurityScore(account: any): Promise<number> {\n    let score = 50; // Base score\n    \n    // Add points for various security features\n    if (account.type === 'hardware') score += 30;\n    if (account.type === 'multi-sig') score += 25;\n    if (this.securitySettings.requireBiometric) score += 15;\n    \n    return Math.min(score, 100);\n  }\n\n  private calculateSecurityLevel(account: any): 'low' | 'medium' | 'high' {\n    const score = this.calculateSecurityScore(account);\n    if (score >= 80) return 'high';\n    if (score >= 60) return 'medium';\n    return 'low';\n  }\n\n  private async refreshAccountCache(address: string): Promise<void> {\n    const account = await this.engine?.accounts.get(address);\n    if (account) {\n      await this.cacheAccountData(account);\n    }\n  }\n\n  private async validateImportData(data: any): Promise<void> {\n    if (!data.type) {\n      throw new Error('Import type is required');\n    }\n    \n    if (data.type === 'private-key' && !data.privateKey) {\n      throw new Error('Private key is required');\n    }\n    \n    if (data.type === 'mnemonic' && !data.mnemonic) {\n      throw new Error('Mnemonic phrase is required');\n    }\n    \n    if (data.type === 'watch-only' && !data.address) {\n      throw new Error('Address is required for watch-only accounts');\n    }\n  }\n\n  private validateExportPermissions(address: string): boolean {\n    // TODO: Implement permission validation\n    return true;\n  }\n\n  private recordAccountActivity(address: string, activity: string): void {\n    // TODO: Implement activity recording\n    console.log(`üë§ Activity recorded for ${address}: ${activity}`);\n  }\n\n  private async performSecurityCheck(): Promise<void> {\n    // TODO: Implement periodic security checks\n    // - Check for suspicious activity\n    // - Validate account integrity\n    // - Monitor for compromise indicators\n  }\n\n  // Component creators\n  private createAccountSwitcher(): any {\n    return {\n      type: 'enhanced-account-switcher',\n      props: {\n        accounts: Array.from(this.accountCache.values()),\n        onSwitch: (address: string) => this.switchAccount(address),\n        showBalances: true,\n        showENS: true\n      }\n    };\n  }\n\n  private createAccountWizard(): any {\n    return {\n      type: 'account-creation-wizard',\n      props: {\n        onCreateNew: (data: any) => this.createAccount(data),\n        onImport: (data: any) => this.importAccount(data),\n        securityOptions: this.securitySettings\n      }\n    };\n  }\n\n  private createSecurityPanel(): any {\n    return {\n      type: 'account-security-panel',\n      props: {\n        settings: this.securitySettings,\n        onUpdateSettings: (settings: any) => this.updateSecuritySettings(settings)\n      }\n    };\n  }\n\n  private createBackupManager(): any {\n    return {\n      type: 'account-backup-manager',\n      props: {\n        onCreateBackup: (options: any) => this.backupAccounts(options),\n        onRestoreBackup: (backup: any) => this.restoreBackup(backup)\n      }\n    };\n  }\n\n  private createMultiSigManager(): any {\n    return {\n      type: 'multi-sig-manager',\n      props: {\n        multiSigAccounts: this.getMultiSigAccounts(),\n        onCreateMultiSig: (config: any) => this.createMultiSig(config)\n      }\n    };\n  }\n\n  private createAccountHealthWidget(): any {\n    return {\n      type: 'account-health-widget',\n      props: {\n        accounts: Array.from(this.accountCache.values()),\n        healthScores: this.getAccountHealthScores()\n      }\n    };\n  }\n\n  private createSecurityStatusWidget(): any {\n    return {\n      type: 'security-status-widget',\n      props: {\n        overallStatus: this.getOverallSecurityStatus(),\n        alerts: this.getSecurityAlerts()\n      }\n    };\n  }\n\n  private createBalanceOverviewWidget(): any {\n    return {\n      type: 'balance-overview-widget',\n      props: {\n        totalBalance: this.calculateTotalBalance(),\n        accountBalances: this.getAccountBalances()\n      }\n    };\n  }\n\n  private createSecurityMonitor(): any {\n    return {\n      type: 'security-monitor-worker',\n      script: () => {\n        // Background security monitoring\n        setInterval(() => {\n          this.performSecurityCheck();\n        }, 300000); // Every 5 minutes\n      }\n    };\n  }\n\n  // Helper methods for components\n  private async switchAccount(address: string): Promise<void> {\n    if (this.engine) {\n      await this.engine.accounts.select(address);\n    }\n  }\n\n  private async updateSecuritySettings(settings: any): Promise<void> {\n    this.securitySettings = { ...this.securitySettings, ...settings };\n    await this.saveSecuritySettings();\n  }\n\n  private async restoreBackup(backup: any): Promise<any> {\n    // TODO: Implement backup restoration\n    return { success: true };\n  }\n\n  private getMultiSigAccounts(): any[] {\n    return Array.from(this.accountCache.values()).filter(acc => acc.type === 'multi-sig');\n  }\n\n  private async createMultiSig(config: any): Promise<any> {\n    // TODO: Implement multi-sig creation\n    return { success: true };\n  }\n\n  private getAccountHealthScores(): Record<string, number> {\n    const scores: Record<string, number> = {};\n    for (const [address, account] of this.accountCache) {\n      scores[address] = account.securityScore || 50;\n    }\n    return scores;\n  }\n\n  private getOverallSecurityStatus(): 'secure' | 'warning' | 'critical' {\n    // TODO: Calculate overall security status\n    return 'secure';\n  }\n\n  private getSecurityAlerts(): string[] {\n    // TODO: Get current security alerts\n    return [];\n  }\n\n  private calculateTotalBalance(): string {\n    // TODO: Calculate total balance across all accounts\n    return '0.0';\n  }\n\n  private getAccountBalances(): Record<string, string> {\n    const balances: Record<string, string> = {};\n    for (const [address, account] of this.accountCache) {\n      balances[address] = account.balance || '0.0';\n    }\n    return balances;\n  }\n}\n\nexport default AccountManagerMod;","/**\n * System Mod Registry\n * \n * Manages loading and registration of system mods\n */\n\n// @ts-nocheck - Mock implementation for system mod registry\ntype Mod = any;\n\n// Import system mods\nimport NetworkManagerMod from './network-manager/index';\nimport AccountManagerMod from './account-manager/index';\n\nexport interface ModRegistryEntry {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  tier: string;\n  loader: () => Promise<Mod>;\n  enabled: boolean;\n  systemMod: boolean;\n}\n\nexport class SystemModRegistry {\n  private static instance: SystemModRegistry;\n  private mods = new Map<string, ModRegistryEntry>();\n  private loadedMods = new Map<string, Mod>();\n\n  static getInstance(): SystemModRegistry {\n    if (!SystemModRegistry.instance) {\n      SystemModRegistry.instance = new SystemModRegistry();\n    }\n    return SystemModRegistry.instance;\n  }\n\n  constructor() {\n    this.registerSystemMods();\n  }\n\n  /**\n   * Register all system mods\n   */\n  private registerSystemMods(): void {\n    // Register Network Manager Mod\n    this.mods.set('system-network-manager', {\n      id: 'system-network-manager',\n      name: 'Enhanced Network Manager',\n      description: 'Advanced network switching and management with custom networks support',\n      category: 'network',\n      tier: 'community',\n      loader: async () => new NetworkManagerMod(),\n      enabled: true,\n      systemMod: true\n    });\n\n    // Register Account Manager Mod\n    this.mods.set('system-account-manager', {\n      id: 'system-account-manager',\n      name: 'Enhanced Account Manager',\n      description: 'Advanced account management with security features and multi-sig support',\n      category: 'account',\n      tier: 'community',\n      loader: async () => new AccountManagerMod(),\n      enabled: true,\n      systemMod: true\n    });\n\n    console.log('üìã System mod registry initialized with', this.mods.size, 'mods');\n  }\n\n  /**\n   * Get all registered mods\n   */\n  getAvailableMods(): ModRegistryEntry[] {\n    return Array.from(this.mods.values());\n  }\n\n  /**\n   * Get mods by category\n   */\n  getModsByCategory(category: string): ModRegistryEntry[] {\n    return Array.from(this.mods.values()).filter(mod => mod.category === category);\n  }\n\n  /**\n   * Get enabled mods\n   */\n  getEnabledMods(): ModRegistryEntry[] {\n    return Array.from(this.mods.values()).filter(mod => mod.enabled);\n  }\n\n  /**\n   * Get system mods\n   */\n  getSystemMods(): ModRegistryEntry[] {\n    return Array.from(this.mods.values()).filter(mod => mod.systemMod);\n  }\n\n  /**\n   * Load a mod by ID\n   */\n  async loadMod(modId: string): Promise<Mod | null> {\n    const entry = this.mods.get(modId);\n    if (!entry) {\n      console.warn(`Mod ${modId} not found in registry`);\n      return null;\n    }\n\n    if (!entry.enabled) {\n      console.warn(`Mod ${modId} is disabled`);\n      return null;\n    }\n\n    // Check if already loaded\n    if (this.loadedMods.has(modId)) {\n      return this.loadedMods.get(modId)!;\n    }\n\n    try {\n      console.log(`üì¶ Loading mod: ${entry.name}`);\n      const mod = await entry.loader();\n      this.loadedMods.set(modId, mod);\n      console.log(`‚úÖ Loaded mod: ${entry.name}`);\n      return mod;\n    } catch (error) {\n      console.error(`Failed to load mod ${modId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Load all enabled mods\n   */\n  async loadAllEnabledMods(): Promise<Mod[]> {\n    const enabledMods = this.getEnabledMods();\n    const loadPromises = enabledMods.map(entry => this.loadMod(entry.id));\n    const results = await Promise.allSettled(loadPromises);\n    \n    return results\n      .filter((result): result is PromiseFulfilledResult<Mod | null> => \n        result.status === 'fulfilled' && result.value !== null\n      )\n      .map(result => result.value!);\n  }\n\n  /**\n   * Load system mods only\n   */\n  async loadSystemMods(): Promise<Mod[]> {\n    const systemMods = this.getSystemMods();\n    const loadPromises = systemMods.map(entry => this.loadMod(entry.id));\n    const results = await Promise.allSettled(loadPromises);\n    \n    return results\n      .filter((result): result is PromiseFulfilledResult<Mod | null> => \n        result.status === 'fulfilled' && result.value !== null\n      )\n      .map(result => result.value!);\n  }\n\n  /**\n   * Enable or disable a mod\n   */\n  setModEnabled(modId: string, enabled: boolean): boolean {\n    const entry = this.mods.get(modId);\n    if (!entry) {\n      return false;\n    }\n\n    entry.enabled = enabled;\n    \n    // If disabling, remove from loaded mods\n    if (!enabled && this.loadedMods.has(modId)) {\n      const mod = this.loadedMods.get(modId);\n      if (mod && mod.destroy) {\n        mod.destroy().catch(err => console.warn(`Error destroying mod ${modId}:`, err));\n      }\n      this.loadedMods.delete(modId);\n    }\n\n    return true;\n  }\n\n  /**\n   * Get a loaded mod\n   */\n  getLoadedMod(modId: string): Mod | null {\n    return this.loadedMods.get(modId) || null;\n  }\n\n  /**\n   * Get all loaded mods\n   */\n  getLoadedMods(): Mod[] {\n    return Array.from(this.loadedMods.values());\n  }\n\n  /**\n   * Check if a mod is loaded\n   */\n  isModLoaded(modId: string): boolean {\n    return this.loadedMods.has(modId);\n  }\n\n  /**\n   * Unload a mod\n   */\n  async unloadMod(modId: string): Promise<boolean> {\n    const mod = this.loadedMods.get(modId);\n    if (!mod) {\n      return false;\n    }\n\n    try {\n      if (mod.destroy) {\n        await mod.destroy();\n      }\n      this.loadedMods.delete(modId);\n      console.log(`üóëÔ∏è Unloaded mod: ${modId}`);\n      return true;\n    } catch (error) {\n      console.error(`Failed to unload mod ${modId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Unload all mods\n   */\n  async unloadAllMods(): Promise<void> {\n    const unloadPromises = Array.from(this.loadedMods.keys()).map(modId => \n      this.unloadMod(modId)\n    );\n    \n    await Promise.allSettled(unloadPromises);\n    this.loadedMods.clear();\n  }\n\n  /**\n   * Register a new mod (for third-party mods)\n   */\n  registerMod(entry: Omit<ModRegistryEntry, 'systemMod'>): boolean {\n    if (this.mods.has(entry.id)) {\n      console.warn(`Mod ${entry.id} is already registered`);\n      return false;\n    }\n\n    this.mods.set(entry.id, {\n      ...entry,\n      systemMod: false\n    });\n\n    console.log(`üìù Registered mod: ${entry.name}`);\n    return true;\n  }\n\n  /**\n   * Unregister a mod\n   */\n  async unregisterMod(modId: string): Promise<boolean> {\n    const entry = this.mods.get(modId);\n    if (!entry) {\n      return false;\n    }\n\n    // Don't allow unregistering system mods\n    if (entry.systemMod) {\n      console.warn(`Cannot unregister system mod: ${modId}`);\n      return false;\n    }\n\n    // Unload if loaded\n    if (this.loadedMods.has(modId)) {\n      await this.unloadMod(modId);\n    }\n\n    this.mods.delete(modId);\n    console.log(`üóëÔ∏è Unregistered mod: ${entry.name}`);\n    return true;\n  }\n\n  /**\n   * Search mods by name or description\n   */\n  searchMods(query: string): ModRegistryEntry[] {\n    const lowerQuery = query.toLowerCase();\n    return Array.from(this.mods.values()).filter(mod =>\n      mod.name.toLowerCase().includes(lowerQuery) ||\n      mod.description.toLowerCase().includes(lowerQuery) ||\n      mod.category.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get mod statistics\n   */\n  getStatistics(): {\n    total: number;\n    enabled: number;\n    loaded: number;\n    system: number;\n    thirdParty: number;\n    byCategory: Record<string, number>;\n  } {\n    const mods = Array.from(this.mods.values());\n    const byCategory: Record<string, number> = {};\n    \n    for (const mod of mods) {\n      byCategory[mod.category] = (byCategory[mod.category] || 0) + 1;\n    }\n\n    return {\n      total: mods.length,\n      enabled: mods.filter(m => m.enabled).length,\n      loaded: this.loadedMods.size,\n      system: mods.filter(m => m.systemMod).length,\n      thirdParty: mods.filter(m => !m.systemMod).length,\n      byCategory\n    };\n  }\n}\n\n// Export singleton instance\nexport const systemModRegistry = SystemModRegistry.getInstance();\n\n// Convenience functions\nexport const loadSystemMods = () => systemModRegistry.loadSystemMods();\nexport const loadMod = (modId: string) => systemModRegistry.loadMod(modId);\nexport const getAvailableMods = () => systemModRegistry.getAvailableMods();\nexport const getLoadedMods = () => systemModRegistry.getLoadedMods();\nexport const isModLoaded = (modId: string) => systemModRegistry.isModLoaded(modId);\n\nconsole.log('üìã System mod registry exported');","/**\n * Core Integration for Preview 2.0\n * \n * This bridges the existing preview2 system with the new YAKKL Core\n * Maintains compatibility while adding mod capabilities\n */\n\n// TODO: Enable when build issues are resolved\n// import { WalletEngine, createWallet } from '@yakkl/core';\n// import type { Mod, WalletConfig } from '@yakkl/core';\n\ntype WalletEngine = any;\ntype Mod = any;\ntype WalletConfig = any;\n\nimport { get, writable } from 'svelte/store';\nimport { systemModRegistry } from '../mods/registry';\n\nclass CoreIntegration {\n  private engine: WalletEngine | null = null;\n  private initialized = false;\n\n  // Stores for mod system\n  public mods = writable<Mod[]>([]);\n  public enhancements = writable<any[]>([]);\n  public discoveredMods = writable<any[]>([]);\n\n  static getInstance(): CoreIntegration {\n    if (!(globalThis as any).coreIntegration) {\n      (globalThis as any).coreIntegration = new CoreIntegration();\n    }\n    return (globalThis as any).coreIntegration;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // TODO: Enable YAKKL Core when build issues are resolved\n      // const config: Partial<WalletConfig> = {\n      //   name: 'YAKKL Wallet Preview 2.0',\n      //   version: '2.0.0-preview',\n      //   embedded: false,\n      //   enableMods: true,\n      //   enableDiscovery: true,\n      //   storagePrefix: 'yakkl:preview2',\n      //   logLevel: 'info'\n      // };\n      // this.engine = await createWallet(config);\n      // console.log('‚úÖ YAKKL Core initialized successfully');\n\n      // Using mock engine for now\n      this.engine = this.createMockEngine();\n      console.log('üîß Using mock engine - YAKKL Core integration ready for future');\n\n      this.setupEventListeners();\n      \n      // Load system mods\n      await this.loadSystemMods();\n      \n      this.updateStores();\n      \n      this.initialized = true;\n    } catch (error) {\n      console.error('Failed to initialize core integration:', error);\n      // Fall back to mock for development if core fails\n      this.engine = this.createMockEngine();\n      this.initialized = true;\n      console.warn('‚ö†Ô∏è Using mock engine - YAKKL Core initialization failed');\n    }\n  }\n\n  private createMockEngine(): any {\n    return {\n      initialize(): Promise<void> { return Promise.resolve(); },\n      async destroy(): Promise<void> {},\n      on(event: string, handler: any): void {},\n      emit(event: string, data: any): void {},\n      off(event: string, handler: any): void {},\n      async loadMod(id: string): Promise<any> { \n        // Load from system registry\n        return await systemModRegistry.loadMod(id);\n      },\n      async discoverMods(): Promise<any[]> { \n        return systemModRegistry.getAvailableMods();\n      },\n      async getLoadedMods(): Promise<any[]> { \n        return systemModRegistry.getLoadedMods();\n      },\n      accounts: {\n        getAll: (): any[] => [],\n        getCurrent: (): any => null,\n        create: (name?: string): Promise<any> => Promise.resolve({ address: '0x...', name }),\n        select: (address: string): Promise<void> => Promise.resolve()\n      },\n      networks: {\n        getSupported: (): any[] => [],\n        getCurrent: (): any => ({ chainId: 1, name: 'Ethereum' }),\n        switch: (chainId: string): Promise<void> => Promise.resolve()\n      },\n      transactions: {\n        getHistory: (): any[] => []\n      }\n    };\n  }\n\n  /**\n   * Load system mods\n   */\n  private async loadSystemMods(): Promise<void> {\n    try {\n      console.log('üì¶ Loading system mods...');\n      const systemMods = await systemModRegistry.loadSystemMods();\n      \n      // Initialize each system mod with the engine\n      for (const mod of systemMods) {\n        try {\n          if (this.engine && mod.initialize) {\n            await mod.initialize(this.engine);\n            console.log(`‚úÖ Initialized system mod: ${mod.manifest?.name || 'Unknown'}`);\n          }\n        } catch (error) {\n          console.error(`Failed to initialize system mod ${mod.manifest?.id}:`, error);\n        }\n      }\n      \n      console.log(`üì¶ Loaded ${systemMods.length} system mods`);\n    } catch (error) {\n      console.error('Failed to load system mods:', error);\n    }\n  }\n\n  /**\n   * Load a mod\n   */\n  async loadMod(modId: string): Promise<Mod | null> {\n    try {\n      // Try to load from system registry first\n      let mod = await systemModRegistry.loadMod(modId);\n      \n      if (mod && this.engine) {\n        // Initialize the mod with the engine\n        if (mod.initialize) {\n          await mod.initialize(this.engine);\n        }\n        this.updateStores();\n        return mod;\n      }\n      \n      // Fall back to engine loading (for future real core integration)\n      if (this.engine) {\n        mod = await this.engine.loadMod(modId);\n        this.updateStores();\n        return mod;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Failed to load mod ${modId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Discover available mods\n   */\n  async discoverMods(): Promise<any[]> {\n    try {\n      // Get available mods from system registry\n      const systemMods = systemModRegistry.getAvailableMods();\n      \n      // Get discovered mods from engine (for future expansion)\n      let engineMods: any[] = [];\n      if (this.engine) {\n        try {\n          engineMods = await this.engine.discoverMods();\n        } catch (error) {\n          console.warn('Engine mod discovery failed:', error);\n        }\n      }\n      \n      // Combine system and engine mods\n      const allDiscovered = [...systemMods, ...engineMods];\n      this.discoveredMods.set(allDiscovered);\n      \n      return allDiscovered;\n    } catch (error) {\n      console.error('Failed to discover mods:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get mods by category\n   */\n  async getModsByCategory(category: string): Promise<Mod[]> {\n    if (!this.engine) return [];\n\n    try {\n      // Get loaded mods and filter by category\n      const loadedMods = await this.engine.getLoadedMods();\n      return loadedMods.filter((mod: Mod) => \n        mod.manifest.category === category\n      );\n    } catch (error) {\n      console.error('Failed to get mods by category:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if a mod can enhance existing functionality\n   */\n  async checkEnhancements(feature: string): Promise<any[]> {\n    if (!this.engine) return [];\n\n    try {\n      // Get loaded mods and check for enhancements\n      const loadedMods = await this.engine.getLoadedMods();\n      const enhancements: any[] = [];\n      \n      for (const mod of loadedMods) {\n        const modEnhancements = mod.getEnhancements();\n        const relevantEnhancements = modEnhancements.filter((e: any) => \n          e.targetMod.includes(feature) || \n          e.description.toLowerCase().includes(feature.toLowerCase())\n        );\n        enhancements.push(...relevantEnhancements);\n      }\n      \n      return enhancements;\n    } catch (error) {\n      console.error('Failed to check enhancements:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Setup event listeners for engine events\n   */\n  private setupEventListeners(): void {\n    if (!this.engine) return;\n\n    this.engine.on('mod:loaded', () => {\n      this.updateStores();\n    });\n\n    this.engine.on('mod:discovered', (mods: any[]) => {\n      this.discoveredMods.set(mods);\n    });\n  }\n\n  /**\n   * Update reactive stores with current state\n   */\n  private async updateStores(): Promise<void> {\n    try {\n      // Get loaded mods from system registry\n      const systemMods = systemModRegistry.getLoadedMods();\n      \n      // Get loaded mods from engine (for future)\n      let engineMods: any[] = [];\n      if (this.engine) {\n        try {\n          engineMods = await this.engine.getLoadedMods();\n        } catch (error) {\n          console.warn('Engine mod loading failed:', error);\n        }\n      }\n      \n      // Combine all loaded mods\n      const allLoadedMods = [...systemMods, ...engineMods];\n      this.mods.set(allLoadedMods);\n\n      // Collect all enhancements from loaded mods\n      const allEnhancements: any[] = [];\n      for (const mod of allLoadedMods) {\n        if (mod.getEnhancements) {\n          try {\n            allEnhancements.push(...mod.getEnhancements());\n          } catch (error) {\n            console.warn(`Failed to get enhancements from mod ${mod.manifest?.id}:`, error);\n          }\n        }\n      }\n      this.enhancements.set(allEnhancements);\n      \n      console.log(`üìä Updated stores: ${allLoadedMods.length} mods, ${allEnhancements.length} enhancements`);\n    } catch (error) {\n      console.error('Failed to update stores:', error);\n    }\n  }\n\n  /**\n   * Check if core is available\n   */\n  isAvailable(): boolean {\n    return this.initialized && this.engine !== null;\n  }\n\n  /**\n   * Get the wallet engine\n   */\n  getEngine(): WalletEngine | null {\n    return this.engine;\n  }\n\n  /**\n   * Get account manager\n   */\n  getAccountManager() {\n    return this.engine?.accounts || null;\n  }\n\n  /**\n   * Get network manager\n   */\n  getNetworkManager() {\n    return this.engine?.networks || null;\n  }\n\n  /**\n   * Get transaction manager\n   */\n  getTransactionManager() {\n    return this.engine?.transactions || null;\n  }\n\n  /**\n   * Destroy the integration\n   */\n  async destroy(): Promise<void> {\n    if (this.engine) {\n      await this.engine.destroy();\n      this.engine = null;\n    }\n    this.initialized = false;\n  }\n}\n\n// Create singleton instance\nconst coreIntegration = CoreIntegration.getInstance();\n\n// Auto-initialize when imported\nlet initPromise: Promise<void> | null = null;\n\nexport async function initializeCore(): Promise<void> {\n  if (!initPromise) {\n    initPromise = coreIntegration.initialize();\n  }\n  return initPromise;\n}\n\n// Export stores for use in components\nexport const { mods, enhancements, discoveredMods } = coreIntegration;\n\n// Utility functions for components\nexport function isCoreAvailable(): boolean {\n  return coreIntegration.isAvailable();\n}\n\nexport async function loadMod(id: string) {\n  return coreIntegration.loadMod(id);\n}\n\nexport async function discoverMods() {\n  return coreIntegration.discoverMods();\n}\n\nexport async function getModsByCategory(category: string) {\n  return coreIntegration.getModsByCategory(category);\n}\n\nexport async function checkEnhancements(feature: string) {\n  return coreIntegration.checkEnhancements(feature);\n}\n\nexport function getCoreEngine() {\n  return coreIntegration.getEngine();\n}\n\nexport function getAccountManager() {\n  return coreIntegration.getAccountManager();\n}\n\nexport function getNetworkManager() {\n  return coreIntegration.getNetworkManager();\n}\n\nexport function getTransactionManager() {\n  return coreIntegration.getTransactionManager();\n}","<script lang=\"ts\">\n  /**\n   * ModDashboard - Shows available mods and manages them\n   */\n  \n  import { onMount } from 'svelte';\n  import { mods, discoveredMods, isCoreAvailable, discoverMods, loadMod } from '../../core/integration';\n  import ModRenderer from './ModRenderer.svelte';\n  \n  let { className = '' } = $props();\n\n  let loading = $state(false);\n  let activeTab = $state('installed');\n  let selectedCategory = $state('all');\n  \n  // Reactive stores\n  let loadedMods = $derived($mods);\n  let discovered = $derived($discoveredMods);\n\n  // Categories for filtering\n  const categories = [\n    { id: 'all', name: 'All', icon: 'üì¶' },\n    { id: 'portfolio', name: 'Portfolio', icon: 'üíº' },\n    { id: 'trading', name: 'Trading', icon: 'üìà' },\n    { id: 'defi', name: 'DeFi', icon: 'üè¶' },\n    { id: 'security', name: 'Security', icon: 'üîí' },\n    { id: 'analytics', name: 'Analytics', icon: 'üìä' },\n    { id: 'utility', name: 'Utility', icon: 'üõ†Ô∏è' }\n  ];\n\n  // Filter mods by category\n  let filteredMods = $derived(() => {\n    if (selectedCategory === 'all') {\n      return loadedMods;\n    }\n    return loadedMods.filter(v => v.manifest.category === selectedCategory);\n  });\n\n  onMount(async () => {\n    if (isCoreAvailable()) {\n      await refreshDiscovery();\n    }\n  });\n\n  async function refreshDiscovery() {\n    loading = true;\n    try {\n      await discoverMods();\n    } catch (error) {\n      console.error('Failed to discover mods:', error);\n    } finally {\n      loading = false;\n    }\n  }\n\n  async function installMod(modId: string) {\n    try {\n      await loadMod(modId);\n    } catch (error) {\n      console.error(`Failed to install mod ${modId}:`, error);\n    }\n  }\n\n  function getTierColor(tier: string): string {\n    switch (tier) {\n      case 'community': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200';\n      case 'verified': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200';\n      case 'pro': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-200';\n      case 'private': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200';\n      case 'enterprise': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200';\n      default: return 'bg-zinc-100 text-zinc-800 dark:bg-zinc-800 dark:text-zinc-200';\n    }\n  }\n\n  function getCategoryIcon(category: string): string {\n    const cat = categories.find(c => c.id === category);\n    return cat?.icon || 'üì¶';\n  }\n</script>\n\n<div class={`mod-dashboard ${className}`}>\n  {#if !isCoreAvailable()}\n    <div class=\"p-6 text-center\">\n      <div class=\"mb-4\">\n        <svg class=\"w-12 h-12 mx-auto text-zinc-400 dark:text-zinc-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n        </svg>\n      </div>\n      <h3 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-2\">Mod System</h3>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        YAKKL Core is not available. Mod functionality is disabled.\n      </p>\n      <div class=\"text-xs text-zinc-500 dark:text-zinc-500\">\n        The mod system will be available once YAKKL Core is integrated.\n      </div>\n    </div>\n  {:else}\n    <!-- Header -->\n    <div class=\"flex items-center justify-between mb-6\">\n      <div class=\"flex items-center gap-3\">\n        <div class=\"w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center text-white\">\n          <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\n          </svg>\n        </div>\n        <div>\n          <h2 class=\"text-xl font-bold text-zinc-900 dark:text-white\">Mods</h2>\n          <p class=\"text-sm text-zinc-600 dark:text-zinc-400\">Extend your wallet with plugins</p>\n        </div>\n      </div>\n      \n      <button\n        onclick={refreshDiscovery}\n        disabled={loading}\n        class=\"yakkl-btn-secondary text-sm {loading ? 'opacity-50' : ''}\"\n      >\n        {#if loading}\n          <svg class=\"w-4 h-4 animate-spin mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n          </svg>\n        {/if}\n        Discover\n      </button>\n    </div>\n\n    <!-- Tabs -->\n    <div class=\"flex gap-1 mb-6\">\n      <button\n        onclick={() => activeTab = 'installed'}\n        class=\"px-4 py-2 text-sm font-medium rounded-lg transition-colors {\n          activeTab === 'installed' \n            ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/50 dark:text-indigo-300' \n            : 'text-zinc-600 dark:text-zinc-400 hover:bg-zinc-100 dark:hover:bg-zinc-800'\n        }\"\n      >\n        Installed ({loadedMods.length})\n      </button>\n      <button\n        onclick={() => activeTab = 'discover'}\n        class=\"px-4 py-2 text-sm font-medium rounded-lg transition-colors {\n          activeTab === 'discover' \n            ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/50 dark:text-indigo-300' \n            : 'text-zinc-600 dark:text-zinc-400 hover:bg-zinc-100 dark:hover:bg-zinc-800'\n        }\"\n      >\n        Discover ({discovered.length})\n      </button>\n    </div>\n\n    <!-- Category Filter -->\n    <div class=\"flex flex-wrap gap-2 mb-6\">\n      {#each categories as category}\n        <button\n          onclick={() => selectedCategory = category.id}\n          class=\"px-3 py-1 text-sm rounded-full transition-colors {\n            selectedCategory === category.id\n              ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/50 dark:text-indigo-300'\n              : 'bg-zinc-100 text-zinc-600 dark:bg-zinc-800 dark:text-zinc-400 hover:bg-zinc-200 dark:hover:bg-zinc-700'\n          }\"\n        >\n          {category.icon} {category.name}\n        </button>\n      {/each}\n    </div>\n\n    <!-- Content -->\n    {#if activeTab === 'installed'}\n      <!-- Installed Mods -->\n      {#if filteredMods.length === 0}\n        <div class=\"text-center py-12\">\n          <div class=\"mb-4\">\n            <svg class=\"w-16 h-16 mx-auto text-zinc-300 dark:text-zinc-700\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4\" />\n            </svg>\n          </div>\n          <h3 class=\"text-lg font-medium text-zinc-900 dark:text-white mb-2\">\n            {selectedCategory === 'all' ? 'No mods installed' : `No ${selectedCategory} mods`}\n          </h3>\n          <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n            {selectedCategory === 'all' \n              ? 'Discover and install mods to extend your wallet functionality'\n              : `Browse other categories or discover new ${selectedCategory} mods`\n            }\n          </p>\n          <button\n            onclick={() => activeTab = 'discover'}\n            class=\"yakkl-btn-primary text-sm\"\n          >\n            Discover Mods\n          </button>\n        </div>\n      {:else}\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {#each filteredMods as mod}\n            <div class=\"bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-xl p-4 hover:shadow-md transition-shadow\">\n              <div class=\"flex items-start gap-3 mb-3\">\n                <div class=\"w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-sm font-bold\">\n                  {getCategoryIcon(mod.manifest.category)}\n                </div>\n                <div class=\"flex-1 min-w-0\">\n                  <div class=\"flex items-center gap-2 mb-1\">\n                    <h3 class=\"font-medium text-zinc-900 dark:text-white truncate\">\n                      {mod.manifest.name}\n                    </h3>\n                    <span class={`px-2 py-0.5 text-xs font-medium rounded-full ${getTierColor(mod.manifest.tier)}`}>\n                      {mod.manifest.tier}\n                    </span>\n                  </div>\n                  <p class=\"text-sm text-zinc-600 dark:text-zinc-400 line-clamp-2\">\n                    {mod.manifest.description}\n                  </p>\n                </div>\n              </div>\n              \n              <div class=\"flex items-center justify-between\">\n                <div class=\"text-xs text-zinc-500 dark:text-zinc-500\">\n                  v{mod.manifest.version}\n                </div>\n                <div class=\"flex gap-2\">\n                  <span class=\"inline-flex items-center px-2 py-1 bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300 text-xs rounded-full\">\n                    ‚úì Active\n                  </span>\n                </div>\n              </div>\n            </div>\n          {/each}\n        </div>\n      {/if}\n    {:else}\n      <!-- Discover Mods -->\n      {#if discovered.length === 0}\n        <div class=\"text-center py-12\">\n          <div class=\"mb-4\">\n            <svg class=\"w-16 h-16 mx-auto text-zinc-300 dark:text-zinc-700\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n          </div>\n          <h3 class=\"text-lg font-medium text-zinc-900 dark:text-white mb-2\">No mods discovered</h3>\n          <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n            Discovery is scanning for available mods in your environment\n          </p>\n          <button\n            onclick={refreshDiscovery}\n            class=\"yakkl-btn-primary text-sm\"\n          >\n            Scan Again\n          </button>\n        </div>\n      {:else}\n        <div class=\"space-y-4\">\n          {#each discovered as mod}\n            <div class=\"bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-xl p-4\">\n              <div class=\"flex items-center justify-between\">\n                <div class=\"flex items-center gap-3\">\n                  <div class=\"w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-sm font-bold\">\n                    {getCategoryIcon(mod.manifest?.category || 'utility')}\n                  </div>\n                  <div>\n                    <h3 class=\"font-medium text-zinc-900 dark:text-white\">\n                      {mod.manifest?.name || mod.id}\n                    </h3>\n                    <p class=\"text-sm text-zinc-600 dark:text-zinc-400\">\n                      {mod.manifest?.description || 'No description available'}\n                    </p>\n                  </div>\n                </div>\n                \n                <button\n                  onclick={() => installMod(mod.manifest?.id || mod.id)}\n                  class=\"yakkl-btn-primary text-sm\"\n                >\n                  Install\n                </button>\n              </div>\n            </div>\n          {/each}\n        </div>\n      {/if}\n    {/if}\n  {/if}\n</div>\n\n<style>\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n</style>"],"names":["NetworkManagerMod","manifest","id","name","version","description","author","license","tier","category","tags","permissions","minimumWalletVersion","supportedPlatforms","discoverable","enhances","conflicts","iconUrl","screenshotUrls","capabilities","ui","hasComponents","hasWidgets","mountPoints","background","hasWorkers","hasScheduledTasks","apis","endpoints","webhooks","storage","maxSize","encrypted","network","allowedHosts","requiresProxy","engine","loaded","active","customNetworks","initialize","this","loadCustomNetworks","console","log","setupEventListeners","destroy","isLoaded","isActive","getComponent","createNetworkSwitcher","createCustomNetworkForm","createNetworkStatusIndicator","getWidget","createPerformanceWidget","createSecurityWidget","getBackgroundScript","handleAPICall","endpoint","data","switchNetwork","chainId","addCustomNetwork","getAvailableNetworks","Error","emit","event","on","handler","off","enhance","otherMod","getEnhancements","targetMod","type","stored","localStorage","getItem","JSON","parse","error","warn","saveCustomNetworks","setItem","stringify","source","suggestions","getErrorSuggestions","validateNetwork","networks","switch","toString","timestamp","Date","now","success","message","networkData","validated","validateCustomNetwork","push","add","standardNetworks","getSupported","find","n","rpcUrl","existing","response","fetch","method","headers","body","jsonrpc","params","result","json","parseInt","isCustom","addedAt","code","props","onSwitch","onAddCustom","onSubmit","onValidate","currentNetwork","getCurrent","onRefresh","checkNetworkHealth","metrics","getNetworkMetrics","onOptimize","suggestOptimalEndpoint","securityLevel","assessNetworkSecurity","warnings","getSecurityWarnings","healthy","latency","reliability","successRate","avgBlockTime","AccountManagerMod","accountCache","Map","securitySettings","loadSecuritySettings","initializeAccountCache","startSecurityMonitoring","clear","createAccountSwitcher","createAccountWizard","createSecurityPanel","createBackupManager","createMultiSigManager","createAccountHealthWidget","createSecurityStatusWidget","createBalanceOverviewWidget","createSecurityMonitor","createAccount","importAccount","exportAccount","backupAccounts","autoLockTimeout","requireBiometric","allowScreenshots","maxFailedAttempts","enabledFeatures","saveSecuritySettings","accounts","getAll","account","cacheAccountData","enrichedAccount","balance","getAccountBalance","address","ensName","resolveENS","lastActivity","getLastActivity","securityScore","calculateSecurityScore","cached","set","async","enhanced","refreshAccountCache","get","transaction","recordAccountActivity","from","setInterval","performSecurityCheck","create","calculateSecurityLevel","validateImportData","importPrivateKey","privateKey","importMnemonic","mnemonic","importWatchOnly","validateExportPermissions","warning","backup","accountCount","length","includes","score","Math","min","activity","Array","values","switchAccount","showBalances","showENS","onCreateNew","onImport","securityOptions","settings","onUpdateSettings","updateSecuritySettings","onCreateBackup","options","onRestoreBackup","restoreBackup","multiSigAccounts","getMultiSigAccounts","onCreateMultiSig","config","createMultiSig","healthScores","getAccountHealthScores","overallStatus","getOverallSecurityStatus","alerts","getSecurityAlerts","totalBalance","calculateTotalBalance","accountBalances","getAccountBalances","script","select","filter","acc","scores","balances","SystemModRegistry","static","mods","loadedMods","getInstance","instance","constructor","registerSystemMods","loader","enabled","systemMod","size","getAvailableMods","getModsByCategory","mod","getEnabledMods","getSystemMods","loadMod","modId","entry","has","loadAllEnabledMods","enabledMods","loadPromises","map","results","Promise","allSettled","status","value","loadSystemMods","systemMods","setModEnabled","catch","err","delete","getLoadedMod","getLoadedMods","isModLoaded","unloadMod","unloadAllMods","unloadPromises","keys","registerMod","unregisterMod","searchMods","query","lowerQuery","toLowerCase","getStatistics","byCategory","total","m","system","thirdParty","systemModRegistry","CoreIntegration","initialized","writable","enhancements","discoveredMods","globalThis","coreIntegration","createMockEngine","updateStores","resolve","discoverMods","transactions","getHistory","engineMods","allDiscovered","checkEnhancements","feature","modEnhancements","relevantEnhancements","e","enhancements2","allLoadedMods","allEnhancements","isAvailable","getEngine","getAccountManager","getNetworkManager","getTransactionManager","isCoreAvailable","className","$$props","loading","selectedCategory","$.store_get","$$store_subs","discovered","categories","icon","filteredMods","getTierColor","getCategoryIcon","cat","c","$$payload","out","$.attr","$.attr_class","$.stringify","$.escape","each_array","$$index","each_array_1","$$index_1"],"mappings":"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"}