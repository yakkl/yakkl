import{p as push,h as copy_payload,i as assign_payload,c as pop,a as push_element,e as escape_html,b as pop_element,m as attr,k as bind_props,l as prevent_snippet_stringification}from"./index2.js";import{M as Modal}from"./Modal2.js";import{F as FILENAME}from"./utils.js";import{R as encryptData,M as PromoClassificationType,A as AccessSourceType,V as VERSION,i as isEncryptedData,j as decryptData,P as PlanType,a2 as getMiscStore,ao as yakklPreferencesStore,X as setPreferencesStorage,z as yakklSettingsStore,Z as setSettingsStorage,ap as profileStore,U as setProfileStorage,m as yakklCurrentlySelectedStore,W as setYakklCurrentlySelectedStorage,aq as yakklContactsStore,af as setYakklContactsStorage,ar as yakklChatsStore,as as setYakklChatsStorage,at as yakklAccountsStore,a9 as setYakklAccountsStorage,au as yakklPrimaryAccountsStore,a6 as setYakklPrimaryAccountsStorage,av as yakklWatchListStore,aw as setYakklWatchListStorage,ax as yakklBlockedListStore,ay as setYakklBlockedListStorage,az as yakklConnectedDomainsStore,an as setYakklConnectedDomainsStorage,H as yakklTokenDataStore,aA as setYakklTokenDataStorage,G as yakklTokenDataCustomStore,ag as setYakklTokenDataCustomStorage,I as yakklCombinedTokenStore,aB as setYakklCombinedTokenStorage,aC as yakklWalletProvidersStore,aD as setYakklWalletProvidersStorage,aE as yakklWalletBlockchainsStore,aF as setYakklWalletBlockchainsStorage}from"./encryption.js";import{l as log}from"./Logger.js";import"./environment.js";import{C as Confirmation}from"./Confirmation.js";import{s as safeLogout}from"./safeNavigate.js";class EmergencyKitManager{static async createEmergencyKit(accountData,encryptDownload,passwordOrSaltedKey){const createDate=(new Date).toISOString();const updateDate=createDate;const version=VERSION;const id=this.generateId();const encryptedAccounts=await Promise.all(accountData.map(async account=>{const checksum=await this.createHash(JSON.stringify(account));account.hash=checksum;return encryptDownload?await encryptData(account,passwordOrSaltedKey):account}));const dataToEncrypt=JSON.stringify(encryptedAccounts);const encryptedData=encryptDownload?await encryptData(dataToEncrypt,passwordOrSaltedKey):{data:dataToEncrypt,iv:"",salt:""};const overallChecksum=await this.createHash(dataToEncrypt);const meta={id:id,createDate:createDate,updateDate:updateDate,version:version,type:"yakkl",portfolioName:accountData[0].portfolioName,subPortfolioName:accountData[0].subPortfolioName||"",subPortfolioAddress:accountData[0].subPortfolioAddress||"",hash:overallChecksum,files:["YakklAccount"],plan:{type:accountData[0].registered.plan.type,source:AccessSourceType.STANDARD,promo:PromoClassificationType.INFLUENCER,trialEndDate:"",upgradeDate:""}};const emergencyKit={id:id,data:encryptedData,accounts:encryptedAccounts,meta:meta,cs:overallChecksum};return emergencyKit}static async createBulkEmergencyKit(preferences,settings,profile,currentlySelected,contacts,chats,accounts,primaryAccounts,watchList,blockedList,connectedDomains,passwordOrSaltedKey,tokenData,tokenDataCustom,combinedTokenStore,walletProviders,walletBlockchains){const createDate=(new Date).toISOString();const id=this.generateId();const encryptedData={yakklPreferencesStore:await this.encryptWithChecksum(preferences,passwordOrSaltedKey),yakklSettingsStore:await this.encryptWithChecksum(settings,passwordOrSaltedKey),profileStore:await this.encryptWithChecksum(profile,passwordOrSaltedKey),yakklCurrentlySelectedStore:await this.encryptWithChecksum(currentlySelected,passwordOrSaltedKey),yakklContactsStore:await this.encryptWithChecksum(contacts,passwordOrSaltedKey),yakklChatsStore:await this.encryptWithChecksum(chats,passwordOrSaltedKey),yakklAccountsStore:await this.encryptWithChecksum(accounts,passwordOrSaltedKey),yakklPrimaryAccountsStore:await this.encryptWithChecksum(primaryAccounts,passwordOrSaltedKey),yakklWatchListStore:await this.encryptWithChecksum(watchList,passwordOrSaltedKey),yakklBlockedListStore:await this.encryptWithChecksum(blockedList,passwordOrSaltedKey),yakklConnectedDomainsStore:await this.encryptWithChecksum(connectedDomains,passwordOrSaltedKey),yakklTokenDataStore:await this.encryptWithChecksum(tokenData,passwordOrSaltedKey),yakklTokenDataCustomStore:await this.encryptWithChecksum(tokenDataCustom,passwordOrSaltedKey),yakklCombinedTokenStore:await this.encryptWithChecksum(combinedTokenStore,passwordOrSaltedKey),yakklWalletProvidersStore:await this.encryptWithChecksum(walletProviders,passwordOrSaltedKey),yakklWalletBlockchainsStore:await this.encryptWithChecksum(walletBlockchains,passwordOrSaltedKey)};let profileData=null;if(isEncryptedData(profile.data)){profileData=await decryptData(profile.data,passwordOrSaltedKey)}const meta={id:id,createDate:createDate,updateDate:createDate,version:VERSION,type:"yakkl_bulk",plan:{type:profileData?.registered?.plan.type??PlanType.BASIC_MEMBER,source:AccessSourceType.STANDARD,promo:PromoClassificationType.INFLUENCER,trialEndDate:"",upgradeDate:""},hash:await this.createHash(JSON.stringify(encryptedData)),files:["yakklPreferencesStore","yakklSettingsStore","profileStore","yakklCurrentlySelectedStore","yakklContactsStore","yakklChatsStore","yakklAccountsStore","yakklPrimaryAccountsStore","yakklWatchListStore","yakklBlockedListStore","yakklConnectedDomainsStore","yakklTokenDataStore","yakklTokenDataCustomStore","yakklCombinedTokenStore","yakklWalletProvidersStore","yakklWalletBlockchainsStore"]};profileData=null;const bulkEmergencyKit={meta:meta,data:encryptedData,cs:await this.createHash(JSON.stringify(meta)+JSON.stringify(encryptedData))};return bulkEmergencyKit}static async downloadEmergencyKit(emergencyKit,filePath){if(typeof window!=="undefined"&&window.document){const fileName=`yakkl-emergency-kit-${emergencyKit.id}-${emergencyKit?.meta?.createDate}.json`;this.downloadObjectAsJson(emergencyKit,fileName);return fileName}else{throw new Error("Download not supported in this environment")}}static async downloadBulkEmergencyKit(bulkEmergencyKit){try{if(typeof window!=="undefined"&&window.document){const fileName=`yakkl-bulk-emergency-kit-${bulkEmergencyKit.meta.id}-${bulkEmergencyKit.meta.createDate}.json`;this.downloadObjectAsJson(bulkEmergencyKit,fileName);return fileName}else{throw new Error("Download not supported in this environment")}}catch(error){console.log("[ERROR]: Error downloading bulk emergency kit:",false,error);throw error}}static async importEmergencyKit(source,passwordOrSaltedKey){let fileContent;if(source instanceof File){fileContent=await source.text()}else{fileContent=this.cloudImport("source")}const emergencyKit=JSON.parse(fileContent);if(isEncryptedData(emergencyKit.data)){emergencyKit.accounts=await decryptData(emergencyKit.data,passwordOrSaltedKey)}return emergencyKit}static async importBulkEmergencyKit(source,passwordOrSaltedKey){try{let fileContent;if(source instanceof File){fileContent=await source.text()}else{throw new Error("Unsupported source type")}const bulkEmergencyKit=JSON.parse(fileContent);const calculatedCS=await this.createHash(JSON.stringify(bulkEmergencyKit.meta)+JSON.stringify(bulkEmergencyKit.data));if(calculatedCS!==bulkEmergencyKit.cs){throw new Error("Data integrity check failed")}const newData={};const existingData={};for(const[key,encryptedValue]of Object.entries(bulkEmergencyKit.data)){const decryptedData=await this.decryptWithChecksumVerification(encryptedValue,passwordOrSaltedKey);const dataExists=await this.checkDataExists(key,decryptedData);if(dataExists){existingData[key]=decryptedData}else{newData[key]=decryptedData}}return{newData:newData,existingData:existingData}}catch(error){log.error("Error importing bulk emergency kit:",false,error);throw error}}static async readEmergencyKitMetadata(source){let fileContent;if(source instanceof File){fileContent=await source.text()}else{throw new Error("Unsupported source type")}const emergencyKit=JSON.parse(fileContent);return emergencyKit.meta}static async readBulkEmergencyKitMetadata(source){try{let fileContent;if(source instanceof File){fileContent=await source.text()}else{throw new Error("Unsupported source type")}const bulkEmergencyKit=JSON.parse(fileContent);return bulkEmergencyKit.meta}catch(error){log.error("Error reading bulk emergency kit metadata:",false,error);throw error}}static async checkDataExists(key,data){return false}static cloudImport(source){return""}static async createHash(data){const encoder=new TextEncoder;const dataBuffer=encoder.encode(data);const hashBuffer=await crypto.subtle.digest("SHA-256",dataBuffer);const hashArray=Array.from(new Uint8Array(hashBuffer));return hashArray.map(byte=>byte.toString(16).padStart(2,"0")).join("")}static async decryptWithChecksumVerification(encryptedData,passwordOrSaltedKey){try{const decryptedData=await decryptData(encryptedData,passwordOrSaltedKey);const calculatedChecksum=await this.createHash(JSON.stringify(decryptedData.data));if(calculatedChecksum!==decryptedData.cs){throw new Error("Data integrity check failed")}return decryptedData.data}catch(error){log.error("Error decrypting data:",false,error);throw error}}static downloadObjectAsJson(exportObj,exportName){try{const dataStr="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(exportObj));const downloadAnchorNode=document.createElement("a");downloadAnchorNode.setAttribute("href",dataStr);downloadAnchorNode.setAttribute("download",exportName);document.body.appendChild(downloadAnchorNode);downloadAnchorNode.click();downloadAnchorNode.remove()}catch(e){log.error(`Download failed: ${e}`)}}static async encryptWithChecksum(data,passwordOrSaltedKey){try{const jsonString=JSON.stringify(data);const checksum=await this.createHash(jsonString);const encryptedData=await encryptData({cs:checksum,data:data},passwordOrSaltedKey);return encryptedData}catch(error){log.error("Error encrypting data:",false,error);throw error}}static generateId(){return"xxxxxx".replace(/x/g,()=>Math.floor(Math.random()*16).toString(16))}}EmergencyKit[FILENAME]="src/lib/components/EmergencyKit.svelte";function EmergencyKit($$payload,$$props){push(EmergencyKit);let{mode:mode="export",onComplete:onComplete,onCancel:onCancel=()=>{}}=$$props;let file=null;let loading=false;let error="";let showConfirmation=false;async function confirmImport(){showConfirmation=false;loading=true;error="";try{const passwordOrSaltedKey=getMiscStore();const{newData:newData,existingData:existingData}=await EmergencyKitManager.importBulkEmergencyKit(file,passwordOrSaltedKey);await updateStorageAndStores(newData,existingData);onComplete(true,`Emergency kit imported successfully for: ${file.name}`);safeLogout()}catch(err){error=`Failed to import emergency kit for: ${file.name}`;log.error(err);onComplete(false,`Failed to import emergency kit for: ${file.name}`)}finally{loading=false}}async function updateStorageAndStores(newData,existingData){const updateFunctions=[{key:"yakklPreferencesStore",setStorage:setPreferencesStorage,store:yakklPreferencesStore},{key:"yakklSettingsStore",setStorage:setSettingsStorage,store:yakklSettingsStore},{key:"profileStore",setStorage:setProfileStorage,store:profileStore},{key:"yakklCurrentlySelectedStore",setStorage:setYakklCurrentlySelectedStorage,store:yakklCurrentlySelectedStore},{key:"yakklContactsStore",setStorage:setYakklContactsStorage,store:yakklContactsStore},{key:"yakklChatsStore",setStorage:setYakklChatsStorage,store:yakklChatsStore},{key:"yakklAccountsStore",setStorage:setYakklAccountsStorage,store:yakklAccountsStore},{key:"yakklPrimaryAccountsStore",setStorage:setYakklPrimaryAccountsStorage,store:yakklPrimaryAccountsStore},{key:"yakklWatchListStore",setStorage:setYakklWatchListStorage,store:yakklWatchListStore},{key:"yakklBlockedListStore",setStorage:setYakklBlockedListStorage,store:yakklBlockedListStore},{key:"yakklConnectedDomainsStore",setStorage:setYakklConnectedDomainsStorage,store:yakklConnectedDomainsStore},{key:"yakklTokenDataStore",setStorage:setYakklTokenDataStorage,store:yakklTokenDataStore},{key:"yakklTokenDataCustomStore",setStorage:setYakklTokenDataCustomStorage,store:yakklTokenDataCustomStore},{key:"yakklCombinedTokenStore",setStorage:setYakklCombinedTokenStorage,store:yakklCombinedTokenStore},{key:"yakklWalletProvidersStore",setStorage:setYakklWalletProvidersStorage,store:yakklWalletProvidersStore},{key:"yakklWalletBlockchainsStore",setStorage:setYakklWalletBlockchainsStorage,store:yakklWalletBlockchainsStore}];if(VERSION.trim()===""){log.error("VERSION is not properly defined.");return}for(const{key:key,setStorage:setStorage,store:store}of updateFunctions){const data=newData[key]||existingData[key];if(data){if(data&&typeof data==="object"&&!Array.isArray(data)){if("version"in data||"VERSION"in data){data["version"]=VERSION;log.info(`Updated version for ${key} to ${VERSION}`)}}else if(data&&typeof data==="object"&&Array.isArray(data)){log.warn(`${key} contains array data - version not updated`)}else{log.error(`Invalid data object for ${key}. Cannot assign version.`);continue}try{await setStorage(data);store.set(data)}catch(error2){log.error(`Failed to update ${key}:`,false,error2)}}}}let $$settled=true;let $$inner_payload;function $$render_inner($$payload2){$$payload2.out+=`<div class="p-4">`;push_element($$payload2,"div",254,0);$$payload2.out+=`<h2 class="text-2xl font-bold mb-4">`;push_element($$payload2,"h2",255,1);$$payload2.out+=`${escape_html(mode==="export"?"Export":"Import")} Emergency Kit</h2>`;pop_element();$$payload2.out+=` `;if(mode==="export"){$$payload2.out+="\x3c!--[--\x3e";$$payload2.out+=`<button class="bg-blue-500 text-white px-4 py-2 rounded"${attr("disabled",loading,true)}>`;push_element($$payload2,"button",258,2);$$payload2.out+=`${escape_html(loading?"Exporting...":"Export Emergency Kit")}</button>`;pop_element()}else{$$payload2.out+="\x3c!--[!--\x3e";$$payload2.out+=`<div class="mb-4">`;push_element($$payload2,"div",266,2);$$payload2.out+=`<label for="importFile" class="block mb-2">`;push_element($$payload2,"label",267,3);$$payload2.out+=`Select File to Import:</label>`;pop_element();$$payload2.out+=` <input type="file" id="importFile" accept=".json" class="w-full p-2 border rounded"/>`;push_element($$payload2,"input",268,3);pop_element();$$payload2.out+=`</div>`;pop_element();$$payload2.out+=` `;{$$payload2.out+="\x3c!--[!--\x3e"}$$payload2.out+=`\x3c!--]--\x3e <button class="bg-green-500 text-white px-4 py-2 rounded"${attr("disabled",loading||!file,true)}>`;push_element($$payload2,"button",292,2);$$payload2.out+=`${escape_html(loading?"Importing...":"Import")}</button>`;pop_element();$$payload2.out+=` <button class="bg-red-400 text-white px-4 py-2 rounded">`;push_element($$payload2,"button",299,2);$$payload2.out+=`Cancel</button>`;pop_element()}$$payload2.out+=`\x3c!--]--\x3e `;if(error){$$payload2.out+="\x3c!--[--\x3e";$$payload2.out+=`<p class="text-red-500 mt-4">`;push_element($$payload2,"p",303,2);$$payload2.out+=`${escape_html(error)}</p>`;pop_element()}else{$$payload2.out+="\x3c!--[!--\x3e"}$$payload2.out+=`\x3c!--]--\x3e</div>`;pop_element();$$payload2.out+=` `;Confirmation($$payload2,{title:"Confirm Import",message:"Are you sure you want to continue? Doing so will override your current Smart Wallet data!",confirmText:"Yes, Import",rejectText:"Cancel",onConfirm:confirmImport,get show(){return showConfirmation},set show($$value){showConfirmation=$$value;$$settled=false}});$$payload2.out+=`\x3c!----\x3e`}do{$$settled=true;$$inner_payload=copy_payload($$payload);$$render_inner($$inner_payload)}while(!$$settled);assign_payload($$payload,$$inner_payload);pop()}EmergencyKit.render=function(){throw new Error("Component.render(...) is no longer valid in Svelte 5. See https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes for more information")};EmergencyKitModal[FILENAME]="src/lib/components/EmergencyKitModal.svelte";function EmergencyKitModal($$payload,$$props){push(EmergencyKitModal);let{show:show=false,mode:mode="import",onComplete:onComplete=handleEmergencyKitComplete,onCancel:onCancel=()=>{show=false},onClose:onClose=()=>{show=false}}=$$props;function handleEmergencyKitComplete(success,message){show=false;onComplete?.(success,message)}let $$settled=true;let $$inner_payload;function $$render_inner($$payload2){Modal($$payload2,{onCancel:onCancel,onClose:onClose,title:"Emergency Kit",get show(){return show},set show($$value){show=$$value;$$settled=false},children:prevent_snippet_stringification($$payload3=>{EmergencyKit($$payload3,{mode:mode,onComplete:onComplete,onCancel:onCancel})}),$$slots:{default:true}})}do{$$settled=true;$$inner_payload=copy_payload($$payload);$$render_inner($$inner_payload)}while(!$$settled);assign_payload($$payload,$$inner_payload);bind_props($$props,{show:show,onCancel:onCancel,onClose:onClose});pop()}EmergencyKitModal.render=function(){throw new Error("Component.render(...) is no longer valid in Svelte 5. See https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes for more information")};export{EmergencyKitModal as E};
//# sourceMappingURL=EmergencyKitModal.js.map
