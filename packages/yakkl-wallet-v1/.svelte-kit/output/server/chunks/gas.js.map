{"version":3,"file":"gas.js","sources":["../../../../src/lib/utilities/gas.ts"],"sourcesContent":["// main.ts\nimport { get } from 'svelte/store';\nimport { yakklGasTransStore, yakklConnectionStore } from '$lib/common/stores';\nimport type {\n\tGasFeeTrend,\n\tBlocknativeResponse,\n\tGasTransStore,\n\tEstimatedPrice\n} from '$lib/common/interfaces';\nimport { getTimerManager } from '$lib/managers/TimerManager';\nimport { log } from '$lib/managers/Logger';\nimport { TIMER_CHECK_GAS_PRICE_INTERVAL_TIME, TIMER_GAS_PRICE_CHECK } from '$lib/common';\nimport { UnifiedTimerManager } from '$lib/managers/UnifiedTimerManager';\n\nconst now = () => +Date.now() / 1000;\n\nlet providerGasCB: string | null = null;\nconst gasFeeTrend: GasFeeTrend[] = [];\n\nasync function checkGasPricesCB() {\n\ttry {\n\t\tif (getTimerManager().isRunning(TIMER_GAS_PRICE_CHECK)) {\n\t\t\tif (get(yakklConnectionStore) === true) {\n\t\t\t\tconst results = await fetchBlocknativeData();\n\t\t\t\t// log.debug('gas.ts - checkGasPricesCB', false, results);\n\t\t\t\tyakklGasTransStore.set({\n\t\t\t\t\tprovider: providerGasCB,\n\t\t\t\t\tid: getTimerManager().getTimeoutID(TIMER_GAS_PRICE_CHECK),\n\t\t\t\t\tresults\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlog.error(error);\n\t}\n}\n\nfunction setGasCBProvider(provider: string | null) {\n\tproviderGasCB = provider;\n}\n\nexport function stopCheckGasPrices() {\n\ttry {\n\t\tgetTimerManager().stopTimer(TIMER_GAS_PRICE_CHECK);\n\t\tsetGasCBProvider(null);\n\t} catch (error) {\n\t\tlog.error(error);\n\t}\n}\n\nexport function startCheckGasPrices(\n\tprovider = 'blocknative',\n\tms = TIMER_CHECK_GAS_PRICE_INTERVAL_TIME\n) {\n\ttry {\n\t\tif (ms > 0) {\n\t\t\tif (getTimerManager().isRunning(TIMER_GAS_PRICE_CHECK)) {\n\t\t\t\treturn; // Already running\n\t\t\t}\n\n\t\t\tsetGasCBProvider(provider);\n\t\t\tif (!getTimerManager().isRunning(TIMER_GAS_PRICE_CHECK)) {\n\t\t\t\tgetTimerManager().addTimer(TIMER_GAS_PRICE_CHECK, checkGasPricesCB, ms);\n\t\t\t\tgetTimerManager().startTimer(TIMER_GAS_PRICE_CHECK);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tlog.error(error);\n\t\tgetTimerManager().stopTimer(TIMER_GAS_PRICE_CHECK);\n\t}\n}\n\nconst memoizeAsync = <T>(fn: () => Promise<T>): (() => Promise<T>) => {\n\tconst CACHE_DURATION = 10;\n\tlet lastRunTs = 0;\n\tlet cache: T;\n\n\treturn async () => {\n\t\tconst isCacheExpired = now() - lastRunTs > CACHE_DURATION;\n\n\t\tif (isCacheExpired) {\n\t\t\tlastRunTs = now();\n\t\t\tcache = await fn();\n\t\t}\n\n\t\treturn cache;\n\t};\n};\n\nconst debounce = <T>(fn: () => Promise<T>): (() => Promise<T>) => {\n\tconst debouncedFn = UnifiedTimerManager.createDebounce(async () => {\n\t\treturn fn();\n\t}, 500);\n\n\treturn () =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\t// createDebounce returns a function that doesn't return a promise\n\t\t\t\t// We need to handle the async callback differently\n\t\t\t\tconst asyncWrapper = async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await fn();\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Cancel any existing debounced call and set up new one\n\t\t\t\tdebouncedFn.cancel();\n\t\t\t\tconst newDebouncedFn = UnifiedTimerManager.createDebounce(asyncWrapper, 500);\n\t\t\t\tnewDebouncedFn();\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n};\n\nconst getBlocknativeData = memoizeAsync<BlocknativeResponse>(async () =>\n\t(await fetch(import.meta.env.VITE_GAS_BLOCKNATIVE_ENDPOINT)).json()\n);\n\nconst getEtherscanData = memoizeAsync(async () =>\n\t(await fetch(import.meta.env.VITE_GAS_ETHERSCAN_ENDPOINT)).json()\n);\n\nconst getEGSData = memoizeAsync(async () =>\n\t(await fetch(import.meta.env.VITE_GAS_ETHGASSTATION_ENDPOINT)).json()\n);\n\nexport { debounce, getBlocknativeData, getEtherscanData, getEGSData };\n\nexport const fetchBlocknativeData = debounce(async () => {\n\ttry {\n\t\tconst response = await getBlocknativeData();\n\t\tif (response?.blockPrices) {\n\t\t\tconst blockPrices = response.blockPrices[0];\n\t\t\tconst estimatedPrices: EstimatedPrice[] = blockPrices.estimatedPrices;\n\n\t\t\tconst fastest = estimatedPrices.find((price: EstimatedPrice) => price.confidence === 99)!;\n\t\t\tconst faster = estimatedPrices.find((price: EstimatedPrice) => price.confidence === 95)!;\n\t\t\tconst fast = estimatedPrices.find((price: EstimatedPrice) => price.confidence === 90)!;\n\t\t\tconst standard = estimatedPrices.find((price: EstimatedPrice) => price.confidence === 80)!;\n\t\t\tconst slow = estimatedPrices.find((price: EstimatedPrice) => price.confidence === 70)!;\n\n\t\t\tif (gasFeeTrend.length > 4) {\n\t\t\t\tgasFeeTrend.shift();\n\t\t\t}\n\t\t\tgasFeeTrend.push({\n\t\t\t\tblocknumber: blockPrices.blockNumber,\n\t\t\t\tbaseFeePerGas: blockPrices.baseFeePerGas,\n\t\t\t\tmaxPriorityFeePerGas: fastest.maxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas: fastest.maxFeePerGas,\n\t\t\t\ttimestamp: now()\n\t\t\t});\n\n\t\t\tconst sum = gasFeeTrend.reduce(\n\t\t\t\t(accumulator, currentValue) => accumulator + currentValue.baseFeePerGas,\n\t\t\t\t0\n\t\t\t);\n\t\t\tconst avg = sum / gasFeeTrend.length;\n\n\t\t\tconst results: GasTransStore['results'] = {\n\t\t\t\tblockNumber: blockPrices.blockNumber,\n\t\t\t\testimatedTransactionCount: blockPrices.estimatedTransactionCount,\n\t\t\t\tgasProvider: 'blocknative',\n\t\t\t\tactual: {\n\t\t\t\t\tbaseFeePerGas: blockPrices.baseFeePerGas,\n\t\t\t\t\tfastest: {\n\t\t\t\t\t\tmaxPriorityFeePerGas: fastest.maxPriorityFeePerGas,\n\t\t\t\t\t\tmaxFeePerGas: fastest.maxFeePerGas\n\t\t\t\t\t},\n\t\t\t\t\tfaster: {\n\t\t\t\t\t\tmaxPriorityFeePerGas: faster.maxPriorityFeePerGas,\n\t\t\t\t\t\tmaxFeePerGas: faster.maxFeePerGas\n\t\t\t\t\t},\n\t\t\t\t\tfast: {\n\t\t\t\t\t\tmaxPriorityFeePerGas: fast.maxPriorityFeePerGas,\n\t\t\t\t\t\tmaxFeePerGas: fast.maxFeePerGas\n\t\t\t\t\t},\n\t\t\t\t\tstandard: {\n\t\t\t\t\t\tmaxPriorityFeePerGas: standard.maxPriorityFeePerGas,\n\t\t\t\t\t\tmaxFeePerGas: standard.maxFeePerGas\n\t\t\t\t\t},\n\t\t\t\t\tslow: { maxPriorityFeePerGas: slow.maxPriorityFeePerGas, maxFeePerGas: slow.maxFeePerGas }\n\t\t\t\t},\n\t\t\t\tgasFeeTrend: {\n\t\t\t\t\tbaseFeePerGasAvg: avg,\n\t\t\t\t\tmostRecentFees: gasFeeTrend\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn results;\n\t\t} else {\n\t\t\treturn {} as GasTransStore['results'];\n\t\t}\n\t} catch (error) {\n\t\tlog.error(error);\n\t\treturn {} as GasTransStore['results'];\n\t}\n});\n\nexport const fetchEtherscanData = debounce(async () => {\n\ttry {\n\t\tconst {\n\t\t\tresult: { SafeGasPrice, ProposeGasPrice, FastGasPrice }\n\t\t} = await getEtherscanData();\n\n\t\treturn [parseInt(FastGasPrice, 10), parseInt(ProposeGasPrice, 10), parseInt(SafeGasPrice, 10)];\n\t} catch (error) {\n\t\tlog.error(error);\n\t\treturn [0, 0, 0];\n\t}\n});\n\nexport const fetchEGSData = debounce(async () => {\n\ttry {\n\t\tconst { fast, safeLow, average } = await getEGSData();\n\n\t\treturn [fast / 10, average / 10, safeLow / 10];\n\t} catch (error) {\n\t\tlog.error(error);\n\t\treturn [0, 0, 0];\n\t}\n});\n"],"names":["now","Date","gasFeeTrend","setGasCBProvider","provider","stopCheckGasPrices","getTimerManager","stopTimer","TIMER_GAS_PRICE_CHECK","error","log","memoizeAsync","fn","CACHE_DURATION","lastRunTs","cache","async","isCacheExpired","debounce","debouncedFn","UnifiedTimerManager","createDebounce","Promise","resolve","reject","asyncWrapper","result","cancel","newDebouncedFn","getBlocknativeData","fetch","json","getEtherscanData","getEGSData","response","blockPrices","estimatedPrices","fastest","find","price","confidence","faster","fast","standard","slow","length","shift","push","blocknumber","blockNumber","baseFeePerGas","maxPriorityFeePerGas","maxFeePerGas","timestamp","sum","reduce","accumulator","currentValue","avg","results","estimatedTransactionCount","gasProvider","actual","baseFeePerGasAvg","mostRecentFees","SafeGasPrice","ProposeGasPrice","FastGasPrice","parseInt","safeLow","average"],"mappings":"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"}