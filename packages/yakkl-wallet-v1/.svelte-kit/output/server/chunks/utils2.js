import{g as getYakklAccounts,c as getYakklPrimaryAccounts,d as getSettings,P as PlanType,A as AccessSourceType,e as PRO_ELIGIBLE_PROMO_TYPES}from"./encryption.js";import{l as log}from"./Logger.js";import"./environment.js";import{ethers}from"ethers-v6";import"./utils.js";async function canUpgrade(providedSettings){const settings=await getSettings();if(!settings)return false;const{plan:plan}=settings;if((plan.type===PlanType.YAKKL_PRO||plan.type===PlanType.FOUNDING_MEMBER||plan.type===PlanType.EARLY_ADOPTER)&&plan.source!==AccessSourceType.TRIAL&&!plan.trialEndDate&&!plan.promo){return false}return true}function normalizeUserPlan(settings){const now=new Date;const isTrialExpired=settings.plan.trialEndDate&&new Date(settings.plan.trialEndDate).getTime()<now.getTime();const hasPromo=settings.plan.promo&&PRO_ELIGIBLE_PROMO_TYPES.includes(settings.plan.promo.toLowerCase());if(isTrialExpired&&!hasPromo){return{...settings,plan:{...settings.plan,type:PlanType.BASIC_MEMBER,source:AccessSourceType.STANDARD,trialEndDate:null,promo:null,upgradeDate:null}}}return settings}function isServerSide(){return typeof window==="undefined"||typeof document==="undefined"}function getUserId(){let userId=localStorage.getItem("anonymous_user_id");if(!userId){userId=crypto.randomUUID();localStorage.setItem("anonymous_user_id",userId)}return userId}function parseAmount(amount,decimals){const normalizedAmount=amount.startsWith(".")?`0${amount}`:amount;try{const[integerPart,fractionalPart=""]=normalizedAmount.split(".");const truncatedFractional=fractionalPart.slice(0,decimals).padEnd(decimals,"0");const fullAmount=`${integerPart}${truncatedFractional}`;return BigInt(fullAmount)}catch(error){log.error("Failed to parse amount:",false,error);return 0n}}function convertUsdToTokenAmount(usdAmount,marketPrice,decimals){if(marketPrice<=0)return"0";const tokenAmount=usdAmount/marketPrice;return ethers.formatUnits(ethers.parseUnits(tokenAmount.toFixed(decimals),decimals),decimals)}function convertTokenToUsd(tokenAmount,marketPrice){if(marketPrice<=0)return 0;return tokenAmount*marketPrice}const wait=time=>new Promise(resolve=>setTimeout(resolve,time));async function addressExist(address){try{const yakklAccounts=await getYakklAccounts();for(const account of yakklAccounts){if(account.address===address){return{exists:true,table:"accounts"}}}const yakklPrimaryAccounts=await getYakklPrimaryAccounts();for(const account of yakklPrimaryAccounts){if(account.address===address){return{exists:true,table:"primaryAccounts"}}}return{exists:false,table:null}}catch(error){log.error("Error checking if address exists:",false,error);return{exists:false,table:null}}}export{addressExist as a,convertUsdToTokenAmount as b,canUpgrade as c,convertTokenToUsd as d,getUserId as g,isServerSide as i,normalizeUserPlan as n,parseAmount as p,wait as w};
//# sourceMappingURL=utils2.js.map
