{"version":3,"file":"ImportWatchAccount.js","sources":["../../../../src/lib/components/SkeletonBalance.svelte","../../../../src/lib/components/ImportPrivateKey.svelte","../../../../src/lib/components/ImportWatchAccount.svelte"],"sourcesContent":["<!-- SkeletonBalance.svelte - Loading placeholder for balance data -->\n<script lang=\"ts\">\n\tinterface Props {\n\t\tclassName?: string;\n\t\tshowLabel?: boolean;\n\t}\n\n\tlet { className = '', showLabel = true }: Props = $props();\n</script>\n\n<div class=\"animate-pulse {className}\">\n\t{#if showLabel}\n\t\t<div class=\"h-3 bg-gray-200 rounded w-16 mb-1\"></div>\n\t{/if}\n\t<div class=\"h-4 bg-gray-300 rounded w-20\"></div>\n</div>\n\n<style>\n\t@keyframes pulse {\n\t\t0%,\n\t\t100% {\n\t\t\topacity: 1;\n\t\t}\n\t\t50% {\n\t\t\topacity: 0.5;\n\t\t}\n\t}\n\n\t.animate-pulse {\n\t\tanimation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n\t}\n</style>\n","<!-- ImportPrivateKey.svelte -->\n<script lang=\"ts\">\n\timport { browserSvelte } from '$lib/common/environment';\n\timport {\n\t\tsetYakklAccountsStorage,\n\t\tsetYakklCurrentlySelectedStorage,\n\t\tsetProfileStorage,\n\t\tgetYakklAccounts,\n\t\tgetProfile,\n\t\tgetYakklCurrentlySelected,\n\t\tgetMiscStore\n\t} from '$lib/common/stores';\n\timport { yakklAccount as yakklAccountDefault } from '$lib/models/dataModels';\n\timport { getWallet } from '$lib/utilities/ethereum';\n\timport { encryptData, decryptData } from '$lib/common/encryption';\n\timport { deepCopy, getSymbol } from '$lib/utilities/utilities';\n\timport { DEFAULT_PERSONA, VERSION } from '$lib/common/constants';\n\timport { createForm } from 'svelte-forms-lib';\n\timport * as yup from 'yup';\n\t// import { Confetti } from 'svelte-confetti';\n\t// import { confetti } from '@neoconfetti/svelte';\n\timport {\n\t\tAccountTypeCategory,\n\t\taddressExist,\n\t\tisEncryptedData,\n\t\tNetworkType,\n\t\ttype AccountData,\n\t\ttype CurrentlySelectedData,\n\t\ttype Profile,\n\t\ttype ProfileData,\n\t\ttype YakklAccount,\n\t\ttype YakklCurrentlySelected\n\t} from '$lib/common';\n\timport WalletManager from '$lib/managers/WalletManager';\n\timport type { Wallet } from '$lib/managers/Wallet';\n\timport { onMount } from 'svelte';\n\timport { dateString } from '$lib/common/datetime';\n\timport Modal from './Modal.svelte';\n\timport { log } from '$lib/managers/Logger';\n\n\tlet wallet: Wallet;\n\tlet currentlySelected: YakklCurrentlySelected;\n\tlet yakklMiscStore: string;\n\tlet chainId: number = 1;\n\tlet error = $state('');\n\tlet showConfetti = $state(false);\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tclassName?: string;\n\t\tonComplete?: (account: YakklAccount) => void;\n\t\tonCancel?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tclassName = 'text-gray-600 z-[999]',\n\t\tonComplete = () => {\n\t\t\tshow = false;\n\t\t},\n\t\tonCancel = $bindable(() => {\n\t\t\tshow = false;\n\t\t})\n\t}: Props = $props();\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tyakklMiscStore = getMiscStore();\n\t\t\tif (yakklMiscStore) {\n\t\t\t\tcurrentlySelected = await getYakklCurrentlySelected();\n\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t['Ethereum'],\n\t\t\t\t\tcurrentlySelected.shortcuts.chainId ?? 1,\n\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(`Error decrypting data: ${e}`);\n\t\t}\n\t});\n\n\tconst { form, errors, handleChange, handleSubmit, updateInitialValues } = createForm({\n\t\tinitialValues: { accountName: '', alias: '', prvKey: '' },\n\t\tvalidationSchema: yup.object().shape({\n\t\t\taccountName: yup.string().required('Please enter your account name for the address'),\n\t\t\talias: yup.string(),\n\t\t\tprvKey: yup\n\t\t\t\t.string()\n\t\t\t\t.required('Please paste or enter your Private Key for the address you are importing')\n\t\t}),\n\t\tonSubmit: async (data) => {\n\t\t\ttry {\n\t\t\t\tawait handleImport(data.accountName, data.alias, data.prvKey);\n\t\t\t} catch (e) {\n\t\t\t\terror = `Following error occurred: ${e}`;\n\t\t\t\tlog.error(error);\n\t\t\t}\n\t\t}\n\t});\n\n\tasync function checkIfAccountExists(name: string, address: string, alias: string) {\n\t\tconst yakklAccounts = await getYakklAccounts();\n\t\t// Check if the address exists in the accounts table along with the name and alias\n\t\tconst result = yakklAccounts.find((x) => {\n\t\t\tif (x.address === address || x.name === name || (alias && x.alias === alias)) return true;\n\t\t});\n\t\tif (result) {\n\t\t\treturn true;\n\t\t}\n\t\t// Double check if the address exists in the accounts or primary accounts tables\n\t\tconst { exists, table } = await addressExist(address);\n\t\treturn exists;\n\t}\n\n\tasync function handleImport(accountName: string, alias: string, prvKey: string) {\n\t\tif (browserSvelte) {\n\t\t\tif (!prvKey.trim()) {\n\t\t\t\terror = 'Please enter a valid private key.';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!accountName.trim()) {\n\t\t\t\terror = 'Please enter a valid account name.';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// EVM private key\n\t\t\tif (prvKey.startsWith('0x')) {\n\t\t\t\tprvKey = prvKey.substring(2);\n\t\t\t}\n\n\t\t\tif (await checkIfAccountExists(accountName, await getWallet(prvKey).getAddress(), alias)) {\n\t\t\t\terror =\n\t\t\t\t\t'Account already exists. Please enter a different account name, alias, or private key.';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tshowConfetti = true;\n\n\t\t\tif (!currentlySelected) currentlySelected = await getYakklCurrentlySelected();\n\t\t\tif (isEncryptedData(currentlySelected.data)) {\n\t\t\t\tawait decryptData(currentlySelected.data, yakklMiscStore).then((result) => {\n\t\t\t\t\tcurrentlySelected.data = result as CurrentlySelectedData;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet profile: Profile = (currentlySelected.data as CurrentlySelectedData).profile as Profile;\n\t\t\tconst yakklAccount = yakklAccountDefault;\n\n\t\t\tif (profile) {\n\t\t\t\tprofile = deepCopy((currentlySelected.data as CurrentlySelectedData).profile);\n\t\t\t} else {\n\t\t\t\tprofile = (await getProfile()) as Profile;\n\t\t\t\t(currentlySelected.data as CurrentlySelectedData).profile = profile;\n\t\t\t}\n\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tawait decryptData(profile.data, yakklMiscStore).then((result) => {\n\t\t\t\t\tprofile.data = result as ProfileData;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (profile.data !== undefined && (profile.data as ProfileData).meta) {\n\t\t\t\t(profile.data as ProfileData).meta = {}; // Clear meta data\n\t\t\t}\n\n\t\t\tcurrentlySelected.shortcuts.type = 'Mainnet'; // Force mainnet for provider\n\t\t\tcurrentlySelected.shortcuts.chainId = chainId; // Force mainnet for provider\n\n\t\t\t// Alchemy wallet\n\t\t\tconst walletNew = getWallet(prvKey);\n\n\t\t\tyakklAccount.id = currentlySelected.id;\n\t\t\tyakklAccount.persona = currentlySelected?.persona || DEFAULT_PERSONA;\n\t\t\tyakklAccount.blockchain = currentlySelected.shortcuts.network.blockchain;\n\n\t\t\t(yakklAccount.data as AccountData).privateKey = prvKey;\n\t\t\t(yakklAccount.data as AccountData).path = ''; // Imported accounts are not derived\n\t\t\tyakklAccount.quantity = 0n; // Default\n\t\t\tyakklAccount.address = await walletNew.getAddress();\n\t\t\tyakklAccount.name = accountName;\n\t\t\tyakklAccount.alias = alias;\n\t\t\tyakklAccount.description = 'Imported account using private key';\n\n\t\t\tawait wallet\n\t\t\t\t.getBalance(yakklAccount.address)\n\t\t\t\t.then((result) => {\n\t\t\t\t\tif (result) yakklAccount.quantity = result;\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tlog.error(`Import: error getting balance: ${e}`);\n\t\t\t\t});\n\n\t\t\tyakklAccount.index = -1;\n\t\t\tyakklAccount.accountType = AccountTypeCategory.IMPORTED;\n\t\t\tyakklAccount.primaryAccount = null; // Imported accounts do not have primary accounts\n\t\t\tyakklAccount.class = 'Default';\n\t\t\tyakklAccount.includeInPortfolio = true;\n\t\t\tyakklAccount.createDate = dateString();\n\t\t\tyakklAccount.updateDate = dateString();\n\t\t\tyakklAccount.version = VERSION;\n\n\t\t\tif (!isEncryptedData(yakklAccount.data)) {\n\t\t\t\tawait encryptData(yakklAccount.data, yakklMiscStore)\n\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\tyakklAccount.data = result;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tlog.error(`Import: error encrypting account data: ${e}`);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t(currentlySelected.data as CurrentlySelectedData).account = yakklAccount;\n\t\t\t(currentlySelected.data as CurrentlySelectedData).primaryAccount = null; // Imported accounts do not have a primary account\n\n\t\t\tlet yakklAccounts: YakklAccount[] = await getYakklAccounts();\n\n\t\t\tif (!Array.isArray(yakklAccounts)) {\n\t\t\t\tyakklAccounts = [];\n\t\t\t}\n\n\t\t\tif (profile.data) {\n\t\t\t\tif (\n\t\t\t\t\t(profile.data as ProfileData).importedAccounts === undefined ||\n\t\t\t\t\t(profile.data as ProfileData).importedAccounts === null ||\n\t\t\t\t\t!Array.isArray((profile.data as ProfileData).importedAccounts)\n\t\t\t\t) {\n\t\t\t\t\t(profile.data as ProfileData).importedAccounts = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t(profile.data as ProfileData).importedAccounts.push(yakklAccount);\n\n\t\t\tif (!isEncryptedData(profile.data)) {\n\t\t\t\tawait encryptData(profile.data, yakklMiscStore).then((result) => {\n\t\t\t\t\tprofile.data = result;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t(currentlySelected.data as CurrentlySelectedData).profile = profile;\n\n\t\t\tcurrentlySelected.shortcuts.quantity = !yakklAccount.quantity ? '0.0' : yakklAccount.quantity;\n\t\t\tcurrentlySelected.shortcuts.address = yakklAccount.address;\n\t\t\tcurrentlySelected.shortcuts.accountName = accountName;\n\t\t\tcurrentlySelected.shortcuts.alias = alias;\n\t\t\tcurrentlySelected.shortcuts.accountType = AccountTypeCategory.IMPORTED;\n\t\t\tcurrentlySelected.shortcuts.primary = null;\n\n\t\t\tcurrentlySelected.shortcuts.network.blockchain = yakklAccount.blockchain;\n\t\t\tcurrentlySelected.shortcuts.network.chainId = chainId; // Defaults to mainnet\n\t\t\tcurrentlySelected.shortcuts.network.name = 'Mainnet'; // Defaults to mainnet - should change to read from getNetworkName(chainId)\n\t\t\tcurrentlySelected.shortcuts.network.explorer = 'https://etherscan.io'; // Defaults to etherscan\n\t\t\tcurrentlySelected.shortcuts.network.type = NetworkType.MAINNET; // Defaults to mainnet\n\t\t\tcurrentlySelected.shortcuts.network.decimals = 18; // Defaults to 18\n\t\t\tcurrentlySelected.shortcuts.network.symbol = getSymbol(yakklAccount.blockchain);\n\n\t\t\tyakklAccounts.push(yakklAccount);\n\n\t\t\tawait setProfileStorage(profile);\n\t\t\tawait setYakklAccountsStorage(yakklAccounts);\n\t\t\tawait setYakklCurrentlySelectedStorage(currentlySelected);\n\n\t\t\tonComplete(yakklAccount);\n\n\t\t\tshow = false;\n\t\t}\n\t}\n\n\tfunction closeModal() {\n\t\tshow = false;\n\t}\n\n\tfunction resetForm() {\n\t\tupdateInitialValues({\n\t\t\taccountName: '',\n\t\t\talias: '',\n\t\t\tprvKey: ''\n\t\t});\n\t}\n</script>\n\n<!-- {#if showConfetti} -->\n<!-- <Confetti /> -->\n<!-- <div use:confetti></div> -->\n<!-- {/if} -->\n\n<div class=\"relative {className}\">\n\t<Modal bind:show title=\"Import Account\" onClose={closeModal} {onCancel} {className}>\n\t\t<div class=\"p-6 border-t border-gray-500 dark:border-gray-300\">\n\t\t\t<p class=\"text-sm text-red-500 dark:text-red-300 mb-4\">\n\t\t\t\tPlease be careful! <strong>This private key is important!</strong>\n\t\t\t\tA bad actor could take the content of your wallet if they have access to your private key!\n\t\t\t</p>\n\t\t\t<form onsubmit={handleSubmit} class=\"space-y-4\">\n\t\t\t\t<div>\n\t\t\t\t\t<label\n\t\t\t\t\t\tfor=\"accountName\"\n\t\t\t\t\t\tclass=\"block text-sm font-medium text-gray-700 dark:text-gray-200\">Account Name</label\n\t\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"accountName\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-500 dark:border-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-700 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.accountName}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{#if $errors.accountName}\n\t\t\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.accountName}</p>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"alias\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Alias (Optional)</label\n\t\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"alias\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-500 dark:border-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-700 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.alias}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"prvKey\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Private Key</label\n\t\t\t\t\t>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tid=\"prvKey\"\n\t\t\t\t\t\trows=\"3\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-500 dark:border-gray-50 shadow-sm focus:border-indigo-500 focus:ring-indigo-700 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.prvKey}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t></textarea>\n\t\t\t\t\t{#if $errors.prvKey}\n\t\t\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.prvKey}</p>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<div class=\"pt-5\">\n\t\t\t\t\t<div class=\"flex justify-end space-x-4\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={onCancel}>Cancel</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={resetForm}>Reset</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\t>Import</button\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{#if error}\n\t\t\t\t<p class=\"mt-4 text-sm text-red-600\">{error}</p>\n\t\t\t{/if}\n\t\t</div>\n\t</Modal>\n</div>\n","<!-- ImportWatch.svelte -->\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { VERSION } from '$lib/common/constants';\n\timport { createForm } from 'svelte-forms-lib';\n\timport * as yup from 'yup';\n\timport {\n\t\tsetProfileStorage,\n\t\tgetYakklWatchList,\n\t\tsetYakklWatchListStorage,\n\t\tsetYakklCurrentlySelectedStorage,\n\t\tgetYakklCurrentlySelected,\n\t\tgetMiscStore,\n\t\tgetSettings\n\t} from '$lib/common/stores';\n\timport { encryptData, decryptData } from '$lib/common/encryption';\n\timport { deepCopy } from '$lib/utilities/utilities';\n\timport {\n\t\tisEncryptedData,\n\t\ttype CurrentlySelectedData,\n\t\ttype Profile,\n\t\ttype ProfileData,\n\t\ttype Settings,\n\t\ttype YakklCurrentlySelected,\n\t\ttype YakklWatch\n\t} from '$lib/common';\n\timport { dateString } from '$lib/common/datetime';\n\timport Modal from '$components/Modal.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tclassName?: string;\n\t\tonCancel?: () => void;\n\t\tonComplete?: (watch: YakklWatch) => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tclassName = 'z-[999]',\n\t\tonCancel = () => {},\n\t\tonComplete = () => {}\n\t}: Props = $props();\n\n\tlet currentlySelected: YakklCurrentlySelected;\n\tlet yakklMiscStore: string;\n\tlet yakklWatchListStore: YakklWatch[];\n\tlet yakklSettingsStore: Settings | null;\n\tlet error = $state('');\n\n\tonMount(async () => {\n\t\tcurrentlySelected = await getYakklCurrentlySelected();\n\t\tyakklMiscStore = getMiscStore();\n\t\tyakklWatchListStore = await getYakklWatchList();\n\t\tyakklSettingsStore = await getSettings();\n\t});\n\n\tconst { form, errors, handleChange, handleSubmit, updateInitialValues } = createForm({\n\t\tinitialValues: {\n\t\t\tblockchain: 'Ethereum',\n\t\t\taddress: '',\n\t\t\taddressName: '',\n\t\t\tincludeInPortfolio: false,\n\t\t\taddressAlias: '',\n\t\t\turl: ''\n\t\t},\n\t\tvalidationSchema: yup.object().shape({\n\t\t\tblockchain: yup.string().required('Please enter the crypto account network (watch-only)'),\n\t\t\taddress: yup.string().required('Please enter the crypto account (watch-only)'),\n\t\t\taddressName: yup.string().required('Please enter the account name (e.g., address alias)'),\n\t\t\tincludeInPortfolio: yup\n\t\t\t\t.boolean()\n\t\t\t\t.required('Please select if you want to include this account in your portfolio totals'),\n\t\t\taddressAlias: yup.string().optional(),\n\t\t\turl: yup.string().optional()\n\t\t}),\n\t\tonSubmit: async (data) => {\n\t\t\ttry {\n\t\t\t\tawait handleAddWatch(data);\n\t\t\t} catch (e) {\n\t\t\t\terror = `Error adding watch-only account: ${e}`;\n\t\t\t}\n\t\t}\n\t});\n\n\tasync function handleAddWatch(data: any) {\n\t\tlet watchList: YakklWatch[] = [];\n\n\t\tif (isEncryptedData(currentlySelected.data)) {\n\t\t\tawait decryptData(currentlySelected.data, yakklMiscStore).then((result) => {\n\t\t\t\tcurrentlySelected.data = result as CurrentlySelectedData;\n\t\t\t});\n\t\t}\n\n\t\tlet profile: Profile = deepCopy((currentlySelected.data as CurrentlySelectedData).profile);\n\t\tif (isEncryptedData(profile.data)) {\n\t\t\tawait decryptData(profile.data, yakklMiscStore).then((result) => {\n\t\t\t\tprofile.data = result as ProfileData;\n\t\t\t});\n\t\t}\n\n\t\tif ((profile.data as ProfileData).watchList.length > 0) {\n\t\t\tif (\n\t\t\t\t(profile.data as ProfileData).watchList.find(\n\t\t\t\t\t(watch: YakklWatch) =>\n\t\t\t\t\t\twatch.address === data.address && watch.blockchain === data.blockchain\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\terror = 'This account already exists for the given profile.';\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst currentDate: string = dateString();\n\n\t\tconst watch: YakklWatch = {\n\t\t\tid: profile.id,\n\t\t\tblockchain: data.blockchain,\n\t\t\tname: data.addressName,\n\t\t\ttags: [],\n\t\t\tquantity: 0n,\n\t\t\tincludeInPortfolio: data.includeInPortfolio,\n\t\t\texplorer: data.url,\n\t\t\taddress: data.address,\n\t\t\taddressAlias: data.addressAlias,\n\t\t\tversion: VERSION,\n\t\t\tcreateDate: currentDate,\n\t\t\tupdateDate: currentDate\n\t\t};\n\n\t\t(profile.data as ProfileData).watchList.push(watch);\n\n\t\tawait encryptData(profile.data, yakklMiscStore).then(async (result) => {\n\t\t\tprofile.data = result;\n\t\t\tawait setProfileStorage(profile);\n\t\t});\n\n\t\t(currentlySelected.data as CurrentlySelectedData).profile = deepCopy(profile);\n\n\t\tawait setYakklCurrentlySelectedStorage(currentlySelected);\n\n\t\twatchList = await getYakklWatchList();\n\n\t\tif (watchList?.length > 0) {\n\t\t\tif (\n\t\t\t\twatchList.find(\n\t\t\t\t\t(account) => account.address === data.address && account.blockchain === data.blockchain\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\terror = 'This account already exists.';\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\twatchList.push({\n\t\t\tid: profile.id,\n\t\t\tname: data.addressName,\n\t\t\ttags: [],\n\t\t\tquantity: '0.0',\n\t\t\tincludeInPortfolio: data.includeInPortfolio,\n\t\t\texplorer: data.url,\n\t\t\taddress: data.address,\n\t\t\taddressAlias: data.addressAlias,\n\t\t\tblockchain: data.blockchain,\n\t\t\tversion: yakklSettingsStore !== null ? yakklSettingsStore.version : VERSION,\n\t\t\tcreateDate: currentDate,\n\t\t\tupdateDate: currentDate\n\t\t});\n\n\t\tawait setYakklWatchListStorage(watchList);\n\n\t\tonComplete(watch);\n\n\t\tresetForm();\n\t\tshow = false;\n\t}\n\n\tfunction closeModal() {\n\t\tonCancel();\n\t\tresetForm();\n\t\tshow = false;\n\t}\n\n\tfunction resetForm() {\n\t\tupdateInitialValues({\n\t\t\tblockchain: 'Ethereum',\n\t\t\taddress: '',\n\t\t\taddressName: '',\n\t\t\tincludeInPortfolio: false,\n\t\t\taddressAlias: '',\n\t\t\turl: ''\n\t\t});\n\t}\n</script>\n\n<div class=\"relative {className}\">\n\t<Modal bind:show title=\"Add Watch-Only Address\" onClose={closeModal}>\n\t\t<div class=\"p-6\">\n\t\t\t<p class=\"text-sm text-green-500 mb-4\">\n\t\t\t\tThis is a <strong>WATCH - ONLY address</strong>. This means that you will not be able to\n\t\t\t\tperform any transactions with this specific address in YAKKL. You can\n\t\t\t\t<strong>Import</strong>\n\t\t\t\tthis address if you have your private key using the Import option. This `watch-only` address\n\t\t\t\tallows you to keep track of <strong>ALL</strong> of your crypto in one wallet and have a complete\n\t\t\t\tportfolio view. For example, if you have an account with a centralized exchange like Coinbase,\n\t\t\t\tKraken, Binance, etc. You can also use this feature to keep track of addresses belonging to others\n\t\t\t\t(e.g, `whales`, `market makers`) and be alerted on activities (useful for staying aware of potential\n\t\t\t\tmarket moves).\n\t\t\t</p>\n\t\t\t<form onsubmit={handleSubmit} class=\"space-y-4\">\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"blockchain\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Blockchain</label\n\t\t\t\t\t>\n\t\t\t\t\t<select\n\t\t\t\t\t\tid=\"blockchain\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.blockchain}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"Ethereum\">Ethereum</option>\n\t\t\t\t\t\t<option value=\"Polygon\">Polygon</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"address\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Address</label\n\t\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"address\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.address}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{#if $errors.address}\n\t\t\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.address}</p>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label\n\t\t\t\t\t\tfor=\"addressName\"\n\t\t\t\t\t\tclass=\"block text-sm font-medium text-gray-700 dark:text-gray-200\">Address Name</label\n\t\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"addressName\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.addressName}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{#if $errors.addressName}\n\t\t\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.addressName}</p>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tid=\"includeInPortfolio\"\n\t\t\t\t\t\tclass=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n\t\t\t\t\t\tbind:checked={$form.includeInPortfolio}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\tfor=\"includeInPortfolio\"\n\t\t\t\t\t\tclass=\"ml-2 block text-sm text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Include this account in your portfolio totals?</label\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label\n\t\t\t\t\t\tfor=\"addressAlias\"\n\t\t\t\t\t\tclass=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Address Alias (optional)</label\n\t\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"addressAlias\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.addressAlias}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"url\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n\t\t\t\t\t\t>Explorer URL - checking address data (optional)</label\n\t\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"url\"\n\t\t\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n\t\t\t\t\t\tbind:value={$form.url}\n\t\t\t\t\t\tonchange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"pt-5\">\n\t\t\t\t\t<div class=\"flex justify-end space-x-4\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={closeModal}>Cancel</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={resetForm}>Reset</button\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\t>Save</button\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{#if error}\n\t\t\t\t<p class=\"mt-4 text-sm text-red-600\">{error}</p>\n\t\t\t{/if}\n\t\t</div>\n\t</Modal>\n</div>\n"],"names":["className","showLabel","$$props","wallet","currentlySelected","yakklMiscStore","chainId","error","show","onComplete","onCancel","form","errors","createForm","initialValues","accountName","alias","prvKey","validationSchema","yup","object","shape","string","required","onSubmit","async","data","handleImport","e","log","checkIfAccountExists","name","address","yakklAccounts","getYakklAccounts","result","find","x","exists","table","addressExist","browserSvelte","trim","startsWith","substring","getWallet","getAddress","getYakklCurrentlySelected","isEncryptedData","decryptData","then","profile","yakklAccount","yakklAccountDefault","deepCopy","getProfile","meta","shortcuts","type","walletNew","id","yakklAccount$1","persona","DEFAULT_PERSONA","blockchain","network","privateKey","path","quantity","description","getBalance","catch","index","accountType","AccountTypeCategory","IMPORTED","primaryAccount","class","includeInPortfolio","createDate","dateString","updateDate","version","VERSION","encryptData","account","Array","isArray","importedAccounts","push","primary","explorer","NetworkType","MAINNET","decimals","symbol","getSymbol","setProfileStorage","setYakklAccountsStorage","setYakklCurrentlySelectedStorage","closeModal","yakklSettingsStore","updateInitialValues","addressName","addressAlias","url","boolean","optional","handleAddWatch","watchList","length","watch","currentDate","tags","getYakklWatchList","setYakklWatchListStorage","resetForm"],"mappings":"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"}