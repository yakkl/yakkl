import"./utils.js";import"clipboard";import{$ as encodeJSON,a0 as TIMELINES,a1 as YAKKL_FEE_BASIS_POINTS_DIVISOR}from"./encryption.js";import{l as log}from"./Logger.js";import{b as browserSvelte,a as browser_ext}from"./environment.js";import{ethers}from"ethers-v6";import{Utils}from"alchemy-sdk";import{UnifiedTimerManager}from"./UnifiedTimerManager.js";const map={AD:"EUR",AE:"AED",AF:"AFN",AG:"XCD",AI:"XCD",AL:"ALL",AM:"AMD",AO:"AOA",AR:"ARS",AS:"USD",AT:"EUR",AU:"AUD",AW:"AWG",AX:"EUR",AZ:"AZN",BA:"BAM",BB:"BBD",BD:"BDT",BE:"EUR",BF:"XOF",BG:"BGN",BH:"BHD",BI:"BIF",BJ:"XOF",BL:"EUR",BM:"BMD",BN:"BND",BO:"BOB",BQ:"USD",BR:"BRL",BS:"BSD",BT:"BTN",BV:"NOK",BW:"BWP",BY:"BYN",BZ:"BZD",CA:"CAD",CC:"AUD",CD:"CDF",CF:"XAF",CG:"XAF",CH:"CHF",CI:"XOF",CK:"NZD",CL:"CLP",CM:"XAF",CN:"CNY",CO:"COP",CR:"CRC",CU:"CUP",CV:"CVE",CW:"ANG",CX:"AUD",CY:"EUR",CZ:"CZK",DE:"EUR",DJ:"DJF",DK:"DKK",DM:"XCD",DO:"DOP",DZ:"DZD",EC:"USD",EE:"EUR",EG:"EGP",EH:"MAD",ER:"ERN",ES:"EUR",ET:"ETB",FI:"EUR",FJ:"FJD",FK:"FKP",FM:"USD",FO:"DKK",FR:"EUR",GA:"XAF",GB:"GBP",GD:"XCD",GE:"GEL",GF:"EUR",GG:"GBP",GH:"GHS",GI:"GIP",GL:"DKK",GM:"GMD",GN:"GNF",GP:"EUR",GQ:"XAF",GR:"EUR",GS:"GBP",GT:"GTQ",GU:"USD",GW:"XOF",GY:"GYD",HK:"HKD",HM:"AUD",HN:"HNL",HR:"HRK",HT:"HTG",HU:"HUF",ID:"IDR",IE:"EUR",IL:"ILS",IM:"GBP",IN:"INR",IO:"USD",IQ:"IQD",IR:"IRR",IS:"ISK",IT:"EUR",JE:"GBP",JM:"JMD",JO:"JOD",JP:"JPY",KE:"KES",KG:"KGS",KH:"KHR",KI:"AUD",KM:"KMF",KN:"XCD",KP:"KPW",KR:"KRW",KW:"KWD",KY:"KYD",KZ:"KZT",LA:"LAK",LB:"LBP",LC:"XCD",LI:"CHF",LK:"LKR",LR:"LRD",LS:"LSL",LT:"EUR",LU:"EUR",LV:"EUR",LY:"LYD",MA:"MAD",MC:"EUR",MD:"MDL",ME:"EUR",MF:"EUR",MG:"MGA",MH:"USD",MK:"MKD",ML:"XOF",MM:"MMK",MN:"MNT",MO:"MOP",MP:"USD",MQ:"EUR",MR:"MRO",MS:"XCD",MT:"EUR",MU:"MUR",MV:"MVR",MW:"MWK",MX:"MXN",MY:"MYR",MZ:"MZN",NA:"NAD",NC:"XPF",NE:"XOF",NF:"AUD",NG:"NGN",NI:"NIO",NL:"EUR",NO:"NOK",NP:"NPR",NR:"AUD",NU:"NZD",NZ:"NZD",OM:"OMR",PA:"PAB",PE:"PEN",PF:"XPF",PG:"PGK",PH:"PHP",PK:"PKR",PL:"PLN",PM:"EUR",PN:"NZD",PR:"USD",PS:"ILS",PT:"EUR",PW:"USD",PY:"PYG",QA:"QAR",RE:"EUR",RO:"RON",RS:"RSD",RU:"RUB",RW:"RWF",SA:"SAR",SB:"SBD",SC:"SCR",SD:"SDG",SE:"SEK",SG:"SGD",SH:"SHP",SI:"EUR",SJ:"NOK",SK:"EUR",SL:"SLL",SM:"EUR",SN:"XOF",SO:"SOS",SR:"SRD",ST:"STD",SV:"SVC",SX:"ANG",SY:"SYP",SZ:"SZL",TC:"USD",TD:"XAF",TF:"EUR",TG:"XOF",TH:"THB",TJ:"TJS",TK:"NZD",TL:"USD",TM:"TMT",TN:"TND",TO:"TOP",TR:"TRY",TT:"TTD",TV:"AUD",TW:"TWD",TZ:"TZS",UA:"UAH",UG:"UGX",UM:"USD",US:"USD",UY:"UYU",UZ:"UZS",VA:"EUR",VC:"XCD",VE:"VEF",VG:"USD",VI:"USD",VN:"VND",VU:"VUV",WF:"XPF",WS:"WST",YE:"YER",YT:"EUR",ZA:"ZAR",ZM:"ZMW",ZW:"ZWL"};function getTokenChange(changeArray,timeline){if(!changeArray){return null}if(!TIMELINES.includes(timeline)){throw new Error(`Invalid timeline: ${timeline}`)}const foundChange=changeArray.find(change=>change.timeline===timeline);return foundChange?foundChange.percentChange:null}function calculateFeeAmount(tokenAmount,feeBasisPoints){const feeBasisPointsInt=BigInt(Math.round(feeBasisPoints*100));const feeAmount=tokenAmount*feeBasisPointsInt/BigInt(YAKKL_FEE_BASIS_POINTS_DIVISOR*100);return feeAmount}function formatFeeToUSD(feeAmount,tokenDecimals,marketPrice){const normalizedFeeAmount=Number(feeAmount)/Math.pow(10,tokenDecimals);const feeValueUSD=normalizedFeeAmount*marketPrice;return feeValueUSD.toLocaleString("en-US",{style:"currency",currency:"USD"})}function formatQuantity(amount,decimals){if(amount===0n)return"0";const formattedValue=ethers.formatUnits(amount,decimals);const[integerPart,decimalPart]=formattedValue.split(".");if(!decimalPart)return integerPart;const trimmedDecimal=decimalPart.replace(/0+$/,"");return trimmedDecimal?`${integerPart}.${trimmedDecimal}`:integerPart}function formatPrice(price){try{const formattedPrice=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2,maximumFractionDigits:2}).format(price);return formattedPrice}catch(error){log.error("formatPrice - SwapTokenPrice and price to format:",false,error,price);return price.toString()}}function incrementProperty(obj,property,incrementValue=1,maxValue=-1){incrementValue=Math.abs(incrementValue);if(typeof obj[property]==="number"){let newValue=(obj[property]??0)+incrementValue;if(maxValue!==-1&&newValue>maxValue){newValue=maxValue}obj[property]=newValue}else{obj[property]=incrementValue}}const timerManager=UnifiedTimerManager.getInstance();function blockWindowResize(width,height){window.addEventListener("resize",function(){timerManager.stopTimeout("resize-debounce");timerManager.removeTimeout("resize-debounce");timerManager.addTimeout("resize-debounce",()=>{console.log("ðŸ”² Resizing window");window.resizeTo(width,height)},500);timerManager.startTimeout("resize-debounce")})}function getChainId(type){let chainId=1;switch(type.toLowerCase()){case"mainnet":chainId=1;break;case"sepolia":chainId=11155111;break}return chainId}function deepCopy(obj){if(!obj)return null;return JSON.parse(encodeJSON(obj))}function formatValue(blockchain,value){if(blockchain.toLowerCase()==="ethereum"){return formatEther(value)}return value}function formatEther(wei){if(wei){return Utils.formatEther(wei)}else{return"0.0"}}function getSymbol(blockchain){let symbol="";try{symbol="ETH"}catch(e){log.error(e)}return symbol}const getCurrencySymbol=(locale,currency)=>(0).toLocaleString(locale,{style:"currency",currency:currency,minimumFractionDigits:0,maximumFractionDigits:0}).replace(/\d/g,"").trim();function truncate(val,len=20,suffix="..."){if(val.length>len){return val.substring(0,len)+suffix}return val}function splitWords(str,delimiter=" "){return str.split(delimiter)}async function setIconLock(){try{if(browserSvelte){await browser_ext.action.setIcon({path:{16:"/images/logoBullLock16x16.png",32:"/images/logoBullLock32x32.png",48:"/images/logoBullLock48x48.png",128:"/images/logoBullLock128x128.png"}})}}catch(e){log.error(e)}}async function setIconUnlock(){try{if(browserSvelte){await browser_ext.action.setIcon({path:{16:"/images/logoBull16x16.png",32:"/images/logoBull32x32.png",48:"/images/logoBull48x48.png",128:"/images/logoBull128x128.png"}})}}catch(e){log.error(e)}}async function setBadgeText(text=""){try{if(browserSvelte){await browser_ext.action.setBadgeText({text:text})}}catch(e){log.error(e)}}function getCurrencyCode(locale){try{const countryCode=getCountryCode(locale).toUpperCase();if(countryCode in map){return map[countryCode]}return null}catch(e){log.error(e);return null}}const getCountryCode=function(localeString){try{let components=localeString.split("_");if(components.length==2){return components.pop()}components=localeString.split("-");if(components.length==2){return components.pop()}return localeString}catch(e){log.error(e);return null}};export{blockWindowResize,calculateFeeAmount,deepCopy,formatEther,formatFeeToUSD,formatPrice,formatQuantity,formatValue,getChainId,getCurrencyCode,getCurrencySymbol,getSymbol,getTokenChange,incrementProperty,setBadgeText,setIconLock,setIconUnlock,splitWords,truncate};
//# sourceMappingURL=utilities.js.map
