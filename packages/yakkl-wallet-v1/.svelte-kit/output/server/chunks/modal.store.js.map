{"version":3,"file":"modal.store.js","sources":["../../../../src/routes/preview2/lib/components/AIHelpButton.svelte","../../../../src/routes/preview2/lib/services/base.service.ts","../../../../src/routes/preview2/lib/services/wallet.service.ts","../../../../src/routes/preview2/lib/stores/chain.store.ts","../../../../src/routes/preview2/lib/stores/account.store.ts","../../../../src/routes/preview2/lib/components/v1/Modal.svelte","../../../../src/routes/preview2/lib/stores/modal.store.ts"],"sourcesContent":["<script lang=\"ts\">\n  let { className = '' } = $props();\n</script>\n<a href=\"/preview2/ai-help\"\n  class={`yakkl-circle-button text-xl z-50 ${className}`}>\n  ðŸ¤–\n</a>\n","import { browser } from '$app/environment';\n// Mock safeClientSendMessage for Preview 2.0\nconst safeClientSendMessage = async (message: any) => {\n  // Mock implementation for development\n  return { success: false, error: 'Mock implementation' };\n};\nimport type { ServiceResponse, ErrorState } from '../types';\n\nexport abstract class BaseService {\n  protected async sendMessage<T>(message: any): Promise<ServiceResponse<T>> {\n    try {\n      if (!browser) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'Not in browser environment' }\n        };\n      }\n\n      const response = await safeClientSendMessage(message);\n      \n      if (response.error) {\n        return {\n          success: false,\n          error: {\n            hasError: true,\n            message: (response.error as any)?.message || 'Unknown error',\n            code: (response.error as any)?.code\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: (response as any).result\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          hasError: true,\n          message: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n\n  protected handleError(error: any): ErrorState {\n    return {\n      hasError: true,\n      message: error instanceof Error ? error.message : 'Unknown error',\n      code: error?.code\n    };\n  }\n}","import { BaseService } from './base.service';\nimport type { Preview2Account, Preview2Chain, ServiceResponse } from '../types';\nimport { PlanType } from '../types';\nimport type { YakklAccount, YakklCurrentlySelected } from '$lib/common/interfaces';\nimport { get } from 'svelte/store';\nimport { \n  yakklAccountsStore, \n  yakklCurrentlySelectedStore,\n  yakklSettingsStore\n} from '$lib/common/stores';\n\nexport class WalletService extends BaseService {\n  private static instance: WalletService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): WalletService {\n    if (!WalletService.instance) {\n      WalletService.instance = new WalletService();\n    }\n    return WalletService.instance;\n  }\n\n  async getAccounts(): Promise<ServiceResponse<Preview2Account[]>> {\n    try {\n      // Get from actual YAKKL stores\n      const accounts = get(yakklAccountsStore);\n      const settings = get(yakklSettingsStore);\n      \n      if (accounts && accounts.length > 0) {\n        // Transform to Preview2Account format\n        const preview2Accounts: Preview2Account[] = accounts.map((acc: YakklAccount) => ({\n          address: acc.address || '',\n          ens: acc.alias || null,\n          username: acc.name || '',\n          avatar: acc.avatar || null,\n          isActive: true,\n          balance: acc.quantity?.toString() || '0',\n          plan: (settings?.plan?.type || PlanType.Basic) as PlanType\n        }));\n        \n        return { success: true, data: preview2Accounts };\n      }\n\n      // If no accounts in store, request from background\n      const response = await this.sendMessage<string[]>({\n        method: 'eth_accounts'\n      });\n\n      if (response.success && response.data) {\n        const preview2Accounts: Preview2Account[] = response.data.map(address => ({\n          address,\n          ens: null as string | null,\n          username: '',\n          avatar: null as string | null,\n          isActive: false,\n          balance: '0',\n          plan: (settings?.plan?.type || PlanType.Basic) as PlanType\n        }));\n        \n        return { success: true, data: preview2Accounts };\n      }\n\n      return response as unknown as ServiceResponse<Preview2Account[]>;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getCurrentAccount(): Promise<ServiceResponse<Preview2Account | null>> {\n    try {\n      const currentlySelected = get(yakklCurrentlySelectedStore);\n      const settings = get(yakklSettingsStore);\n      \n      if (currentlySelected?.shortcuts?.address) {\n        const accounts = get(yakklAccountsStore);\n        const account = accounts?.find((acc: YakklAccount) => acc.address === currentlySelected.shortcuts.address);\n        \n        if (account) {\n          const preview2Account: Preview2Account = {\n            address: account.address || '',\n            ens: account.alias || null,\n            username: account.name || '',\n            avatar: account.avatar || null,\n            isActive: true,\n            balance: account.quantity?.toString() || '0',\n            plan: (settings?.plan?.type || PlanType.Basic) as PlanType\n          };\n          \n          return { success: true, data: preview2Account };\n        }\n      }\n\n      // Fallback to first account\n      const accountsResponse = await this.getAccounts();\n      if (accountsResponse.success && accountsResponse.data && accountsResponse.data.length > 0) {\n        return { success: true, data: accountsResponse.data[0] };\n      }\n\n      return { success: true, data: null };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getBalance(address: string): Promise<ServiceResponse<string>> {\n    try {\n      const response = await this.sendMessage<string>({\n        method: 'eth_getBalance',\n        params: [address, 'latest']\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async switchAccount(address: string): Promise<ServiceResponse<boolean>> {\n    try {\n      // Update the currently selected store\n      const currentlySelected = get(yakklCurrentlySelectedStore);\n      if (currentlySelected) {\n        // Update the address in shortcuts\n        yakklCurrentlySelectedStore.set({\n          ...currentlySelected,\n          shortcuts: {\n            ...currentlySelected.shortcuts,\n            address\n          }\n        });\n      }\n\n      return { success: true, data: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getChains(): Promise<ServiceResponse<Preview2Chain[]>> {\n    try {\n      // For now, return predefined chains\n      // TODO: Get from network configuration\n      const chains: Preview2Chain[] = [\n        {\n          key: 'eth-mainnet',\n          name: 'Ethereum',\n          network: 'Mainnet',\n          icon: '/images/eth.svg',\n          isTestnet: false,\n          chainId: 1,\n          rpcUrl: 'https://mainnet.infura.io/v3/YOUR_KEY'\n        },\n        {\n          key: 'eth-sepolia',\n          name: 'Ethereum',\n          network: 'Sepolia',\n          icon: '/images/eth.svg',\n          isTestnet: true,\n          chainId: 11155111,\n          rpcUrl: 'https://sepolia.infura.io/v3/YOUR_KEY'\n        },\n        {\n          key: 'polygon-mainnet',\n          name: 'Polygon',\n          network: 'Mainnet',\n          icon: '/images/polygon.svg',\n          isTestnet: false,\n          chainId: 137,\n          rpcUrl: 'https://polygon-rpc.com'\n        }\n      ];\n\n      return { success: true, data: chains };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async switchChain(chainId: number): Promise<ServiceResponse<boolean>> {\n    try {\n      const response = await this.sendMessage<boolean>({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${chainId.toString(16)}` }]\n      });\n\n      if (response.success) {\n        // Update the currently selected store\n        const currentlySelected = get(yakklCurrentlySelectedStore);\n        if (currentlySelected) {\n          yakklCurrentlySelectedStore.set({\n            ...currentlySelected,\n            shortcuts: {\n              ...currentlySelected.shortcuts,\n              chainId\n            }\n          });\n        }\n      }\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n}","import { writable, derived } from 'svelte/store';\nimport type { Preview2Chain, LoadingState, ErrorState } from '../types';\nimport { WalletService } from '../services/wallet.service';\n\ninterface ChainState {\n  chains: Preview2Chain[];\n  currentChain: Preview2Chain | null;\n  showTestnets: boolean;\n  loading: LoadingState;\n  error: ErrorState;\n}\n\nfunction createChainStore() {\n  const walletService = WalletService.getInstance();\n  \n  const { subscribe, set, update } = writable<ChainState>({\n    chains: [],\n    currentChain: null,\n    showTestnets: false,\n    loading: { isLoading: false },\n    error: { hasError: false }\n  });\n\n  return {\n    subscribe,\n    \n    async loadChains() {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Loading networks...' }\n      }));\n\n      const response = await walletService.getChains();\n      \n      if (response.success && response.data) {\n        update(state => ({\n          ...state,\n          chains: response.data!,\n          currentChain: response.data!.find(c => c.chainId === 1) || response.data![0],\n          loading: { isLoading: false },\n          error: { hasError: false }\n        }));\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Failed to load chains' }\n        }));\n      }\n    },\n\n    async switchChain(chainId: number) {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Switching network...' }\n      }));\n\n      const response = await walletService.switchChain(chainId);\n      \n      if (response.success) {\n        update(state => {\n          const chain = state.chains.find(c => c.chainId === chainId);\n          return {\n            ...state,\n            currentChain: chain || null,\n            loading: { isLoading: false },\n            error: { hasError: false }\n          };\n        });\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Failed to switch network' }\n        }));\n      }\n    },\n\n    setCurrentChain(chain: Preview2Chain) {\n      update(state => ({\n        ...state,\n        currentChain: chain\n      }));\n    },\n\n    toggleTestnets() {\n      update(state => ({\n        ...state,\n        showTestnets: !state.showTestnets\n      }));\n    },\n\n    reset() {\n      set({\n        chains: [],\n        currentChain: null,\n        showTestnets: false,\n        loading: { isLoading: false },\n        error: { hasError: false }\n      });\n    }\n  };\n}\n\nexport const chainStore = createChainStore();\n\n// Derived stores\nexport const currentChain = derived(\n  chainStore,\n  $store => $store.currentChain\n);\n\nexport const visibleChains = derived(\n  chainStore,\n  $store => $store.showTestnets \n    ? $store.chains \n    : $store.chains.filter(chain => !chain.isTestnet)\n);\n\nexport const isLoadingChains = derived(\n  chainStore,\n  $store => $store.loading.isLoading\n);","import { writable, derived } from 'svelte/store';\nimport type { Preview2Account, LoadingState, ErrorState } from '../types';\nimport { WalletService } from '../services/wallet.service';\n\ninterface AccountState {\n  accounts: Preview2Account[];\n  currentAccount: Preview2Account | null;\n  loading: LoadingState;\n  error: ErrorState;\n}\n\nfunction createAccountStore() {\n  const walletService = WalletService.getInstance();\n  \n  const { subscribe, set, update } = writable<AccountState>({\n    accounts: [],\n    currentAccount: null,\n    loading: { isLoading: false },\n    error: { hasError: false }\n  });\n\n  return {\n    subscribe,\n    \n    async loadAccounts() {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Loading accounts...' }\n      }));\n\n      const response = await walletService.getAccounts();\n      \n      if (response.success && response.data) {\n        update(state => ({\n          ...state,\n          accounts: response.data!,\n          loading: { isLoading: false },\n          error: { hasError: false }\n        }));\n        \n        // Load current account if not set\n        const currentResponse = await walletService.getCurrentAccount();\n        if (currentResponse.success && currentResponse.data) {\n          update(state => ({\n            ...state,\n            currentAccount: currentResponse.data!\n          }));\n        }\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Failed to load accounts' }\n        }));\n      }\n    },\n\n    async switchAccount(address: string) {\n      const response = await walletService.switchAccount(address);\n      \n      if (response.success) {\n        update(state => {\n          const account = state.accounts.find(acc => acc.address === address);\n          return {\n            ...state,\n            currentAccount: account || null\n          };\n        });\n      }\n    },\n\n    setCurrentAccount(account: Preview2Account) {\n      update(state => ({\n        ...state,\n        currentAccount: account\n      }));\n    },\n\n    reset() {\n      set({\n        accounts: [],\n        currentAccount: null,\n        loading: { isLoading: false },\n        error: { hasError: false }\n      });\n    }\n  };\n}\n\nexport const accountStore = createAccountStore();\n\n// Derived stores for easy access\nexport const currentAccount = derived(\n  accountStore,\n  $store => $store.currentAccount\n);\n\nexport const accounts = derived(\n  accountStore,\n  $store => $store.accounts\n);\n\nexport const isLoadingAccounts = derived(\n  accountStore,\n  $store => $store.loading.isLoading\n);","<script lang=\"ts\">\n\tinterface Props {\n\t\tshow?: boolean;\n\t\ttitle?: string;\n\t\tdescription?: string;\n\t\tclassName?: string;\n\t\tchildren?: import('svelte').Snippet;\n\t\tfooter?: import('svelte').Snippet;\n\t\tonCancel?: () => void;\n\t\tonClose?: () => void;\n\t\tpreventClose?: boolean; // Prevents closing via background click or X button\n\t}\n\n\t// Use `let` for props that are mutable\n\tlet {\n\t\tshow = $bindable(false), // Two-way binding\n\t\ttitle = '',\n\t\tdescription = '',\n\t\tclassName = '',\n\t\tchildren,\n\t\tfooter,\n\t\tonCancel = () => {\n\t\t\tshow = false;\n\t\t}, // Default handlers\n\t\tonClose = () => {\n\t\t\tshow = false;\n\t\t},\n\t\tpreventClose = false\n\t}: Props = $props();\n\n\t// Handle close with preventClose check\n\tfunction handleClose() {\n\t\tif (!preventClose) {\n\t\t\tonClose();\n\t\t}\n\t}\n</script>\n\n{#if show}\n\t<div class=\"fixed inset-0 flex items-center justify-center z-[699] {className}\" aria-modal=\"true\">\n\t\t<!-- svelte-ignore a11y_click_events_have_key_events -->\n\t\t<!-- svelte-ignore a11y_no_static_element_interactions -->\n\t\t<div class=\"absolute inset-0 bg-black opacity-50\" onclick={handleClose}></div>\n\n\t\t<!-- Modal container -->\n\t\t<div\n\t\t\tclass=\"bg-surface-light dark:bg-surface-dark text-primary-light dark:text-primary-dark rounded-lg shadow-lg w-full max-w-md mx-4 z-10 max-h-[80%] flex flex-col overflow-hidden\"\n\t\t>\n\t\t\t<!-- Modal header -->\n\t\t\t<div class=\"p-4 relative overflow-hidden\">\n\t\t\t\t{#if !preventClose}\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"absolute top-4 right-4 text-2xl font-bold hover:text-primary-light dark:hover:text-primary-dark focus:outline-none\"\n\t\t\t\t\t\tonclick={handleClose}\n\t\t\t\t\t>\n\t\t\t\t\t\t&times;\n\t\t\t\t\t</button>\n\t\t\t\t{/if}\n\t\t\t\t{#if description}\n\t\t\t\t\t<h2\n\t\t\t\t\t\tclass=\"text-2xl font-bold mb-4 text-primary-light dark:text-primary-dark truncate pr-8\"\n\t\t\t\t\t\t{title}\n\t\t\t\t\t>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</h2>\n\t\t\t\t\t<p class=\"text-sm mb-2 text-secondary-light dark:text-secondary-dark\">\n\t\t\t\t\t\t{description}\n\t\t\t\t\t</p>\n\t\t\t\t{:else}\n\t\t\t\t\t<h2\n\t\t\t\t\t\tclass=\"text-2xl font-bold mb-2 text-primary-light dark:text-primary-dark truncate pr-8\"\n\t\t\t\t\t\t{title}\n\t\t\t\t\t>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</h2>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t<!-- Modal body content -->\n\t\t\t<div class=\"flex-1 overflow-y-auto overflow-x-hidden px-4\">\n\t\t\t\t{@render children?.()}\n\t\t\t</div>\n\n\t\t\t<!-- Modal footer -->\n\t\t\t<div\n\t\t\t\tclass=\"px-6 py-3 rounded-b-lg border-t border-neutral-light dark:border-neutral-dark bg-surface-light dark:bg-surface-dark text-primary-light dark:text-primary-dark overflow-hidden\"\n\t\t\t>\n\t\t\t\t{@render footer?.()}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{/if}\n","/**\n * Modal state management for preview2\n * Tracks when modals are open to hide floating elements\n */\n\nimport { writable } from 'svelte/store';\n\ninterface ModalState {\n  isOpen: boolean;\n  modalType?: string;\n  modalId?: string;\n}\n\nfunction createModalStore() {\n  const { subscribe, set, update } = writable<ModalState>({\n    isOpen: false,\n    modalType: undefined,\n    modalId: undefined\n  });\n\n  return {\n    subscribe,\n    \n    openModal(type: string, id?: string) {\n      update(state => ({\n        ...state,\n        isOpen: true,\n        modalType: type,\n        modalId: id\n      }));\n    },\n    \n    closeModal() {\n      set({\n        isOpen: false,\n        modalType: undefined,\n        modalId: undefined\n      });\n    },\n    \n    isModalOpen: () => {\n      let isOpen = false;\n      subscribe(state => { isOpen = state.isOpen; })();\n      return isOpen;\n    }\n  };\n}\n\nexport const modalStore = createModalStore();\n\n// Derived store for easy checking\nexport const isModalOpen = writable(false);\n\nmodalStore.subscribe(state => {\n  isModalOpen.set(state.isOpen);\n});"],"names":["className","$$props","safeClientSendMessage","async","message","success","error","BaseService","sendMessage","browser","hasError","response","code","data","result","Error","handleError","WalletService","static","constructor","super","getInstance","instance","getAccounts","accounts","get","yakklAccountsStore","settings","yakklSettingsStore","length","preview2Accounts","map","acc","address","ens","alias","username","name","avatar","isActive","balance","quantity","toString","plan","type","PlanType","Basic","this","method","getCurrentAccount","currentlySelected","yakklCurrentlySelectedStore","shortcuts","account","find","preview2Account","accountsResponse","getBalance","params","switchAccount","set","getChains","chains","key","network","icon","isTestnet","chainId","rpcUrl","switchChain","createChainStore","walletService","subscribe","update","writable","currentChain","showTestnets","loading","isLoading","loadChains","state","c","chain","setCurrentChain","toggleTestnets","reset","chainStore","derived","$store","visibleChains","filter","createAccountStore","currentAccount","loadAccounts","currentResponse","setCurrentAccount","accountStore","show","title","description","children","footer","onCancel","onClose","preventClose","$$payload","createModalStore","isOpen","modalType","modalId","openModal","id","closeModal","isModalOpen","modalStore"],"mappings":"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"}