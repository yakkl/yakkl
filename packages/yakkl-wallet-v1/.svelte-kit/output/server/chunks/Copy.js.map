{"version":3,"file":"Copy.js","sources":["../../../../src/lib/components/AccountForm.svelte","../../../../src/lib/components/BalanceIndicator.svelte","../../../../src/lib/components/SubAccountIndicator.svelte","../../../../src/lib/components/EnhancedDeleteConfirmation.svelte","../../../../src/lib/components/AccountListing.svelte","../../../../src/lib/components/Accounts.svelte","../../../../src/lib/components/Copy.svelte"],"sourcesContent":["<!-- AccountForm.svelte -->\n<script lang=\"ts\">\n\timport { createForm } from 'svelte-forms-lib';\n\timport { ClipboardIcon } from 'svelte-feather-icons';\n\timport * as yup from 'yup';\n\timport type { YakklAccount } from '$lib/common';\n\timport Modal from './Modal.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\taccount?: YakklAccount | null;\n\t\tonSubmit?: (account: YakklAccount) => void;\n\t}\n\n\tlet { show = $bindable(false), account = null, onSubmit = () => {} }: Props = $props();\n\n\t// Not using onCancel here but letting it fall through to the Modal component since we don't need to do anything special\n\t// export let onCancel: () => void = () => {show = false};\n\n\tconst { form, errors, handleChange, handleSubmit, updateInitialValues } = createForm({\n\t\tinitialValues: {\n\t\t\tname: '',\n\t\t\talias: '',\n\t\t\tdescription: ''\n\t\t},\n\t\tvalidationSchema: yup.object().shape({\n\t\t\tname: yup.string().required('Please enter an account name'),\n\t\t\talias: yup.string().optional(),\n\t\t\tdescription: yup.string().optional()\n\t\t}),\n\t\tonSubmit: (values) => {\n\t\t\tif (account) {\n\t\t\t\tconst updatedAccount: YakklAccount = {\n\t\t\t\t\t...account,\n\t\t\t\t\tname: values.name,\n\t\t\t\t\talias: values.alias,\n\t\t\t\t\tdescription: values.description\n\t\t\t\t};\n\t\t\t\tonSubmit(updatedAccount);\n\t\t\t}\n\t\t\tshow = false;\n\t\t}\n\t});\n\n\tfunction resetForm() {\n\t\tupdateInitialValues({\n\t\t\tname: '',\n\t\t\talias: '',\n\t\t\tdescription: ''\n\t\t});\n\t}\n\n\tfunction copyAddress(address: string) {\n\t\tnavigator.clipboard.writeText(address);\n\t}\n\n\t$effect(() => {\n\t\tif (account) {\n\t\t\tupdateInitialValues({\n\t\t\t\tname: account.name,\n\t\t\t\talias: account.alias || '',\n\t\t\t\tdescription: account.description || ''\n\t\t\t});\n\t\t} else {\n\t\t\tresetForm();\n\t\t}\n\t});\n</script>\n\n<Modal bind:show title={account ? 'Edit Account' : 'Add Account'}>\n\t<form onsubmit={handleSubmit} class=\"space-y-4 p-6\">\n\t\t<div>\n\t\t\t<!-- svelte-ignore a11y_label_has_associated_control -->\n\t\t\t<label class=\"block text-sm font-medium text-gray-700\">Address</label>\n\t\t\t<div class=\"mt-1 flex items-center\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclass=\"flex-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm text-gray-800 bg-gray-100 cursor-not-allowed\"\n\t\t\t\t\tvalue={account?.address || ''}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclass=\"ml-2 inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n\t\t\t\t\tonclick={() => copyAddress(account?.address || '')}\n\t\t\t\t>\n\t\t\t\t\t<ClipboardIcon class=\"h-4 w-4\" />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label for=\"name\" class=\"block text-sm font-medium text-gray-700\">Name</label>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tid=\"name\"\n\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm text-gray-800\"\n\t\t\t\tbind:value={$form.name}\n\t\t\t\tonchange={handleChange}\n\t\t\t/>\n\t\t\t{#if $errors.name}\n\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.name}</p>\n\t\t\t{/if}\n\t\t</div>\n\t\t<div>\n\t\t\t<label for=\"alias\" class=\"block text-sm font-medium text-gray-700\">Alias</label>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tid=\"alias\"\n\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm text-gray-800\"\n\t\t\t\tbind:value={$form.alias}\n\t\t\t\tonchange={handleChange}\n\t\t\t/>\n\t\t\t{#if $errors.alias}\n\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.alias}</p>\n\t\t\t{/if}\n\t\t</div>\n\t\t<div>\n\t\t\t<label for=\"description\" class=\"block text-sm font-medium text-gray-700\">Description</label>\n\t\t\t<textarea\n\t\t\t\tid=\"description\"\n\t\t\t\trows=\"3\"\n\t\t\t\tclass=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm text-gray-800\"\n\t\t\t\tbind:value={$form.description}\n\t\t\t\tonchange={handleChange}\n\t\t\t></textarea>\n\t\t\t{#if $errors.description}\n\t\t\t\t<p class=\"mt-2 text-sm text-red-600\">{$errors.description}</p>\n\t\t\t{/if}\n\t\t</div>\n\t\t<div class=\"pt-5\">\n\t\t\t<div class=\"flex justify-end space-x-4\">\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\tonclick={() => (show = false)}>Cancel</button\n\t\t\t\t>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\tonclick={resetForm}>Reset</button\n\t\t\t\t>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tclass=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t>Save</button\n\t\t\t\t>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</Modal>\n","<!-- BalanceIndicator.svelte - Shows balance with loading/error states -->\n<script lang=\"ts\">\n\timport SkeletonBalance from './SkeletonBalance.svelte';\n\timport ProtectedValue from './ProtectedValue.svelte';\n\n\tinterface Props {\n\t\tisLoading?: boolean;\n\t\tloadingError?: string | null;\n\t\tisCached?: boolean;\n\t\tisStale?: boolean;\n\t\tlastUpdated?: Date | null;\n\t\tquantityFormatted?: string;\n\t\ttotalValueFormatted?: string;\n\t\tonRetry?: () => void;\n\t}\n\n\tlet {\n\t\tisLoading = false,\n\t\tloadingError = null,\n\t\tisCached = false,\n\t\tisStale = false,\n\t\tlastUpdated = null,\n\t\tquantityFormatted = '',\n\t\ttotalValueFormatted = '',\n\t\tonRetry = () => {}\n\t}: Props = $props();\n\n\tfunction formatLastUpdated(date: Date | null): string {\n\t\tif (!date) return '';\n\t\tconst now = new Date();\n\t\tconst diffMs = now.getTime() - date.getTime();\n\t\tconst diffMins = Math.floor(diffMs / (1000 * 60));\n\n\t\tif (diffMins < 1) return 'just now';\n\t\tif (diffMins < 60) return `${diffMins}m ago`;\n\n\t\tconst diffHours = Math.floor(diffMins / 60);\n\t\tif (diffHours < 24) return `${diffHours}h ago`;\n\n\t\tconst diffDays = Math.floor(diffHours / 24);\n\t\treturn `${diffDays}d ago`;\n\t}\n</script>\n\n<div class=\"mt-2 space-y-1\">\n\t<!-- Balance row -->\n\t<div class=\"flex items-center justify-between\">\n\t\t{#if isLoading && !isCached}\n\t\t\t<SkeletonBalance showLabel={false} className=\"h-4\" />\n\t\t{:else if loadingError}\n\t\t\t<div class=\"flex items-center space-x-1\">\n\t\t\t\t<span class=\"text-xs text-red-500\">Error loading</span>\n\t\t\t\t<button class=\"text-xs text-blue-500 hover:text-blue-700 underline\" onclick={onRetry}>\n\t\t\t\t\tRetry\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<span class=\"text-xs text-gray-400\">--</span>\n\t\t{:else}\n\t\t\t<div class=\"flex items-center space-x-1\">\n\t\t\t\t<span class=\"text-sm font-semibold text-gray-900\">\n\t\t\t\t\t<ProtectedValue value={`${quantityFormatted} ETH`} placeholder=\"******* ETH\" />\n\t\t\t\t</span>\n\t\t\t\t{#if isLoading}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"w-3 h-3 border border-blue-400 border-t-transparent rounded-full animate-spin\"\n\t\t\t\t\t></div>\n\t\t\t\t{:else if isStale}\n\t\t\t\t\t<div title=\"Data may be outdated\">\n\t\t\t\t\t\t<svg class=\"w-3 h-3 text-orange-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\t\td=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n\t\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t{:else if isCached}\n\t\t\t\t\t<div title=\"Cached data\">\n\t\t\t\t\t\t<svg class=\"w-3 h-3 text-green-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\t\td=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n\t\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t<span class=\"text-sm font-semibold text-gray-900\">\n\t\t\t\t<ProtectedValue value={totalValueFormatted} placeholder=\"*****\" />\n\t\t\t</span>\n\t\t{/if}\n\t</div>\n\n\t<!-- Last updated info (only show if we have timestamp) -->\n\t{#if lastUpdated && (isStale || isCached)}\n\t\t<div class=\"flex justify-end\">\n\t\t\t<span class=\"text-xs text-gray-400\" title=\"Last updated: {lastUpdated.toLocaleString()}\">\n\t\t\t\tUpdated {formatLastUpdated(lastUpdated)}\n\t\t\t</span>\n\t\t</div>\n\t{/if}\n</div>\n","<!-- SubAccountIndicator.svelte - Shows sub-account count for primary accounts -->\n<script lang=\"ts\">\n\timport type { YakklAccount } from '$lib/common';\n\timport { AccountTypeCategory } from '$lib/common/types';\n\n\tinterface Props {\n\t\tprimaryAccount: YakklAccount;\n\t\tallAccounts: YakklAccount[];\n\t\tclassName?: string;\n\t}\n\n\tlet { primaryAccount, allAccounts, className = '' }: Props = $props();\n\n\t// Calculate sub-accounts for this primary account\n\tconst subAccounts = $derived(() => {\n\t\tif (primaryAccount.accountType !== AccountTypeCategory.PRIMARY) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn allAccounts.filter(\n\t\t\t(account) =>\n\t\t\t\taccount.accountType === AccountTypeCategory.SUB &&\n\t\t\t\taccount.primaryAccount?.address === primaryAccount.address\n\t\t);\n\t});\n\n\tconst subAccountCount = $derived(subAccounts().length);\n</script>\n\n{#if subAccountCount > 0}\n\t<div class=\"flex items-center space-x-1 {className}\">\n\t\t<!-- Sub-account icon -->\n\t\t<div class=\"relative\">\n\t\t\t<svg class=\"w-4 h-4 text-blue-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t<path\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\td=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"\n\t\t\t\t/>\n\t\t\t</svg>\n\n\t\t\t<!-- Count badge -->\n\t\t\t<div\n\t\t\t\tclass=\"absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center font-bold\"\n\t\t\t>\n\t\t\t\t{subAccountCount}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Text indicator -->\n\t\t<span class=\"text-xs text-blue-600 font-medium\">\n\t\t\t{subAccountCount} sub-account{subAccountCount > 1 ? 's' : ''}\n\t\t</span>\n\t</div>\n{/if}\n","<!-- EnhancedDeleteConfirmation.svelte - Enhanced delete confirmation with account hierarchy -->\n<script lang=\"ts\">\n\timport type { YakklAccount } from '$lib/common';\n\timport { AccountTypeCategory } from '$lib/common/types';\n\timport Modal from './Modal.svelte';\n\timport SkeletonBalance from './SkeletonBalance.svelte';\n\n\tinterface AccountWithBalance {\n\t\taccount: YakklAccount;\n\t\tbalance: bigint;\n\t\tbalanceFormatted: string;\n\t\tvalueFormatted: string;\n\t\tisLoading: boolean;\n\t\terror: string | null;\n\t}\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\taccount?: YakklAccount | null;\n\t\tallAccounts?: YakklAccount[];\n\t\tonConfirm?: () => void;\n\t\tonCancel?: () => void;\n\t\tonLoadBalance?: (address: string) => Promise<bigint>;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\taccount = null,\n\t\tallAccounts = [],\n\t\tonConfirm = () => {},\n\t\tonCancel = () => {},\n\t\tonLoadBalance = async () => 0n\n\t}: Props = $props();\n\n\tlet accountsWithBalances: AccountWithBalance[] = $state([]);\n\tlet totalValue = $state(0);\n\tlet loading = $state(false);\n\n\t// Currency formatter\n\tconst currency = new Intl.NumberFormat('en-US', {\n\t\tstyle: 'currency',\n\t\tcurrency: 'USD',\n\t\tminimumFractionDigits: 2,\n\t\tmaximumFractionDigits: 2\n\t});\n\n\t// Get affected accounts (primary + its sub-accounts)\n\tfunction getAffectedAccounts(): YakklAccount[] {\n\t\tif (!account) return [];\n\n\t\tif (account.accountType === AccountTypeCategory.PRIMARY) {\n\t\t\tconst subAccounts = allAccounts.filter(\n\t\t\t\t(a) =>\n\t\t\t\t\ta.accountType === AccountTypeCategory.SUB && a.primaryAccount?.address === account.address\n\t\t\t);\n\t\t\treturn [account, ...subAccounts];\n\t\t}\n\n\t\treturn [account];\n\t}\n\n\t// Helper function to determine if an error should be shown to the user\n\tfunction shouldShowErrorToUser(error: any): boolean {\n\t\tconst errorMessage = error?.message || error?.toString() || '';\n\n\t\t// Network/API errors that should be handled silently\n\t\tconst networkErrors = [\n\t\t\t'missing response',\n\t\t\t'timeout',\n\t\t\t'TIMEOUT',\n\t\t\t'SERVER_ERROR',\n\t\t\t'NETWORK_ERROR',\n\t\t\t'Failed to fetch',\n\t\t\t'fetch',\n\t\t\t'Connection failed',\n\t\t\t'Request timeout',\n\t\t\t'eth_getBalance',\n\t\t\t'call revert exception',\n\t\t\t'alchemy.com',\n\t\t\t'infura.io',\n\t\t\t'requestBody',\n\t\t\t'serverError',\n\t\t\t'code=SERVER_ERROR',\n\t\t\t'version=web/',\n\t\t\t'JsonRpcError',\n\t\t\t'RPC Error',\n\t\t\t'getBalance',\n\t\t\t'Balance fetch',\n\t\t\t'Balance loading timeout'\n\t\t];\n\n\t\treturn !networkErrors.some((pattern) =>\n\t\t\terrorMessage.toLowerCase().includes(pattern.toLowerCase())\n\t\t);\n\t}\n\n\t// Load balances for all affected accounts\n\tasync function loadBalances(): Promise<void> {\n\t\tconst affectedAccounts = getAffectedAccounts();\n\t\tif (affectedAccounts.length === 0) {\n\t\t\tloading = false;\n\t\t\treturn;\n\t\t}\n\n\t\tloading = true;\n\n\t\t// Initialize accounts with loading state\n\t\taccountsWithBalances = affectedAccounts.map((acc) => ({\n\t\t\taccount: acc,\n\t\t\tbalance: 0n,\n\t\t\tbalanceFormatted: '0.000000',\n\t\t\tvalueFormatted: currency.format(0),\n\t\t\tisLoading: true,\n\t\t\terror: null as string | null\n\t\t}));\n\n\t\t// Load balances progressively with timeout\n\t\tconst balancePromises = accountsWithBalances.map(async (item, index) => {\n\t\t\ttry {\n\t\t\t\t// Add timeout to balance loading\n\t\t\t\tconst balancePromise = onLoadBalance(item.account.address);\n\t\t\t\tconst timeoutPromise = new Promise<bigint>((_, reject) => {\n\t\t\t\t\tsetTimeout(() => reject(new Error('Balance loading timeout')), 3000);\n\t\t\t\t});\n\n\t\t\t\tconst balance = await Promise.race([balancePromise, timeoutPromise]);\n\t\t\t\tconst balanceNum = Number(balance) / 1e18;\n\t\t\t\tconst balanceFormatted = balanceNum.toFixed(6);\n\t\t\t\t// Assuming ETH price around $3000 for demo - in real app, get from price store\n\t\t\t\tconst value = balanceNum * 3000;\n\t\t\t\tconst valueFormatted = currency.format(value);\n\n\t\t\t\taccountsWithBalances[index] = {\n\t\t\t\t\t...item,\n\t\t\t\t\tbalance,\n\t\t\t\t\tbalanceFormatted,\n\t\t\t\t\tvalueFormatted,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\terror: null\n\t\t\t\t};\n\n\t\t\t\t// Trigger reactivity\n\t\t\t\taccountsWithBalances = [...accountsWithBalances];\n\t\t\t} catch (error) {\n\t\t\t\t// Only log non-network errors, suppress network timeouts\n\t\t\t\tif (shouldShowErrorToUser(error)) {\n\t\t\t\t\tconsole.error('[EnhancedDeleteConfirmation] Balance loading error:', error);\n\t\t\t\t}\n\n\t\t\t\taccountsWithBalances[index] = {\n\t\t\t\t\t...item,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\terror: 'Unable to load'\n\t\t\t\t};\n\t\t\t\taccountsWithBalances = [...accountsWithBalances];\n\t\t\t}\n\t\t});\n\n\t\t// Wait for all promises with shorter overall timeout\n\t\ttry {\n\t\t\tawait Promise.race([\n\t\t\t\tPromise.all(balancePromises),\n\t\t\t\tnew Promise<void>((_, reject) => {\n\t\t\t\t\tsetTimeout(() => reject(new Error('Overall timeout')), 5000);\n\t\t\t\t})\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tconsole.warn(\n\t\t\t\t'[EnhancedDeleteConfirmation] Balance loading timed out, proceeding with available data'\n\t\t\t);\n\t\t}\n\n\t\t// Calculate total value\n\t\ttotalValue = accountsWithBalances.reduce((sum, item) => {\n\t\t\tif (!item.error && !item.isLoading) {\n\t\t\t\tconst value = (Number(item.balance) / 1e18) * 3000; // ETH price\n\t\t\t\treturn sum + value;\n\t\t\t}\n\t\t\treturn sum;\n\t\t}, 0);\n\n\t\t// Always set loading to false at the end\n\t\tloading = false;\n\t}\n\n\t// Reset state when modal closes\n\tfunction resetState(): void {\n\t\taccountsWithBalances = [];\n\t\ttotalValue = 0;\n\t\tloading = false;\n\t}\n\n\t// Effect to load balances when modal shows\n\t$effect(() => {\n\t\tif (show && account) {\n\t\t\tloadBalances();\n\t\t} else if (!show) {\n\t\t\t// Reset state when modal is closed\n\t\t\tresetState();\n\t\t}\n\t});\n\n\tfunction handleConfirm(): void {\n\t\tonConfirm();\n\t\tshow = false;\n\t}\n\n\tfunction handleCancel(): void {\n\t\tonCancel();\n\t\tshow = false;\n\t}\n\n\tfunction getAccountIcon(accountType: AccountTypeCategory): string {\n\t\tswitch (accountType) {\n\t\t\tcase AccountTypeCategory.PRIMARY:\n\t\t\t\treturn 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10';\n\t\t\tcase AccountTypeCategory.SUB:\n\t\t\t\treturn 'M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2';\n\t\t\tdefault:\n\t\t\t\treturn 'M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4';\n\t\t}\n\t}\n\n\tconst isPrimaryAccountWithSubs = $derived(() => {\n\t\treturn account?.accountType === AccountTypeCategory.PRIMARY && accountsWithBalances.length > 1;\n\t});\n</script>\n\n<Modal bind:show title=\"Delete Account Confirmation\" className=\"z-[900]\">\n\t<div class=\"p-6 space-y-4\">\n\t\t<!-- Warning header -->\n\t\t<div class=\"flex items-center space-x-3 p-4 bg-red-50 border border-red-200 rounded-lg\">\n\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t<svg class=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t<path\n\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\td=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-red-800\">\n\t\t\t\t\t{isPrimaryAccountWithSubs ? 'Delete Primary Account & Sub-Accounts' : 'Delete Account'}\n\t\t\t\t</h3>\n\t\t\t\t<p class=\"text-sm text-red-600\">\n\t\t\t\t\tThis action cannot be undone and will permanently delete the account{isPrimaryAccountWithSubs\n\t\t\t\t\t\t? 's'\n\t\t\t\t\t\t: ''}.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Account hierarchy display -->\n\t\t<div class=\"space-y-3\">\n\t\t\t<h4 class=\"font-medium text-gray-900\">\n\t\t\t\t{isPrimaryAccountWithSubs ? 'Accounts to be deleted:' : 'Account to be deleted:'}\n\t\t\t</h4>\n\n\t\t\t<div class=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n\t\t\t\t{#each accountsWithBalances as item, index}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"flex items-start space-x-3 {item.account.accountType === AccountTypeCategory.SUB\n\t\t\t\t\t\t\t? 'ml-6 border-l-2 border-blue-200 pl-4'\n\t\t\t\t\t\t\t: ''}\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<!-- Account icon -->\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass=\"flex-shrink-0 w-8 h-8 rounded-full {item.account.accountType ===\n\t\t\t\t\t\t\tAccountTypeCategory.PRIMARY\n\t\t\t\t\t\t\t\t? 'bg-purple-100'\n\t\t\t\t\t\t\t\t: 'bg-blue-100'} flex items-center justify-center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\tclass=\"w-4 h-4 {item.account.accountType === AccountTypeCategory.PRIMARY\n\t\t\t\t\t\t\t\t\t? 'text-purple-600'\n\t\t\t\t\t\t\t\t\t: 'text-blue-600'}\"\n\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\t\td={getAccountIcon(item.account.accountType)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<!-- Account details -->\n\t\t\t\t\t\t<div class=\"flex-1 min-w-0\">\n\t\t\t\t\t\t\t<div class=\"flex items-center justify-between\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<p class=\"text-sm font-medium text-gray-900\">\n\t\t\t\t\t\t\t\t\t\t{item.account.name}\n\t\t\t\t\t\t\t\t\t\t{#if item.account.accountType === AccountTypeCategory.SUB}\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"text-xs text-gray-500\">(Sub-account)</span>\n\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p class=\"text-xs text-gray-500 font-mono\">\n\t\t\t\t\t\t\t\t\t\t{item.account.address.slice(0, 6)}...{item.account.address.slice(-4)}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<!-- Balance display -->\n\t\t\t\t\t\t\t\t<div class=\"text-right\">\n\t\t\t\t\t\t\t\t\t{#if item.isLoading}\n\t\t\t\t\t\t\t\t\t\t<SkeletonBalance showLabel={false} className=\"w-16\" />\n\t\t\t\t\t\t\t\t\t{:else if item.error}\n\t\t\t\t\t\t\t\t\t\t<div class=\"text-xs text-red-500\">Error loading</div>\n\t\t\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t\t\t<div class=\"text-sm font-semibold text-gray-900\">\n\t\t\t\t\t\t\t\t\t\t\t{item.balanceFormatted} ETH\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"text-xs text-gray-600\">\n\t\t\t\t\t\t\t\t\t\t\t{item.valueFormatted}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t</div>\n\n\t\t\t<!-- Total value -->\n\t\t\t{#if !loading && totalValue > 0}\n\t\t\t\t<div class=\"border-t border-gray-200 pt-3\">\n\t\t\t\t\t<div class=\"flex justify-between items-center\">\n\t\t\t\t\t\t<span class=\"font-medium text-gray-900\">Total Value:</span>\n\t\t\t\t\t\t<span class=\"text-lg font-bold text-red-600\">\n\t\t\t\t\t\t\t{currency.format(totalValue)}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Warning message for accounts with balances -->\n\t\t{#if totalValue > 0 && !loading}\n\t\t\t<div class=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n\t\t\t\t<div class=\"flex items-start space-x-2\">\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclass=\"w-5 h-5 text-yellow-600 mt-0.5\"\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\td=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p class=\"text-sm font-medium text-yellow-800\">\n\t\t\t\t\t\t\tWarning: Accounts contain cryptocurrency\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p class=\"text-sm text-yellow-700 mt-1\">\n\t\t\t\t\t\t\tPlease transfer all funds to another account before deleting. You will lose access to\n\t\t\t\t\t\t\tthese funds permanently.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Action buttons -->\n\t\t<div class=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n\t\t\t\tonclick={handleCancel}\n\t\t\t>\n\t\t\t\tCancel\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n\t\t\t\tonclick={handleConfirm}\n\t\t\t\tdisabled={loading}\n\t\t\t>\n\t\t\t\t{loading ? 'Loading...' : `Delete Account${isPrimaryAccountWithSubs ? 's' : ''}`}\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</Modal>\n","<!-- AccountListing.svelte -->\n<script lang=\"ts\">\n\timport type { YakklAccount } from '$lib/common';\n\timport { onMount, onDestroy } from 'svelte';\n\timport {\n\t\tyakklAccountsStore,\n\t\tyakklCurrentlySelectedStore,\n\t\tyakklPricingStore,\n\t\tyakklPrimaryAccountsStore,\n\t\tyakklSettingsStore\n\t} from '$lib/common/stores';\n\timport AccountForm from './AccountForm.svelte';\n\timport Confirmation from './Confirmation.svelte';\n\timport BalanceIndicator from './BalanceIndicator.svelte';\n\timport RestrictedAccountDisplay from './RestrictedAccountDisplay.svelte';\n\timport SubAccountIndicator from './SubAccountIndicator.svelte';\n\timport EnhancedDeleteConfirmation from './EnhancedDeleteConfirmation.svelte';\n\timport { dateString } from '$lib/common/datetime';\n\timport { setYakklAccountsStorage, setYakklPrimaryAccountsStorage } from '$lib/common/stores';\n\timport { AccountTypeCategory } from '$lib/common/types';\n\timport EditControls from './EditControls.svelte';\n\timport WalletManager from '$lib/managers/WalletManager';\n\timport type { Wallet } from '$lib/managers/Wallet';\n\timport { log } from '$lib/managers/Logger';\n\timport {\n\t\tcollectAccountDataProgressive,\n\t\tcreateAccountDataWithRestrictions,\n\t\ttype AccountData\n\t} from '$lib/utilities/accountData';\n\timport { balanceCacheManager } from '$lib/managers/BalanceCacheManager';\n\n\tinterface Props {\n\t\taccounts?: YakklAccount[];\n\t\tonAccountSelect?: (account: YakklAccount) => void;\n\t\tonUpgrade?: () => void;\n\t}\n\n\tlet {\n\t\taccounts = $bindable([]),\n\t\tonAccountSelect = () => {},\n\t\tonUpgrade = () => {}\n\t}: Props = $props();\n\n\tlet editMode = $state(false);\n\tlet showDeleteModal = $state(false);\n\tlet showEnhancedDeleteModal = $state(false);\n\tlet selectedAccount: YakklAccount | null = $state(null);\n\tlet wallet: Wallet | null = $state(null);\n\tlet accountData: AccountData[] = $state([]);\n\tlet visibleAccounts: YakklAccount[] = $state([]);\n\tlet restrictedAccounts: YakklAccount[] = $state([]);\n\tlet isRestricted = $state(false);\n\tlet loadDataTimeout: number | null = null;\n\tlet isLoadingData = $state(false);\n\tlet isInitialized = $state(false);\n\tlet initializationTimeout: number | null = null;\n\tlet lastProcessedAccountsHash = $state('');\n\n\t// Function to handle progressive account data updates\n\tfunction handleAccountDataUpdate(data: AccountData[]): void {\n\t\taccountData = data;\n\t}\n\n\t// Function to retry balance loading for a specific account\n\tfunction retryBalance(accountAddress: string): void {\n\t\tif (!wallet) return;\n\n\t\tconst accountIndex = accountData.findIndex((data) => data.account.address === accountAddress);\n\t\tif (accountIndex === -1) return;\n\n\t\t// Clear any cached data for this address to force fresh fetch\n\t\tbalanceCacheManager.clearCachedBalance(accountAddress);\n\n\t\t// Reload all account data\n\t\tloadAccountData();\n\t}\n\n\t// Debounced function to load account data with progressive loading\n\tfunction loadAccountDataDebounced(): void {\n\t\t// Clear any pending timeout\n\t\tif (loadDataTimeout) {\n\t\t\tclearTimeout(loadDataTimeout);\n\t\t}\n\n\t\t// Skip if already loading or no data to load\n\t\tif (isLoadingData || !wallet || visibleAccounts.length === 0) {\n\t\t\tif (!wallet || visibleAccounts.length === 0) {\n\t\t\t\taccountData = [];\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Debounce API calls by 300ms to prevent rapid successive calls\n\t\tloadDataTimeout = setTimeout(() => {\n\t\t\tloadAccountData();\n\t\t}, 300) as unknown as number;\n\t}\n\n\t// Function to load account data with progressive loading\n\tfunction loadAccountData(): void {\n\t\tif (!wallet || visibleAccounts.length === 0) {\n\t\t\taccountData = [];\n\t\t\treturn;\n\t\t}\n\n\t\t// Prevent multiple simultaneous loads\n\t\tif (isLoadingData) {\n\t\t\tlog.debug('[AccountListing] Already loading data, skipping');\n\t\t\treturn;\n\t\t}\n\n\t\tisLoadingData = true;\n\n\t\tlog.info('[AccountListing] Starting progressive balance loading for accounts:', false, {\n\t\t\taccountCount: visibleAccounts.length,\n\t\t\taddresses: visibleAccounts.map((a) => a.address)\n\t\t});\n\n\t\t// Get initial data with cached balances\n\t\ttry {\n\t\t\taccountData = collectAccountDataProgressive(visibleAccounts, wallet, (data) => {\n\t\t\t\thandleAccountDataUpdate(data);\n\t\t\t\tisLoadingData = false; // Reset loading flag when complete\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlog.error('[AccountListing] Error loading account data:', false, error);\n\t\t\tisLoadingData = false;\n\t\t}\n\t}\n\n\t// Effect to handle accounts and membership restrictions\n\t$effect(() => {\n\t\t// Prevent processing the same accounts multiple times by using a hash\n\t\tif (accounts.length > 0 && $yakklSettingsStore) {\n\t\t\tconst currentAccountsHash = accounts.map(a => a.address).join(',');\n\t\t\t\n\t\t\tif (currentAccountsHash !== lastProcessedAccountsHash) {\n\t\t\t\tlastProcessedAccountsHash = currentAccountsHash;\n\t\t\t\t\n\t\t\t\tconst membershipLevel = $yakklSettingsStore.plan?.type || 'basic_member';\n\t\t\t\tconst restrictions = createAccountDataWithRestrictions(accounts, membershipLevel, 3);\n\n\t\t\t\tvisibleAccounts = restrictions.visibleAccounts;\n\t\t\t\trestrictedAccounts = restrictions.restrictedAccounts;\n\t\t\t\tisRestricted = restrictions.isRestricted;\n\n\t\t\t\tlog.info('[AccountListing] Account restrictions applied:', false, {\n\t\t\t\t\tmembershipLevel,\n\t\t\t\t\ttotalAccounts: accounts.length,\n\t\t\t\t\tvisibleAccounts: visibleAccounts.length,\n\t\t\t\t\trestrictedAccounts: restrictedAccounts.length,\n\t\t\t\t\tisRestricted\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t// Effect to handle pricing changes and reload data\n\t$effect(() => {\n\t\tif (!isInitialized || !wallet || !$yakklPricingStore || visibleAccounts.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Only reload if price changed significantly (increased threshold to reduce API calls)\n\t\tconst priceChange = Math.abs(\n\t\t\t($yakklPricingStore.price - $yakklPricingStore.prevPrice) / $yakklPricingStore.prevPrice\n\t\t);\n\t\tif (priceChange > 0.05) {\n\t\t\t// 5% price change threshold (increased from 1% to reduce API calls)\n\t\t\tlog.info('[AccountListing] Major price change detected, reloading account data');\n\t\t\tloadAccountDataDebounced();\n\t\t}\n\t});\n\n\t// Effect to load data when visible accounts or wallet changes\n\t$effect(() => {\n\t\tif (!isInitialized || !wallet || visibleAccounts.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tloadAccountDataDebounced();\n\t});\n\n\tonMount(() => {\n\t\tif (!accounts.length) {\n\t\t\taccounts = $yakklAccountsStore;\n\t\t}\n\t\twallet = WalletManager.getInstance(\n\t\t\t['Alchemy'],\n\t\t\t['Ethereum'],\n\t\t\t$yakklCurrentlySelectedStore!.shortcuts.chainId ?? 1,\n\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t);\n\n\t\t// Preload cache for better initial experience\n\t\tconst addresses = accounts.map((a) => a.address);\n\t\tconst preloaded = balanceCacheManager.preloadBalances(addresses);\n\t\tlog.info(`[AccountListing] Preloaded ${preloaded.size} balances from cache`);\n\n\t\t// Initialize reactive effects after a delay to prevent loops during load\n\t\tinitializationTimeout = setTimeout(() => {\n\t\t\tisInitialized = true;\n\t\t\tlog.debug('[AccountListing] Reactive effects initialized');\n\t\t}, 500) as unknown as number;\n\t});\n\n\tonDestroy(() => {\n\t\t// Clean up any pending timeouts to prevent memory leaks\n\t\tif (loadDataTimeout) {\n\t\t\tclearTimeout(loadDataTimeout);\n\t\t\tloadDataTimeout = null;\n\t\t}\n\t\tif (initializationTimeout) {\n\t\t\tclearTimeout(initializationTimeout);\n\t\t\tinitializationTimeout = null;\n\t\t}\n\t});\n\n\tfunction handleEdit(account: YakklAccount) {\n\t\tselectedAccount = account;\n\t\teditMode = true;\n\t}\n\n\tfunction handleDelete(account: YakklAccount) {\n\t\tselectedAccount = account;\n\t\tshowEnhancedDeleteModal = true;\n\t}\n\n\tasync function confirmDelete() {\n\t\tif (selectedAccount) {\n\t\t\t// The enhanced modal already shows balances, so we can proceed with deletion\n\t\t\t// Note: In a production app, you might want to re-check balances here as a safety measure\n\n\t\t\tif (selectedAccount.accountType === AccountTypeCategory.PRIMARY) {\n\t\t\t\tlet subAccounts = accounts.filter(\n\t\t\t\t\t(a) => a.primaryAccount?.address === selectedAccount!.address\n\t\t\t\t);\n\t\t\t\tsubAccounts.forEach((subAccount) => {\n\t\t\t\t\tconst index = accounts.findIndex((a) => a.address === subAccount.address);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\taccounts.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\taccounts = accounts.filter((a) => a.address !== selectedAccount!.address);\n\t\t\tsetYakklAccountsStorage(accounts);\n\t\t\t$yakklAccountsStore = accounts;\n\n\t\t\tif (selectedAccount.accountType === AccountTypeCategory.PRIMARY) {\n\t\t\t\tlet primaryAccounts = $yakklPrimaryAccountsStore.filter(\n\t\t\t\t\t(a) => a.address !== selectedAccount!.address\n\t\t\t\t);\n\t\t\t\tsetYakklPrimaryAccountsStorage(primaryAccounts);\n\t\t\t\tselectedAccount = null;\n\t\t\t} else {\n\t\t\t\tif (selectedAccount.address === $yakklCurrentlySelectedStore!.shortcuts.address) {\n\t\t\t\t\tselectedAccount = selectedAccount!.primaryAccount?.account as YakklAccount;\n\t\t\t\t\tonAccountSelect(selectedAccount); // This will update the currently selected account to the primary account if the sub-account is deleted and it's the currently selected account too.\n\t\t\t\t}\n\t\t\t}\n\t\t\tshowEnhancedDeleteModal = false;\n\t\t}\n\t}\n\n\t// Helper function to determine if an error should be shown to the user\n\tfunction shouldShowErrorToUser(error: any): boolean {\n\t\tconst errorMessage = error?.message || error?.toString() || '';\n\n\t\t// Network/API errors that should be handled silently\n\t\tconst networkErrors = [\n\t\t\t'missing response',\n\t\t\t'timeout',\n\t\t\t'TIMEOUT',\n\t\t\t'SERVER_ERROR',\n\t\t\t'NETWORK_ERROR',\n\t\t\t'Failed to fetch',\n\t\t\t'fetch',\n\t\t\t'Connection failed',\n\t\t\t'Request timeout',\n\t\t\t'eth_getBalance',\n\t\t\t'call revert exception',\n\t\t\t'alchemy.com',\n\t\t\t'infura.io',\n\t\t\t'requestBody',\n\t\t\t'serverError',\n\t\t\t'code=SERVER_ERROR',\n\t\t\t'version=web/',\n\t\t\t'JsonRpcError',\n\t\t\t'RPC Error',\n\t\t\t'getBalance',\n\t\t\t'Balance fetch'\n\t\t];\n\n\t\treturn !networkErrors.some((pattern) =>\n\t\t\terrorMessage.toLowerCase().includes(pattern.toLowerCase())\n\t\t);\n\t}\n\n\tasync function checkBalances(account: YakklAccount) {\n\t\tlet balance = 0n;\n\t\tif (account.accountType === AccountTypeCategory.PRIMARY) {\n\t\t\tlet subAccounts = accounts.filter((a) => a.primaryAccount?.address === account.address);\n\t\t\tsubAccounts.forEach(async (subAccount) => {\n\t\t\t\ttry {\n\t\t\t\t\tbalance = await wallet.getBalance(subAccount.address);\n\t\t\t\t\tif (balance > 0n) {\n\t\t\t\t\t\talert(\n\t\t\t\t\t\t\t`Sub-account ${subAccount.name} has a balance of ${balance}. Please transfer the balance to another account before deleting!`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (shouldShowErrorToUser(error)) {\n\t\t\t\t\t\tconsole.error('[AccountListing] Balance check error for sub-account:', error);\n\t\t\t\t\t}\n\t\t\t\t\t// Skip balance check for network errors\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tbalance = await wallet.getBalance(account.address);\n\t\t\t\tif (balance > 0n) {\n\t\t\t\t\talert(\n\t\t\t\t\t\t`Account ${account.name} has a balance of ${balance}. Please transfer the balance to another account before deleting!`\n\t\t\t\t\t);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (shouldShowErrorToUser(error)) {\n\t\t\t\t\tconsole.error('[AccountListing] Balance check error:', error);\n\t\t\t\t}\n\t\t\t\t// Skip balance check for network errors\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction updateAccount(updatedAccount: YakklAccount) {\n\t\tconst index = accounts.findIndex((a) => a.address === updatedAccount.address);\n\t\tif (index !== -1) {\n\t\t\taccounts[index] = { ...updatedAccount, updateDate: dateString() };\n\t\t\tif (updatedAccount.accountType === AccountTypeCategory.PRIMARY) {\n\t\t\t\tupdatePrimaryAndSubAccounts(updatedAccount);\n\t\t\t}\n\t\t\tsetYakklAccountsStorage(accounts);\n\t\t\t$yakklAccountsStore = accounts;\n\t\t\tselectedAccount = updatedAccount;\n\t\t}\n\t\teditMode = false;\n\t}\n\n\tfunction updatePrimaryAndSubAccounts(updatedPrimaryAccount: YakklAccount) {\n\t\tlet primaryAccount = $yakklPrimaryAccountsStore.find(\n\t\t\t(a) => a.address === updatedPrimaryAccount.address\n\t\t);\n\t\tif (primaryAccount) {\n\t\t\tprimaryAccount.name = updatedPrimaryAccount.name;\n\t\t\tprimaryAccount.updateDate = dateString();\n\t\t\tsetYakklPrimaryAccountsStorage($yakklPrimaryAccountsStore);\n\t\t}\n\t\tlet subAccounts = accounts.filter(\n\t\t\t(a) => a.primaryAccount?.address === updatedPrimaryAccount.address\n\t\t);\n\t\tsubAccounts.forEach((subAccount) => {\n\t\t\tconst index = accounts.findIndex((a) => a.address === subAccount.address);\n\t\t\tif (index !== -1) {\n\t\t\t\taccounts[index].primaryAccount!.name = updatedPrimaryAccount.name;\n\t\t\t\taccounts[index].primaryAccount!.updateDate = dateString();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction handleCopy(account: YakklAccount) {\n\t\tnavigator.clipboard.writeText(account.address);\n\t}\n\n\t// Function to load balance for enhanced delete modal - uses cached data first\n\tasync function loadBalanceForDelete(address: string): Promise<bigint> {\n\t\t// First try to get cached balance\n\t\tconst cached = balanceCacheManager.getCachedBalance(address);\n\t\tif (cached) {\n\t\t\tlog.info(`[AccountListing] Using cached balance for delete confirmation: ${address}`);\n\t\t\treturn cached.balance;\n\t\t}\n\n\t\t// Try to get from current accountData\n\t\tconst accountDataItem = accountData.find((data) => data.account.address === address);\n\t\tif (accountDataItem && !accountDataItem.isLoading && !accountDataItem.loadingError) {\n\t\t\tlog.info(`[AccountListing] Using accountData balance for delete confirmation: ${address}`);\n\t\t\treturn accountDataItem.quantity;\n\t\t}\n\n\t\t// Fallback to fresh fetch only if no cached data available\n\t\tif (!wallet) return 0n;\n\t\ttry {\n\t\t\tconst balance = await wallet.getBalance(address);\n\t\t\tlog.info(`[AccountListing] Fetched fresh balance for delete confirmation: ${address}`);\n\t\t\treturn balance;\n\t\t} catch (error) {\n\t\t\t// Only log non-network errors, suppress network timeouts\n\t\t\tif (shouldShowErrorToUser(error)) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t`[AccountListing] Failed to load balance for delete confirmation: ${address}`,\n\t\t\t\t\tfalse,\n\t\t\t\t\terror\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn 0n;\n\t\t}\n\t}\n</script>\n\n<ul class=\"overflow-hidden\">\n\t{#each accountData as data}\n\t\t<li class=\"mb-3 relative overflow-hidden\">\n\t\t\t<button\n\t\t\t\tclass=\"w-full flex items-start rounded-lg p-3 transition-colors duration-200 overflow-hidden {data\n\t\t\t\t\t.account.accountType === AccountTypeCategory.PRIMARY\n\t\t\t\t\t? 'bg-purple-50 hover:bg-purple-100 border border-purple-200'\n\t\t\t\t\t: data.account.accountType === AccountTypeCategory.SUB\n\t\t\t\t\t\t? 'bg-blue-50 hover:bg-blue-100 border border-blue-200'\n\t\t\t\t\t\t: 'bg-green-50 hover:bg-green-100 border border-green-200'}\"\n\t\t\t\tonclick={() => onAccountSelect(data.account)}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"w-6 h-6 flex items-center justify-center rounded-full {data.account.accountType ===\n\t\t\t\t\tAccountTypeCategory.PRIMARY\n\t\t\t\t\t\t? 'bg-purple-500'\n\t\t\t\t\t\t: data.account.accountType === AccountTypeCategory.SUB\n\t\t\t\t\t\t\t? 'bg-blue-500'\n\t\t\t\t\t\t\t: 'bg-green-500'} text-white mr-3 shrink-0\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tclass=\"w-3 h-3\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"flex-1 min-w-0 overflow-hidden\">\n\t\t\t\t\t<div class=\"flex items-center justify-between mb-1\">\n\t\t\t\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t\t\t\t<h3 class=\"text-sm font-semibold text-gray-800\">\n\t\t\t\t\t\t\t\t{data.account.accountType === AccountTypeCategory.PRIMARY\n\t\t\t\t\t\t\t\t\t? 'PORTFOLIO'\n\t\t\t\t\t\t\t\t\t: data.account.accountType === AccountTypeCategory.SUB\n\t\t\t\t\t\t\t\t\t\t? 'SUB-PORTFOLIO'\n\t\t\t\t\t\t\t\t\t\t: 'IMPORTED'}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<!-- Sub-account indicator for primary accounts -->\n\t\t\t\t\t\t\t{#if data.account.accountType === AccountTypeCategory.PRIMARY}\n\t\t\t\t\t\t\t\t<SubAccountIndicator\n\t\t\t\t\t\t\t\t\tprimaryAccount={data.account}\n\t\t\t\t\t\t\t\t\tallAccounts={accounts}\n\t\t\t\t\t\t\t\t\tclassName=\"ml-1\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p class=\"text-sm font-medium text-gray-700 truncate mb-1\" title={data.account.name}>\n\t\t\t\t\t\t{data.account.name}\n\t\t\t\t\t</p>\n\t\t\t\t\t{#if data.account.accountType === AccountTypeCategory.SUB}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclass=\"text-xs text-gray-500 mb-1 block truncate\"\n\t\t\t\t\t\t\ttitle=\"Derived from {data.account.primaryAccount?.name}\"\n\t\t\t\t\t\t\t>Derived from {data.account.primaryAccount?.name}</span\n\t\t\t\t\t\t>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<p class=\"text-xs text-gray-500 font-mono truncate mb-2\" title={data.account.address}>\n\t\t\t\t\t\t{data.account.address}\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<!-- Enhanced balance indicator with loading states -->\n\t\t\t\t\t<BalanceIndicator\n\t\t\t\t\t\tisLoading={data.isLoading}\n\t\t\t\t\t\tloadingError={data.loadingError}\n\t\t\t\t\t\tisCached={data.isCached}\n\t\t\t\t\t\tisStale={data.isStale}\n\t\t\t\t\t\tlastUpdated={data.lastUpdated}\n\t\t\t\t\t\tquantityFormatted={data.quantityFormatted}\n\t\t\t\t\t\ttotalValueFormatted={data.totalValueFormatted}\n\t\t\t\t\t\tonRetry={() => retryBalance(data.account.address)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</button>\n\t\t\t<EditControls\n\t\t\t\tonEdit={() => handleEdit(data.account)}\n\t\t\t\tonDelete={() => handleDelete(data.account)}\n\t\t\t\tonCopy={() => handleCopy(data.account)}\n\t\t\t\tcontrols={['copy', 'edit', 'delete']}\n\t\t\t\thasBalance={data.quantity > 0n}\n\t\t\t/>\n\t\t</li>\n\t{/each}\n</ul>\n\n<!-- Show restricted accounts for basic members -->\n{#if isRestricted}\n\t<RestrictedAccountDisplay accounts={restrictedAccounts} {onUpgrade} />\n{/if}\n\n<AccountForm bind:show={editMode} account={selectedAccount} onSubmit={updateAccount} />\n\n<EnhancedDeleteConfirmation\n\tbind:show={showEnhancedDeleteModal}\n\taccount={selectedAccount}\n\tallAccounts={accounts}\n\tonConfirm={confirmDelete}\n\tonCancel={() => (showEnhancedDeleteModal = false)}\n\tonLoadBalance={loadBalanceForDelete}\n/>\n","<!-- Accounts2.svelte -->\n<script lang=\"ts\">\n\timport {\n\t\tyakklAccountsStore,\n\t\tyakklCurrentlySelectedStore,\n\t\tsetYakklCurrentlySelectedStorage\n\t} from '$lib/common/stores';\n\timport { YAKKL_ZERO_ADDRESS } from '$lib/common/constants';\n\timport type { YakklAccount } from '$lib/common';\n\timport Modal from './Modal.svelte';\n\timport AccountListing from './AccountListing.svelte';\n\timport { openModal } from '$lib/common/stores/modal';\n\timport { log } from '$lib/managers/Logger';\n\timport { dateString } from '$lib/common/datetime';\n\n\tinterface Props {\n\t\taccount?: YakklAccount | null;\n\t\tshow?: boolean;\n\t\tonAccountSelect?: ((account: YakklAccount) => void) | null;\n\t\tonClose?: (() => void) | null;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\taccount = $bindable(null),\n\t\tshow = $bindable(false),\n\t\tonAccountSelect = null,\n\t\tonClose = null,\n\t\tclassName = 'z-[999]'\n\t}: Props = $props();\n\n\t// Not using onCancel here but letting it fall through to the Modal component since we don't need to do anything special\n\t// export let onCancel: () => void = () => {show = false};\n\n\tasync function handleAccountSelect(selectedAccount: YakklAccount) {\n\t\ttry {\n\t\t\tlog.info('[Accounts] Account selected:', false, {\n\t\t\t\tname: selectedAccount.name,\n\t\t\t\taddress: selectedAccount.address,\n\t\t\t\ttype: selectedAccount.accountType,\n\t\t\t\tcurrentShowState: show\n\t\t\t});\n\n\t\t\t// Update local binding if provided\n\t\t\tif (account !== null) {\n\t\t\t\taccount = selectedAccount;\n\t\t\t}\n\n\t\t\t// Call parent callback if provided\n\t\t\tif (onAccountSelect !== null) {\n\t\t\t\tonAccountSelect(selectedAccount);\n\t\t\t}\n\n\t\t\t// Most importantly: update the global currently selected store\n\t\t\tconst currentlySelected = $yakklCurrentlySelectedStore;\n\t\t\tif (currentlySelected) {\n\t\t\t\t// Update the shortcuts with the new account information\n\t\t\t\tconst updatedCurrentlySelected = {\n\t\t\t\t\t...currentlySelected,\n\t\t\t\t\tshortcuts: {\n\t\t\t\t\t\t...currentlySelected.shortcuts,\n\t\t\t\t\t\taddress: selectedAccount.address,\n\t\t\t\t\t\taccountName: selectedAccount.name,\n\t\t\t\t\t\taccountType: selectedAccount.accountType,\n\t\t\t\t\t\talias: selectedAccount.alias,\n\t\t\t\t\t\t// Reset quantity to trigger balance refresh\n\t\t\t\t\t\tquantity: 0n,\n\t\t\t\t\t\t// Update primary account reference if it's a sub-account\n\t\t\t\t\t\tprimary: selectedAccount.accountType === 'sub' ? selectedAccount.primaryAccount : null\n\t\t\t\t\t},\n\t\t\t\t\tupdateDate: dateString()\n\t\t\t\t};\n\n\t\t\t\t// Save to storage and update store\n\t\t\t\tawait setYakklCurrentlySelectedStorage(updatedCurrentlySelected);\n\n\t\t\t\tlog.info('[Accounts] Successfully updated currently selected account, closing modal');\n\t\t\t} else {\n\t\t\t\tlog.warn('[Accounts] No currently selected store found, cannot update account');\n\t\t\t}\n\n\t\t\t// Force close the modal using both methods\n\t\t\tshow = false;\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t\tlog.info('[Accounts] Modal show state set to false:', false, { show });\n\t\t} catch (error) {\n\t\t\tlog.error('[Accounts] Failed to update selected account:', false, error);\n\t\t\tshow = false;\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle upgrade flow\n\tfunction handleUpgrade() {\n\t\t// Close this modal and trigger upgrade flow\n\t\tshow = false;\n\t\t// Open the upgrade modal using the same system as PlanBadge\n\t\topenModal('upgrade');\n\t}\n\n\t// Close the modal without calling onCancel\n\tfunction closeModal() {\n\t\tshow = false;\n\t\tif (onClose) {\n\t\t\tonClose();\n\t\t}\n\t}\n</script>\n\n<div class=\"relative {className}\">\n\t<Modal\n\t\tbind:show\n\t\ttitle=\"Account List\"\n\t\tdescription=\"Select the account you wish to make current\"\n\t\tonClose={closeModal}\n\t\tonCancel={closeModal}\n\t>\n\t\t<div class=\"border-t border-b border-gray-500 py-4\">\n\t\t\t<AccountListing\n\t\t\t\taccounts={$yakklAccountsStore}\n\t\t\t\tonAccountSelect={handleAccountSelect}\n\t\t\t\tonUpgrade={handleUpgrade}\n\t\t\t/>\n\n\t\t\t{#if $yakklCurrentlySelectedStore && $yakklCurrentlySelectedStore.shortcuts.address === YAKKL_ZERO_ADDRESS}\n\t\t\t\t<p class=\"text-lg font-bold text-red-500\">\n\t\t\t\t\tThere are no Portfolio Accounts to display! Create at least one Portfolio account!\n\t\t\t\t</p>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t{#snippet footer()}\n\t\t\t<p class=\"text-sm text-gray-500\">\n\t\t\t\tWhatever account you select will become your <span class=\"font-bold underline\">active</span>\n\t\t\t\taccount!\n\t\t\t</p>\n\t\t{/snippet}\n\t</Modal>\n</div>\n","<!-- Copy.svelte -->\n<script lang=\"ts\">\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { browser_ext } from '$lib/common/environment';\n\timport { timeoutClipboard } from '$lib/utilities';\n\timport { UnifiedTimerManager } from '$lib/managers/UnifiedTimerManager';\n\n\ttype CopyTarget = {\n\t\tid?: string;\n\t\tvalue?: string | number | null | undefined;\n\t\ttimeout?: number;\n\t\tredactText?: string;\n\t};\n\n\ttype CopyConfig = CopyTarget | CopyTarget[];\n\n\tconst {\n\t\ttarget,\n\t\tsize = 20,\n\t\tclassName = '',\n\t\tshowFeedback = true,\n\t\tfeedbackDuration = 2000,\n\t\tdefaultRedactText = '<redacted>',\n\t\tonClick = undefined\n\t} = $props<{\n\t\ttarget: CopyConfig;\n\t\tsize?: number;\n\t\tclassName?: string;\n\t\tshowFeedback?: boolean;\n\t\tfeedbackDuration?: number;\n\t\tdefaultRedactText?: string;\n\t\tonClick?: (copiedValue: string) => void;\n\t}>();\n\n\tlet isCopied = $state(false);\n\tlet timeoutIds: Map<string, string> = new Map(); // Now stores timer IDs instead of timeout numbers\n\tconst timerManager = UnifiedTimerManager.getInstance();\n\n\t// Add reactive tracking for the target value\n\t// $effect(() => {\n\t//   // This ensures we're tracking changes to the target value\n\t//   if (!Array.isArray(target) && target.value !== undefined) {\n\t//     log.debug('Current target value:', target.value);\n\t//   }\n\t// });\n\n\tfunction getValue(copyTarget: CopyTarget): string {\n\t\tif (copyTarget.id) {\n\t\t\tconst element = document.getElementById(copyTarget.id);\n\t\t\tif (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n\t\t\t\treturn element.value;\n\t\t\t} else if (element) {\n\t\t\t\treturn element.textContent || '';\n\t\t\t}\n\t\t\tlog.warn(`Element with id '${copyTarget.id}' not found`);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Improved value handling\n\t\tconst value = copyTarget.value;\n\t\tif (value === null || value === undefined) {\n\t\t\treturn '';\n\t\t}\n\t\treturn value.toString();\n\t}\n\n\t// Handle single copy target\n\tasync function handleSingleCopy(copyTarget: CopyTarget): Promise<void> {\n\t\tconst value = getValue(copyTarget);\n\t\tawait navigator.clipboard.writeText(value);\n\n\t\t// Call onClick handler if provided\n\t\tif (onClick) {\n\t\t\tonClick(value);\n\t\t}\n\n\t\t// Set redaction timeout if specified\n\t\tif (copyTarget.timeout) {\n\t\t\ttimeoutClipboard(copyTarget.timeout, copyTarget.redactText || defaultRedactText);\n\n\t\t\t// Get active tab for script injection\n\t\t\t// try {\n\t\t\t// const [tab] = await browser_ext.tabs.query({ active: true, currentWindow: true });\n\t\t\t// if (tab && tab.id) {\n\t\t\t//   browser_ext.runtime.sendMessage({ type: 'clipboard-timeout', tabId: tab.id, timeout: copyTarget.timeout, redactText: copyTarget.redactText || defaultRedactText });\n\t\t\t// } else {\n\t\t\t//   log.error('Failed to get active tab for clipboard timeout');\n\t\t\t// }\n\t\t\t// } catch (err) {\n\t\t\t//   log.error('Failed to set clipboard timeout:', err);\n\t\t\t// }\n\n\t\t\t// const timeoutId = setTimeout(async () => {\n\t\t\t//   const redactText = copyTarget.redactText || defaultRedactText;\n\t\t\t//   await navigator.clipboard.writeText(redactText);\n\t\t\t//   timeoutIds.delete(copyTarget.id || value);\n\t\t\t// }, copyTarget.timeout) as unknown as number;\n\n\t\t\t// timeoutIds.set(copyTarget.id || value, timeoutId);\n\t\t}\n\t}\n\n\t// Handle multiple copy targets\n\tasync function handleMultiCopy(copyTargets: CopyTarget[]): Promise<void> {\n\t\tconst values = copyTargets.map((target) => getValue(target));\n\t\tconst combinedValue = values.join('\\n');\n\t\tawait navigator.clipboard.writeText(combinedValue);\n\n\t\t// Call onClick handler if provided\n\t\tif (onClick) {\n\t\t\tonClick(combinedValue);\n\t\t}\n\n\t\t// Handle individual timeouts using UnifiedTimerManager\n\t\tcopyTargets.forEach((target, index) => {\n\t\t\tif (target.timeout) {\n\t\t\t\tconst timerId = `copy-timeout-${target.id || index}`;\n\t\t\t\ttimerManager.addTimeout(\n\t\t\t\t\ttimerId,\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tconst currentValues = [...values];\n\t\t\t\t\t\tconst redactText = target.redactText || defaultRedactText;\n\t\t\t\t\t\tcurrentValues[index] = redactText;\n\t\t\t\t\t\tawait navigator.clipboard.writeText(currentValues.join('\\n'));\n\t\t\t\t\t\ttimeoutIds.delete(target.id || values[index]);\n\t\t\t\t\t},\n\t\t\t\t\ttarget.timeout\n\t\t\t\t);\n\t\t\t\ttimerManager.startTimeout(timerId);\n\n\t\t\t\ttimeoutIds.set(target.id || values[index], timerId);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync function copyToClipboard() {\n\t\ttry {\n\t\t\tif (Array.isArray(target)) {\n\t\t\t\tawait handleMultiCopy(target);\n\t\t\t} else {\n\t\t\t\tawait handleSingleCopy(target);\n\t\t\t}\n\n\t\t\tif (showFeedback) {\n\t\t\t\tisCopied = true;\n\t\t\t\ttimerManager.addTimeout(\n\t\t\t\t\t'copy-feedback',\n\t\t\t\t\t() => {\n\t\t\t\t\t\tisCopied = false;\n\t\t\t\t\t},\n\t\t\t\t\tfeedbackDuration\n\t\t\t\t);\n\t\t\t\ttimerManager.startTimeout('copy-feedback');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// log.error('Failed to copy:', err);\n\t\t\tisCopied = false;\n\t\t}\n\t}\n\n\t// Cleanup timeouts\n\t$effect(() => {\n\t\treturn () => {\n\t\t\ttimeoutIds.forEach((timerId) => {\n\t\t\t\ttimerManager.stopTimeout(timerId);\n\t\t\t\ttimerManager.removeTimeout(timerId);\n\t\t\t});\n\t\t\ttimeoutIds.clear();\n\t\t};\n\t});\n</script>\n\n<button\n\ttype=\"button\"\n\tonclick={copyToClipboard}\n\tclass=\"\n    inline-flex\n    items-center\n    justify-center\n    transition-all\n    duration-200\n    ease-in-out\n    rounded-md\n    focus:outline-none\n    focus:ring-2\n    focus:ring-offset-2\n    focus:ring-blue-500\n    {className}\n  \"\n\ttitle=\"Copy to clipboard\"\n>\n\t{#if isCopied}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={size}\n\t\t\theight={size}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstroke-width=\"2\"\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\tclass=\"text-green-500\"\n\t\t\taria-hidden=\"true\"\n\t\t>\n\t\t\t<path d=\"M20 6L9 17l-5-5\" />\n\t\t</svg>\n\t\t<span class=\"sr-only\">Copied!</span>\n\t{:else}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={size}\n\t\t\theight={size}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstroke-width=\"2\"\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\tclass=\"text-gray-500 hover:text-blue-500 transition-colors duration-200\"\n\t\t\taria-hidden=\"true\"\n\t\t>\n\t\t\t<rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\" />\n\t\t\t<path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\" />\n\t\t</svg>\n\t\t<span class=\"sr-only\">Copy to clipboard</span>\n\t{/if}\n</button>\n\n<!-- Example usage: -->\n<!-- Basic usage -->\n<!-- <Copy\n  target={{ value: \"Simple text to copy\" }}\n  className=\"hover:bg-gray-100 p-2\"\n/> -->\n\n<!-- With custom redaction -->\n<!-- <Copy\n  target={{\n    value: sensitiveData,\n    timeout: 30000,\n    redactText: \"Content removed for security\"\n  }}\n  className=\"text-gray-600 hover:text-blue-600\"\n/> -->\n\n<!-- Copy from input with custom styling -->\n<!-- <div class=\"flex items-center space-x-2\">\n  <input\n    id=\"walletAddress\"\n    value={address}\n    readonly\n    class=\"bg-gray-50 border rounded px-3 py-2\"\n  />\n  <Copy\n    target={{ id: \"walletAddress\" }}\n    className=\"p-1 hover:bg-gray-100 rounded-full\"\n    size={16}\n  />\n</div> -->\n\n<!-- Multiple values with different redaction settings -->\n<!-- <Copy\n  target={[\n    {\n      value: \"Public info\",\n    },\n    {\n      value: \"Sensitive info\",\n      timeout: 30000,\n      redactText: \"REDACTED-SENSITIVE\"\n    },\n    {\n      id: \"privateKey\",\n      timeout: 5000,\n      redactText: \"KEY-REMOVED\"\n    }\n  ]}\n  className=\"bg-blue-50 hover:bg-blue-100 p-2 rounded-lg\"\n/> -->\n\n<!-- Complex example with different styles -->\n<!-- <div class=\"space-y-4 p-4 bg-white rounded-lg shadow\">\n  <div class=\"flex items-center justify-between\">\n    <input\n      id=\"wallet\"\n      value={walletAddress}\n      readonly\n      class=\"flex-1 bg-gray-50 rounded border px-3 py-2\"\n    />\n    <Copy\n      target={{ id: \"wallet\" }}\n      className=\"ml-2 p-2 hover:bg-gray-100 rounded-full transition-all\"\n      size={16}\n    />\n  </div>\n\n  <div class=\"flex items-center justify-between\">\n    <input\n      id=\"privateKey\"\n      value={privateKey}\n      type=\"password\"\n      class=\"flex-1 bg-gray-50 rounded border px-3 py-2\"\n    />\n    <Copy\n      target={{\n        id: \"privateKey\",\n        timeout: 5000,\n        redactText: \"PRIVATE-KEY-REMOVED\"\n      }}\n      className=\"ml-2 p-2 hover:bg-gray-100 rounded-full transition-all\"\n      size={16}\n    />\n  </div>\n</div> -->\n"],"names":["show","account","onSubmit","form","errors","createForm","initialValues","name","alias","description","validationSchema","yup","object","shape","string","required","optional","values","updatedAccount","address","isLoading","loadingError","isCached","isStale","lastUpdated","quantityFormatted","totalValueFormatted","onRetry","formatLastUpdated","date","now","Date","diffMs","getTime","diffMins","Math","floor","diffHours","diffDays","className","$$payload","out","$.attr","$.stringify","toLocaleString","$.escape","primaryAccount","allAccounts","$$props","subAccounts","accountType","AccountTypeCategory","PRIMARY","filter","SUB","subAccountCount","length","onConfirm","onCancel","onLoadBalance","async","accountsWithBalances","loading","getAccountIcon","isPrimaryAccountWithSubs","item","each_array","index","slice","error","balanceFormatted","valueFormatted","accounts","onAccountSelect","onUpgrade","editMode","showEnhancedDeleteModal","selectedAccount","accountData","retryBalance","accountAddress","onDestroy","handleEdit","handleDelete","confirmDelete","a","forEach","subAccount","findIndex","splice","setYakklAccountsStorage","$.store_set","yakklAccountsStore","primaryAccounts","$.store_get","$$store_subs","yakklPrimaryAccountsStore","setYakklPrimaryAccountsStorage","yakklCurrentlySelectedStore","shortcuts","updateAccount","updateDate","dateString","updatePrimaryAndSubAccounts","updatedPrimaryAccount","find","handleCopy","navigator","clipboard","writeText","loadBalanceForDelete","cached","balanceCacheManager","getCachedBalance","log","info","balance","accountDataItem","data","quantity","$$index","$$value","onClose","handleAccountSelect","type","currentShowState","currentlySelected","updatedCurrentlySelected","accountName","primary","setYakklCurrentlySelectedStorage","warn","handleUpgrade","openModal","closeModal","YAKKL_ZERO_ADDRESS","target","size","showFeedback","feedbackDuration","defaultRedactText","onClick","UnifiedTimerManager","getInstance"],"mappings":"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"}