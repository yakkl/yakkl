{"version":3,"file":"Upgrade.js","sources":["../../../../src/lib/components/Notification.svelte","../../../../src/lib/managers/UpgradeManager.ts","../../../../src/lib/common/member_pricing.ts","../../../../src/lib/common/auth-utils.ts","../../../../src/lib/components/Upgrade.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport Modal from './Modal.svelte';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\ttitle?: string;\n\t\tmessage?: string;\n\t\tonClose?: () => void;\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\ttitle = 'Notification',\n\t\tmessage = '',\n\t\tonClose = () => safeLogout()\n\t}: Props = $props();\n\n\tfunction handleClose() {\n\t\tshow = false; // Ensure modal closes\n\t\t// Force a small delay to ensure proper cleanup before calling onClose\n\t\tsetTimeout(() => {\n\t\t\tonClose(); // Call the provided close handler\n\t\t}, 10);\n\t}\n</script>\n\n<Modal bind:show {title}>\n\t<div class=\"p-6\">\n\t\t<div class=\"flex items-center mb-4\">\n\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t<svg\n\t\t\t\t\tclass=\"w-6 h-6 text-gray-400\"\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z\"\n\t\t\t\t\t></path>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<div class=\"ml-3\">\n\t\t\t\t<p class=\"text-sm text-gray-500\">{message}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"mt-4 flex justify-end\">\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\tonclick={handleClose}\n\t\t\t>\n\t\t\t\tClose\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</Modal>\n","import { log } from './Logger';\nimport { dateString } from '$lib/common/datetime';\nimport { getProfile, setProfileStorage, getSettings, setSettingsStorage } from '$lib/common/stores';\nimport { encryptData, decryptData } from '$lib/common/encryption';\nimport { AccessSourceType, PlanType, PromoClassificationType } from '$lib/common/types';\nimport { isEncryptedData } from '$lib/common/misc';\nimport type { ProfileData } from '$lib/common/interfaces';\n\nexport interface UpgradeRequest {\n\tuserName: string;\n\temail: string;\n\tanalytics: {\n\t\tutm_source: string;\n\t\tutm_campaign: string;\n\t\tuser_location: string;\n\t\tupgrade_date: string;\n\t\tcurrent_version: string;\n\t\tplatform: string;\n\t\tuser_agent: string;\n\t};\n\tprofileId: string;\n\tencryptionKey: string;\n}\n\nexport interface UpgradeResponse {\n\tsuccess: boolean;\n\terror?: string;\n\tcustomerId?: string;\n\tupgradeDate?: string;\n}\n\nexport type UpgradeMessage =\n\t| {\n\t\t\ttype: 'START_UPGRADE';\n\t\t\tdata: UpgradeRequest;\n\t  }\n\t| {\n\t\t\ttype: 'CANCEL_UPGRADE';\n\t  }\n\t| {\n\t\t\ttype: 'CHECK_STATUS';\n\t  };\n\nexport type UpgradeResponseMessage =\n\t| {\n\t\t\ttype: 'UPGRADE_STARTED';\n\t  }\n\t| {\n\t\t\ttype: 'UPGRADE_COMPLETED';\n\t\t\tdata: UpgradeResponse;\n\t  }\n\t| {\n\t\t\ttype: 'UPGRADE_ERROR';\n\t\t\terror: string;\n\t  }\n\t| {\n\t\t\ttype: 'UPGRADE_PROGRESS';\n\t\t\tprogress: number;\n\t\t\tstatus: string;\n\t  }\n\t| {\n\t\t\ttype: 'CANCEL_UPGRADE';\n\t  };\n\nexport class UpgradeManager {\n\tprivate static instance: UpgradeManager;\n\tprivate messagePort: MessagePort | null = null;\n\tprivate upgradeTimeout: number = 30000; // 30 seconds\n\tprivate maxRetries: number = 3;\n\tprivate currentUpgradeId: string | null = null;\n\tprivate messageHandlers: Map<string, (message: UpgradeResponseMessage) => void> = new Map();\n\n\tprivate constructor() {\n\t\tthis.initializeMessagePort();\n\t}\n\n\tstatic getInstance(): UpgradeManager {\n\t\tif (!UpgradeManager.instance) {\n\t\t\tUpgradeManager.instance = new UpgradeManager();\n\t\t}\n\t\treturn UpgradeManager.instance;\n\t}\n\n\tprivate initializeMessagePort() {\n\t\t// In a real implementation, this would set up the message port\n\t\t// For now, we'll simulate the background process\n\t}\n\n\tasync processUpgrade(request: UpgradeRequest): Promise<void> {\n\t\ttry {\n\t\t\tthis.currentUpgradeId = `upgrade-${Date.now()}`;\n\t\t\tthis.sendMessage({ type: 'UPGRADE_STARTED' });\n\n\t\t\t// Get current profile and settings\n\t\t\tconst profile = await getProfile();\n\t\t\tconst settings = await getSettings();\n\n\t\t\tif (!profile || !settings) {\n\t\t\t\tthrow new Error('Profile or settings not found');\n\t\t\t}\n\n\t\t\t// Update progress\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_PROGRESS',\n\t\t\t\tprogress: 25,\n\t\t\t\tstatus: 'Preparing upgrade data...'\n\t\t\t});\n\n\t\t\t// Make API call\n\t\t\tconst response = await this.makeApiCall(request);\n\n\t\t\tif (!response.success) {\n\t\t\t\tthrow new Error(response.error || 'Upgrade failed');\n\t\t\t}\n\n\t\t\t// Update progress\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_PROGRESS',\n\t\t\t\tprogress: 75,\n\t\t\t\tstatus: 'Updating local data...'\n\t\t\t});\n\n\t\t\t// Update local data\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tconst decryptedData = (await decryptData(\n\t\t\t\t\tprofile.data,\n\t\t\t\t\trequest.encryptionKey\n\t\t\t\t)) as ProfileData;\n\t\t\t\tdecryptedData.registered = {\n\t\t\t\t\t...decryptedData.registered,\n\t\t\t\t\tplan: {\n\t\t\t\t\t\ttype: PlanType.YAKKL_PRO,\n\t\t\t\t\t\tsource: AccessSourceType.SUBSCRIBED,\n\t\t\t\t\t\tpromo: PromoClassificationType.NONE, // These values need to be updated to the correct values - TODO: Add the correct values\n\t\t\t\t\t\ttrialEndDate: '',\n\t\t\t\t\t\tupgradeDate: ''\n\t\t\t\t\t},\n\t\t\t\t\tkey: response.customerId || `PRO-${dateString()}`,\n\t\t\t\t\tupdateDate: dateString()\n\t\t\t\t};\n\t\t\t\tprofile.data = await encryptData(decryptedData, request.encryptionKey);\n\t\t\t}\n\n\t\t\t// Update settings\n\t\t\tsettings.plan = {\n\t\t\t\ttype: PlanType.YAKKL_PRO,\n\t\t\t\tsource: AccessSourceType.SUBSCRIBED,\n\t\t\t\tpromo: PromoClassificationType.NONE, // These values need to be updated to the correct values - TODO: Add the correct values\n\t\t\t\ttrialEndDate: '',\n\t\t\t\tupgradeDate: ''\n\t\t\t};\n\t\t\tsettings.upgradeDate = dateString();\n\t\t\tsettings.updateDate = dateString();\n\n\t\t\t// Save changes\n\t\t\tawait setProfileStorage(profile);\n\t\t\tawait setSettingsStorage(settings);\n\n\t\t\t// Send completion message\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_COMPLETED',\n\t\t\t\tdata: {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tcustomerId: response.customerId,\n\t\t\t\t\tupgradeDate: dateString()\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlog.error('Error in upgrade process:', false, error);\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'UPGRADE_ERROR',\n\t\t\t\terror: error instanceof Error ? error.message : 'An error occurred during upgrade'\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async makeApiCall(request: UpgradeRequest): Promise<UpgradeResponse> {\n\t\tlet retries = 0;\n\n\t\twhile (retries < this.maxRetries) {\n\t\t\ttry {\n\t\t\t\tconst controller = new AbortController();\n\t\t\t\tconst timeoutId = setTimeout(() => controller.abort(), this.upgradeTimeout);\n\n\t\t\t\tconst response = await fetch('https://api.yakkl.com/wallet/upgrade', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(request),\n\t\t\t\t\tsignal: controller.signal\n\t\t\t\t});\n\n\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tcustomerId: data.customerId,\n\t\t\t\t\tupgradeDate: data.upgradeDate\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\tretries++;\n\t\t\t\tif (retries === this.maxRetries) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\t// Wait before retrying (exponential backoff)\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, Math.pow(2, retries) * 1000));\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('Max retries exceeded');\n\t}\n\n\tprivate sendMessage(message: UpgradeResponseMessage) {\n\t\t// In a real implementation, this would send the message through the message port\n\t\t// For now, we'll notify any registered handlers\n\t\tthis.messageHandlers.forEach((handler) => handler(message));\n\t}\n\n\tregisterMessageHandler(handler: (message: UpgradeResponseMessage) => void): () => void {\n\t\tconst id = Math.random().toString(36).substr(2, 9);\n\t\tthis.messageHandlers.set(id, handler);\n\t\treturn () => this.messageHandlers.delete(id);\n\t}\n\n\tcancelUpgrade() {\n\t\tif (this.currentUpgradeId) {\n\t\t\tthis.sendMessage({ type: 'CANCEL_UPGRADE' });\n\t\t\tthis.currentUpgradeId = null;\n\t\t}\n\t}\n}\n","import {\n\tEARLY_ADOPTER_DEADLINES,\n\tFOUNDING_MEMBER_DEADLINE,\n\tYAKKL_PRO_ANNUAL_FEE\n} from './constants';\nimport { log } from '$lib/managers/Logger';\n\n/**\n * Returns the price for the current date based on EARLY_ADOPTER_USER_DEADLINES.\n * If after all deadlines, returns the last price.\n */\nexport function getEarlyAdopterPrice(now: Date = new Date()): number {\n\tfor (const offer of EARLY_ADOPTER_DEADLINES) {\n\t\tif (now < new Date(offer.date)) {\n\t\t\treturn offer.price;\n\t\t}\n\t}\n\t// If after all deadlines, return last price\n\treturn EARLY_ADOPTER_DEADLINES[EARLY_ADOPTER_DEADLINES.length - 1].price;\n}\n\n/**\n * Returns the price for the Founding Member.\n * If the current date is before the deadline, returns the price.\n * Otherwise, returns null.\n */\nexport function getFoundingMemberPrice(now: Date = new Date()): number | null {\n\tif (now < new Date(FOUNDING_MEMBER_DEADLINE)) {\n\t\treturn 100; // Return the price for Founding Member\n\t}\n\treturn null;\n}\n\n/**\n * Returns the applicable user price based on the current date.\n * Checks Founding Member price first, then Early Adopter price,\n * and finally returns the ongoing annual fee of 144 if all deadlines have passed.\n */\nexport function getMemberUpgradePrice(now: Date = new Date()): number {\n\ttry {\n\t\tconst foundingMemberPrice = getFoundingMemberPrice(now);\n\t\tif (foundingMemberPrice !== null) {\n\t\t\treturn foundingMemberPrice;\n\t\t}\n\t\tfor (const offer of EARLY_ADOPTER_DEADLINES) {\n\t\t\tif (now < new Date(offer.date)) {\n\t\t\t\treturn offer.price;\n\t\t\t}\n\t\t}\n\t\t// Ongoing annual YAKKL Pro fee\n\t\treturn YAKKL_PRO_ANNUAL_FEE;\n\t} catch (error) {\n\t\tlog.warn('Error determining available member upgrade plan level:', false, error);\n\t\treturn YAKKL_PRO_ANNUAL_FEE;\n\t}\n}\n\n/**\n * Returns the available member upgrade plan level based on the current date.\n * Checks eligibility for founding_member, early_adopter, or yakkl_pro status.\n * Returns 'yakkl_pro' as default if not found or if an error occurs.\n */\nexport function getAvailableMemberUpgradePlanLevel(\n\tnow: Date = new Date()\n): 'founding_member' | 'early_adopter' | 'yakkl_pro' {\n\ttry {\n\t\t// Check if still eligible for founding member status\n\t\tif (now < new Date(FOUNDING_MEMBER_DEADLINE)) {\n\t\t\treturn 'founding_member';\n\t\t}\n\n\t\t// Check if still eligible for early adopter status\n\t\tfor (const offer of EARLY_ADOPTER_DEADLINES) {\n\t\t\tif (now < new Date(offer.date)) {\n\t\t\t\treturn 'early_adopter';\n\t\t\t}\n\t\t}\n\n\t\t// Default to yakkl_pro if all deadlines have passed\n\t\treturn 'yakkl_pro';\n\t} catch (error) {\n\t\tlog.warn('Error determining available member upgrade plan level:', false, error);\n\t\treturn 'yakkl_pro';\n\t}\n}\n","import { getSettings } from '$lib/common/stores';\nimport type { Settings } from '$lib/common/interfaces';\n\nexport interface RegistrationStatus {\n\tisRegistered: boolean;\n\thasAgreedToTerms: boolean;\n\tisInitialized: boolean;\n\trequiresAction: 'terms' | 'register' | 'login' | null;\n}\n\nexport async function checkRegistrationStatus(): Promise<RegistrationStatus> {\n\ttry {\n\t\tconst settings = await getSettings();\n\n\t\tconst hasAgreedToTerms = settings?.legal?.termsAgreed ?? false;\n\t\tconst isInitialized = settings?.init ?? false;\n\n\t\tlet requiresAction: RegistrationStatus['requiresAction'] = null;\n\n\t\tif (!hasAgreedToTerms) {\n\t\t\trequiresAction = 'terms';\n\t\t} else if (!isInitialized) {\n\t\t\trequiresAction = 'register';\n\t\t} else {\n\t\t\trequiresAction = 'login';\n\t\t}\n\n\t\treturn {\n\t\t\tisRegistered: hasAgreedToTerms && isInitialized,\n\t\t\thasAgreedToTerms,\n\t\t\tisInitialized,\n\t\t\trequiresAction\n\t\t};\n\t} catch (error) {\n\t\tconsole.error('Error checking registration status:', error);\n\t\treturn {\n\t\t\tisRegistered: false,\n\t\t\thasAgreedToTerms: false,\n\t\t\tisInitialized: false,\n\t\t\trequiresAction: 'terms'\n\t\t};\n\t}\n}\n\nexport function isUserLoggedIn(miscStore: string | null): boolean {\n\treturn !!miscStore && miscStore.length > 0;\n}\n","<!-- Upgrade.svelte -->\n<script lang=\"ts\">\n\timport { createForm } from 'svelte-forms-lib';\n\timport * as yup from 'yup';\n\timport Modal from './Modal.svelte';\n\timport Login from './Login.svelte';\n\timport RegistrationPrompt from './RegistrationPrompt.svelte';\n\timport { getProfile, getSettings, yakklMiscStore } from '$lib/common/stores';\n\timport { log } from '$lib/managers/Logger';\n\timport { dateString } from '$lib/common/datetime';\n\timport ErrorNoAction from './ErrorNoAction.svelte';\n\timport Confirmation from './Confirmation.svelte';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\timport Notification from './Notification.svelte';\n\timport { UpgradeManager, type UpgradeResponseMessage } from '$lib/managers/UpgradeManager';\n\timport { canUpgrade } from '$lib/common/utils';\n\timport type { ProfileData } from '$lib/common/interfaces';\n\timport { decryptData } from '$lib/common/encryption';\n\timport { isEncryptedData } from '$lib/common';\n\timport { getAvailableMemberUpgradePlanLevel } from '$lib/common/member_pricing';\n\timport {\n\t\tcheckRegistrationStatus,\n\t\tisUserLoggedIn,\n\t\ttype RegistrationStatus\n\t} from '$lib/common/auth-utils';\n\timport { authStore, isAuthenticated, isRegistered } from '$lib/stores/auth-store';\n\timport AuthError from './AuthError.svelte';\n\timport AuthLoading from './AuthLoading.svelte';\n\timport { closeModal } from '$lib/common/stores/modal';\n\timport { getContextTypeStore } from '$lib/common/stores';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tonComplete?: () => void;\n\t\tonClose?: () => void;\n\t\tonCancel?: () => void;\n\t\topenWallet?: () => void;\n\t\tuseAuthStore?: boolean; // Optional flag to use auth store for state management\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tonComplete = $bindable(() => {}),\n\t\tonClose = $bindable(() => {\n\t\t\tsafeLogout();\n\t\t}),\n\t\tonCancel = $bindable(() => {\n\t\t\t(show = false), (showConfirmation = false), (showNotification = false), (showError = false);\n\t\t}),\n\t\topenWallet,\n\t\tuseAuthStore = false\n\t}: Props = $props();\n\n\t// Detect if we're in sidepanel context\n\tconst contextType = $state(getContextTypeStore());\n\tconst isSidepanel = $derived(\n\t\tcontextType === 'sidepanel' || (contextType?.includes?.('sidepanel') ?? false)\n\t);\n\n\t// Local state\n\tlet showError = $state(false);\n\tlet errorMessage = $state('');\n\tlet isUpgrading = $state(false);\n\tlet isProUser = $state(false);\n\tlet showConfirmation = $state(false);\n\tlet showNotification = $state(false);\n\tlet showRegistrationPrompt = $state(false);\n\tlet showLoginModal = $state(false);\n\tlet progress = $state(0);\n\tlet statusMessage = $state('');\n\tlet isInitializing = $state(false);\n\tlet retryCount = $state(0);\n\tconst maxRetries = 3;\n\tlet formValues = {\n\t\tuserName: '',\n\t\tpassword: '',\n\t\temail: ''\n\t};\n\tlet isLoggedIn = $state(false);\n\tlet registrationStatus = $state<RegistrationStatus | null>(null);\n\tlet planLevelAvailable = $state(\n\t\tgetAvailableMemberUpgradePlanLevel()?.toString()?.toUpperCase()?.replace('_', ' ') ??\n\t\t\t'YAKKL PRO'\n\t);\n\n\tconst upgradeManager = UpgradeManager.getInstance();\n\tlet unregisterHandler: (() => void) | null = null;\n\n\t// Initialize upgrade flow when modal is shown\n\t$effect(() => {\n\t\tif (show) {\n\t\t\tisInitializing = true;\n\t\t\tif (useAuthStore) {\n\t\t\t\t// Ensure auth store is initialized\n\t\t\t\tauthStore\n\t\t\t\t\t.initialize()\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tinitializeUpgradeFlow();\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tlog.error('Failed to initialize auth store:', false, error);\n\t\t\t\t\t\tinitializeUpgradeFlow(); // Continue with fallback\n\t\t\t\t\t})\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tisInitializing = false;\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tinitializeUpgradeFlow().finally(() => {\n\t\t\t\t\tisInitializing = false;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t// Sync internal show state with global modal state\n\t$effect(() => {\n\t\tif (!show && isSidepanel) {\n\t\t\t// If internal show becomes false and we're in sidepanel, ensure global modal state is closed\n\t\t\tcloseModal();\n\t\t}\n\t});\n\n\t// Register message handler when component mounts\n\t$effect(() => {\n\t\tunregisterHandler = upgradeManager.registerMessageHandler(handleUpgradeMessage);\n\t\treturn () => {\n\t\t\tif (unregisterHandler) {\n\t\t\t\tunregisterHandler();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction handleUpgradeMessage(message: UpgradeResponseMessage) {\n\t\tswitch (message.type) {\n\t\t\tcase 'UPGRADE_STARTED':\n\t\t\t\tisUpgrading = true;\n\t\t\t\tprogress = 0;\n\t\t\t\tstatusMessage = 'Starting upgrade process...';\n\t\t\t\tbreak;\n\t\t\tcase 'UPGRADE_PROGRESS':\n\t\t\t\tprogress = message.progress;\n\t\t\t\tstatusMessage = message.status;\n\t\t\t\tbreak;\n\t\t\tcase 'UPGRADE_COMPLETED':\n\t\t\t\tisUpgrading = false;\n\t\t\t\tshow = false;\n\t\t\t\tshowNotification = true;\n\t\t\t\tbreak;\n\t\t\tcase 'UPGRADE_ERROR':\n\t\t\t\tisUpgrading = false;\n\t\t\t\terrorMessage = message.error;\n\t\t\t\tshowError = true;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Enhanced close handler for sidepanel context\n\tfunction handleSidepanelClose() {\n\t\tshow = false; // Ensure internal show state is false\n\t\tcloseModal(); // Close the modal\n\t\tif (!isSidepanel) {\n\t\t\tonClose();\n\t\t}\n\t\t// Don't logout in sidepanel - just close the modal\n\t}\n\n\t// Enhanced cancel handler for sidepanel context\n\tfunction handleSidepanelCancel() {\n\t\tshow = false; // Ensure internal show state is false\n\t\tcloseModal(); // Close the modal\n\t\tshowConfirmation = false;\n\t\tshowNotification = false;\n\t\tshowError = false;\n\n\t\tif (!isSidepanel) {\n\t\t\tonCancel();\n\t\t}\n\t\t// Don't logout in sidepanel - just close the modal\n\t}\n\n\t// Enhanced notification close for sidepanel context\n\tfunction handleNotificationClose() {\n\t\tshowNotification = false;\n\t\tcloseModal(); // Close the modal\n\n\t\t// Add delay to ensure proper cleanup\n\t\tsetTimeout(() => {\n\t\t\tif (!isSidepanel) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t}, 50);\n\t}\n\n\tasync function initializeUpgradeFlow() {\n\t\ttry {\n\t\t\tretryCount = 0; // Reset retry count on new initialization\n\n\t\t\t// First check registration status\n\t\t\tregistrationStatus = await checkRegistrationStatus();\n\n\t\t\tif (!registrationStatus.isRegistered) {\n\t\t\t\tshowRegistrationPrompt = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check login status\n\t\t\tisLoggedIn = useAuthStore ? $isAuthenticated : isUserLoggedIn($yakklMiscStore);\n\n\t\t\tif (!isLoggedIn) {\n\t\t\t\tshowLoginModal = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Continue with pro status check if already logged in\n\t\t\tawait checkProLevelStatus();\n\t\t} catch (error) {\n\t\t\tretryCount++;\n\t\t\tlog.error('Error initializing upgrade flow:', false, error);\n\n\t\t\t// More specific error messages\n\t\t\tif (error instanceof Error) {\n\t\t\t\terrorMessage = `Initialization failed: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = 'Failed to initialize upgrade process';\n\t\t\t}\n\n\t\t\tif (retryCount < maxRetries) {\n\t\t\t\terrorMessage += ` (Attempt ${retryCount}/${maxRetries})`;\n\t\t\t}\n\n\t\t\tshowError = true;\n\t\t}\n\t}\n\n\t// Retry initialization\n\tasync function handleInitRetry() {\n\t\tif (retryCount < maxRetries) {\n\t\t\tshowError = false;\n\t\t\terrorMessage = '';\n\t\t\tisInitializing = true;\n\t\t\ttry {\n\t\t\t\tawait initializeUpgradeFlow();\n\t\t\t} finally {\n\t\t\t\tisInitializing = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Dismiss initialization error\n\tfunction handleInitDismiss() {\n\t\tshowError = false;\n\t\terrorMessage = '';\n\t\tretryCount = 0;\n\n\t\tif (isSidepanel) {\n\t\t\tcloseModal();\n\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t}\n\t}\n\n\tasync function checkProLevelStatus() {\n\t\ttry {\n\t\t\tconst upgradeAllowed = await canUpgrade();\n\t\t\tisProUser = !upgradeAllowed;\n\t\t\tif (!upgradeAllowed) {\n\t\t\t\tshowError = true;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('Error checking upgrade eligibility:', false, error);\n\t\t}\n\t}\n\n\tconst { form, handleSubmit } = createForm({\n\t\tinitialValues: formValues,\n\t\tvalidationSchema: yup.object().shape({\n\t\t\tuserName: yup.string().required('Member username is required'),\n\t\t\tpassword: yup.string().required('Password is required'),\n\t\t\temail: yup.string().email('Must be a valid email.').required('Email is required.')\n\t\t}),\n\t\tonSubmit: async (values) => {\n\t\t\tformValues = values;\n\t\t\tshowConfirmation = true;\n\t\t}\n\t});\n\n\tfunction handleLoginSuccess(\n\t\tprofile: any,\n\t\tdigest: string,\n\t\t_isMinimal: boolean,\n\t\tjwtToken?: string\n\t) {\n\t\tisLoggedIn = true;\n\t\tshowLoginModal = false;\n\n\t\t// Log JWT token availability\n\t\tif (jwtToken) {\n\t\t\tlog.debug('JWT token received in upgrade flow', false, {\n\t\t\t\thasToken: true,\n\t\t\t\tusername: profile.userName\n\t\t\t});\n\t\t}\n\n\t\t// Pre-populate form with profile data\n\t\tif (profile) {\n\t\t\tformValues.userName = profile.userName;\n\t\t\tif (profile.data?.email) {\n\t\t\t\t// Handle encrypted or unencrypted profile data\n\t\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\t\t// The digest is already set by the Login component's verify function\n\t\t\t\t\tdecryptData(profile.data, digest)\n\t\t\t\t\t\t.then((profileData) => {\n\t\t\t\t\t\t\tconst data = profileData as ProfileData;\n\t\t\t\t\t\t\tformValues.email = data.email;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tlog.warn('Error decrypting profile data:', false, error);\n\t\t\t\t\t\t\tformValues.email = '';\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tformValues.email = profile.data.email;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Continue with upgrade flow\n\t\tcheckProLevelStatus();\n\t}\n\n\tfunction handleLoginError(error: any) {\n\t\terrorMessage = typeof error === 'string' ? error : 'Authentication failed';\n\t\tshowError = true;\n\n\t\tif (isSidepanel) {\n\t\t\t// In sidepanel, just close modal on login error after delay\n\t\t\tsetTimeout(() => {\n\t\t\t\tcloseModal();\n\t\t\t\t// Don't logout - user can try again\n\t\t\t}, 2000); // Give user time to see error\n\t\t}\n\t}\n\n\tasync function onProcessUpgrade() {\n\t\ttry {\n\t\t\tconst profile = await getProfile();\n\t\t\tif (!profile) {\n\t\t\t\t// This should never happen\n\t\t\t\tlog.warn('Profile not found', false, 'Upgrade');\n\t\t\t\terrorMessage = 'Profile not found';\n\t\t\t\tshowError = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformValues = {\n\t\t\t\tuserName: '',\n\t\t\t\tpassword: '',\n\t\t\t\temail: ''\n\t\t\t};\n\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tconst profileData = (await decryptData(profile.data, $yakklMiscStore)) as ProfileData;\n\t\t\t\tformValues.userName = profile.userName;\n\t\t\t\tformValues.email = profileData.email;\n\t\t\t} else {\n\t\t\t\tformValues.userName = profile.userName;\n\t\t\t\tformValues.email = (profile.data as ProfileData).email;\n\t\t\t}\n\n\t\t\tshowConfirmation = true;\n\t\t} catch (error) {\n\t\t\tlog.warn('Error in onProcessUpgrade:', false, error);\n\t\t\terrorMessage = error instanceof Error ? error.message : 'An error occurred during upgrade';\n\t\t\tshowError = true;\n\t\t}\n\t}\n\n\tasync function processUpgrade() {\n\t\ttry {\n\t\t\tconst analyticsData = {\n\t\t\t\tutm_source: 'wallet',\n\t\t\t\tutm_campaign: 'yakkl_pro_upgrade',\n\t\t\t\tuser_location: navigator.language,\n\t\t\t\tupgrade_date: dateString(),\n\t\t\t\tcurrent_version: (await getSettings())?.version ?? 'unknown',\n\t\t\t\tplatform: (navigator as any)?.userAgentData?.platform ?? navigator?.platform ?? 'unknown',\n\t\t\t\tuser_agent: navigator?.userAgent ?? 'unknown'\n\t\t\t};\n\n\t\t\tconst planLevel = planLevelAvailable?.replace(' ', '_ ')?.toLowerCase() ?? 'yakkl_pro';\n\t\t\tanalyticsData.utm_campaign = planLevel.includes('_upgrade')\n\t\t\t\t? planLevel\n\t\t\t\t: planLevel + '_upgrade';\n\n\t\t\tawait upgradeManager.processUpgrade({\n\t\t\t\tuserName: formValues.userName,\n\t\t\t\temail: formValues.email,\n\t\t\t\tanalytics: analyticsData,\n\t\t\t\tprofileId: (await getSettings())?.id ?? '',\n\t\t\t\tencryptionKey: $yakklMiscStore\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlog.error('Error in upgrade process:', false, error);\n\t\t\terrorMessage = error instanceof Error ? error.message : 'An error occurred during upgrade';\n\t\t\tshowError = true;\n\t\t}\n\t}\n\n\tfunction onConfirm() {\n\t\tprocessUpgrade();\n\t}\n\n\t// Determine current context for registration prompt\n\tfunction getCurrentContext() {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tconst pathIncludes = window.location.pathname.includes('sidepanel');\n\t\t\treturn pathIncludes ? 'sidepanel' : 'wallet';\n\t\t}\n\t\treturn 'wallet';\n\t}\n\n\t// Update login status when miscStore changes or auth store changes\n\t$effect(() => {\n\t\tif (useAuthStore) {\n\t\t\tisLoggedIn = $isAuthenticated;\n\t\t} else {\n\t\t\tisLoggedIn = isUserLoggedIn($yakklMiscStore);\n\t\t}\n\t});\n</script>\n\n<!-- Registration Prompt -->\n<RegistrationPrompt\n\tbind:show={showRegistrationPrompt}\n\tcontext={getCurrentContext()}\n\t{openWallet}\n\tonCancel={() => {\n\t\tshowRegistrationPrompt = false;\n\t\tshow = false;\n\t\tif (isSidepanel) {\n\t\t\tcloseModal();\n\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t}\n\t}}\n/>\n\n<!-- Login Modal -->\n{#if showLoginModal}\n\t<Modal bind:show={showLoginModal} title=\"Login Required\" className=\"z-[701] text-base-content\">\n\t\t<div class=\"p-6\">\n\t\t\t<p class=\"text-center mb-4 text-gray-600\">Please login to upgrade your account</p>\n\t\t\t<Login\n\t\t\t\tonSuccess={handleLoginSuccess}\n\t\t\t\tonError={handleLoginError}\n\t\t\t\tonCancel={() => {\n\t\t\t\t\tshowLoginModal = false;\n\t\t\t\t\tshow = false;\n\t\t\t\t\tif (isSidepanel) {\n\t\t\t\t\t\tcloseModal();\n\t\t\t\t\t\t// Don't logout in sidepanel - just close the modal\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tloginButtonText=\"Login to Upgrade\"\n\t\t\t\tcancelButtonText=\"Cancel\"\n\t\t\t\t{useAuthStore}\n\t\t\t\tgenerateJWT={!useAuthStore}\n\t\t\t\tinputTextClass=\"text-base-content\"\n\t\t\t\tinputBgClass=\"bg-base-100\"\n\t\t\t/>\n\t\t</div>\n\t</Modal>\n{/if}\n\n<ErrorNoAction\n\tbind:show={showError}\n\tvalue=\"You are already using a {planLevelAvailable.toUpperCase()} level plan\"\n\ttitle=\"Congratulations!\"\n\tonClose={isSidepanel ? handleSidepanelCancel : onCancel}\n/>\n<Confirmation\n\tbind:show={showConfirmation}\n\ttitle=\"Upgrading to {planLevelAvailable.toUpperCase()}!\"\n\tmessage=\"Are you sure you want to upgrade to {planLevelAvailable.toUpperCase()}?\"\n\t{onConfirm}\n\tonCancel={isSidepanel ? handleSidepanelCancel : onCancel}\n/>\n<Notification\n\tbind:show={showNotification}\n\ttitle=\"Upgraded to {planLevelAvailable.toUpperCase()}!\"\n\tmessage=\"You are now using the {planLevelAvailable.toUpperCase()} plan. You can now access all the features of the {planLevelAvailable.toUpperCase()} plan.\"\n\tonClose={isSidepanel ? handleNotificationClose : onClose}\n/>\n\n<Modal\n\tbind:show\n\ttitle=\"Upgrade to {planLevelAvailable.toUpperCase()}\"\n\tonClose={isSidepanel ? handleSidepanelClose : onClose}\n>\n\t<div class=\"space-y-6 p-6\">\n\t\t<div class=\"text-center\">\n\t\t\t<h3 class=\"text-lg font-medium text-gray-900\">\n\t\t\t\tYAKKL Smart Wallet - {planLevelAvailable.toUpperCase()}\n\t\t\t</h3>\n\t\t\t<p class=\"mt-2 text-sm text-gray-500\">\n\t\t\t\tUnlock advanced features and enhanced security for your crypto assets.\n\t\t\t</p>\n\t\t</div>\n\n\t\t{#if isInitializing}\n\t\t\t<AuthLoading\n\t\t\t\tmessage=\"Initializing upgrade process...\"\n\t\t\t\tvariant=\"spinner\"\n\t\t\t\tsize=\"md\"\n\t\t\t\tclassName=\"py-8\"\n\t\t\t/>\n\t\t{:else if isUpgrading}\n\t\t\t<div class=\"flex flex-col items-center justify-center space-y-4\">\n\t\t\t\t<div class=\"w-full max-w-md\">\n\t\t\t\t\t<div class=\"relative pt-1\">\n\t\t\t\t\t\t<div class=\"flex mb-2 items-center justify-between\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclass=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-indigo-600 bg-indigo-200\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{statusMessage}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"text-right\">\n\t\t\t\t\t\t\t\t<span class=\"text-xs font-semibold inline-block text-indigo-600\">\n\t\t\t\t\t\t\t\t\t{progress}%\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-indigo-200\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tstyle=\"width: {progress}%\"\n\t\t\t\t\t\t\t\tclass=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500 transition-all duration-500\"\n\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<div class=\"bg-gray-50 p-4 rounded-lg\">\n\t\t\t\t<h4 class=\"font-medium text-gray-900\">Pro Features</h4>\n\t\t\t\t<ul class=\"mt-2 space-y-2 text-sm text-gray-600\">\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tAutomatic price updates with full analytics\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tParticipate in early access to new features and products\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tReduced swap fees for DeFi platforms\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tAdvanced market analytics and charting\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tFull Emergency Kit for wallet recovery\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tUnlimited accounts\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"flex items-center\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclass=\"h-5 w-5 text-green-500 mr-2\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M5 13l4 4L19 7\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\tAdvanced security features and more...\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t{#if !isLoggedIn && !showLoginModal && !showRegistrationPrompt}\n\t\t\t\t<div class=\"text-center py-8\">\n\t\t\t\t\t<p class=\"text-gray-600 mb-4\">Please login to upgrade your account</p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonclick={() => (showLoginModal = true)}\n\t\t\t\t\t\tclass=\"px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\"\n\t\t\t\t\t>\n\t\t\t\t\t\tLogin to Continue\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{:else if isLoggedIn}\n\t\t\t\t<div class=\"pt-5\">\n\t\t\t\t\t<div class=\"flex justify-end space-x-4\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tonclick={isSidepanel ? handleSidepanelCancel : onCancel}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclass=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n\t\t\t\t\t\t\tdisabled={isUpgrading}\n\t\t\t\t\t\t\tonclick={onProcessUpgrade}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isUpgrading ? 'Upgrading...' : 'Upgrade to Pro Level'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/if}\n\n\t\t<!-- Enhanced error handling -->\n\t\t<AuthError\n\t\t\terror={showError ? errorMessage : null}\n\t\t\tonRetry={retryCount < maxRetries && !isUpgrading && !isInitializing\n\t\t\t\t? handleInitRetry\n\t\t\t\t: undefined}\n\t\t\tonDismiss={!isUpgrading && !isInitializing ? handleInitDismiss : undefined}\n\t\t/>\n\t</div>\n</Modal>\n"],"names":["show","title","message","onClose","safeLogout","UpgradeManager","static","messagePort","upgradeTimeout","maxRetries","currentUpgradeId","messageHandlers","Map","constructor","this","initializeMessagePort","getInstance","instance","processUpgrade","request","Date","now","sendMessage","type","profile","getProfile","settings","getSettings","Error","progress","status","response","makeApiCall","success","error","isEncryptedData","data","decryptedData","decryptData","encryptionKey","registered","plan","PlanType","YAKKL_PRO","source","AccessSourceType","SUBSCRIBED","promo","PromoClassificationType","NONE","trialEndDate","upgradeDate","key","customerId","dateString","updateDate","encryptData","setProfileStorage","setSettingsStorage","log","retries","controller","AbortController","timeoutId","setTimeout","abort","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","json","Promise","resolve","Math","pow","forEach","handler","registerMessageHandler","id","random","toString","substr","set","delete","cancelUpgrade","getAvailableMemberUpgradePlanLevel","FOUNDING_MEMBER_DEADLINE","offer","EARLY_ADOPTER_DEADLINES","date","warn","async","checkRegistrationStatus","hasAgreedToTerms","legal","termsAgreed","isInitialized","init","requiresAction","isRegistered","console","isUserLoggedIn","miscStore","length","onComplete","onCancel","showConfirmation","showNotification","showError","openWallet","useAuthStore","contextType","getContextTypeStore","isSidepanel","includes","errorMessage","isUpgrading","isProUser","showRegistrationPrompt","showLoginModal","isInitializing","retryCount","formValues","userName","password","email","isLoggedIn","registrationStatus","planLevelAvailable","toUpperCase","replace","upgradeManager","handleSidepanelClose","closeModal","handleSidepanelCancel","handleNotificationClose","initializeUpgradeFlow","$.store_get","$$store_subs","isAuthenticated","yakklMiscStore","checkProLevelStatus","handleInitRetry","handleInitDismiss","upgradeAllowed","canUpgrade","createForm","initialValues","validationSchema","yup","object","shape","string","required","onSubmit","values","handleLoginSuccess","digest","_isMinimal","jwtToken","debug","hasToken","username","then","profileData","catch","handleLoginError","analyticsData","utm_source","utm_campaign","user_location","navigator","language","upgrade_date","current_version","version","platform","userAgentData","user_agent","userAgent","planLevel","toLowerCase","analytics","profileId","onConfirm","getCurrentContext","window","pathIncludes","location","pathname","$$value","value","$.stringify","$$payload","out","$.escape","onRetry","onDismiss"],"mappings":"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"}