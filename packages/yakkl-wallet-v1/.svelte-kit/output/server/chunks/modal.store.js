import{p as push,f as attr_class,a as push_element,b as pop_element,c as pop,g as stringify,m as attr,e as escape_html,k as bind_props}from"./index2.js";import{F as FILENAME}from"./utils.js";import{g as get,d as derived,w as writable}from"./index.js";import{b as browser}from"./index4.js";import{P as PlanType}from"./Upgrade2.js";import{at as yakklAccountsStore,z as yakklSettingsStore,m as yakklCurrentlySelectedStore}from"./encryption.js";AIHelpButton[FILENAME]="src/routes/preview2/lib/components/AIHelpButton.svelte";function AIHelpButton($$payload,$$props){push(AIHelpButton);let{className:className=""}=$$props;$$payload.out+=`<a href="/preview2/ai-help"${attr_class(`yakkl-circle-button text-xl z-50 ${className}`)}>`;push_element($$payload,"a",3,0);$$payload.out+=`ðŸ¤–</a>`;pop_element();pop()}AIHelpButton.render=function(){throw new Error("Component.render(...) is no longer valid in Svelte 5. See https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes for more information")};const safeClientSendMessage=async message=>({success:false,error:"Mock implementation"});class BaseService{async sendMessage(message){try{if(!browser){return{success:false,error:{hasError:true,message:"Not in browser environment"}}}const response=await safeClientSendMessage(message);if(response.error){return{success:false,error:{hasError:true,message:response.error?.message||"Unknown error",code:response.error?.code}}}return{success:true,data:response.result}}catch(error){return{success:false,error:{hasError:true,message:error instanceof Error?error.message:"Unknown error"}}}}handleError(error){return{hasError:true,message:error instanceof Error?error.message:"Unknown error",code:error?.code}}}class WalletService extends BaseService{static instance;constructor(){super()}static getInstance(){if(!WalletService.instance){WalletService.instance=new WalletService}return WalletService.instance}async getAccounts(){try{const accounts=get(yakklAccountsStore);const settings=get(yakklSettingsStore);if(accounts&&accounts.length>0){const preview2Accounts=accounts.map(acc=>({address:acc.address||"",ens:acc.alias||null,username:acc.name||"",avatar:acc.avatar||null,isActive:true,balance:acc.quantity?.toString()||"0",plan:settings?.plan?.type||PlanType.Basic}));return{success:true,data:preview2Accounts}}const response=await this.sendMessage({method:"eth_accounts"});if(response.success&&response.data){const preview2Accounts=response.data.map(address=>({address:address,ens:null,username:"",avatar:null,isActive:false,balance:"0",plan:settings?.plan?.type||PlanType.Basic}));return{success:true,data:preview2Accounts}}return response}catch(error){return{success:false,error:this.handleError(error)}}}async getCurrentAccount(){try{const currentlySelected=get(yakklCurrentlySelectedStore);const settings=get(yakklSettingsStore);if(currentlySelected?.shortcuts?.address){const accounts=get(yakklAccountsStore);const account=accounts?.find(acc=>acc.address===currentlySelected.shortcuts.address);if(account){const preview2Account={address:account.address||"",ens:account.alias||null,username:account.name||"",avatar:account.avatar||null,isActive:true,balance:account.quantity?.toString()||"0",plan:settings?.plan?.type||PlanType.Basic};return{success:true,data:preview2Account}}}const accountsResponse=await this.getAccounts();if(accountsResponse.success&&accountsResponse.data&&accountsResponse.data.length>0){return{success:true,data:accountsResponse.data[0]}}return{success:true,data:null}}catch(error){return{success:false,error:this.handleError(error)}}}async getBalance(address){try{const response=await this.sendMessage({method:"eth_getBalance",params:[address,"latest"]});return response}catch(error){return{success:false,error:this.handleError(error)}}}async switchAccount(address){try{const currentlySelected=get(yakklCurrentlySelectedStore);if(currentlySelected){yakklCurrentlySelectedStore.set({...currentlySelected,shortcuts:{...currentlySelected.shortcuts,address:address}})}return{success:true,data:true}}catch(error){return{success:false,error:this.handleError(error)}}}async getChains(){try{const chains=[{key:"eth-mainnet",name:"Ethereum",network:"Mainnet",icon:"/images/eth.svg",isTestnet:false,chainId:1,rpcUrl:"https://mainnet.infura.io/v3/YOUR_KEY"},{key:"eth-sepolia",name:"Ethereum",network:"Sepolia",icon:"/images/eth.svg",isTestnet:true,chainId:11155111,rpcUrl:"https://sepolia.infura.io/v3/YOUR_KEY"},{key:"polygon-mainnet",name:"Polygon",network:"Mainnet",icon:"/images/polygon.svg",isTestnet:false,chainId:137,rpcUrl:"https://polygon-rpc.com"}];return{success:true,data:chains}}catch(error){return{success:false,error:this.handleError(error)}}}async switchChain(chainId){try{const response=await this.sendMessage({method:"wallet_switchEthereumChain",params:[{chainId:`0x${chainId.toString(16)}`}]});if(response.success){const currentlySelected=get(yakklCurrentlySelectedStore);if(currentlySelected){yakklCurrentlySelectedStore.set({...currentlySelected,shortcuts:{...currentlySelected.shortcuts,chainId:chainId}})}}return response}catch(error){return{success:false,error:this.handleError(error)}}}}function createChainStore(){const walletService=WalletService.getInstance();const{subscribe:subscribe,set:set,update:update}=writable({chains:[],currentChain:null,showTestnets:false,loading:{isLoading:false},error:{hasError:false}});return{subscribe:subscribe,async loadChains(){update(state=>({...state,loading:{isLoading:true,message:"Loading networks..."}}));const response=await walletService.getChains();if(response.success&&response.data){update(state=>({...state,chains:response.data,currentChain:response.data.find(c=>c.chainId===1)||response.data[0],loading:{isLoading:false},error:{hasError:false}}))}else{update(state=>({...state,loading:{isLoading:false},error:response.error||{hasError:true,message:"Failed to load chains"}}))}},async switchChain(chainId){update(state=>({...state,loading:{isLoading:true,message:"Switching network..."}}));const response=await walletService.switchChain(chainId);if(response.success){update(state=>{const chain=state.chains.find(c=>c.chainId===chainId);return{...state,currentChain:chain||null,loading:{isLoading:false},error:{hasError:false}}})}else{update(state=>({...state,loading:{isLoading:false},error:response.error||{hasError:true,message:"Failed to switch network"}}))}},setCurrentChain(chain){update(state=>({...state,currentChain:chain}))},toggleTestnets(){update(state=>({...state,showTestnets:!state.showTestnets}))},reset(){set({chains:[],currentChain:null,showTestnets:false,loading:{isLoading:false},error:{hasError:false}})}}}const chainStore=createChainStore();const currentChain=derived(chainStore,$store=>$store.currentChain);const visibleChains=derived(chainStore,$store=>$store.showTestnets?$store.chains:$store.chains.filter(chain=>!chain.isTestnet));derived(chainStore,$store=>$store.loading.isLoading);const chain_store=Object.freeze(Object.defineProperty({__proto__:null,chainStore:chainStore,currentChain:currentChain,visibleChains:visibleChains},Symbol.toStringTag,{value:"Module"}));function createAccountStore(){const walletService=WalletService.getInstance();const{subscribe:subscribe,set:set,update:update}=writable({accounts:[],currentAccount:null,loading:{isLoading:false},error:{hasError:false}});return{subscribe:subscribe,async loadAccounts(){update(state=>({...state,loading:{isLoading:true,message:"Loading accounts..."}}));const response=await walletService.getAccounts();if(response.success&&response.data){update(state=>({...state,accounts:response.data,loading:{isLoading:false},error:{hasError:false}}));const currentResponse=await walletService.getCurrentAccount();if(currentResponse.success&&currentResponse.data){update(state=>({...state,currentAccount:currentResponse.data}))}}else{update(state=>({...state,loading:{isLoading:false},error:response.error||{hasError:true,message:"Failed to load accounts"}}))}},async switchAccount(address){const response=await walletService.switchAccount(address);if(response.success){update(state=>{const account=state.accounts.find(acc=>acc.address===address);return{...state,currentAccount:account||null}})}},setCurrentAccount(account){update(state=>({...state,currentAccount:account}))},reset(){set({accounts:[],currentAccount:null,loading:{isLoading:false},error:{hasError:false}})}}}const accountStore=createAccountStore();const currentAccount=derived(accountStore,$store=>$store.currentAccount);derived(accountStore,$store=>$store.accounts);derived(accountStore,$store=>$store.loading.isLoading);const account_store=Object.freeze(Object.defineProperty({__proto__:null,accountStore:accountStore,currentAccount:currentAccount},Symbol.toStringTag,{value:"Module"}));Modal[FILENAME]="src/routes/preview2/lib/components/v1/Modal.svelte";function Modal($$payload,$$props){push(Modal);let{show:show=false,title:title="",description:description="",className:className="",children:children,footer:footer,onCancel:onCancel=()=>{show=false},onClose:onClose=()=>{show=false},preventClose:preventClose=false}=$$props;if(show){$$payload.out+="\x3c!--[--\x3e";$$payload.out+=`<div${attr_class(`fixed inset-0 flex items-center justify-center z-[699] ${stringify(className)}`)} aria-modal="true">`;push_element($$payload,"div",26,1);$$payload.out+=`<div class="absolute inset-0 bg-black opacity-50">`;push_element($$payload,"div",29,2);$$payload.out+=`</div>`;pop_element();$$payload.out+=` <div class="bg-surface-light dark:bg-surface-dark text-primary-light dark:text-primary-dark rounded-lg shadow-lg w-full max-w-md mx-4 z-10 max-h-[80%] flex flex-col overflow-hidden">`;push_element($$payload,"div",32,2);$$payload.out+=`<div class="p-4 relative overflow-hidden">`;push_element($$payload,"div",36,3);if(!preventClose){$$payload.out+="\x3c!--[--\x3e";$$payload.out+=`<button class="absolute top-4 right-4 text-2xl font-bold hover:text-primary-light dark:hover:text-primary-dark focus:outline-none">`;push_element($$payload,"button",38,5);$$payload.out+=`Ã—</button>`;pop_element()}else{$$payload.out+="\x3c!--[!--\x3e"}$$payload.out+=`\x3c!--]--\x3e `;if(description){$$payload.out+="\x3c!--[--\x3e";$$payload.out+=`<h2 class="text-2xl font-bold mb-4 text-primary-light dark:text-primary-dark truncate pr-8"${attr("title",title)}>`;push_element($$payload,"h2",46,5);$$payload.out+=`${escape_html(title)}</h2>`;pop_element();$$payload.out+=` <p class="text-sm mb-2 text-secondary-light dark:text-secondary-dark">`;push_element($$payload,"p",52,5);$$payload.out+=`${escape_html(description)}</p>`;pop_element()}else{$$payload.out+="\x3c!--[!--\x3e";$$payload.out+=`<h2 class="text-2xl font-bold mb-2 text-primary-light dark:text-primary-dark truncate pr-8"${attr("title",title)}>`;push_element($$payload,"h2",56,5);$$payload.out+=`${escape_html(title)}</h2>`;pop_element()}$$payload.out+=`\x3c!--]--\x3e</div>`;pop_element();$$payload.out+=` <div class="flex-1 overflow-y-auto overflow-x-hidden px-4">`;push_element($$payload,"div",66,3);children?.($$payload);$$payload.out+=`\x3c!----\x3e</div>`;pop_element();$$payload.out+=` <div class="px-6 py-3 rounded-b-lg border-t border-neutral-light dark:border-neutral-dark bg-surface-light dark:bg-surface-dark text-primary-light dark:text-primary-dark overflow-hidden">`;push_element($$payload,"div",71,3);footer?.($$payload);$$payload.out+=`\x3c!----\x3e</div>`;pop_element();$$payload.out+=`</div>`;pop_element();$$payload.out+=`</div>`;pop_element()}else{$$payload.out+="\x3c!--[!--\x3e"}$$payload.out+=`\x3c!--]--\x3e`;bind_props($$props,{show:show});pop()}Modal.render=function(){throw new Error("Component.render(...) is no longer valid in Svelte 5. See https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes for more information")};function createModalStore(){const{subscribe:subscribe,set:set,update:update}=writable({isOpen:false,modalType:void 0,modalId:void 0});return{subscribe:subscribe,openModal(type,id){update(state=>({...state,isOpen:true,modalType:type,modalId:id}))},closeModal(){set({isOpen:false,modalType:void 0,modalId:void 0})},isModalOpen:()=>{let isOpen=false;subscribe(state=>{isOpen=state.isOpen})();return isOpen}}}const modalStore=createModalStore();const isModalOpen=writable(false);modalStore.subscribe(state=>{isModalOpen.set(state.isOpen)});export{AIHelpButton as A,BaseService as B,Modal as M,currentAccount as a,chainStore as b,currentChain as c,accountStore as d,chain_store as e,account_store as f,isModalOpen as i,visibleChains as v};
//# sourceMappingURL=modal.store.js.map
