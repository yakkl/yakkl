import{l as log}from"./Logger.js";class GlobalListenerManager{contextManagers=new Map;hasContext(context){return this.contextManagers.has(context)}registerContext(context,manager){if(!this.contextManagers.has(context)){this.contextManagers.set(context,manager)}else{log.warn(`ListenerManager for context "${context}" is already registered.`)}}addListener(context,event,handler){const manager=this.contextManagers.get(context);if(manager){manager.add(event,handler)}else{log.error(`ListenerManager for context "${context}" is not registered.`)}}removeListener(context,event,handler){const manager=this.contextManagers.get(context);if(manager){manager.remove(event,handler)}else{log.error(`ListenerManager for context "${context}" is not registered.`)}}removeAllFromContext(context){const manager=this.contextManagers.get(context);if(manager){manager.removeAll()}else{log.error(`ListenerManager for context "${context}" is not registered.`)}}removeAll(){this.contextManagers.forEach((manager,context)=>{manager.removeAll()})}}const globalListenerManager=new GlobalListenerManager;export{globalListenerManager as g};
//# sourceMappingURL=GlobalListenerManager.js.map
