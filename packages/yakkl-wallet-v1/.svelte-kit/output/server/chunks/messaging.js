import{b as browser}from"./index4.js";import{l as log}from"./encryption.js";import{UnifiedTimerManager}from"./UnifiedTimerManager.js";class ExtensionMessaging{static instance;messageQueue=new Map;processedResponses=new Map;isProcessing=false;retryCount=new Map;MAX_RETRIES=3;RETRY_DELAY=500;browserApi=null;contextId="";pendingRequests=new Map;timerManager=UnifiedTimerManager.getInstance();FIRE_AND_FORGET_MESSAGES=["clientReady","ui_context_initialized","ui_context_activity","ui_context_closing","SET_LOGIN_VERIFIED","USER_ACTIVITY","CLEAR_ALL_ENHANCED_ALERTS","CLEAR_NOTIFICATION","CLEAR_NOTIFICATION_ENHANCED","IDLE_STATUS_CHANGED","LOCKDOWN_WARNING_ENHANCED","SECURITY_ALERT_ENHANCED","PLAY_URGENT_SOUND"];static getInstance(){if(!ExtensionMessaging.instance){ExtensionMessaging.instance=new ExtensionMessaging}return ExtensionMessaging.instance}initialize(browserExtensionApi){return}async sendCleanupMessage(type,data={},source="unknown"){return}handleIncomingMessage(message,sender,sendResponse){if(!message||!message.responseId)return true;const{responseId:responseId,result:result,error:error}=message;const pendingRequest=this.pendingRequests.get(responseId);if(pendingRequest){if(error){pendingRequest.reject(error)}else{pendingRequest.resolve(result)}this.pendingRequests.delete(responseId);this.processedResponses.set(responseId,{timestamp:Date.now(),result:error||result})}return true}async sendMessage(type,data={},options={}){{return Promise.resolve(null)}}async processQueue(){return}cleanup(){const now=Date.now();for(const[messageId,request]of this.pendingRequests.entries()){if(now-request.timestamp>6e4){request.reject(new Error("Request timed out"));this.pendingRequests.delete(messageId)}}for(const[messageId,response]of this.processedResponses.entries()){if(now-response.timestamp>3e5){this.processedResponses.delete(messageId)}}}getContextId(){return this.contextId}isInitialized(){return this.browserApi!==null}triggerActivityDetection(){return}async registerUiContext(contextType){return}async sendActivityUpdate(){return}async setLoginVerified(verified,contextType){{log.warn(`[Messaging - setLoginVerified] ‚ùå CANNOT SET LOGIN VERIFIED:`,false,{isBrowser:browser,hasBrowserApi:!!this.browserApi,verified:verified,contextType:contextType});return}}getContextType(){try{if(!browser||typeof window==="undefined")return"unknown";const pathname=window.location.pathname;const href=window.location.href;if(pathname.includes("sidepanel")||href.includes("sidepanel")){return"sidepanel"}else if(pathname.includes("index.html")||href.includes("index.html")||pathname==="/"||pathname===""){return"popup-wallet"}else if(pathname.includes("dapp/popups")||href.includes("dapp/popups")){return"popup-dapp"}else if(pathname.includes("options")||href.includes("options")){return"options"}else{return"popup-wallet"}}catch(error){return"unknown"}}setupActivityTracking(){return}}const messagingService=ExtensionMessaging.getInstance();async function startActivityTracking(contextType){return}async function stopActivityTracking(){return}export{messagingService as default,messagingService,startActivityTracking,stopActivityTracking};
//# sourceMappingURL=messaging.js.map
