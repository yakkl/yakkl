import{w as writable}from"./index.js";import{UnifiedTimerManager}from"./UnifiedTimerManager.js";const timerManagerStore=writable(null);class TimerManager{timers=new Map;static instance=null;unifiedManager;constructor(){if(TimerManager.instance){if(!timerManagerStore){timerManagerStore.set(this)}return TimerManager.instance}this.unifiedManager=UnifiedTimerManager.getInstance();TimerManager.instance=this;timerManagerStore.set(this)}static getInstance(){return TimerManager.instance??new TimerManager}static clearInstance(){if(this.instance){this.instance.unifiedManager.clearAll()}this.instance=null;timerManagerStore.set(null)}static resetInstance(){this.clearInstance();return this.getInstance()}addTimer(id,callback,duration){this.timers.set(id,{id:id,callback:callback,duration:duration,handleIntervalID:null});this.unifiedManager.addInterval(id,callback,duration)}hasTimer(id){return this.timers.has(id)}startTimer(id){this.unifiedManager.startInterval(id)}startTimerDelayed(id){this.unifiedManager.startInterval(id)}startTimerImmediate(id){this.unifiedManager.startInterval(id,true)}stopTimer(id){this.unifiedManager.stopInterval(id)}startAll(){this.timers.forEach((_,id)=>this.unifiedManager.startInterval(id))}stopAll(){this.timers.forEach((_,id)=>this.unifiedManager.stopInterval(id))}removeTimer(id){this.unifiedManager.removeInterval(id);this.timers.delete(id)}removeAll(){this.unifiedManager.clearAll();this.timers.clear()}isRunning(id){return this.unifiedManager.isIntervalRunning(id)}getTimeoutID(_id){return null}getRunningTimers(){return this.unifiedManager.getRunningTimers().intervals}listTimers(){return Array.from(this.timers.keys())}}const getTimerManager=()=>TimerManager.getInstance();export{TimerManager as T,getTimerManager as g};
//# sourceMappingURL=TimerManager.js.map
