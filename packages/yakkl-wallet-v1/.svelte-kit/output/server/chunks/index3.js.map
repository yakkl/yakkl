{"version":3,"file":"index3.js","sources":["../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/app/state/client.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/app/state/server.js","../../../../../../node_modules/.pnpm/@sveltejs+kit@2.21.5_@sveltejs+vite-plugin-svelte@5.1.0_svelte@5.34.3_vite@6.3.5_@types+node@_kkg52bulj3afeke4e35iads2tm/node_modules/@sveltejs/kit/src/runtime/app/state/index.js"],"sourcesContent":["import {\n\tpage as _page,\n\tnavigating as _navigating,\n\tupdated as _updated\n} from '../../client/state.svelte.js';\nimport { stores } from '../../client/client.js';\n\nexport const page = {\n\tget data() {\n\t\treturn _page.data;\n\t},\n\tget error() {\n\t\treturn _page.error;\n\t},\n\tget form() {\n\t\treturn _page.form;\n\t},\n\tget params() {\n\t\treturn _page.params;\n\t},\n\tget route() {\n\t\treturn _page.route;\n\t},\n\tget state() {\n\t\treturn _page.state;\n\t},\n\tget status() {\n\t\treturn _page.status;\n\t},\n\tget url() {\n\t\treturn _page.url;\n\t}\n};\n\nexport const navigating = {\n\tget from() {\n\t\treturn _navigating.current ? _navigating.current.from : null;\n\t},\n\tget to() {\n\t\treturn _navigating.current ? _navigating.current.to : null;\n\t},\n\tget type() {\n\t\treturn _navigating.current ? _navigating.current.type : null;\n\t},\n\tget willUnload() {\n\t\treturn _navigating.current ? _navigating.current.willUnload : null;\n\t},\n\tget delta() {\n\t\treturn _navigating.current ? _navigating.current.delta : null;\n\t},\n\tget complete() {\n\t\treturn _navigating.current ? _navigating.current.complete : null;\n\t}\n};\n\nObject.defineProperty(navigating, 'current', {\n\tget() {\n\t\t// between 2.12.0 and 2.12.1 `navigating.current` existed\n\t\tthrow new Error('Replace navigating.current.<prop> with navigating.<prop>');\n\t}\n});\n\nexport const updated = {\n\tget current() {\n\t\treturn _updated.current;\n\t},\n\tcheck: stores.updated.check\n};\n","import { getContext } from 'svelte';\n\nfunction context() {\n\treturn getContext('__request__');\n}\n\n/** @param {string} name */\nfunction context_dev(name) {\n\ttry {\n\t\treturn context();\n\t} catch {\n\t\tthrow new Error(\n\t\t\t`Can only read '${name}' on the server during rendering (not in e.g. \\`load\\` functions), as it is bound to the current request via component context. This prevents state from leaking between users.` +\n\t\t\t\t'For more information, see https://svelte.dev/docs/kit/state-management#avoid-shared-state-on-the-server'\n\t\t);\n\t}\n}\n\n// TODO we're using DEV in some places and __SVELTEKIT_DEV__ in others - why? Can we consolidate?\nexport const page = {\n\tget data() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.data') : context()).page.data;\n\t},\n\tget error() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.error') : context()).page.error;\n\t},\n\tget form() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.form') : context()).page.form;\n\t},\n\tget params() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.params') : context()).page.params;\n\t},\n\tget route() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.route') : context()).page.route;\n\t},\n\tget state() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.state') : context()).page.state;\n\t},\n\tget status() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.status') : context()).page.status;\n\t},\n\tget url() {\n\t\treturn (__SVELTEKIT_DEV__ ? context_dev('page.url') : context()).page.url;\n\t}\n};\n\nexport const navigating = {\n\tfrom: null,\n\tto: null,\n\ttype: null,\n\twillUnload: null,\n\tdelta: null,\n\tcomplete: null\n};\n\nexport const updated = {\n\tget current() {\n\t\treturn false;\n\t},\n\tcheck: () => {\n\t\tthrow new Error('Can only call updated.check() in the browser');\n\t}\n};\n","import {\n\tpage as client_page,\n\tnavigating as client_navigating,\n\tupdated as client_updated\n} from './client.js';\nimport {\n\tpage as server_page,\n\tnavigating as server_navigating,\n\tupdated as server_updated\n} from './server.js';\nimport { BROWSER } from 'esm-env';\n\n/**\n * A read-only reactive object with information about the current page, serving several use cases:\n * - retrieving the combined `data` of all pages/layouts anywhere in your component tree (also see [loading data](https://svelte.dev/docs/kit/load))\n * - retrieving the current value of the `form` prop anywhere in your component tree (also see [form actions](https://svelte.dev/docs/kit/form-actions))\n * - retrieving the page state that was set through `goto`, `pushState` or `replaceState` (also see [goto](https://svelte.dev/docs/kit/$app-navigation#goto) and [shallow routing](https://svelte.dev/docs/kit/shallow-routing))\n * - retrieving metadata such as the URL you're on, the current route and its parameters, and whether or not there was an error\n *\n * ```svelte\n * <!--- file: +layout.svelte --->\n * <script>\n * \timport { page } from '$app/state';\n * </script>\n *\n * <p>Currently at {page.url.pathname}</p>\n *\n * {#if page.error}\n * \t<span class=\"red\">Problem detected</span>\n * {:else}\n * \t<span class=\"small\">All systems operational</span>\n * {/if}\n * ```\n *\n * Changes to `page` are available exclusively with runes. (The legacy reactivity syntax will not reflect any changes)\n *\n * ```svelte\n * <!--- file: +page.svelte --->\n * <script>\n * \timport { page } from '$app/state';\n * \tconst id = $derived(page.params.id); // This will correctly update id for usage on this page\n * \t$: badId = page.params.id; // Do not use; will never update after initial load\n * </script>\n * ```\n *\n * On the server, values can only be read during rendering (in other words _not_ in e.g. `load` functions). In the browser, the values can be read at any time.\n *\n * @type {import('@sveltejs/kit').Page}\n */\nexport const page = BROWSER ? client_page : server_page;\n\n/**\n * A read-only object representing an in-progress navigation, with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties.\n * Values are `null` when no navigation is occurring, or during server rendering.\n * @type {import('@sveltejs/kit').Navigation | { from: null, to: null, type: null, willUnload: null, delta: null, complete: null }}\n */\n// @ts-expect-error\nexport const navigating = BROWSER ? client_navigating : server_navigating;\n\n/**\n * A read-only reactive value that's initially `false`. If [`version.pollInterval`](https://svelte.dev/docs/kit/configuration#version) is a non-zero value, SvelteKit will poll for new versions of the app and update `current` to `true` when it detects one. `updated.check()` will force an immediate check, regardless of polling.\n * @type {{ get current(): boolean; check(): Promise<boolean>; }}\n */\nexport const updated = BROWSER ? client_updated : server_updated;\n"],"names":["check","stores","updated","context","getContext","page","data","error","form","params","route","state","status","url","server_page"],"mappings":"gFAkECA,MAAOC,OAAOC,QAAQF,QChEvB,SAASG,UACR,OAAOC,WAAW,cACnB,CAeO,MAAMC,OAAO,CACnB,QAAIC,GACoD,OAAAH,UAAWE,KAAKC,IACxE,EACA,SAAIC,GACqD,OAAAJ,UAAWE,KAAKE,KACzE,EACA,QAAIC,GACoD,OAAAL,UAAWE,KAAKG,IACxE,EACA,UAAIC,GACsD,OAAAN,UAAWE,KAAKI,MAC1E,EACA,SAAIC,GACqD,OAAAP,UAAWE,KAAKK,KACzE,EACA,SAAIC,GACqD,OAAAR,UAAWE,KAAKM,KACzE,EACA,UAAIC,GACsD,OAAAT,UAAWE,KAAKO,MAC1E,EACA,OAAIC,GACmD,OAAAV,UAAWE,KAAKQ,GAAA,GCO5D,MAACR,KAA+BS","x_google_ignoreList":[0,1,2]}