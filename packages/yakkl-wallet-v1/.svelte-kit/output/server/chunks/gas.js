import"./utils.js";import{T as TIMER_GAS_PRICE_CHECK}from"./encryption.js";import{g as getTimerManager}from"./TimerManager.js";import{l as log}from"./Logger.js";import"./environment.js";import{UnifiedTimerManager}from"./UnifiedTimerManager.js";const now=()=>+Date.now()/1e3;const gasFeeTrend=[];function setGasCBProvider(provider){}function stopCheckGasPrices(){try{getTimerManager().stopTimer(TIMER_GAS_PRICE_CHECK);setGasCBProvider(null)}catch(error){log.error(error)}}const memoizeAsync=fn=>{const CACHE_DURATION=10;let lastRunTs=0;let cache;return async()=>{const isCacheExpired=now()-lastRunTs>CACHE_DURATION;if(isCacheExpired){lastRunTs=now();cache=await fn()}return cache}};const debounce=fn=>{const debouncedFn=UnifiedTimerManager.createDebounce(async()=>fn(),500);return()=>new Promise((resolve,reject)=>{try{const asyncWrapper=async()=>{try{const result=await fn();resolve(result)}catch(error){reject(error)}};debouncedFn.cancel();const newDebouncedFn=UnifiedTimerManager.createDebounce(asyncWrapper,500);newDebouncedFn()}catch(error){reject(error)}})};const getBlocknativeData=memoizeAsync(async()=>(await fetch("https://api.blocknative.com/gasprices/blockprices?confidenceLevels=99&confidenceLevels=95&confidenceLevels=90&confidenceLevels=80&confidenceLevels=70")).json());const getEtherscanData=memoizeAsync(async()=>(await fetch("https://api.etherscan.io/api?module=gastracker&action=gasoracle")).json());const getEGSData=memoizeAsync(async()=>(await fetch("https://ethgasstation.info/api/ethgasAPI.json?api-key=3923e07fd996632e1fbc897c859aa90a1f604bab3a2c22efa2780109db6f")).json());debounce(async()=>{try{const response=await getBlocknativeData();if(response?.blockPrices){const blockPrices=response.blockPrices[0];const estimatedPrices=blockPrices.estimatedPrices;const fastest=estimatedPrices.find(price=>price.confidence===99);const faster=estimatedPrices.find(price=>price.confidence===95);const fast=estimatedPrices.find(price=>price.confidence===90);const standard=estimatedPrices.find(price=>price.confidence===80);const slow=estimatedPrices.find(price=>price.confidence===70);if(gasFeeTrend.length>4){gasFeeTrend.shift()}gasFeeTrend.push({blocknumber:blockPrices.blockNumber,baseFeePerGas:blockPrices.baseFeePerGas,maxPriorityFeePerGas:fastest.maxPriorityFeePerGas,maxFeePerGas:fastest.maxFeePerGas,timestamp:now()});const sum=gasFeeTrend.reduce((accumulator,currentValue)=>accumulator+currentValue.baseFeePerGas,0);const avg=sum/gasFeeTrend.length;const results={blockNumber:blockPrices.blockNumber,estimatedTransactionCount:blockPrices.estimatedTransactionCount,gasProvider:"blocknative",actual:{baseFeePerGas:blockPrices.baseFeePerGas,fastest:{maxPriorityFeePerGas:fastest.maxPriorityFeePerGas,maxFeePerGas:fastest.maxFeePerGas},faster:{maxPriorityFeePerGas:faster.maxPriorityFeePerGas,maxFeePerGas:faster.maxFeePerGas},fast:{maxPriorityFeePerGas:fast.maxPriorityFeePerGas,maxFeePerGas:fast.maxFeePerGas},standard:{maxPriorityFeePerGas:standard.maxPriorityFeePerGas,maxFeePerGas:standard.maxFeePerGas},slow:{maxPriorityFeePerGas:slow.maxPriorityFeePerGas,maxFeePerGas:slow.maxFeePerGas}},gasFeeTrend:{baseFeePerGasAvg:avg,mostRecentFees:gasFeeTrend}};return results}else{return{}}}catch(error){log.error(error);return{}}});debounce(async()=>{try{const{result:{SafeGasPrice:SafeGasPrice,ProposeGasPrice:ProposeGasPrice,FastGasPrice:FastGasPrice}}=await getEtherscanData();return[parseInt(FastGasPrice,10),parseInt(ProposeGasPrice,10),parseInt(SafeGasPrice,10)]}catch(error){log.error(error);return[0,0,0]}});debounce(async()=>{try{const{fast:fast,safeLow:safeLow,average:average}=await getEGSData();return[fast/10,average/10,safeLow/10]}catch(error){log.error(error);return[0,0,0]}});export{debounce as d,stopCheckGasPrices as s};
//# sourceMappingURL=gas.js.map
