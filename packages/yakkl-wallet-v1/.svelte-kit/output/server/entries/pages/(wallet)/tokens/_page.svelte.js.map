{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/lib/components/RegistrationOption.svelte","../../../../../../../src/lib/components/RegistrationOptionModal.svelte","../../../../../../../src/lib/components/SwapModal.svelte","../../../../../../../src/lib/components/PriceTracker.svelte","../../../../../../../src/lib/components/TokenPrice.svelte","../../../../../../../src/lib/components/send/validation.ts","../../../../../../../src/lib/components/send/SendForm.svelte","../../../../../../../src/lib/components/send/SendFormModal.svelte","../../../../../../../src/routes/(wallet)/tokens/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n\t// NOTE: This is for the RegistrationOption component. The RegistrationOptionModal is only for the RegistrationOption component. Restore requires a valid account to be created first. So, removed restore from here for now.\n\timport { onMount } from 'svelte';\n\timport { getSettings } from '$lib/common/stores';\n\timport { shouldShowProFeatures } from '$lib/common/token-analytics';\n\timport { PlanType } from '$lib/common/types';\n\timport type { Settings } from '$lib/common/interfaces';\n\timport SimpleTooltip from './SimpleTooltip.svelte';\n\n\tinterface Props {\n\t\t/// <reference types=\"svelte\" />\n\t\ttitle?: string;\n\t\tonCreate: () => void;\n\t\tonImport: () => void; // NOTE: import and restore will not work if there is no account created first. Need to either create a tmp account and restore or move this to another component.\n\t\tonRestore: () => void;\n\t}\n\n\tlet {\n\t\ttitle = 'Registration/Restoration Options',\n\t\tonCreate,\n\t\tonImport = () => void {},\n\t\tonRestore = () => void {}\n\t}: Props = $props();\n\n\tlet settings: Settings | null = $state(null);\n\tlet isProUser = $state(false);\n\n\tonMount(async () => {\n\t\tsettings = await getSettings();\n\t\tisProUser = shouldShowProFeatures(settings?.plan?.type || PlanType.BASIC_MEMBER);\n\t});\n\n\tfunction handleRestore() {\n\t\tif (!isProUser) return;\n\t\tonRestore();\n\t}\n</script>\n\n<div class=\"bg-surface-light dark:bg-surface-dark rounded-lg p-6 shadow-md\">\n\t<h1 class=\"text-2xl font-bold text-center text-primary-light dark:text-primary-dark mb-4\">\n\t\t{title}\n\t</h1>\n\n\t<div class=\"space-y-4 mb-6\">\n\t\t<p class=\"text-secondary-light dark:text-secondary-dark text-center\">\n\t\t\tChoose an option to get started with your wallet:\n\t\t</p>\n\t\t<ul class=\"list-disc list-inside text-secondary-light dark:text-secondary-dark space-y-2\">\n\t\t\t<li>Create a new account if this is your first time</li>\n\t\t\t<!-- <li>Import an existing account if you have one</li> -->\n\t\t\t<li>\n\t\t\t\tRestore from a YAKKL Emergency Kit if you're recovering your wallet (AFTER creating the\n\t\t\t\tinitial account!)\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\n\t<div class=\"space-y-3\">\n\t\t<!-- Create New Account Button -->\n\t\t<button\n\t\t\tonclick={onCreate}\n\t\t\tclass=\"w-full py-2 px-4 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition duration-200 ease-in-out\"\n\t\t>\n\t\t\tCreate New Account\n\t\t</button>\n\n\t\t<div class=\"my-4 border-t border-neutral-dark dark:border-neutral-light\"></div>\n\n\t\t<!-- Import Existing Account Button -->\n\t\t<button\n\t\t\tonclick={onImport}\n\t\t\tclass=\"w-full py-2 px-4 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75 transition duration-200 ease-in-out\"\n\t\t>\n\t\t\tImport Existing Account(s)\n\t\t</button>\n\n\t\t<!-- Restore from Emergency Kit Button -->\n\t\t{#if isProUser}\n\t\t\t<button\n\t\t\t\tonclick={handleRestore}\n\t\t\t\tclass=\"w-full py-2 px-4 bg-red-600 text-white font-semibold rounded-lg shadow-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75 transition duration-200 ease-in-out flex items-center justify-center gap-2\"\n\t\t\t>\n\t\t\t\t<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t\t</svg>\n\t\t\t\tRestore from Emergency Kit\n\t\t\t</button>\n\t\t{:else}\n\t\t\t<SimpleTooltip content=\"Upgrade to Pro for full Emergency Kit features\">\n\t\t\t\t<button\n\t\t\t\t\tdisabled\n\t\t\t\t\tclass=\"w-full py-2 px-4 bg-gray-400 text-gray-200 font-semibold rounded-lg shadow-md cursor-not-allowed transition duration-200 ease-in-out flex items-center justify-center gap-2 relative\"\n\t\t\t\t>\n\t\t\t\t\t<svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t\tRestore from Emergency Kit\n\t\t\t\t\t<div class=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-indigo-400 to-purple-400 rounded-full flex items-center justify-center\">\n\t\t\t\t\t\t<svg class=\"w-2.5 h-2.5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</button>\n\t\t\t</SimpleTooltip>\n\t\t{/if}\n\t</div>\n</div>\n","<script lang=\"ts\">\n\timport Modal from '$lib/components/Modal.svelte';\n\timport RegistrationOption from '$lib/components/RegistrationOption.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tonCancel?: () => void;\n\t\tonClose?: () => void;\n\t\tonCreate: () => void;\n\t\tonImport?: () => void; // NOTE: This is for the RegistrationOptionModal component. The RegistrationOption is only for the RegistrationOptionModal component. Restore requires a valid account to be created first. So, removed restore from here for now.\n\t\tonRestore?: () => void; // NOTE: RegistrationOption below does not have onImport nor onRestore.\n\t}\n\n\tlet {\n\t\tshow = $bindable(false),\n\t\tonCancel = $bindable(() => {\n\t\t\tshow = false;\n\t\t}),\n\t\tonClose = $bindable(() => {\n\t\t\tshow = false;\n\t\t}),\n\t\tonCreate,\n\t\tonImport,\n\t\tonRestore\n\t}: Props = $props();\n\n\t// NOTE: This is for the RegistrationOptionModal component. The RegistrationOption is only for the RegistrationOptionModal component. Restore requires a valid account to be created first. So, removed restore from here for now.\n</script>\n\n<Modal bind:show {onCancel} {onClose} title=\"Registration/Restoration Options\">\n\t<RegistrationOption {onCreate} {onImport} {onRestore} title=\"Options\" />\n</Modal>\n","<script lang=\"ts\">\n\timport type { Profile, ProfileData, SwapToken } from '$lib/common/interfaces';\n\timport { decryptData, isEncryptedData, type BigNumberish } from '$lib/common';\n\timport type { Provider } from '$lib/managers/Provider';\n\timport type { Ethereum } from '$lib/managers/blockchains/evm/ethereum/Ethereum';\n\timport type { UniswapSwapManager } from '$lib/managers/UniswapSwapManager';\n\timport type { TokenService } from '$lib/managers/blockchains/evm/TokenService';\n\timport Swap from './Swap.svelte';\n\timport { getMiscStore, getProfile } from '$lib/common/stores';\n\timport { deepCopy } from '$lib/utilities';\n\timport ErrorNoAction from './ErrorNoAction.svelte';\n\timport Warning from './Warning.svelte';\n\timport PincodeVerify from './PincodeVerify.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\tfundingAddress: string;\n\t\tprovider: Provider;\n\t\tblockchain: Ethereum;\n\t\tswapManager: UniswapSwapManager;\n\t\ttokenService: TokenService<any>;\n\t\t// export let gasProvider: EthereumGasProvider;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\tshow = $bindable(true),\n\t\tfundingAddress,\n\t\tprovider,\n\t\tblockchain,\n\t\tswapManager,\n\t\ttokenService,\n\t\tclassName = 'text-gray-600 z-[999]'\n\t}: Props = $props();\n\n\tlet showVerify = $state(false);\n\tlet showError = $state(false);\n\tlet errorValue = $state('');\n\tlet showWarning = $state(false);\n\tlet warningValue = $state('');\n\tlet pincode = '';\n\tlet pincodeVerified = false;\n\n\t// Note: This calls the actual Swap component but handles the onSwap function. If you want to handle the onSwap function then do not use this but call Swap itself.\n\n\tfunction onSwap(\n\t\tfundingAddress: string,\n\t\tfromToken: SwapToken,\n\t\ttoToken: SwapToken,\n\t\tfromAmount: BigNumberish,\n\t\ttoAmount: BigNumberish\n\t) {\n\t\tlog.info(\n\t\t\t`onSwap: fundingAddress=${fundingAddress}, fromToken=${fromToken}, toToken=${toToken}, fromAmount=${fromAmount}, toAmount=${toAmount}`\n\t\t);\n\t}\n\n\tfunction handleClose() {\n\t\tshowError = false;\n\t\terrorValue = '';\n\t\tshowWarning = false;\n\t\twarningValue = '';\n\t\tpincodeVerified = false;\n\t}\n\n\t// Pincode verification\n\tfunction handleReject(\n\t\trejection: string = 'You have rejected or Pincode was not validated. No swap transaction was sent.'\n\t) {\n\t\ttry {\n\t\t\tshowVerify = false;\n\t\t\tshowWarning = true;\n\t\t\twarningValue = rejection;\n\t\t} catch (e: any) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n\n\t// One more internal check to verify the pincode\n\tasync function verifyWithPin(pin: string, pincodeVerified: boolean): Promise<Profile | null> {\n\t\ttry {\n\t\t\tconst yakklMiscStore = getMiscStore();\n\t\t\tlet profile: Profile | null = await getProfile();\n\t\t\tif (profile === null) {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'Profile was not found.';\n\t\t\t}\n\n\t\t\tlet profileEncrypted = null;\n\n\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\tprofileEncrypted = deepCopy(profile);\n\t\t\t\tawait decryptData(profile?.data, yakklMiscStore).then((result) => {\n\t\t\t\t\t(profile as Profile).data = result as ProfileData;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ((profile.data as ProfileData).pincode !== pincode && pincodeVerified === false) {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'PINCODE was not verified.';\n\t\t\t}\n\n\t\t\tif (pincode === (profile.data as ProfileData).pincode) {\n\t\t\t\tprofile = null;\n\t\t\t\treturn profileEncrypted;\n\t\t\t} else {\n\t\t\t\tpincodeVerified = false;\n\t\t\t\tthrow 'PINCODE did not match.';\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tlog.error(e);\n\t\t\tpincodeVerified = false;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tasync function handleVerified(pincode: string) {\n\t\ttry {\n\t\t\tlet profile: Profile | null = await verifyWithPin(pincode, pincodeVerified);\n\t\t\tif (profile === null) {\n\t\t\t\tthrow 'Profile was not found.';\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t}\n</script>\n\n<PincodeVerify\n\tbind:show={showVerify}\n\tonRejected={handleReject}\n\tonVerified={handleVerified}\n\tclassName=\"text-gray-600\"\n/>\n<ErrorNoAction bind:show={showError} value={errorValue} handle={handleClose} />\n<Warning bind:show={showWarning} value={warningValue} handle={handleClose} />\n\n<!-- Just shows you how to set it up but it is not plugged into Swap itself -->\n\n<Swap\n\tbind:show\n\t{fundingAddress}\n\t{provider}\n\t{blockchain}\n\t{swapManager}\n\t{tokenService}\n\t{className}\n\t{onSwap}\n/>\n","<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport type { PriceProvider } from '$lib/common/interfaces';\n\timport { CoinbasePriceProvider } from '$lib/managers/providers/price/coinbase/CoinbasePriceProvider';\n\timport { getTimerManager } from '$lib/managers/TimerManager';\n\timport { priceStore } from '$lib/common/stores';\n\timport { log } from '$lib/managers/Logger';\n\timport { TIMER_PRICE_INTERVAL_TIME } from '$lib/common';\n\n\tinterface Props {\n\t\tsymbol: string; // In a swap this would be the fromToken\n\t\tcurrency: string; // In a swap this would be the toToken\n\t\tproviders?: PriceProvider[];\n\t\tupdateInterval?: number;\n\t\tchildren?: import('svelte').Snippet<[any]>;\n\t}\n\n\tlet {\n\t\tsymbol,\n\t\tcurrency,\n\t\tproviders = $bindable([new CoinbasePriceProvider()]), // Defaults to Coinbase but the passed in providers should have priority with more than one\n\t\tupdateInterval = TIMER_PRICE_INTERVAL_TIME, // milliseconds\n\t\tchildren\n\t}: Props = $props();\n\n\t// priceStore is passed to the children layout below - export is not needed but adding it for clarity and possible clean up\n\t// export const priceStore = writable<MarketPriceData | null>(null);\n\t// let interval: NodeJS.Timeout;\n\n\tasync function updatePrice() {\n\t\ttry {\n\t\t\tfor (const provider of providers) {\n\t\t\t\ttry {\n\t\t\t\t\tconst priceData = await provider.getMarketPrice(`${symbol}-${currency}`);\n\t\t\t\t\tif (priceData === null) {\n\t\t\t\t\t\tlog.info(\n\t\t\t\t\t\t\t`PriceTracker - fetched no price from ${provider.getName()}: ${symbol}-${currency}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpriceStore.set(priceData);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlog.error(`Error fetching price from ${provider.getName()}:`, false, error);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlog.error('PriceTracker:', false, error);\n\t\t}\n\t}\n\n\tonMount(() => {\n\t\ttry {\n\t\t\tif (providers.length === 0) {\n\t\t\t\tproviders = [new CoinbasePriceProvider()]; // Fallback to Coinbase if no providers are passed\n\t\t\t}\n\n\t\t\tupdatePrice();\n\t\t\t// Add and start timer\n\t\t\tgetTimerManager().addTimer('priceTracker_updatePrice', updatePrice, updateInterval);\n\t\t\tgetTimerManager().startTimer('priceTracker_updatePrice');\n\t\t} catch (error) {\n\t\t\tlog.error(error);\n\t\t}\n\t});\n\n\tonDestroy(() => {\n\t\tgetTimerManager().stopTimer('priceTracker_updatePrice');\n\t\tpriceStore.set(null);\n\t});\n</script>\n\n{@render children?.({ price: $priceStore })}\n","<script lang=\"ts\">\n\timport type { PriceProvider } from '$lib/common/interfaces';\n\timport { CoinbasePriceProvider } from '$lib/managers/providers/price/coinbase/CoinbasePriceProvider';\n\timport { CoingeckoPriceProvider } from '$lib/managers/providers/price/coingecko/CoingeckoPriceProvider';\n\timport { onMount } from 'svelte';\n\timport PriceTracker from './PriceTracker.svelte';\n\timport { formatPrice } from '$lib/utilities';\n\timport { formatDate } from '$lib/common/datetime';\n\timport { log } from '$lib/managers/Logger';\n\n\tinterface Props {\n\t\t// import { getCurrencyCodeForUserLocale } from '$lib/utilities';\n\t\tsymbol: string;\n\t\tcurrency?: string; //getCurrencyCodeForUserLocale() ?? 'USD';\n\t\tshowLastUpdated?: boolean;\n\t\tquantity?: number;\n\t\tcustomClass?: string;\n\t\tuseProviders?: string[];\n\t}\n\n\tlet {\n\t\tsymbol,\n\t\tcurrency = 'USD',\n\t\tshowLastUpdated = false,\n\t\tquantity = 1,\n\t\tcustomClass = '',\n\t\tuseProviders = ['Coinbase', 'Coingecko']\n\t}: Props = $props();\n\n\tlet providersMap = new Map<string, PriceProvider>();\n\tlet activeProviders: PriceProvider[] = $state([]);\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tprovidersMap.set('Coinbase', new CoinbasePriceProvider());\n\t\t\tprovidersMap.set('Coingecko', new CoingeckoPriceProvider());\n\n\t\t\tactiveProviders = useProviders\n\t\t\t\t.map((name) => providersMap.get(name))\n\t\t\t\t.filter((provider): provider is PriceProvider => provider !== undefined);\n\t\t} catch (error) {\n\t\t\tlog.error('TokenPrice:', false, error);\n\t\t}\n\t});\n</script>\n\n<PriceTracker {symbol} {currency} providers={activeProviders}>\n\t{#snippet children({ price })}\n\t\t<div class={`flex flex-col items-start ${customClass}`}>\n\t\t\t{#if price !== null}\n\t\t\t\t<span class=\"text-xl font-bold\">{formatPrice(price.price * quantity)}</span>\n\t\t\t\t<span class=\"text-xs text-gray-600\">{symbol}-{currency}</span>\n\t\t\t\t<span class=\"text-xs text-gray-500\">Price: {formatPrice(price.price)}</span>\n\t\t\t\t{#if showLastUpdated && price.lastUpdated}\n\t\t\t\t\t<span class=\"text-xs text-gray-500\">Last updated: {formatDate(price.lastUpdated)}</span>\n\t\t\t\t{/if}\n\t\t\t{:else}\n\t\t\t\t<span class=\"text-xl font-bold\">{formatPrice(0)}</span>\n\t\t\t\t<span class=\"text-xs text-gray-600\"\n\t\t\t\t\t>{symbol ? symbol : ' -- '}-{currency ? currency : ' -- '}</span\n\t\t\t\t>\n\t\t\t\t<span class=\"text-xs text-gray-500\">Price: -- </span>\n\t\t\t\t{#if showLastUpdated}\n\t\t\t\t\t<span class=\"text-xs text-gray-500\">Last updated: -- </span>\n\t\t\t\t{/if}\n\t\t\t{/if}\n\t\t</div>\n\t{/snippet}\n</PriceTracker>\n","import * as yup from 'yup';\nimport { writable } from 'svelte/store';\n\n// Define the schema\nexport const sendFormSchema = yup.object().shape({\n\ttoAddress: yup\n\t\t.string()\n\t\t.required('Please enter a recipient address.')\n\t\t.matches(/^(0x)?[0-9a-fA-F]{40}$|^.*\\.eth$/, 'Must be a valid Ethereum address or ENS name.'),\n\tamount: yup\n\t\t.number()\n\t\t.required('Please enter the amount to send.')\n\t\t.moreThan(0, 'Amount must be greater than 0.')\n});\n\n// Stores for data and errors\nexport const formData = writable({\n\ttoAddress: '',\n\tamount: ''\n});\n\nexport const formErrors = writable<Record<string, string | undefined>>({});\n\n// Validation function\nexport async function validateForm(data: Record<string, any>): Promise<boolean> {\n\ttry {\n\t\tformErrors.set({});\n\t\tawait sendFormSchema.validate(data, { abortEarly: false });\n\t\treturn true;\n\t} catch (error) {\n\t\tif (error instanceof yup.ValidationError) {\n\t\t\tconst errors: Record<string, string | undefined> = {};\n\t\t\terror.inner.forEach((err) => {\n\t\t\t\tif (err.path) {\n\t\t\t\t\terrors[err.path] = err.message;\n\t\t\t\t}\n\t\t\t});\n\t\t\tformErrors.set(errors);\n\t\t}\n\t\treturn false;\n\t}\n}\n","<script lang=\"ts\">\n\timport { log } from '$lib/managers/Logger';\n\timport { formData, formErrors, validateForm } from './validation';\n\n\tlet data = {\n\t\ttoAddress: '',\n\t\tamount: ''\n\t};\n\n\tlet errors: Record<string, string | undefined> = {};\n\n\t$: formErrors.subscribe((value) => {\n\t\terrors = value;\n\t});\n\n\tasync function handleSubmit() {\n\t\tconst isValid = await validateForm(data);\n\t\tif (isValid) {\n\t\t\tlog.info('Form is valid, submitting:', false, data);\n\t\t\t// Perform the transaction here\n\t\t} else {\n\t\t\tlog.error('Form validation failed:', false, errors);\n\t\t}\n\t}\n</script>\n\n<form on:submit|preventDefault={handleSubmit}>\n\t<label>\n\t\tTo Address:\n\t\t<input type=\"text\" bind:value={data.toAddress} />\n\t\t{#if errors.toAddress}\n\t\t\t<small class=\"text-red-600\">{errors.toAddress}</small>\n\t\t{/if}\n\t</label>\n\n\t<label>\n\t\tAmount:\n\t\t<input type=\"number\" bind:value={data.amount} />\n\t\t{#if errors.amount}\n\t\t\t<small class=\"text-red-600\">{errors.amount}</small>\n\t\t{/if}\n\t</label>\n\n\t<button type=\"submit\">Send</button>\n</form>\n","<script lang=\"ts\">\n\timport Modal from '../Modal.svelte';\n\timport SendForm from './SendForm.svelte';\n\n\texport let show = false; // To control modal visibility\n\texport let title = 'Send Crypto';\n\texport let description = 'Fill in the details below to send cryptocurrency.';\n\texport let className = ''; // Additional classes for the modal\n\texport let onClose = () => (show = false); // Callback for closing the modal\n</script>\n\n<Modal bind:show {title} {description} {className} {onClose}>\n\t<!-- <svelte:fragment slot=\"children\"> -->\n\t<SendForm />\n\t<!-- </svelte:fragment> -->\n\n\t<!-- <svelte:fragment slot=\"footer\"> -->\n\t<div class=\"flex justify-end\">\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\tclass=\"px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400\"\n\t\t\tonclick={onClose}\n\t\t>\n\t\t\tCancel\n\t\t</button>\n\t</div>\n\t<!-- </svelte:fragment> -->\n</Modal>\n","<script lang=\"ts\">\n\timport { goto } from '$app/navigation';\n\timport { decryptData, error_log, isEncryptedData, PATH_WELCOME } from '$lib/common';\n\timport type {\n\t\tAccountData,\n\t\tCurrentlySelectedData,\n\t\tSwapPriceProvider,\n\t\tTokenData,\n\t\tYakklAccount,\n\t\tYakklContact,\n\t\tYakklWatch\n\t} from '$lib/common/interfaces';\n\timport Accounts from '$lib/components/Accounts.svelte';\n\timport Contacts from '$lib/components/Contacts.svelte';\n\timport ExportPrivateKey from '$lib/components/ExportPrivateKey.svelte';\n\timport ImportPhrase from '$lib/components/ImportPhrase.svelte';\n\timport ImportPrivateKey from '$lib/components/ImportPrivateKey.svelte';\n\timport ImportWatchAccount from '$lib/components/ImportWatchAccount.svelte';\n\timport Pincode from '$lib/components/Pincode.svelte';\n\timport PincodeModal from '$lib/components/PincodeVerify.svelte';\n\timport Receive from '$lib/components/Receive.svelte';\n\timport TokenBox from '$lib/components/TokenBox.svelte';\n\t// import { ethTokenData, btcTokenData } from '$lib/data/mock/MockTokenData';\n\t// import Profile from '$lib/components/Profile.svelte.tmp';\n\t// import Preferences from '$lib/components/Preferences.svelte.tmp';\n\timport EmergencyKitModal from '$lib/components/EmergencyKitModal.svelte';\n\timport RegistrationOptionModal from '$lib/components/RegistrationOptionModal.svelte';\n\timport ImportOptionModal from '$lib/components/ImportOptionModal.svelte';\n\timport SwapModal from '$lib/components/SwapModal.svelte';\n\timport type { SwapToken as Token } from '$lib/common/interfaces';\n\timport type { BigNumberish } from '$lib/common';\n\timport { getYakklCurrentlySelected, getMiscStore } from '$lib/common/stores';\n\timport { onMount } from 'svelte';\n\timport PriceTracker from '$lib/components/PriceTracker.svelte';\n\timport TokenPrice from '$lib/components/TokenPrice.svelte';\n\timport { CoinbasePriceProvider } from '$lib/managers/providers/price/coinbase/CoinbasePriceProvider';\n\timport type { Wallet } from '$lib/managers/Wallet';\n\timport WalletManager from '$lib/managers/WalletManager';\n\timport type { Provider } from '$lib/managers/Provider';\n\timport type { Ethereum } from '$lib/managers/blockchains/evm/ethereum/Ethereum';\n\timport { TokenService } from '$lib/managers/blockchains/evm/TokenService';\n\timport { UniswapSwapManager } from '$lib/managers/UniswapSwapManager';\n\timport Swap from '$lib/components/Swap.svelte';\n\timport { getYakklCurrentlySelectedAccountKey } from '$lib/common/security';\n\timport SendFormModal from '$lib/components/send/SendFormModal.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { getSettings } from '$lib/common/stores';\n\timport { shouldShowProFeatures } from '$lib/common/token-analytics';\n\timport { PlanType } from '$lib/common/types';\n\timport type { Settings } from '$lib/common/interfaces';\n\timport SimpleTooltip from '$lib/components/SimpleTooltip.svelte';\n\n\tconst providers = [new CoinbasePriceProvider()];\n\n\t// let profileComponent: Profile = $state();\n\t// let preferencesComponent: Preferences = $state();\n\n\t// Mock token data array\n\tconst tokenDataArray: TokenData[] = []; //[ethTokenData, btcTokenData];\n\n\tlet showImportPhrase = $state(false);\n\tlet showExportPrivateKey = $state(false);\n\tlet showImportWatch = $state(false);\n\tlet showImportAccount = $state(false);\n\tlet showPincodeModal = $state(false);\n\tlet showPincode = $state(false);\n\tlet showAccounts = $state(false);\n\tlet showContacts = $state(false);\n\tlet showReceive = $state(false);\n\tlet showEmergencyKit = $state(false);\n\tlet showRegistrationOptions = $state(false);\n\tlet showImportOptions = $state(false);\n\tlet showSwap = $state(false);\n\tlet showSwapModal = $state(false);\n\tlet showSendModal = $state(false);\n\n\tlet fundingAddress: string = $state();\n\tlet account: YakklAccount | null = null;\n\tlet mode: 'import' | 'export' = $state('export');\n\tlet settings: Settings | null = $state(null);\n\tlet isProUser = $state(false);\n\n\tlet swapPriceProvider: SwapPriceProvider | null = null; // Don't have to set it to null\n\tlet provider: Provider = $state();\n\tlet chainId = 1;\n\tlet blockchain: Ethereum = $state();\n\tlet swapManager: UniswapSwapManager = $state();\n\tlet tokenService: TokenService<any> = $state();\n\t// let gasProvider: EthereumGasProvider;\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\t// Load settings to check membership\n\t\t\tsettings = await getSettings();\n\t\t\tisProUser = shouldShowProFeatures(settings?.plan?.type || PlanType.BASIC_MEMBER);\n\n\t\t\tconst currentlySelected = await getYakklCurrentlySelected();\n\t\t\t// const yakklMiscStore = getMiscStore();\n\n\t\t\tif (currentlySelected.shortcuts?.address) {\n\t\t\t\tfundingAddress = currentlySelected.shortcuts.address;\n\t\t\t}\n\t\t\tchainId = currentlySelected.shortcuts?.chainId ?? 1;\n\t\t\tif (swapPriceProvider === null) {\n\t\t\t\tlet wallet: Wallet | null = null;\n\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t['Ethereum'],\n\t\t\t\t\tchainId,\n\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t);\n\t\t\t\tif (wallet) {\n\t\t\t\t\tif (!wallet.getSigner()) {\n\t\t\t\t\t\tconst accountKey = await getYakklCurrentlySelectedAccountKey();\n\t\t\t\t\t\tif (accountKey && accountKey.privateKey) await wallet.setSigner(accountKey.privateKey); // Could have sent this to getInstance as well\n\t\t\t\t\t}\n\n\t\t\t\t\tprovider = wallet.getProvider()!; // Only for testing\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\tconst signer = wallet.getSigner();\n\t\t\t\t\t\tif (signer) {\n\t\t\t\t\t\t\tprovider.setSigner(signer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tblockchain = wallet.getBlockchain() as Ethereum;\n\n\t\t\t\t\t\tswapManager = new UniswapSwapManager(blockchain as Ethereum, provider!);\n\t\t\t\t\t\ttokenService = new TokenService(blockchain as Ethereum);\n\t\t\t\t\t\t// gasProvider = new EthereumGasProvider(provider!, blockchain!, new CoinbasePriceProvider());\n\t\t\t\t\t\t// swapPriceProvider = new UniswapSwapPriceProvider(provider, new CoinbasePriceProvider());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\terror_log('SwapTokenPrice:', false, error);\n\t\t}\n\t});\n\n\tfunction close() {\n\t\tgoto(PATH_WELCOME);\n\t}\n\n\t// This is for future reference:\n\t// import { swapServices } from './swapService';\n\t// // ... in your swap function\n\t// const bestQuote = await swapServices.swapAggregator.getBestQuote(tokenIn, tokenOut, amountIn);\n\t// log.debug(`Best quote from: ${bestQuote.provider}`);\n\t// // Execute the swap\n\t// const txResponse = await swapServices.swapAggregator.executeBestSwap(tokenIn, tokenOut, amountIn, minAmountOut, recipient, deadline);\n\n\tfunction onSwap(\n\t\tfundingAddress: string,\n\t\tfromToken: Token,\n\t\ttoToken: Token,\n\t\tfromAmount: BigNumberish,\n\t\ttoAmount: BigNumberish\n\t) {\n\t\t// log.debug(`onSwap-Testing: fundingAddress=${fundingAddress}, fromToken=${fromToken}, toToken=${toToken}, fromAmount=${fromAmount}, toAmount=${toAmount}`);\n\t}\n\n\tfunction openSendModal() {\n\t\tshowSendModal = true;\n\t}\n\n\tfunction handleSendModal() {\n\t\tshowSendModal = false;\n\t}\n\n\tfunction handleAccounts(selectedAccount: YakklAccount) {\n\t\t// Handle the selected account here\n\t\t// log.debug('Selected account:', selectedAccount);\n\t}\n\n\tfunction handleContact(selectedContact: YakklContact) {\n\t\t// Handle the selected contact here\n\t\t// log.debug('Selected contact:', selectedContact);\n\t}\n\n\tfunction handleImport(account: YakklAccount) {\n\t\t// Handle the imported account here\n\t\t// log.debug('Imported account:', account);\n\t}\n\n\tfunction handleVerifyModal(pincode: string) {\n\t\t// Handle the pincode here\n\t\t// log.debug('Pincode:', pincode);\n\t}\n\n\tfunction handleVerify(pincodeOld: string, pincodeNew: string) {\n\t\t// Handle the pincode here\n\t\t// log.debug('Pincode - old and new:', pincodeOld, pincodeNew);\n\t}\n\n\tfunction handleImportWatch(account: YakklWatch) {\n\t\t// Handle the import watch account here\n\t\t// log.debug('Import watch account');\n\t}\n\n\tfunction handleExportPrivateKey() {\n\t\t// Handle the export private key here\n\t\t// log.debug('Export private key');\n\t}\n\n\tfunction handleImportPhrase() {\n\t\t// Handle the import phrase here\n\t\t// log.debug('Import phrase account:', account);\n\t}\n\n\tfunction handleEmergencyKit(success: boolean, message: string) {\n\t\t// Handle the emergency kit here\n\t\tshowEmergencyKit = false;\n\t\t// log.debug('Emergency kit:', success, message);\n\t}\n\n\tfunction handleCreateAccount() {\n\t\t// log.debug('Create initial account - actual implementation not provided');\n\t\t// Add your logic here\n\t}\n\n\tfunction handleImportPrivateKey() {\n\t\t// log.debug('Import an existing account - actual implementation not provided');\n\t\t// Add your logic here\n\t}\n\n\tfunction handleRestore() {\n\t\t// log.debug('Restore from Emergency Kit - actual implementation not provided');\n\t\t// Add your logic here\n\t}\n\n\tfunction handleCancel() {\n\t\tshowRegistrationOptions = false;\n\t\t// Add any additional cancel logic here\n\t}\n</script>\n\n<div class=\"h-screen overflow-y-auto p-4\">\n\t<!-- <div class=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 overflow-x-auto bg-white p-4\">\n    {#each tokenDataArray as token}\n      <div class=\"rounded-2xl overflow-hidden shadow-md\">\n        <TokenBox {token} />\n      </div>\n    {/each}\n  </div> -->\n\n\t<div class=\"my-4\">\n\t\t<SendFormModal bind:show={showSendModal} />\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<RegistrationOptionModal\n\t\t\tbind:show={showRegistrationOptions}\n\t\t\tonCreate={handleCreateAccount}\n\t\t\tonImport={() => {}}\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<!-- Shows SwapPriceTracker and SwapTokenPrice -->\n\t\t<SwapModal\n\t\t\tbind:show={showSwapModal}\n\t\t\t{fundingAddress}\n\t\t\t{provider}\n\t\t\t{blockchain}\n\t\t\t{swapManager}\n\t\t\t{tokenService}\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<Swap\n\t\t\tbind:show={showSwap}\n\t\t\t{fundingAddress}\n\t\t\t{onSwap}\n\t\t\t{provider}\n\t\t\t{blockchain}\n\t\t\t{swapManager}\n\t\t\t{tokenService}\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<ImportOptionModal\n\t\t\tbind:show={showImportOptions}\n\t\t\tshowImportWatch={true}\n\t\t\tonImportKey={() => {\n\t\t\t\tshowImportOptions = false;\n\t\t\t\tshowImportAccount = true;\n\t\t\t}}\n\t\t\tonImportPhrase={() => {\n\t\t\t\tshowImportOptions = false;\n\t\t\t\tshowImportPhrase = true;\n\t\t\t}}\n\t\t\tonRestore={() => {\n\t\t\t\tshowImportOptions = false;\n\t\t\t\tmode = 'import';\n\t\t\t\tshowEmergencyKit = true;\n\t\t\t}}\n\t\t\tonImportWatch={() => {\n\t\t\t\tshowImportOptions = false;\n\t\t\t\tshowImportWatch = true;\n\t\t\t}}\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<ExportPrivateKey\n\t\t\tbind:show={showExportPrivateKey}\n\t\t\tonVerify={handleExportPrivateKey}\n\t\t\tclassName=\"text-gray-600\"\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<PincodeModal\n\t\t\tbind:show={showPincodeModal}\n\t\t\tonVerified={handleVerifyModal}\n\t\t\tclassName=\"text-gray-600\"\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<Pincode bind:show={showPincode} onVerified={handleVerify} className=\"text-gray-600\" />\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<ImportWatchAccount\n\t\t\tbind:show={showImportWatch}\n\t\t\tonComplete={handleImportWatch}\n\t\t\tclassName=\"text-gray-600\"\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<ImportPrivateKey\n\t\t\tbind:show={showImportAccount}\n\t\t\tonComplete={handleImport}\n\t\t\tclassName=\"text-gray-600\"\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<ImportPhrase\n\t\t\tbind:show={showImportPhrase}\n\t\t\tonComplete={handleImportPhrase}\n\t\t\tclassName=\"text-gray-600\"\n\t\t/>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<Accounts bind:show={showAccounts} onAccountSelect={handleAccounts} className=\"text-gray-600\" />\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<Contacts bind:show={showContacts} onContactSelect={handleContact} />\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<!-- Foundry primary test account -->\n\t\t<Receive bind:show={showReceive} address={'0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'} />\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<EmergencyKitModal bind:show={showEmergencyKit} {mode} onComplete={handleEmergencyKit} />\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<PriceTracker symbol=\"ETH\" currency=\"USD\">\n\t\t\t{#snippet children({ price })}\n\t\t\t\t{#if price !== null}\n\t\t\t\t\t<span class=\"text-xl font-semibold text-blue-600\"\n\t\t\t\t\t\t>{price.price} USD (no formatting using PriceTracker)</span\n\t\t\t\t\t>\n\t\t\t\t\t<span class=\"text-sm text-gray-500\">{price.provider}</span>\n\t\t\t\t{:else}\n\t\t\t\t\t<span class=\"text-gray-500\">Fetching price...</span>\n\t\t\t\t{/if}\n\t\t\t{/snippet}\n\t\t</PriceTracker>\n\t</div>\n\n\t<div class=\"my-4\">\n\t\t<div class=\"p-6 space-y-8\">\n\t\t\t<h1 class=\"text-2xl font-bold mb-4\">Crypto Dashboard example using TokenPrice</h1>\n\n\t\t\t<div class=\"bg-white shadow rounded-lg p-4\">\n\t\t\t\t<h2 class=\"text-lg font-semibold mb-2\">Ethereum Price</h2>\n\t\t\t\t<TokenPrice symbol=\"ETH\" currency=\"USD\" />\n\t\t\t</div>\n\n\t\t\t<div class=\"bg-gray-100 shadow rounded-lg p-4\">\n\t\t\t\t<h2 class=\"text-lg font-semibold mb-2\">BTC Price</h2>\n\t\t\t\t<TokenPrice symbol=\"BTC\" customClass=\"bg-yellow-100 p-2 rounded\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<!-- <Profile bind:this={profileComponent} />\n\n  <Preferences bind:this={preferencesComponent} /> -->\n\n\t<!-- <div class=\"my-4 p-2 border-gray-100 border-2\">\n    <p class=\"text-gray-100 text-sm\">Experimental Only</p>\n\n    <button\n      onclick={() => profileComponent.openProfile()}\n      class=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\">\n      Open Profile\n    </button>\n\n    <button\n      onclick={() => preferencesComponent.openPreferences()}\n      class=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\">\n      Open Preferences\n    </button>\n  </div> -->\n\n\t<button\n\t\tonclick={() => (showSwapModal = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tSwapModal\n\t</button>\n\n\t<button\n\t\tonclick={() => (showSwap = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tSwap\n\t</button>\n\n\t<button\n\t\tonclick={() => (showSendModal = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tSend Transaction\n\t</button>\n\n\t<button\n\t\tonclick={() => (showRegistrationOptions = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tRegistration Options\n\t</button>\n\n\t<button\n\t\tonclick={() => (showImportOptions = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tImport Options\n\t</button>\n\n\t{#if isProUser}\n\t\t<button\n\t\t\tonclick={() => {\n\t\t\t\tshowEmergencyKit = true;\n\t\t\t\tmode = 'export';\n\t\t\t}}\n\t\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors flex items-center justify-center gap-2\"\n\t\t>\n\t\t\t<svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t</svg>\n\t\t\tExport Emergency Kit\n\t\t</button>\n\n\t\t<button\n\t\t\tonclick={() => {\n\t\t\t\tshowEmergencyKit = true;\n\t\t\t\tmode = 'import';\n\t\t\t}}\n\t\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors flex items-center justify-center gap-2\"\n\t\t>\n\t\t\t<svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t</svg>\n\t\t\tImport Emergency Kit\n\t\t</button>\n\t{:else}\n\t\t<SimpleTooltip content=\"Upgrade to Pro for full Emergency Kit features\">\n\t\t\t<button\n\t\t\t\tdisabled\n\t\t\t\tclass=\"w-full bg-gray-300 text-gray-500 font-bold py-3 px-4 rounded-lg mt-3 cursor-not-allowed flex items-center justify-center gap-2 relative\"\n\t\t\t>\n\t\t\t\t<svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t\t</svg>\n\t\t\t\tExport Emergency Kit\n\t\t\t\t<div class=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-indigo-400 to-purple-400 rounded-full flex items-center justify-center\">\n\t\t\t\t\t<svg class=\"w-2.5 h-2.5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</button>\n\t\t</SimpleTooltip>\n\n\t\t<SimpleTooltip content=\"Upgrade to Pro for full Emergency Kit features\">\n\t\t\t<button\n\t\t\t\tdisabled\n\t\t\t\tclass=\"w-full bg-gray-300 text-gray-500 font-bold py-3 px-4 rounded-lg mt-3 cursor-not-allowed flex items-center justify-center gap-2 relative\"\n\t\t\t>\n\t\t\t\t<svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t<path d=\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z\"/>\n\t\t\t\t</svg>\n\t\t\t\tImport Emergency Kit\n\t\t\t\t<div class=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-indigo-400 to-purple-400 rounded-full flex items-center justify-center\">\n\t\t\t\t\t<svg class=\"w-2.5 h-2.5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</button>\n\t\t</SimpleTooltip>\n\t{/if}\n\n\t<button\n\t\tonclick={() => (showExportPrivateKey = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tExport Private Key\n\t</button>\n\n\t<button\n\t\tonclick={() => (showPincode = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tShow Pincode\n\t</button>\n\n\t<button\n\t\tonclick={() => (showPincodeModal = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tShow Pincode Modal\n\t</button>\n\n\t<button\n\t\tonclick={() => (showReceive = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tShow Receive\n\t</button>\n\n\t<button\n\t\tonclick={() => (showContacts = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tShow Contacts\n\t</button>\n\n\t<button\n\t\tonclick={() => (showImportWatch = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tImport Watch Account\n\t</button>\n\n\t<button\n\t\tonclick={() => (showImportAccount = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tImport Account w/PKey\n\t</button>\n\n\t<button\n\t\tonclick={() => {\n\t\t\tlog.debug('showImportPhrase');\n\t\t\tshowImportPhrase = true;\n\t\t}}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tImport Phrase\n\t</button>\n\n\t<button\n\t\tonclick={() => (showAccounts = true)}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tShow Accounts\n\t</button>\n\n\t<button\n\t\tonclick={close}\n\t\tclass=\"w-full bg-gray-200 text-gray-700 font-bold py-3 px-4 rounded-lg mt-3 hover:bg-gray-300 transition-colors\"\n\t>\n\t\tCancel\n\t</button>\n</div>\n"],"names":["title","onCreate","onImport","onRestore","show","onCancel","onClose","fundingAddress","provider","blockchain","swapManager","tokenService","className","showVerify","showError","errorValue","showWarning","warningValue","pincode","pincodeVerified","onSwap","fromToken","toToken","fromAmount","toAmount","log","info","handleClose","handleReject","rejection","e","error","async","verifyWithPin","pin","yakklMiscStore","getMiscStore","profile","getProfile","pincodeVerified2","profileEncrypted","isEncryptedData","data","deepCopy","decryptData","then","result","handleVerified","$$value","symbol","currency","providers","CoinbasePriceProvider","updateInterval","TIMER_PRICE_INTERVAL_TIME","children","onDestroy","getTimerManager","stopTimer","priceStore","set","$$payload","price","$.store_get","$$store_subs","showLastUpdated","quantity","customClass","useProviders","activeProviders","out","$.escape","formatPrice","lastUpdated","formatDate","yup","object","shape","toAddress","string","required","matches","amount","number","moreThan","formErrors","writable","errors","subscribe","value","$.attr","$.fallback","$$props","description","showImportPhrase","showExportPrivateKey","showImportWatch","showImportAccount","showPincodeModal","showPincode","showAccounts","showContacts","showReceive","showEmergencyKit","showRegistrationOptions","showImportOptions","showSwap","showSwapModal","showSendModal","mode","handleAccounts","selectedAccount","handleContact","selectedContact","handleImport","account","handleVerifyModal","handleVerify","pincodeOld","pincodeNew","handleImportWatch","handleExportPrivateKey","handleImportPhrase","handleEmergencyKit","success","message","handleCreateAccount","onImportKey","onImportPhrase","onImportWatch"],"mappings":"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"}