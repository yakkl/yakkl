{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../../src/lib/components/Cancel.svelte","../../../../../../../../src/routes/(wallet)/import/import-phrase/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { goto } from '$app/navigation';\n\timport { PATH_WELCOME } from '$lib/common';\n\n\tinterface Props {\n\t\tdefaultClass?: string;\n\t\tpath?: any;\n\t\thandle?: any;\n\t}\n\n\tlet {\n\t\tdefaultClass = 'right-0 top-0',\n\t\tpath = PATH_WELCOME,\n\t\thandle = () => goto(path)\n\t}: Props = $props();\n</script>\n\n<!-- svelte-ignore a11y_consider_explicit_label -->\n<button class=\"btn btn-sm btn-circle btn-outline z-10 {defaultClass}\" onclick={handle}>\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\tfill=\"none\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tstroke-width=\"1.5\"\n\t\tstroke=\"currentColor\"\n\t\tclass=\"w-6 h-6\"\n\t>\n\t\t<path\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\td=\"M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n\t\t/>\n\t</svg>\n</button>\n","<!-- @migration-task Error while migrating Svelte code: can't migrate `let error = false;` to `$state` because there's a variable named state.\n     Rename the variable and try again or migrate by hand. -->\n<script lang=\"ts\">\n\timport { ethers as ethersv6 } from 'ethers-v6';\n\timport { createForm } from 'svelte-forms-lib';\n\timport * as yup from 'yup';\n\timport { onMount } from 'svelte';\n\timport { goto } from '$app/navigation';\n\timport { incrementProperty } from '$lib/utilities';\n\timport { getWallet } from '$lib/utilities/ethereum';\n\t// import { getTransactionCount, setProvider } from '$lib/managers/networks/ethereum/providers';\n\timport { deepCopy, getSymbol } from '$lib/utilities';\n\t// import { Confetti } from \"svelte-confetti\";\n\t// import { confetti } from '@neoconfetti/svelte';\n\timport {\n\t\tsetSettingsStorage,\n\t\tgetSettings,\n\t\tyakklMiscStore,\n\t\tsetProfileStorage,\n\t\tsetYakklCurrentlySelectedStorage,\n\t\tsetYakklPrimaryAccountsStorage,\n\t\tgetYakklPrimaryAccounts,\n\t\tgetYakklAccounts,\n\t\tsetYakklAccountsStorage,\n\t\tgetProfile\n\t} from '$lib/common/stores';\n\timport { encryptData, decryptData } from '$lib/common/encryption';\n\timport {\n\t\tDEFAULT_DERIVED_PATH_ETH,\n\t\tPATH_WELCOME,\n\t\tPATH_ACCOUNTS_ETHEREUM_CREATE_PRIMARY,\n\t\tYAKKL_ZERO_ADDRESS\n\t} from '$lib/common/constants';\n\timport Cancel from '$lib/components/Cancel.svelte';\n\timport ErrorNoAction from '$lib/components/ErrorNoAction.svelte';\n\timport {\n\t\tAccountTypeCategory,\n\t\taddressExist,\n\t\tisEncryptedData,\n\t\ttype CurrentlySelectedData,\n\t\ttype PrimaryAccountData,\n\t\ttype Profile,\n\t\ttype ProfileData,\n\t\ttype YakklAccount,\n\t\ttype YakklCurrentlySelected,\n\t\ttype YakklPrimaryAccount\n\t} from '$lib/common';\n\timport { dateString } from '$lib/common/datetime';\n\timport { browserSvelte } from '$lib/common/environment';\n\n\tlet currentlySelected: YakklCurrentlySelected;\n\n\tlet error = false;\n\tlet errorValue: any;\n\t// let msgType = 'ERROR! - ';\n\tlet showConfetti = false;\n\tlet elements;\n\tlet selected = '24';\n\tlet mtop = '';\n\tlet subAccounts = true;\n\n\tasync function processSecretPhaseRecovery(data: any) {\n\t\tif (browserSvelte) {\n\t\t\ttry {\n\t\t\t\tcreatePortfolioAccount(data.secretPhrase);\n\t\t\t\tclearData(data);\n\t\t\t} catch (e) {\n\t\t\t\terrorValue = e;\n\t\t\t\tclearData(data);\n\t\t\t\terror = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// This form can only be called from within the app (after login) so it can restore a portfolio account and all of its subaccounts\n\n\t// A derivative of this is used by the emergency kit code to restore everything within the app (after login)\n\n\t// TODO: May want to call not recreate the creation of the account!!\n\n\tasync function createPortfolioAccount(mnemonic = '') {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tlet id: string = '';\n\t\t\t\tlet yakklSettings;\n\t\t\t\tlet profile;\n\t\t\t\tlet yakklCurrentlySelected: YakklCurrentlySelected;\n\t\t\t\tlet accountName = 'Portfolio Account 1';\n\t\t\t\tlet ethWallet;\n\t\t\t\tlet mnemonic = '';\n\t\t\t\tlet preferences;\n\t\t\t\tlet displayDate;\n\t\t\t\tlet derivedPath = DEFAULT_DERIVED_PATH_ETH; // Account gets created with '/0/0' appended to represent the first\n\t\t\t\t// let assetKey = {name: currentlySelected.shortcuts.blockchain, class: 'Token', subClass: ''};\n\t\t\t\t// let asset;\n\n\t\t\t\t// Could always pull first item from yakklAssets (should already have been loaded into storage)\n\t\t\t\t// let yakklAssets = await getYakklAssets();\n\t\t\t\t// if (yakklAssets) {\n\t\t\t\t//   asset = yakklAssets.find(item => item.name === assetKey.name && item.class === assetKey.class);\n\t\t\t\t// }\n\n\t\t\t\t// if (!asset) {\n\t\t\t\t//   asset = yakklAssets[0];\n\t\t\t\t// }\n\n\t\t\t\tyakklSettings = await getSettings();\n\t\t\t\tif (!yakklSettings) {\n\t\t\t\t\t// noop but could load the defaults. For now we will error out!\n\t\t\t\t\tthrow 'The settings data has not been initialized. This could be due to not yet registered or data could be incomplete which requires registering again. If unable to re-register then uninstall and reinstall. No Ethereum data will be impacted.';\n\t\t\t\t}\n\n\t\t\t\tid = yakklSettings.id;\n\n\t\t\t\t// TODO: Fix this!!\n\n\t\t\t\tprofile = await getProfile();\n\t\t\t\t// profile = await verify(userName.toLowerCase().trim().replace('.nfs.id', '')+'.nfs.id'+password );\n\t\t\t\tif (!profile) {\n\t\t\t\t\terrorValue = `User  was not found OR password is not correct`; //${data.userName}\n\t\t\t\t\t// clearData(data);\n\t\t\t\t\tthrow errorValue;\n\t\t\t\t}\n\n\t\t\t\tif (!profile.data || !$yakklMiscStore) {\n\t\t\t\t\tthrow 'Profile data does not appear to be encrypted. Please register or re-register. Thank you.';\n\t\t\t\t}\n\n\t\t\t\tif (isEncryptedData(profile.data)) {\n\t\t\t\t\tawait decryptData(profile.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\t\tprofile.data = result as ProfileData;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t(profile.data as ProfileData).meta = {};\n\t\t\t\tpreferences = profile.preferences;\n\n\t\t\t\tlet index = (profile.data as ProfileData).accountIndex ?? 0;\n\t\t\t\tderivedPath = `${DEFAULT_DERIVED_PATH_ETH}${index}'/0/0`;\n\n\t\t\t\tlet entropy;\n\n\t\t\t\tif (!mnemonic) {\n\t\t\t\t\t// Use this instead of createRandom to create 24 words instead of 12 - 32 words= 24 words and 16 words= 12 words\n\n\t\t\t\t\t// v6.0.0+\n\t\t\t\t\tlet words = ethersv6.randomBytes(\n\t\t\t\t\t\t!preferences ? 32 : !preferences.words ? 32 : preferences.words\n\t\t\t\t\t);\n\t\t\t\t\tlet randomMnemonic = ethersv6.Mnemonic.fromEntropy(words);\n\t\t\t\t\tethWallet = ethersv6.HDNodeWallet.fromMnemonic(randomMnemonic, derivedPath); //ethersv6.Wallet.fromPhrase(randomMnemonic.phrase);\n\n\t\t\t\t\t// entropy = ethersv6.randomBytes(!preferences ? 32 : (!preferences.words? 32 : preferences.bytes));\n\t\t\t\t\t// let randomMnemonic = ethersv6.HDNode.entropyToMnemonic(entropy);\n\t\t\t\t\t// mnemonicObject = randomMnemonic;\n\t\t\t\t\t// ethWallet = ethersv6.Wallet.fromMnemonic(randomMnemonic, derivedPath);\n\t\t\t\t} else {\n\t\t\t\t\t// v6.0.0+\n\t\t\t\t\tconst mnemonicObject = ethersv6.Mnemonic.fromPhrase(mnemonic);\n\t\t\t\t\tethWallet = ethersv6.HDNodeWallet.fromMnemonic(mnemonicObject, derivedPath);\n\n\t\t\t\t\t// entropy = ethersv6.HDNode.mnemonicToEntropy(mnemonic);\n\t\t\t\t\t// ethWallet = ethersv6.Wallet.fromMnemonic(mnemonic, derivedPath);\n\t\t\t\t}\n\n\t\t\t\t// Check if address already exists in accounts or primary accounts\n\t\t\t\tconst { exists, table } = await addressExist(ethWallet.address);\n\t\t\t\tif (exists) {\n\t\t\t\t\tthrow `The Ethereum Wallet (Portfolio Account) was not able to be created. Address already exists in ${table}. Please try again.`;\n\t\t\t\t}\n\n\t\t\t\tif (!ethWallet) {\n\t\t\t\t\tthrow 'The Ethereum Wallet (Portfolio Account) was not able to be created. Please try again.';\n\t\t\t\t}\n\n\t\t\t\tlet currentDate = dateString();\n\t\t\t\tdisplayDate = new Date(currentDate);\n\n\t\t\t\t(profile.data as ProfileData).accountIndex = index + 1; // PortfolioAccount index for path\n\n\t\t\t\tlet yakklAccount: YakklAccount = {\n\t\t\t\t\tid: profile.id,\n\t\t\t\t\tindex: index,\n\t\t\t\t\tblockchain: currentlySelected!.shortcuts.network.blockchain,\n\t\t\t\t\t// network: yakklNetworks.find(item => item.name === 'Ethereum'),\n\t\t\t\t\tsmartContract: false,\n\t\t\t\t\taddress: ethWallet.address,\n\t\t\t\t\talias: '',\n\t\t\t\t\taccountType: AccountTypeCategory.PRIMARY,\n\t\t\t\t\tname: !accountName ? `Top Level Account ${index + 1}` : accountName,\n\t\t\t\t\tdescription: '',\n\t\t\t\t\t// assetKey: assetKey,\n\t\t\t\t\tprimaryAccount: null, // If subaccount then it must be a valid primaryaccount else undefined\n\t\t\t\t\tdata: {\n\t\t\t\t\t\textendedKey: ethWallet.extendedKey,\n\t\t\t\t\t\tprivateKey: ethWallet.privateKey,\n\t\t\t\t\t\tpublicKey: ethWallet.publicKey,\n\t\t\t\t\t\tpublicKeyUncompressed: ethWallet.publicKey, //ethWallet.signingKey.publicKey,\n\t\t\t\t\t\tpath: ethWallet.path ? ethWallet.path : derivedPath,\n\t\t\t\t\t\tpathIndex: index,\n\t\t\t\t\t\tfingerPrint: ethWallet.fingerprint,\n\t\t\t\t\t\tparentFingerPrint: ethWallet.parentFingerprint,\n\t\t\t\t\t\tchainCode: ethWallet.chainCode,\n\t\t\t\t\t\tassignedTo: [] // Who are the parties that have responsibility for this account\n\t\t\t\t\t},\n\t\t\t\t\tquantity: 0n,\n\t\t\t\t\tclass: 'Default', // This is only used for enterprise like environments. It can be used for departments like 'Finance', 'Accounting', '<whatever>'\n\t\t\t\t\tlevel: 'L1',\n\t\t\t\t\tisSigner: true,\n\t\t\t\t\tavatar: '', // Default is identityicon but can be changed to user/account avatar\n\t\t\t\t\ttags: [currentlySelected!.shortcuts.network.blockchain, 'primary'],\n\t\t\t\t\tincludeInPortfolio: true, // This only applys to the value in this primary account and not any of the derived accounts from this primary account\n\t\t\t\t\tconnectedDomains: [],\n\t\t\t\t\tcreateDate: currentDate,\n\t\t\t\t\tupdateDate: currentDate,\n\t\t\t\t\tversion: ''\n\t\t\t\t};\n\n\t\t\t\tlet yakklPrimaryAccount: YakklPrimaryAccount = {\n\t\t\t\t\tid: yakklAccount.id,\n\t\t\t\t\tname: yakklAccount.name,\n\t\t\t\t\taddress: yakklAccount.address,\n\t\t\t\t\tquantity: yakklAccount.quantity,\n\t\t\t\t\tindex: index, // for the primary account path index\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tprivateKey: ethWallet.privateKey,\n\t\t\t\t\t\tpublicKey: ethWallet.publicKey,\n\t\t\t\t\t\tpath: ethWallet.path ? ethWallet.path : derivedPath,\n\t\t\t\t\t\tpathIndex: index,\n\t\t\t\t\t\tfingerPrint: ethWallet.fingerprint,\n\t\t\t\t\t\tparentFingerPrint: ethWallet.parentFingerprint,\n\t\t\t\t\t\tchainCode: ethWallet.chainCode,\n\t\t\t\t\t\textendedKey: ethWallet.extendedKey,\n\t\t\t\t\t\tmnemonic: ethWallet.mnemonic?.phrase,\n\t\t\t\t\t\tentropy: entropy,\n\t\t\t\t\t\tpassword: ethWallet.mnemonic?.password,\n\t\t\t\t\t\tpublicKeyUncompressed: ethWallet.publicKey, //ethWallet.signingKey.publicKey,\n\t\t\t\t\t\twordCount: ethWallet.mnemonic?.phrase.split(' ').length,\n\t\t\t\t\t\twordListLocale: ethWallet.mnemonic?.wordlist.locale\n\t\t\t\t\t},\n\t\t\t\t\taccount: yakklAccount, // yakklAccount.primaryAccount is always undefined here since it is the primary account\n\t\t\t\t\tsubIndex: 0, // for the subaccount derived path index\n\t\t\t\t\tsubAccounts: [], // Always empty since the primary account is the start of the tree\n\t\t\t\t\tcreateDate: yakklAccount.createDate,\n\t\t\t\t\tupdateDate: yakklAccount.updateDate,\n\t\t\t\t\tversion: ''\n\t\t\t\t};\n\n\t\t\t\tlet yakklPrimaryAccountEnc = deepCopy(yakklPrimaryAccount) as YakklPrimaryAccount;\n\n\t\t\t\tawait encryptData(yakklPrimaryAccount.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\tyakklPrimaryAccountEnc.data = result;\n\t\t\t\t});\n\n\t\t\t\tyakklPrimaryAccountEnc.account = yakklAccount;\n\n\t\t\t\tawait encryptData(yakklAccount.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\tyakklPrimaryAccountEnc.account.data = result;\n\t\t\t\t});\n\n\t\t\t\tlet yakklPrimaryAccounts: YakklPrimaryAccount[] = [];\n\t\t\t\tlet primaryAccountsStorage = await getYakklPrimaryAccounts();\n\n\t\t\t\tif (primaryAccountsStorage?.length > 0) {\n\t\t\t\t\tyakklPrimaryAccounts = primaryAccountsStorage;\n\t\t\t\t}\n\n\t\t\t\tif (yakklPrimaryAccountEnc) {\n\t\t\t\t\tyakklPrimaryAccounts.push(yakklPrimaryAccountEnc);\n\t\t\t\t\t// yakklPrimaryAccounts = [...yakklPrimaryAccountEnc, yakklPrimaryAccounts.length + 1]; // This version causes reactivity of any variables using '$:' syntax\n\t\t\t\t\tawait setYakklPrimaryAccountsStorage(yakklPrimaryAccounts);\n\t\t\t\t}\n\n\t\t\t\tlet profileIndex = (profile.data as ProfileData).primaryAccounts.push(\n\t\t\t\t\tyakklPrimaryAccountEnc\n\t\t\t\t);\n\n\t\t\t\tlet yakklAccounts: any[] = [];\n\t\t\t\tlet accountsStorage = await getYakklAccounts();\n\n\t\t\t\tif (accountsStorage?.length > 0) {\n\t\t\t\t\tyakklAccounts = accountsStorage;\n\t\t\t\t}\n\n\t\t\t\tyakklPrimaryAccountEnc.account.primaryAccount = null;\n\n\t\t\t\tyakklAccounts.push(yakklPrimaryAccountEnc.account);\n\t\t\t\tawait setYakklAccountsStorage(yakklAccounts);\n\n\t\t\t\t// TODO: May want to remove this\n\t\t\t\tawait ethWallet.signMessage($yakklMiscStore).then((result) => {\n\t\t\t\t\t(profile.data as ProfileData).sig = result;\n\t\t\t\t});\n\n\t\t\t\tlet profileEnc: Profile = deepCopy(profile); // Need deep copy...\n\n\t\t\t\tawait encryptData(profileEnc.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\tprofileEnc.data = result;\n\t\t\t\t});\n\n\t\t\t\tif (profileEnc) {\n\t\t\t\t\tawait setProfileStorage(profileEnc);\n\t\t\t\t\tyakklSettings.init = currentlySelected!.shortcuts.init = true;\n\t\t\t\t\tyakklSettings.isLocked = currentlySelected!.shortcuts.isLocked = false;\n\t\t\t\t\tawait setSettingsStorage(yakklSettings);\n\n\t\t\t\t\taccountName = yakklAccount.name;\n\n\t\t\t\t\t// currentlySelected.network = yakklAccount.network;\n\t\t\t\t\tyakklCurrentlySelected = currentlySelected; // This store needs to have been initialized for the first use and then kept updated from there\n\n\t\t\t\t\tyakklCurrentlySelected!.id = profile.id;\n\t\t\t\t\tyakklCurrentlySelected!.preferences.locale = preferences.locale;\n\t\t\t\t\tyakklCurrentlySelected!.preferences.currency = preferences.currency;\n\n\t\t\t\t\t// Originally had this due to have .preferences set as ? (undefined)\n\t\t\t\t\t// setDefinedProperty<PreferencesShort, keyof PreferencesShort>(yakklCurrentlySelected.preferences, 'currency', preferences.currency);\n\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.blockchain = yakklAccount.blockchain;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.symbol = getSymbol(yakklAccount.blockchain);\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.isLocked = false;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.showTestNetworks =\n\t\t\t\t\t\tpreferences.showTestNetworks as boolean;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.profile.name = (profile.data as ProfileData).name;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.profile.email = (profile.data as ProfileData).email;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.primary = yakklPrimaryAccountEnc;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.address = yakklAccount.address;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.accountName = accountName;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.accountType = AccountTypeCategory.PRIMARY;\n\t\t\t\t\tyakklCurrentlySelected!.shortcuts.smartContract = false;\n\n\t\t\t\t\t(yakklCurrentlySelected!.data as CurrentlySelectedData).primaryAccount =\n\t\t\t\t\t\tyakklPrimaryAccountEnc;\n\t\t\t\t\t(yakklCurrentlySelected!.data as CurrentlySelectedData).account = yakklAccount;\n\n\t\t\t\t\tyakklCurrentlySelected!.createDate = yakklAccount.createDate;\n\t\t\t\t\tyakklCurrentlySelected!.updateDate = yakklAccount.updateDate;\n\n\t\t\t\t\tlet currentDeepCopy = deepCopy(yakklCurrentlySelected);\n\t\t\t\t\tawait setYakklCurrentlySelectedStorage(yakklCurrentlySelected!);\n\t\t\t\t\tcurrentlySelected = currentDeepCopy;\n\n\t\t\t\t\t// Create subAccounts if enabled\n\t\t\t\t\tif (subAccounts) {\n\t\t\t\t\t\tlet derivedIndex = 0;\n\n\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\tconst dPath = `${DEFAULT_DERIVED_PATH_ETH}${index}'/0/${derivedIndex}}`;\n\n\t\t\t\t\t\t\t// v6.0.0+\n\t\t\t\t\t\t\t// const ethWallet = ethersv6.HDNodeWallet.fromMnemonic(mnemonicObject, dPath);\n\n\t\t\t\t\t\t\t// It will throw an error if the mnemonic is not valid\n\t\t\t\t\t\t\tconst randomMnemonic = (yakklPrimaryAccount.data as PrimaryAccountData)\n\t\t\t\t\t\t\t\t.mnemonic as string;\n\t\t\t\t\t\t\tconst ethWallet = ethersv6.HDNodeWallet.fromPhrase(randomMnemonic, derivedPath);\n\t\t\t\t\t\t\tconst wallet = getWallet(ethWallet.privateKey);\n\n\t\t\t\t\t\t\tconst transactionCount = await wallet.getTransactionCount();\n\n\t\t\t\t\t\t\tif (transactionCount === 0) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet addressDerived = wallet.address;\n\t\t\t\t\t\t\t// yakklPrimaryAccount.subIndex += 1;\n\t\t\t\t\t\t\tincrementProperty(yakklPrimaryAccount, 'subIndex');\n\n\t\t\t\t\t\t\t// Get networks\n\t\t\t\t\t\t\t// let yakklNetworks = await getYakklNetworks();\n\t\t\t\t\t\t\t// $yakklNetworksStore = yakklNetworks;\n\n\t\t\t\t\t\t\tlet yakklAccount: YakklAccount = {\n\t\t\t\t\t\t\t\tid: profile.id,\n\t\t\t\t\t\t\t\tindex:\n\t\t\t\t\t\t\t\t\t(yakklPrimaryAccount.subIndex ?? 0 > 0)\n\t\t\t\t\t\t\t\t\t\t? (yakklPrimaryAccount.subIndex ?? 1) - 1\n\t\t\t\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t\t\t\tblockchain: currentlySelected!.shortcuts.network.blockchain,\n\t\t\t\t\t\t\t\t// network: yakklNetworks.find(item => item.name === 'Ethereum'),\n\t\t\t\t\t\t\t\tsmartContract: false,\n\t\t\t\t\t\t\t\taddress: addressDerived,\n\t\t\t\t\t\t\t\talias: '',\n\t\t\t\t\t\t\t\taccountType: AccountTypeCategory.SUB,\n\t\t\t\t\t\t\t\tname: `Account ${yakklPrimaryAccount.subIndex}`,\n\t\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\t\t// assetKey: assetKey,\n\t\t\t\t\t\t\t\tprimaryAccount: yakklPrimaryAccount, // If subaccount then it must be a valid primaryaccount else undefined\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\textendedKey: ethWallet.extendedKey,\n\t\t\t\t\t\t\t\t\tprivateKey: ethWallet.privateKey,\n\t\t\t\t\t\t\t\t\tpublicKey: ethWallet.publicKey,\n\t\t\t\t\t\t\t\t\tpublicKeyUncompressed: ethWallet.publicKey, //ethWallet.signingKey.publicKey,\n\t\t\t\t\t\t\t\t\tpath: ethWallet.path ? ethWallet.path : dPath,\n\t\t\t\t\t\t\t\t\tpathIndex: ethWallet.index,\n\t\t\t\t\t\t\t\t\tfingerPrint: ethWallet.fingerprint,\n\t\t\t\t\t\t\t\t\tparentFingerPrint: ethWallet.parentFingerprint,\n\t\t\t\t\t\t\t\t\tchainCode: ethWallet.chainCode,\n\t\t\t\t\t\t\t\t\tassignedTo: [] // Who are the parties that have responsibility for this account\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tquantity: 0n,\n\t\t\t\t\t\t\t\tclass: 'Default', // This is only used for enterprise like environments. It can be used for departments like 'Finance', 'Accounting', '<whatever>'\n\t\t\t\t\t\t\t\tlevel: 'L1',\n\t\t\t\t\t\t\t\tisSigner: true,\n\t\t\t\t\t\t\t\tavatar: '', // Default is identityicon but can be changed to user/account avatar\n\t\t\t\t\t\t\t\ttags: [currentlySelected!.shortcuts.network.blockchain, 'sub'],\n\t\t\t\t\t\t\t\tincludeInPortfolio: true, // This only applys to the value in this primary account and not any of the derived accounts from this primary account\n\t\t\t\t\t\t\t\tconnectedDomains: [],\n\t\t\t\t\t\t\t\tcreateDate: currentDate,\n\t\t\t\t\t\t\t\tupdateDate: currentDate,\n\t\t\t\t\t\t\t\tversion: ''\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tlet yakklAccountEnc = deepCopy(yakklAccount) as YakklAccount;\n\t\t\t\t\t\t\tawait encryptData(yakklAccount.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\t\t\t\tyakklAccountEnc.data = result;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (yakklPrimaryAccount.subAccounts) {\n\t\t\t\t\t\t\t\tyakklPrimaryAccount.subAccounts.push(yakklAccountEnc);\n\t\t\t\t\t\t\t} // Maybe verify profileIndex is valid\n\t\t\t\t\t\t\t(profile.data as ProfileData).primaryAccounts[profileIndex - 1] = yakklPrimaryAccount;\n\n\t\t\t\t\t\t\tsetYakklPrimaryAccountsStorage((profile.data as ProfileData).primaryAccounts); // sets the full list\n\n\t\t\t\t\t\t\tlet profileEnc = deepCopy(profile);\n\t\t\t\t\t\t\tawait encryptData(profile.data, $yakklMiscStore).then((result) => {\n\t\t\t\t\t\t\t\tprofileEnc.data = result;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tawait setProfileStorage(profileEnc);\n\n\t\t\t\t\t\t\tderivedIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tshowConfetti = true;\n\t\t\t\t\tgoto(PATH_WELCOME);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\terror = true;\n\t\t\terrorValue = `Your Wallet did not initialize for the following reason: ${e}`;\n\t\t\tconsole.log(errorValue);\n\t\t}\n\t}\n\n\t// const { form, errors, state, isValid, handleChange, handleSubmit } = createForm({\n\t//   initialValues: {\n\t//     userName: \"\",\n\t//     password: \"\",\n\t//     confirmPassword: \"\",\n\t//     secretPhrase: \"\"\n\t//   },\n\t//   validationSchema: yup.object().shape({\n\t//     userName: yup.string().required('Please enter your username'),\n\t//     password: yup\n\t//       .string()\n\t//       .required('Please enter your password. It must be at least 8 characters')\n\t//       .matches(\n\t//       /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n\t//       \"Must Contain at least 8 Characters (12 Characters are best), One Uppercase, One Lowercase, One Number and one special case Character\"\n\t//       ),\n\t//     confirmPassword: yup\n\t//       .string()\n\t//       .oneOf([yup.ref('password'), null], 'Passwords must match'),\n\t//   }),\n\t//   onSubmit: data => {\n\t//     try {\n\t//       elements = document.querySelectorAll(\"[data-id]\");\n\t//       srp = \"\";\n\t//       if (elements) {\n\t//         elements.forEach(el => {\n\t//           srp += el.value + ' ';\n\t//         });\n\t//         data.secretPhrase = srp.trim();\n\n\t//         processSecretPhaseRecovery(data);\n\t//       } else {\n\t//         throw 'Your Secret Phrase does not seem to correct. Check the formatting. You can enter each word and it MUST BE IN ORDER -OR- paste the whole phrase after copying from your backup into any field.';\n\t//       }\n\t//     } catch(e) {\n\t//       errorValue = e;\n\t//       error = true;\n\t//       clearData(data);\n\t//     }\n\t//   }\n\t// });\n\n\tconst { form, errors, state, isValid, handleChange, handleSubmit } = createForm<FormData>({\n\t\tinitialValues: {\n\t\t\tuserName: '',\n\t\t\tpassword: '',\n\t\t\tconfirmPassword: '',\n\t\t\tsecretPhrase: ''\n\t\t},\n\t\tvalidationSchema: yup.object().shape({\n\t\t\tuserName: yup.string().required('Please enter your username'),\n\t\t\tpassword: yup\n\t\t\t\t.string()\n\t\t\t\t.required('Please enter your password. It must be at least 8 characters')\n\t\t\t\t.matches(\n\t\t\t\t\t/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n\t\t\t\t\t'Must Contain at least 8 Characters (12 Characters are best), One Uppercase, One Lowercase, One Number and one special case Character'\n\t\t\t\t),\n\t\t\tconfirmPassword: yup.string().oneOf([yup.ref('password'), undefined], 'Passwords must match')\n\t\t\t// alias: yup\n\t\t\t//   .string(),\n\t\t}),\n\t\tonSubmit: (data) => {\n\t\t\ttry {\n\t\t\t\tconst elements = document.querySelectorAll<HTMLInputElement>('[data-id]');\n\t\t\t\tlet srp = '';\n\t\t\t\tif (elements) {\n\t\t\t\t\telements.forEach((el) => {\n\t\t\t\t\t\tsrp += el.value + ' ';\n\t\t\t\t\t});\n\t\t\t\t\tdata.secretPhrase = srp.trim();\n\n\t\t\t\t\tprocessSecretPhaseRecovery(data);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Your Secret Phrase does not seem to correct. Check the formatting. You can enter each word and it MUST BE IN ORDER -OR- paste the whole phrase after copying from your backup into any field.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tclearData(data);\n\t\t\t}\n\t\t}\n\t});\n\n\tinterface FormData {\n\t\tuserName: string;\n\t\tpassword: string;\n\t\tconfirmPassword: string;\n\t\tsecretPhrase: string;\n\t}\n\n\tfunction clearData(data: FormData) {\n\t\t$form.userName = data.userName = '';\n\t\t$form.password = data.password = '';\n\t\t$form.confirmPassword = data.confirmPassword = '';\n\t\tdata.secretPhrase = '';\n\t\tconst elements = document.querySelectorAll<HTMLInputElement>('[data-id]');\n\t\telements.forEach((el) => {\n\t\t\tel.value = '';\n\t\t});\n\t}\n\n\tfunction hideShowWords() {\n\t\tlet count = parseInt(selected);\n\n\t\tlet element: HTMLElement | null;\n\t\tlet element_text: HTMLElement | null;\n\n\t\tfor (let wordCount = 13; wordCount <= 24; wordCount++) {\n\t\t\telement_text = document.getElementById(`word_text_${wordCount}`);\n\t\t\telement = document.getElementById(`word_${wordCount}`);\n\n\t\t\tif (element_text && element) {\n\t\t\t\t// Show and then toggle - this covers fringe cases\n\t\t\t\telement_text.style.display = 'block';\n\t\t\t\telement.style.display = 'block';\n\t\t\t}\n\t\t}\n\n\t\tfor (let wordCount = 24; wordCount > count; wordCount--) {\n\t\t\telement_text = document.getElementById(`word_text_${wordCount}`);\n\t\t\telement = document.getElementById(`word_${wordCount}`);\n\n\t\t\tif (element_text && element) {\n\t\t\t\tif (element_text.style.display === 'none') {\n\t\t\t\t\telement_text.style.display = 'block';\n\t\t\t\t} else {\n\t\t\t\t\telement_text.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (element.style.display === 'none') {\n\t\t\t\t\telement.style.display = 'block';\n\t\t\t\t} else {\n\t\t\t\t\telement.style.display = 'none';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet mtop: string;\n\t\tswitch (count) {\n\t\t\tcase 12:\n\t\t\t\tmtop = '-mt-[9rem]';\n\t\t\t\tbreak;\n\t\t\tcase 15:\n\t\t\t\tmtop = '-mt-[6.5rem]';\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\t\tmtop = '-mt-[4.25rem]';\n\t\t\t\tbreak;\n\t\t\tcase 21:\n\t\t\t\tmtop = '-mt-[2.5rem]';\n\t\t\t\tbreak;\n\t\t\tcase 24: // Our default\n\t\t\t\tmtop = '';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmtop = '';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tfunction toggleVisability() {\n\t\tlet x = document.getElementById('password') as HTMLInputElement | null;\n\t\tif (x && x.type) {\n\t\t\tif (x.type === 'password') {\n\t\t\t\tx.type = 'text';\n\t\t\t} else {\n\t\t\t\tx.type = 'password';\n\t\t\t}\n\t\t}\n\t\t// make better\n\t\tx = document.getElementById('confirmPassword') as HTMLInputElement | null;\n\t\tif (x && x.type) {\n\t\t\tif (x.type === 'password') {\n\t\t\t\tx.type = 'text';\n\t\t\t} else {\n\t\t\t\tx.type = 'password';\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction toggleWordsVisability() {\n\t\telements = document.querySelectorAll('[data-id]') as NodeListOf<HTMLInputElement>;\n\t\telements.forEach((el) => {\n\t\t\tif (el.type === 'password') {\n\t\t\t\tel.type = 'text';\n\t\t\t} else {\n\t\t\t\tel.type = 'password';\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction handlePaste(e: any) {\n\t\te.preventDefault();\n\t}\n\n\tonMount(() => {\n\t\ttry {\n\t\t\thideShowWords();\n\t\t\t// This applies to the whole page which may not be ideal but works if only pasting the SRP\n\t\t\t// TBD - may want to look at which field the paste event originated from and go from there instad of\n\t\t\t// overriding the entire list on each paste.\n\t\t\tdocument.addEventListener('paste', function (e: ClipboardEvent) {\n\t\t\t\t// Check if clipboard data exists\n\t\t\t\tif (e.clipboardData) {\n\t\t\t\t\t// Get the target element and check if it's an HTMLInputElement\n\t\t\t\t\tconst target = e.target as HTMLInputElement;\n\t\t\t\t\tif (target && target.type === 'text') {\n\t\t\t\t\t\tlet data = e.clipboardData.getData('Text');\n\t\t\t\t\t\t// Split clipboard text into single words\n\t\t\t\t\t\tconst words = data.split(' ');\n\n\t\t\t\t\t\t// Find all other text inputs with [data-id] attribute\n\t\t\t\t\t\tconst nodes = document.querySelectorAll<HTMLInputElement>('[data-id]');\n\n\t\t\t\t\t\t// Set input value to the relative word\n\t\t\t\t\t\tnodes.forEach((node, index) => {\n\t\t\t\t\t\t\tnode.value = words[index] || '';\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Remove later after testing...\n\n\t\t\t// if (!currentlySelected.shortcuts.providerObject) {\n\t\t\t// \tlet providerObject = setProvider(currentlySelected.shortcuts.provider, currentlySelected.shortcuts.blockchain, currentlySelected.shortcuts.chainId,  currentlySelected.data.providerKey);\n\t\t\t// \tif (providerObject === null) {\n\t\t\t// \t\t// Try the mainnet instead\n\t\t\t// \t\tcurrentlySelected.shortcuts.type = 'Mainnet';\n\t\t\t// \t\tproviderObject = setProvider(currentlySelected.shortcuts.provider, currentlySelected.shortcuts.blockchain, currentlySelected.shortcuts.chainId,  currentlySelected.data.providerKey);\n\t\t\t// \t}\n\t\t\t// \tcurrentlySelected.shortcuts.providerObject = providerObject;\n\t\t\t// }\n\n\t\t\t// provider = {\n\t\t\t// \tname: PROVIDERS.ALCHEMY,\n\t\t\t// \tchainId: toHex(currentlySelected.shortcuts.chainId),\n\t\t\t// \tprivateKey: null,\n\t\t\t// };\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\terrorValue = e;\n\t\t\terror = true;\n\t\t}\n\t});\n\n\tfunction handleCancel(e: any) {\n\t\t// If the user hits cancel and YAKKL_ZERO_ADDRESS then they need to create a new account\n\t\tif (currentlySelected!.shortcuts.address === YAKKL_ZERO_ADDRESS) {\n\t\t\tgoto(PATH_ACCOUNTS_ETHEREUM_CREATE_PRIMARY);\n\t\t} else {\n\t\t\tgoto(PATH_WELCOME);\n\t\t}\n\t}\n\n\tfunction handleSubaccounts(e: any) {\n\t\tsubAccounts = !subAccounts;\n\t}\n</script>\n\n<!-- {#if showConfetti} -->\n<!-- <Confetti /> -->\n<!-- <div use:confetti></div> -->\n<!-- {/if} -->\n\n<ErrorNoAction bind:show={error} value={errorValue} />\n\n<!-- <div class=\"modal\" class:modal-open={error}>\n  <div class=\"modal-box relative\">\n    <h3 class=\"text-lg font-bold\">ERROR</h3>\n    <p class=\"py-4\">{errorValue}</p>\n    <div class=\"modal-action\">\n      <button class=\"btn\" on:click={() => error = false}>Close</button>\n    </div>\n  </div>\n</div> -->\n\n<Cancel defaultClass=\"absolute right-3 top-3\" />\n\n<div\n\tclass=\"flex flex-col h-full w-full relative justify-center left-0 z-5 text-base-content bg-base-100\"\n>\n\t<div class=\"\">\n\t\t<span class=\"block w-full px-1 text-xl font-extrabold border-none text-center\"\n\t\t\t>Import - Secret Recovery Phrase</span\n\t\t>\n\t</div>\n\n\t<hr class=\"mb-3\" />\n\n\t<p\n\t\tclass=\"ml-5 mr-5 p-2 text-small border-2 border-red-200 bg-red-50 text-red-900 rounded-md\"\n\t\taria-label=\"Private Key warning\"\n\t>\n\t\tPlease be careful! <strong>This Secret Recovery Phrase is important!</strong>. A bad actor could\n\t\ttake the content of your wallet if they have access to your Private Key or Secret Recovery\n\t\tPhrase! This process will restore all of the accounts that were created by YAKKL only! If you\n\t\timported existing private keys from another wallet then you will need to do so again.\n\t</p>\n\n\t<div class=\"pt-2 ml-5 mr-5 text-base-content\">\n\t\t<div class=\"h-[650px]\">\n\t\t\t<form class=\"px-5\" on:submit|preventDefault={handleSubmit}>\n\t\t\t\t<div class=\"my-1\">\n\t\t\t\t\t<select\n\t\t\t\t\t\tid=\"words\"\n\t\t\t\t\t\tbind:value={selected}\n\t\t\t\t\t\ton:change={hideShowWords}\n\t\t\t\t\t\tclass=\"block w-full px-4 md:py-2 py-1 text-xl font-normal text-base-content bg-clip-padding border border-solid border-gray-300 rounded-md\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"12\">12 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"15\">15 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"18\">18 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"21\">21 Word Secret Phrase</option>\n\t\t\t\t\t\t<option value=\"24\" selected>24 Word Secret Phrase</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"userName\"\n\t\t\t\t\t\tclass=\"block w-full px-4 md:py-2 py-1 mt-1 text-xl font-normal input input-bordered input-primary\"\n\t\t\t\t\t\tplaceholder=\"Username\"\n\t\t\t\t\t\tbind:value={$form.userName}\n\t\t\t\t\t\ton:change={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{#if $errors.userName}\n\t\t\t\t\t\t<small class=\"text-red-800 animate-pulse\">{$errors.userName}</small>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tclass=\"block w-full px-4 md:py-2 py-1 mt-4 text-xl font-normal input input-bordered input-primary\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t\t\tbind:value={$form.password}\n\t\t\t\t\t\ton:change={handleChange}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t{#if $errors.password}\n\t\t\t\t\t\t<small class=\"text-red-800 animate-pulse\">{$errors.password}</small>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<!-- <input\n                      id=\"alias\"\n                      class=\"input input-bordered input-primary w-full mt-2\"\n                      placeholder=\"(Optional) Enter account alias here...\"\n                      autocomplete=\"off\"\n                      bind:value={$form.alias}\n                      on:change=\"{handleChange}\"\n                    /> -->\n\t\t\t\t\t<div class=\"flex ml-1\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div class=\"form-check\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"seePassword\"\n\t\t\t\t\t\t\t\t\ton:click={toggleVisability}\n\t\t\t\t\t\t\t\t\tclass=\"form-check-input appearance-none h-4 w-4 checkbox-primary rounded-full float-left mr-2 cursor-pointer\"\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tvalue=\"\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label class=\"form-check-label text-sm inline-block label-text\" for=\"seePassword\">\n\t\t\t\t\t\t\t\t\tShow Password\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex ml-1 mt-2\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div class=\"form-check\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"subaccounts\"\n\t\t\t\t\t\t\t\t\ton:click={handleSubaccounts}\n\t\t\t\t\t\t\t\t\tclass=\"form-check-input appearance-none h-4 w-4 checkbox-primary rounded-full float-left mr-2 cursor-pointer\"\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tvalue=\"\"\n\t\t\t\t\t\t\t\t\tchecked\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<label class=\"form-check-label text-sm inline-block label-text\" for=\"subaccounts\">\n\t\t\t\t\t\t\t\t\tRecover Subportfolio Accounts\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div class=\"flex ml-1 mt-4\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div class=\"form-check\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"seeWords\"\n\t\t\t\t\t\t\t\ton:click={toggleWordsVisability}\n\t\t\t\t\t\t\t\tclass=\"form-check-input appearance-none h-4 w-4 checkbox-primary rounded-full float-left mr-2 cursor-pointer\"\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tvalue=\"\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<label class=\"form-check-label text-sm inline-block label-text\" for=\"seePassword\">\n\t\t\t\t\t\t\t\tShow Secret Recovery Phrase Words\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"mt-4\">\n\t\t\t\t\t{#each Array(24) as _, index (index)}\n\t\t\t\t\t\t<div class=\"flex space-x-2 mb-3\">\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tid=\"word_text_{index + 1}\"\n\t\t\t\t\t\t\t\tclass=\"inline-block w-[5%] h-[35px] pt-1 text-md justify-center text-base-content\"\n\t\t\t\t\t\t\t\t>{index + 1}.</span\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tclass=\"input input-bordered input-primary w-full\"\n\t\t\t\t\t\t\t\tid=\"word_{index + 1}\"\n\t\t\t\t\t\t\t\tdata-id={index + 1}\n\t\t\t\t\t\t\t\taria-label=\"Word {index + 1}\"\n\t\t\t\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t\t\t\t\ton:paste={handlePaste}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/each}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"{mtop} mb-20\">\n\t\t\t\t\t<div class=\"flex space-x-2 justify-center\">\n\t\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t\t\t\t\t<!-- svelte-ignore a11y-interactive-supports-focus -->\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ton:click|preventDefault={handleCancel}\n\t\t\t\t\t\t\taria-label=\"Cancel\"\n\t\t\t\t\t\t\tclass=\"btn-sm btn-accent uppercase rounded-full\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tid=\"recover\"\n\t\t\t\t\t\t\ton:click={handleSubmit}\n\t\t\t\t\t\t\tclass=\"btn-sm btn-primary uppercase rounded-full ml-2\"\n\t\t\t\t\t\t\taria-label=\"Confirm\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRecover\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n</div>\n"],"names":["defaultClass","path","PATH_WELCOME","handle","goto","currentlySelected","error","errorValue","showConfetti","selected","mtop","subAccounts","async","processSecretPhaseRecovery","data","browserSvelte","createPortfolioAccount","secretPhrase","clearData","e","mnemonic","id","yakklSettings","profile","yakklCurrentlySelected","accountName","ethWallet","preferences","displayDate","derivedPath","DEFAULT_DERIVED_PATH_ETH","getSettings","getProfile","$.store_get","$$store_subs","yakklMiscStore","isEncryptedData","decryptData","then","result","meta","index","accountIndex","entropy","words","ethersv6","randomBytes","randomMnemonic","Mnemonic","fromEntropy","HDNodeWallet","fromMnemonic","exists","table","addressExist","address","currentDate","dateString","Date","yakklAccount","blockchain","shortcuts","network","smartContract","alias","accountType","AccountTypeCategory","PRIMARY","name","description","primaryAccount","extendedKey","privateKey","publicKey","publicKeyUncompressed","pathIndex","fingerPrint","fingerprint","parentFingerPrint","parentFingerprint","chainCode","assignedTo","quantity","class","level","isSigner","avatar","tags","includeInPortfolio","connectedDomains","createDate","updateDate","version","yakklPrimaryAccount","phrase","password","wordCount","split","length","wordListLocale","wordlist","locale","account","subIndex","yakklPrimaryAccountEnc","deepCopy","encryptData","yakklPrimaryAccounts","primaryAccountsStorage","getYakklPrimaryAccounts","push","setYakklPrimaryAccountsStorage","profileIndex","primaryAccounts","yakklAccounts","accountsStorage","getYakklAccounts","setYakklAccountsStorage","signMessage","sig","profileEnc","setProfileStorage","init","isLocked","setSettingsStorage","currency","symbol","getSymbol","showTestNetworks","email","primary","currentDeepCopy","setYakklCurrentlySelectedStorage","derivedIndex","dPath","fromPhrase","wallet","getWallet","transactionCount","getTransactionCount","addressDerived","incrementProperty","SUB","yakklAccountEnc","console","log","form","errors","createForm","initialValues","userName","confirmPassword","validationSchema","yup","object","shape","string","required","matches","oneOf","ref","onSubmit","elements","document","querySelectorAll","srp","elements2","forEach","el","value","trim","Error","$.store_mutate","each_array","$.ensure_array_like","Array","$$value","$$payload","out","$.attr","$.stringify","$.escape"],"mappings":"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"}