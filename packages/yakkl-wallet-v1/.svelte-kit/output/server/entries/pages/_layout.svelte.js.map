{"version":3,"file":"_layout.svelte.js","sources":["../../../../../src/lib/components/SessionProvider.svelte","../../../../../src/routes/+layout.svelte"],"sourcesContent":["<!-- SessionProvider.svelte -->\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { goto } from '$app/navigation';\n\timport { authStore, showSessionWarning, sessionTimeRemaining } from '$lib/stores/auth-store';\n\timport SessionWarning from './SessionWarning.svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { protectedContexts } from '$lib/common/globals';\n\timport { PATH_LOGOUT } from '$lib/common';\n\n\tinterface Props {\n\t\tchildren: any;\n\t}\n\n\tlet { children }: Props = $props();\n\tlet shouldShowSessionWarning = $state(false);\n\n\t// Check if current context needs session warnings\n\tfunction getCurrentContextType(): string {\n\t\ttry {\n\t\t\tif (typeof window === 'undefined') return 'unknown';\n\n\t\t\tconst pathname = window.location.pathname;\n\t\t\tconst href = window.location.href;\n\n\t\t\tif (pathname.includes('sidepanel') || href.includes('sidepanel')) {\n\t\t\t\treturn 'sidepanel';\n\t\t\t} else if (\n\t\t\t\tpathname.includes('index.html') ||\n\t\t\t\thref.includes('index.html') ||\n\t\t\t\tpathname === '/' ||\n\t\t\t\tpathname === ''\n\t\t\t) {\n\t\t\t\treturn 'popup-wallet';\n\t\t\t} else if (pathname.includes('dapp/popups') || href.includes('dapp/popups')) {\n\t\t\t\treturn 'popup-dapp';\n\t\t\t} else {\n\t\t\t\treturn 'popup-wallet'; // Default to popup-wallet for main extension\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn 'unknown';\n\t\t}\n\t}\n\n\tfunction currentContextNeedsSessionWarning(): boolean {\n\t\tconst contextType = getCurrentContextType();\n\t\treturn protectedContexts.includes(contextType);\n\t}\n\n\tonMount(() => {\n\t\tshouldShowSessionWarning = currentContextNeedsSessionWarning();\n\t\tlog.debug('SessionProvider context check:', false, { \n\t\t\tcontextType: getCurrentContextType(), \n\t\t\tshouldShowSessionWarning \n\t\t});\n\t});\n\n\t// Handle session extension\n\tasync function handleExtendSession() {\n\t\ttry {\n\t\t\tawait authStore.extendSession(30); // Extend by 30 minutes\n\t\t\tlog.debug('Session extended via session provider', false);\n\t\t} catch (error) {\n\t\t\tlog.error('Failed to extend session:', false, error);\n\t\t}\n\t}\n\n\t// Handle logout\n\tasync function handleLogoutNow() {\n\t\ttry {\n\t\t\tawait authStore.logout();\n\t\t\tlog.debug('User logged out via session provider', false);\n\t\t\t// Navigate to logout page\n\t\t\tgoto(PATH_LOGOUT);\n\t\t} catch (error) {\n\t\t\tlog.error('Failed to logout:', false, error);\n\t\t\t// Still try to navigate even if logout fails\n\t\t\tgoto(PATH_LOGOUT);\n\t\t}\n\t}\n</script>\n\n<!-- Render children -->\n{@render children()}\n\n<!-- Global session warning modal - only show in protected contexts -->\n{#if shouldShowSessionWarning}\n\t<SessionWarning\n\t\tbind:show={$showSessionWarning}\n\t\ttimeRemaining={$sessionTimeRemaining}\n\t\tonExtendSession={handleExtendSession}\n\t\tonLogoutNow={handleLogoutNow}\n\t\tautoLogoutEnabled={true}\n\t/>\n{/if}\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { initializeBrowserAPI } from '$lib/browser-polyfill-wrapper';\n\timport '../app.css';\n\timport { browser_ext } from '$lib/common/environment';\n\timport { sessionToken, sessionExpiresAt, storeSessionToken } from '$lib/common/auth/session';\n\timport { get } from 'svelte/store';\n\timport { log } from '$lib/managers/Logger';\n\timport SessionProvider from '$lib/components/SessionProvider.svelte';\n\n\tlet { children } = $props();\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tbrowser_ext.runtime.onMessage.addListener((message: any): any => {\n\t\t\t\tif (message?.type === 'SESSION_TOKEN_BROADCAST') {\n\t\t\t\t\tstoreSessionToken(message.token, message.expiresAt);\n\t\t\t\t\tlog.info(\n\t\t\t\t\t\t'[Layout] Session token set:',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t{ sessionToken, sessionExpiresAt },\n\t\t\t\t\t\tget(sessionToken),\n\t\t\t\t\t\tget(sessionExpiresAt)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\tinitializeBrowserAPI();\n\t\t} catch (error) {\n\t\t\tlog.warn('Error initializing layout:', false, error);\n\t\t}\n\t});\n</script>\n\n<SessionProvider>\n\t{@render children?.()}\n</SessionProvider>\n"],"names":["children","$$props","$$payload"],"mappings":"2iBAcO,IAAAA,SAAAA,UAAAC,mFAqEED,SAAQE,qkBCzEV,IAAAF,SAAAA,UAAAC,yFAyBGD,WAAQE"}