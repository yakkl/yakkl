{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../src/routes/(splash)/popup/+page.svelte"],"sourcesContent":["<!-- // In popup/+page.svelte\n<script lang=\"ts\">\n  import { browser_ext } from '$lib/common/environment';\n  import { onDestroy, onMount } from 'svelte';\n  import { YAKKL_SPLASH, NUM_OF_SPLASH_IMAGES } from '$lib/common/constants';\n  import { wait } from '$lib/common/utils';\n  import { log } from '$lib/common/logger-wrapper';\n  import type { Runtime } from 'webextension-polyfill';\n\n  type RuntimePort = Runtime.Port;\n\n  let port: RuntimePort | null = null;\n  let isPortDisconnected = true;\n  let connectionAttempts = 0;\n  const MAX_ATTEMPTS = 3;\n  let errorMessage = '';\n\n  async function attemptConnection() {\n    if (!browser_ext) {\n      errorMessage = \"Browser extension API is unavailable.\";\n      log.warn(errorMessage);\n      return false;\n    }\n\n    try {\n      connectionAttempts++;\n      log.info(`Attempting connection (${connectionAttempts}/${MAX_ATTEMPTS})...`);\n\n      port = browser_ext.runtime.connect({name: YAKKL_SPLASH});\n\n      if (port) {\n        isPortDisconnected = false;\n\n        port.onMessage.addListener((m: any) => {\n          if (m.popup === \"YAKKL: Launched\") {\n            window.close(); // Close this splash window\n          }\n        });\n\n        port.onDisconnect.addListener(() => {\n          const error = browser_ext?.runtime.lastError;\n          isPortDisconnected = true;\n          log.info(\"Port disconnected:\", false, error?.message);\n          // Don't retry here - this is normal disconnection\n        });\n\n        return true;\n      }\n    } catch (error) {\n      log.error(\"Connection error:\", false, error);\n      errorMessage = \"Failed to establish connection to background script.\";\n    }\n\n    return false;\n  }\n\n  onMount(async () => {\n    try {\n      // First attempt\n      let connected = await attemptConnection();\n\n      // Retry logic\n      while (!connected && connectionAttempts < MAX_ATTEMPTS) {\n        log.info(`Connection failed, retrying in ${connectionAttempts * 1000}ms...`);\n        await wait(connectionAttempts * 1000); // Increasing backoff\n        connected = await attemptConnection();\n      }\n\n      // If still not connected after max attempts\n      if (!connected) {\n        log.error(`Failed to connect after ${MAX_ATTEMPTS} attempts`);\n        errorMessage = `Failed to connect after ${MAX_ATTEMPTS} attempts. Try reloading the extension.`;\n        return;\n      }\n\n      // Set up alarm only if connected\n      browser_ext?.alarms.create('yakkl-splash-alarm', { when: Date.now() + 2000 });\n      browser_ext?.alarms.onAlarm.addListener((alarm) => {\n        if (alarm.name === 'yakkl-splash-alarm' && port && !isPortDisconnected) {\n          try {\n            port.postMessage({ popup: \"YAKKL: Splash\" });\n          } catch (e) {\n            log.error(\"Error posting message:\", false, e);\n          }\n        }\n      });\n    } catch (e) {\n      log.error(\"Splash initialization error:\", false, e);\n      errorMessage = \"Failed to initialize splash screen.\";\n    }\n  });\n\n  onDestroy(() => {\n    try {\n      if (port && !isPortDisconnected) {\n        port.disconnect();\n      }\n      browser_ext?.alarms.clear('yakkl-splash-alarm');\n    } catch (e) {\n      log.error(\"Cleanup error:\", false, e);\n    }\n  });\n\n  function getRandomInt(max: number) {\n    return Math.floor(Math.random() * max);\n  }\n</script>\n\n<div class=\"splash-container\">\n  <img src=\"/images/splash_{getRandomInt(NUM_OF_SPLASH_IMAGES)}.png\" alt=\"Splash page with logo\">\n\n  {#if errorMessage}\n    <div class=\"error-message\">\n      {errorMessage}\n    </div>\n  {/if}\n</div>\n\n<style>\n  .splash-container {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n\n  .error-message {\n    position: absolute;\n    bottom: 20px;\n    left: 20px;\n    right: 20px;\n    background: rgba(255, 0, 0, 0.7);\n    color: white;\n    padding: 10px;\n    border-radius: 5px;\n    font-size: 12px;\n  }\n</style> -->\n\n<script lang=\"ts\">\n\timport { browser_ext } from '$lib/common/environment';\n\timport { onDestroy, onMount } from 'svelte';\n\timport { YAKKL_SPLASH, NUM_OF_SPLASH_IMAGES } from '$lib/common/constants';\n\timport { wait } from '$lib/common/utils';\n\timport { log } from '$lib/common/logger-wrapper';\n\timport type { Runtime } from 'webextension-polyfill';\n\n\ttype RuntimePort = Runtime.Port;\n\n\tlet port: RuntimePort;\n\tlet isPortDisconnected = false;\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tlog.info('YAKKL: Splash: Attempting to connect to background script...');\n\n\t\t\tif (!browser_ext) {\n\t\t\t\tlog.warn('Browser extension API is unavailable.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tport = browser_ext.runtime.connect({ name: YAKKL_SPLASH });\n\t\t\tif (port) {\n\t\t\t\tlog.debug('YAKKL: Splash: Port connected.');\n\n\t\t\t\tisPortDisconnected = false;\n\n\t\t\t\tport.onMessage.addListener((m: any) => {\n\t\t\t\t\tif (m.popup === 'YAKKL: Launched') {\n\t\t\t\t\t\twindow.close(); // Close this splash window\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tport.onDisconnect.addListener(() => {\n\t\t\t\t\tisPortDisconnected = true;\n\t\t\t\t\tlog.info('Port has been disconnected.');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlog.info('YAKKL: Splash: Port is trying again in 2 seconds...');\n\t\t\t\tawait wait(2000);\n\n\t\t\t\tport = browser_ext.runtime.connect({ name: YAKKL_SPLASH });\n\t\t\t\tif (port) {\n\t\t\t\t\tport.onMessage.addListener((m: any) => {\n\t\t\t\t\t\tif (m.popup === 'YAKKL: Launched') {\n\t\t\t\t\t\t\tport.disconnect();\n\t\t\t\t\t\t\twindow.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tport.onDisconnect.addListener(() => {\n\t\t\t\t\t\tisPortDisconnected = true;\n\t\t\t\t\t\tlog.info('Port has been disconnected.');\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tbrowser_ext.runtime.reload();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbrowser_ext.alarms.create('yakkl-splash-alarm', { when: Date.now() + 2000 });\n\t\t\tbrowser_ext.alarms.onAlarm.addListener((m: any) => {\n\t\t\t\tif (port && !isPortDisconnected) port.postMessage({ popup: 'YAKKL: Splash' });\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t});\n\n\tonDestroy(() => {\n\t\ttry {\n\t\t\tif (port) {\n\t\t\t\tport.disconnect();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t}\n\t});\n\n\tfunction getRandomInt(max: number) {\n\t\treturn Math.floor(Math.random() * max);\n\t}\n</script>\n\n<img src=\"/images/splash_{getRandomInt(NUM_OF_SPLASH_IMAGES)}.png\" alt=\"Splash page with logo\" />\n\n<!-- <script lang=\"ts\">\n  import { browserSvelte, browser_ext } from '$lib/common/environment';\n  import {onDestroy, onMount} from 'svelte';\n  import { YAKKL_SPLASH, NUM_OF_SPLASH_IMAGES } from '$lib/common/constants';\n\timport { wait } from '$lib/common/utils';\n  import { log } from '$lib/common/logger-wrapper';\n\n  // Splash size should be maximum default browser extension size.\n  // Note: May want to look into providing a communications window for the user to see what is going on if we need to provide them with an important message.\n  import type { Runtime } from 'webextension-polyfill';\n\n  type RuntimePort = Runtime.Port;\n\n  let port: RuntimePort;\n  let isPortDisconnected = false;\n\n  onMount(async () => {\n    try {\n      if (browserSvelte) {\n        port = browser_ext.runtime.connect({name: YAKKL_SPLASH});\n        if (port) {\n          isPortDisconnected = false; // Mark port as connected ??\n\n          port.onMessage.addListener((m: any) => {\n            if (m.popup === \"YAKKL: Launched\") {\n              window.close(); // Close this splash window\n            }\n          });\n\n          port.onDisconnect.addListener(() => {\n            isPortDisconnected = true; // Mark port as disconnected\n            log.info(\"Port has been disconnected.\");\n          });\n        } else {\n          log.info(\"YAKKL: Splash: Port is trying again in 2 seconds...\");\n          await wait(2000);\n\n          // Try one more time\n          port = browser_ext.runtime.connect({name: YAKKL_SPLASH});\n          if (port) {\n            port.onMessage.addListener((m: any) => {\n              if (m.popup === \"YAKKL: Launched\") {\n                port.disconnect();\n                window.close(); // Close this splash window\n              }\n            });\n\n            port.onDisconnect.addListener(() => {\n              isPortDisconnected = true; // Mark port as disconnected\n              log.info(\"Port has been disconnected.\");\n            });\n          } else {\n            browser_ext.runtime.reload(); // Reload the extension. This will exit it and apply any pending updates.\n          }\n        }\n\n        browser_ext.alarms.create('yakkl-splash-alarm', {when: Date.now() + 2000}); // Change this number to reflect how much time we want the user to see the splash screen\n        browser_ext.alarms.onAlarm.addListener((m: any) => {\n          if (port && !isPortDisconnected) port.postMessage({popup: \"YAKKL: Splash\"}); // Fire when the timer ends - goes to the background.ts\n        });\n      }\n    } catch (e) {\n      log.error(e);\n    }\n  });\n\n\n  onDestroy( () => {\n    try {\n      if (browserSvelte) {\n        browser_ext.alarms.clearAll();\n        isPortDisconnected = true;\n        if (port) {\n          port.disconnect();\n        }\n      }\n    } catch (e) {\n      log.error(e);\n    }\n  });\n\n\n  function getRandomInt(max: number) {\n    try {\n      return Math.floor(Math.random() * max);\n    } catch (e) {\n      return 0;\n    }\n  }\n\n</script>\n\n<img src=\"/images/splash_{getRandomInt(NUM_OF_SPLASH_IMAGES)}.png\" alt=\"Splash page with logo\">\n -->\n"],"names":["port","onDestroy","e","log","error","getRandomInt","max","Math","floor","random","$$payload","out","$.attr","$.stringify","NUM_OF_SPLASH_IMAGES"],"mappings":"ufAoJK,IAAAA,KA2DJC,UAAgB,KACX,OACCD,MAGL,OAASE,GACRC,IAAIC,MAAMF,EACX,IAGQ,SAAAG,aAAaC,YACdC,KAAKC,MAAMD,KAAKE,SAAWH,IACnC,CAGyBI,UAAAC,KAAA,OAAAC,KAAA,MAAA,kBAAAC,UAAAR,aAAaS"}