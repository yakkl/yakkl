{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/_version.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/properties.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/errors.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/data.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/maths.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/utf8.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/fixednumber.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/units.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/abstract-coder.js","../../../../../../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_assert.js","../../../../../../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/_u64.js","../../../../../../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/utils.js","../../../../../../../../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/esm/sha3.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/keccak.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/address.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/typed.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/address.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/anonymous.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/array.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/boolean.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/bytes.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/null.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/number.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/string.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/coders/tuple.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/id.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/fragments.js","../../../../../../../../node_modules/.pnpm/ethers@6.14.4_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/abi-coder.js","../../../../../../src/routes/preview2/lib/components/MoreLess.svelte","../../../../../../src/routes/preview2/lib/services/transaction.service.ts","../../../../../../src/routes/preview2/lib/stores/transaction.store.ts","../../../../../../src/routes/preview2/lib/components/RecentActivity.svelte","../../../../../../src/routes/preview2/lib/components/SendModal.svelte","../../../../../../src/routes/preview2/lib/components/v1/QR.svelte","../../../../../../src/routes/preview2/lib/components/v1/Copy.svelte","../../../../../../src/routes/preview2/lib/components/Receive.svelte","../../../../../../src/routes/preview2/lib/features/payment/buy/buy.service.ts","../../../../../../src/routes/preview2/lib/components/BuyModal.svelte","../../../../../../src/routes/preview2/lib/components/TokenPortfolio.svelte","../../../../../../src/routes/preview2/lib/services/token.service.ts","../../../../../../src/routes/preview2/lib/stores/token.store.ts","../../../../../../src/routes/preview2/lib/components/pro/AdvancedAnalytics.svelte","../../../../../../src/routes/preview2/lib/components/private/SecureRecovery.svelte","../../../../../../src/routes/preview2/+page.svelte"],"sourcesContent":["/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\n/**\n *  The current version of Ethers.\n */\nexport const version = \"6.14.4\";\n//# sourceMappingURL=_version.js.map","/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */\nfunction checkType(value, type, name) {\n    const types = type.split(\"|\").map(t => t.trim());\n    for (let i = 0; i < types.length; i++) {\n        switch (type) {\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof (value) === type) {\n                    return;\n                }\n        }\n    }\n    const error = new Error(`invalid value for type ${type}`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${name}`;\n    error.value = value;\n    throw error;\n}\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */\nexport async function resolveProperties(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\n    return results.reduce((accum, v, index) => {\n        accum[keys[index]] = v;\n        return accum;\n    }, {});\n}\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */\nexport function defineProperties(target, values, types) {\n    for (let key in values) {\n        let value = values[key];\n        const type = (types ? types[key] : null);\n        if (type) {\n            checkType(value, type, key);\n        }\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\n    }\n}\n//# sourceMappingURL=properties.js.map","/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\nimport { version } from \"../_version.js\";\nimport { defineProperties } from \"./properties.js\";\nfunction stringify(value, seen) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (seen == null) {\n        seen = new Set();\n    }\n    if (typeof (value) === \"object\") {\n        if (seen.has(value)) {\n            return \"[Circular]\";\n        }\n        seen.add(value);\n    }\n    if (Array.isArray(value)) {\n        return \"[ \" + (value.map((v) => stringify(v, seen))).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\n        return stringify(value.toJSON(), seen);\n    }\n    switch (typeof (value)) {\n        case \"boolean\":\n        case \"number\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{ \" + keys.map((k) => `${stringify(k, seen)}: ${stringify(value[k], seen)}`).join(\", \") + \" }\";\n        }\n    }\n    return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript environments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError(error, code) {\n    return (error && error.code === code);\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\n *  required properties. The error message will also include the %%message%%,\n *  ethers version, %%code%% and all additional properties, serialized.\n */\nexport function makeError(message, code, info) {\n    let shortMessage = message;\n    {\n        const details = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n            }\n            for (const key in info) {\n                if (key === \"shortMessage\") {\n                    continue;\n                }\n                const value = (info[key]);\n                //                try {\n                details.push(key + \"=\" + stringify(value));\n                //                } catch (error: any) {\n                //                console.log(\"MMM\", error.message);\n                //                    details.push(key + \"=[could not serialize object]\");\n                //                }\n            }\n        }\n        details.push(`code=${code}`);\n        details.push(`version=${version}`);\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n    let error;\n    switch (code) {\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n    defineProperties(error, { code });\n    if (info) {\n        Object.assign(error, info);\n    }\n    if (error.shortMessage == null) {\n        defineProperties(error, { shortMessage });\n    }\n    return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert(check, message, code, info) {\n    if (!check) {\n        throw makeError(message, code, info);\n    }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check, message, name, value) {\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\n}\nexport function assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n        message = \"\";\n    }\n    if (message) {\n        message = \": \" + message;\n    }\n    assert(count >= expectedCount, \"missing argument\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n    assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n    try {\n        // General test for normalize\n        /* c8 ignore start */\n        if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n        }\n        ;\n        /* c8 ignore stop */\n        if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301);\n            /* c8 ignore start */\n            if (check !== expected) {\n                throw new Error(\"broken\");\n            }\n            /* c8 ignore stop */\n        }\n        accum.push(form);\n    }\n    catch (error) { }\n    return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form) {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\", info: { form }\n    });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n        className = \"\";\n    }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof (value) === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && (value.length % 2) !== 0) {\n        return false;\n    }\n    return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value) {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas) {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) {\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    }\n    else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n}\n//# sourceMappingURL=data.js.map","/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */\nimport { hexlify, isBytesLike } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */\nexport function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    assert((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\n    });\n    // Top bit set; treat as a negative value\n    if (value >> (width - BN_1)) {\n        const mask = (BN_1 << width) - BN_1;\n        return -(((~value) & mask) + BN_1);\n    }\n    return value;\n}\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */\nexport function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = (BN_1 << (width - BN_1));\n    if (value < BN_0) {\n        value = -value;\n        assert(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return ((~value) & mask) + BN_1;\n    }\n    else {\n        assert(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n    }\n    return value;\n}\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */\nexport function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & ((BN_1 << bits) - BN_1);\n}\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getBigInt(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\": return value;\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            }\n            catch (e) {\n                assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */\nexport function getUint(value, name) {\n    const result = getBigInt(value, name);\n    assert(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\", operation: \"getUint\", value\n    });\n    return result;\n}\nconst Nibbles = \"0123456789abcdef\";\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */\nexport function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value) {\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n    return getBigInt(value);\n}\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getNumber(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\":\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                return getNumber(BigInt(value), name);\n            }\n            catch (e) {\n                assertArgument(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\n}\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */\nexport function toNumber(value) {\n    return getNumber(toBigInt(value));\n}\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */\nexport function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) {\n            result = \"0\" + result;\n        }\n    }\n    else {\n        const width = getNumber(_width, \"width\");\n        assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n        // Pad the value to the required width\n        while (result.length < (width * 2)) {\n            result = \"0\" + result;\n        }\n    }\n    return \"0x\" + result;\n}\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */\nexport function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n        return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n        hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < result.length; i++) {\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n}\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */\nexport function toQuantity(value) {\n    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);\n    while (result.startsWith(\"0\")) {\n        result = result.substring(1);\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n    return \"0x\" + result;\n}\n//# sourceMappingURL=maths.js.map","/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        assertArgument(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    const bytes = getBytes(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            }\n            else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str, form) {\n    assertArgument(typeof (str) === \"string\", \"invalid string value\", \"str\", str);\n    if (form != null) {\n        assertNormalize(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map","/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nimport { getBytes } from \"./data.js\";\nimport { assert, assertArgument, assertPrivate } from \"./errors.js\";\nimport { getBigInt, getNumber, fromTwos, mask, toBigInt } from \"./maths.js\";\nimport { defineProperties } from \"./properties.js\";\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) {\n    Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n    let result = Zeros;\n    while (result.length < decimals) {\n        result += result;\n    }\n    return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n    const width = BigInt(format.width);\n    if (format.signed) {\n        const limit = (BN_1 << (width - BN_1));\n        assert(safeOp == null || (val >= -limit && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp, fault: \"overflow\", value: val\n        });\n        if (val > BN_0) {\n            val = fromTwos(mask(val, width), width);\n        }\n        else {\n            val = -fromTwos(mask(-val, width), width);\n        }\n    }\n    else {\n        const limit = (BN_1 << width);\n        assert(safeOp == null || (val >= 0 && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: safeOp, fault: \"overflow\", value: val\n        });\n        val = (((val % limit) + limit) % limit) & (limit - BN_1);\n    }\n    return val;\n}\nfunction getFormat(value) {\n    if (typeof (value) === \"number\") {\n        value = `fixed128x${value}`;\n    }\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n    if (typeof (value) === \"string\") {\n        // Parse the format string\n        if (value === \"fixed\") {\n            // defaults...\n        }\n        else if (value === \"ufixed\") {\n            signed = false;\n        }\n        else {\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n            assertArgument(match, \"invalid fixed format\", \"format\", value);\n            signed = (match[1] !== \"u\");\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n        }\n    }\n    else if (value) {\n        // Extract the values from the object\n        const v = value;\n        const check = (key, type, defaultValue) => {\n            if (v[key] == null) {\n                return defaultValue;\n            }\n            assertArgument(typeof (v[key]) === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n            return v[key];\n        };\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n    }\n    assertArgument((width % 8) === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n    assertArgument(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n    const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    return { signed, width, decimals, name };\n}\nfunction toString(val, decimals) {\n    let negative = \"\";\n    if (val < BN_0) {\n        negative = \"-\";\n        val *= BN_N1;\n    }\n    let str = val.toString();\n    // No decimal point for whole values\n    if (decimals === 0) {\n        return (negative + str);\n    }\n    // Pad out to the whole component (including a whole digit)\n    while (str.length <= decimals) {\n        str = Zeros + str;\n    }\n    // Insert the decimal point\n    const index = str.length - decimals;\n    str = str.substring(0, index) + \".\" + str.substring(index);\n    // Trim the whole component (leaving at least one 0)\n    while (str[0] === \"0\" && str[1] !== \".\") {\n        str = str.substring(1);\n    }\n    // Trim the decimal component (leaving at least one 0)\n    while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n        str = str.substring(0, str.length - 1);\n    }\n    return (negative + str);\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, a value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nexport class FixedNumber {\n    /**\n     *  The specific fixed-point arithmetic field for this value.\n     */\n    format;\n    #format;\n    // The actual value (accounting for decimals)\n    #val;\n    // A base-10 value to multiple values by to maintain the magnitude\n    #tens;\n    /**\n     *  This is a property so console.log shows a human-meaningful value.\n     *\n     *  @private\n     */\n    _value;\n    // Use this when changing this file to get some typing info,\n    // but then switch to any to mask the internal type\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\n    /**\n     *  @private\n     */\n    constructor(guard, value, format) {\n        assertPrivate(guard, _guard, \"FixedNumber\");\n        this.#val = value;\n        this.#format = format;\n        const _value = toString(value, format.decimals);\n        defineProperties(this, { format: format.name, _value });\n        this.#tens = getTens(format.decimals);\n    }\n    /**\n     *  If true, negative values are permitted, otherwise only\n     *  positive values and zero are allowed.\n     */\n    get signed() { return this.#format.signed; }\n    /**\n     *  The number of bits available to store the value.\n     */\n    get width() { return this.#format.width; }\n    /**\n     *  The number of decimal places in the fixed-point arithment field.\n     */\n    get decimals() { return this.#format.decimals; }\n    /**\n     *  The value as an integer, based on the smallest unit the\n     *  [[decimals]] allow.\n     */\n    get value() { return this.#val; }\n    #checkFormat(other) {\n        assertArgument(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n    #checkValue(val, safeOp) {\n        /*\n                const width = BigInt(this.width);\n                if (this.signed) {\n                    const limit = (BN_1 << (width - BN_1));\n                    assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n        \n                    if (val > BN_0) {\n                        val = fromTwos(mask(val, width), width);\n                    } else {\n                        val = -fromTwos(mask(-val, width), width);\n                    }\n        \n                } else {\n                    const masked = mask(val, width);\n                    assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                        operation: <string>safeOp, fault: \"overflow\", value: val\n                    });\n                    val = masked;\n                }\n        */\n        val = checkValue(val, this.#format, safeOp);\n        return new FixedNumber(_guard, val, this.#format);\n    }\n    #add(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val + o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%, ignoring overflow.\n     */\n    addUnsafe(other) { return this.#add(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    add(other) { return this.#add(other, \"add\"); }\n    #sub(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val - o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%, ignoring overflow.\n     */\n    subUnsafe(other) { return this.#sub(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    sub(other) { return this.#sub(other, \"sub\"); }\n    #mul(o, safeOp) {\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\n     */\n    mulUnsafe(other) { return this.#mul(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    mul(other) { return this.#mul(other, \"mul\"); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs or if underflow (precision loss) occurs.\n     */\n    mulSignal(other) {\n        this.#checkFormat(other);\n        const value = this.#val * other.#val;\n        assert((value % this.#tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n            operation: \"mulSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / this.#tens, \"mulSignal\");\n    }\n    #div(o, safeOp) {\n        assert(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    divUnsafe(other) { return this.#div(other); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    div(other) { return this.#div(other, \"div\"); }\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n     *  (precision loss) occurs.\n     */\n    divSignal(other) {\n        assert(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(other);\n        const value = (this.#val * this.#tens);\n        assert((value % other.#val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n            operation: \"divSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / other.#val, \"divSignal\");\n    }\n    /**\n     *  Returns a comparison result between %%this%% and %%other%%.\n     *\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n     *  both are equal.\n     */\n    cmp(other) {\n        let a = this.value, b = other.value;\n        // Coerce a and b to the same magnitude\n        const delta = this.decimals - other.decimals;\n        if (delta > 0) {\n            b *= getTens(delta);\n        }\n        else if (delta < 0) {\n            a *= getTens(-delta);\n        }\n        // Comnpare\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     *  Returns true if %%other%% is equal to %%this%%.\n     */\n    eq(other) { return this.cmp(other) === 0; }\n    /**\n     *  Returns true if %%other%% is less than to %%this%%.\n     */\n    lt(other) { return this.cmp(other) < 0; }\n    /**\n     *  Returns true if %%other%% is less than or equal to %%this%%.\n     */\n    lte(other) { return this.cmp(other) <= 0; }\n    /**\n     *  Returns true if %%other%% is greater than to %%this%%.\n     */\n    gt(other) { return this.cmp(other) > 0; }\n    /**\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\n     */\n    gte(other) { return this.cmp(other) >= 0; }\n    /**\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\n     *  that is less than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    floor() {\n        let val = this.#val;\n        if (this.#val < BN_0) {\n            val -= this.#tens - BN_1;\n        }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"floor\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\n     *  that is greater than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    ceiling() {\n        let val = this.#val;\n        if (this.#val > BN_0) {\n            val += this.#tens - BN_1;\n        }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"ceiling\");\n    }\n    /**\n     *  Returns a new [[FixedNumber]] with the decimal component\n     *  rounded up on ties at %%decimals%% places.\n     */\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // Not enough precision to not already be rounded\n        if (decimals >= this.decimals) {\n            return this;\n        }\n        const delta = this.decimals - decimals;\n        const bump = BN_5 * getTens(delta - 1);\n        let value = this.value + bump;\n        const tens = getTens(delta);\n        value = (value / tens) * tens;\n        checkValue(value, this.#format, \"round\");\n        return new FixedNumber(_guard, value, this.#format);\n    }\n    /**\n     *  Returns true if %%this%% is equal to ``0``.\n     */\n    isZero() { return (this.#val === BN_0); }\n    /**\n     *  Returns true if %%this%% is less than ``0``.\n     */\n    isNegative() { return (this.#val < BN_0); }\n    /**\n     *  Returns the string representation of %%this%%.\n     */\n    toString() { return this._value; }\n    /**\n     *  Returns a float approximation.\n     *\n     *  Due to IEEE 754 precission (or lack thereof), this function\n     *  can only return an approximation and most values will contain\n     *  rounding errors.\n     */\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    /**\n     *  Return a new [[FixedNumber]] with the same value but has had\n     *  its field set to %%format%%.\n     *\n     *  This will throw if the value cannot fit into %%format%%.\n     */\n    toFormat(format) {\n        return FixedNumber.fromString(this.toString(), format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\n     *  %%decimal%% places with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n     *  or underflow (precision loss).\n     */\n    static fromValue(_value, _decimals, _format) {\n        const decimals = (_decimals == null) ? 0 : getNumber(_decimals);\n        const format = getFormat(_format);\n        let value = getBigInt(_value, \"value\");\n        const delta = decimals - format.decimals;\n        if (delta > 0) {\n            const tens = getTens(delta);\n            assert((value % tens) === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n                operation: \"fromValue\", fault: \"underflow\", value: _value\n            });\n            value /= tens;\n        }\n        else if (delta < 0) {\n            value *= getTens(-delta);\n        }\n        checkValue(value, format, \"fromValue\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%%, either due to overflow or underflow (precision loss).\n     */\n    static fromString(_value, _format) {\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n        assertArgument(match && (match[2].length + match[3].length) > 0, \"invalid FixedNumber string value\", \"value\", _value);\n        const format = getFormat(_format);\n        let whole = (match[2] || \"0\"), decimal = (match[3] || \"\");\n        // Pad out the decimals\n        while (decimal.length < format.decimals) {\n            decimal += Zeros;\n        }\n        // Check precision is safe\n        assert(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n            operation: \"fromString\", fault: \"underflow\", value: _value\n        });\n        // Remove extra padding\n        decimal = decimal.substring(0, format.decimals);\n        const value = BigInt(match[1] + whole + decimal);\n        checkValue(value, format, \"fromString\");\n        return new FixedNumber(_guard, value, format);\n    }\n    /**\n     *  Creates a new [[FixedNumber]] with the big-endian representation\n     *  %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%% due to overflow.\n     */\n    static fromBytes(_value, _format) {\n        let value = toBigInt(getBytes(_value, \"value\"));\n        const format = getFormat(_format);\n        if (format.signed) {\n            value = fromTwos(value, format.width);\n        }\n        checkValue(value, format, \"fromBytes\");\n        return new FixedNumber(_guard, value, format);\n    }\n}\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map","/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */\nimport { assertArgument } from \"./errors.js\";\nimport { FixedNumber } from \"./fixednumber.js\";\nimport { getNumber } from \"./maths.js\";\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */\nexport function formatUnits(value, unit) {\n    let decimals = 18;\n    if (typeof (unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    }\n    else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n    return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();\n}\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */\nexport function parseUnits(value, unit) {\n    assertArgument(typeof (value) === \"string\", \"value must be a string\", \"value\", value);\n    let decimals = 18;\n    if (typeof (unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    }\n    else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n    return FixedNumber.fromString(value, { decimals, width: 512 }).value;\n}\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=units.js.map","import { defineProperties, concat, getBytesCopy, getNumber, hexlify, toBeArray, toBigInt, toNumber, assert, assertArgument\n/*, isError*/\n } from \"../../utils/index.js\";\n/**\n * @_ignore:\n */\nexport const WordSize = 32;\nconst Padding = new Uint8Array(WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\"then\"];\nconst _guard = {};\nconst resultNames = new WeakMap();\nfunction getNames(result) {\n    return resultNames.get(result);\n}\nfunction setNames(result, names) {\n    resultNames.set(result, names);\n}\nfunction throwError(name, error) {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\n    wrapped.error = error;\n    throw wrapped;\n}\nfunction toObject(names, items, deep) {\n    if (names.indexOf(null) >= 0) {\n        return items.map((item, index) => {\n            if (item instanceof Result) {\n                return toObject(getNames(item), item, deep);\n            }\n            return item;\n        });\n    }\n    return names.reduce((accum, name, index) => {\n        let item = items.getValue(name);\n        if (!(name in accum)) {\n            if (deep && item instanceof Result) {\n                item = toObject(getNames(item), item, deep);\n            }\n            accum[name] = item;\n        }\n        return accum;\n    }, {});\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array {\n    // No longer used; but cannot be removed as it will remove the\n    // #private field from the .d.ts which may break backwards\n    // compatibility\n    #names;\n    /**\n     *  @private\n     */\n    constructor(...args) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items = args[1];\n        let names = (args[2] || []).slice();\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [];\n            wrap = false;\n        }\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof (name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, (new Map()));\n        // Remove any key thats not unique\n        setNames(this, Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        })));\n        // Dummy operations to prevent TypeScript from complaining\n        this.#names = [];\n        if (this.#names == null) {\n            void (this.#names);\n        }\n        if (!wrap) {\n            return;\n        }\n        // A wrapped Result is immutable\n        Object.freeze(this);\n        // Proxy indices and names so we can trap deferred errors\n        const proxy = new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof (prop) === \"string\") {\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${index}`, item);\n                        }\n                        return item;\n                    }\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function (...args) {\n                            return value.apply((this === receiver) ? target : this, args);\n                        };\n                    }\n                    else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target : this, [prop]);\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n        setNames(proxy, getNames(this));\n        return proxy;\n    }\n    /**\n     *  Returns the Result as a normal Array. If %%deep%%, any children\n     *  which are Result objects are also converted to a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray(deep) {\n        const result = [];\n        this.forEach((item, index) => {\n            if (item instanceof Error) {\n                throwError(`index ${index}`, item);\n            }\n            if (deep && item instanceof Result) {\n                item = item.toArray(deep);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n    /**\n     *  Returns the Result as an Object with each name-value pair. If\n     *  %%deep%%, any children which are Result objects are also\n     *  converted to an Object.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject(deep) {\n        const names = getNames(this);\n        return names.reduce((accum, name, index) => {\n            assert(name != null, `value at index ${index} unnamed`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n            return toObject(names, this, deep);\n        }, {});\n    }\n    /**\n     *  @_ignore\n     */\n    slice(start, end) {\n        if (start == null) {\n            start = 0;\n        }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.length;\n        }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) {\n                end = 0;\n            }\n        }\n        if (end > this.length) {\n            end = this.length;\n        }\n        const _names = getNames(this);\n        const result = [], names = [];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(_names[i]);\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n    filter(callback, thisArg) {\n        const _names = getNames(this);\n        const result = [], names = [];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(_names[i]);\n            }\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n    map(callback, thisArg) {\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            result.push(callback.call(thisArg, item, i, this));\n        }\n        return result;\n    }\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name) {\n        const index = getNames(this).indexOf(name);\n        if (index === -1) {\n            return undefined;\n        }\n        const value = this[index];\n        if (value instanceof Error) {\n            throwError(`property ${JSON.stringify(name)}`, value.error);\n        }\n        return value;\n    }\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items, keys) {\n        return new Result(_guard, items, keys);\n    }\n}\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nfunction getValue(value) {\n    let bytes = toBeArray(value);\n    assert(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));\n    }\n    return bytes;\n}\n/**\n *  @_ignore\n */\nexport class Coder {\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    name;\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    type;\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    localName;\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    dynamic;\n    constructor(name, type, localName, dynamic) {\n        defineProperties(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n    _throwError(message, value) {\n        assertArgument(false, message, this.localName, value);\n    }\n}\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data;\n    #dataLength;\n    constructor() {\n        this.#data = [];\n        this.#dataLength = 0;\n    }\n    get data() {\n        return concat(this.#data);\n    }\n    get length() { return this.#dataLength; }\n    #writeData(data) {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value) {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));\n        }\n        return this.#writeData(bytes);\n    }\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value) {\n        return this.#writeData(getValue(value));\n    }\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue() {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    allowLoose;\n    #data;\n    #offset;\n    #bytesRead;\n    #parent;\n    #maxInflation;\n    constructor(data, allowLoose, maxInflation) {\n        defineProperties(this, { allowLoose: !!allowLoose });\n        this.#data = getBytesCopy(data);\n        this.#bytesRead = 0;\n        this.#parent = null;\n        this.#maxInflation = (maxInflation != null) ? maxInflation : 1024;\n        this.#offset = 0;\n    }\n    get data() { return hexlify(this.#data); }\n    get dataLength() { return this.#data.length; }\n    get consumed() { return this.#offset; }\n    get bytes() { return new Uint8Array(this.#data); }\n    #incrementBytesRead(count) {\n        if (this.#parent) {\n            return this.#parent.#incrementBytesRead(count);\n        }\n        this.#bytesRead += count;\n        // Check for excessive inflation (see: #4537)\n        assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`, \"BUFFER_OVERRUN\", {\n            buffer: getBytesCopy(this.#data), offset: this.#offset,\n            length: count, info: {\n                bytesRead: this.#bytesRead,\n                dataLength: this.dataLength\n            }\n        });\n    }\n    #peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            }\n            else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength);\n    }\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset) {\n        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n        reader.#parent = this;\n        return reader;\n    }\n    // Read bytes\n    readBytes(length, loose) {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#incrementBytesRead(length);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    // Read a numeric values\n    readValue() {\n        return toBigInt(this.readBytes(WordSize));\n    }\n    readIndex() {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nimport { keccak_256 } from \"@noble/hashes/sha3\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _keccak256 = function (data) {\n    return keccak_256(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nexport function keccak256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function () { locked = true; };\nkeccak256.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256);\n//# sourceMappingURL=keccak.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\nfunction getChecksumAddress(address) {\n    //    if (!isHexString(address, 20)) {\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    //    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = getBytes(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nconst Base36 = (function () {\n    ;\n    const result = {};\n    for (let i = 0; i < 36; i++) {\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n})();\nfunction fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */\nexport function getAddress(address) {\n    assertArgument(typeof (address) === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) {\n            address = \"0x\" + address;\n        }\n        const result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n        return result;\n    }\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n        let result = fromBase36(address.substring(4)).toString(16);\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        return getChecksumAddress(\"0x\" + result);\n    }\n    assertArgument(false, \"invalid address\", \"address\", address);\n}\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */\nexport function getIcapAddress(address) {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n//# sourceMappingURL=address.js.map","/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\nconst _gaurd = {};\nfunction n(value, width) {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, { signed, width });\n}\nfunction b(value, size) {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${(size) ? size : \"\"}`, value, { size });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    type;\n    /**\n     *  The actual value.\n     */\n    value;\n    #options;\n    /**\n     *  @_ignore:\n     */\n    _typedSymbol;\n    /**\n     *  @_ignore:\n     */\n    constructor(gaurd, type, value, options) {\n        if (options == null) {\n            options = null;\n        }\n        assertPrivate(_gaurd, gaurd, \"Typed\");\n        defineProperties(this, { _typedSymbol, type, value });\n        this.#options = options;\n        // Check the value is valid\n        this.format();\n    }\n    /**\n     *  Format the type as a Human-Readable type.\n     */\n    format() {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"tuple\") {\n            return `tuple(${this.value.map((v) => v.format()).join(\",\")})`;\n        }\n        return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */\n    defaultValue() {\n        return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */\n    minValue() {\n        return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */\n    maxValue() {\n        return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n    isBigInt() {\n        return !!(this.type.match(/^u?int[0-9]+$/));\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n    isData() {\n        return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n    isString() {\n        return (this.type === \"string\");\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n    get tupleName() {\n        if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n        }\n        return this.#options;\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n    get arrayLength() {\n        if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n        }\n        if (this.#options === true) {\n            return -1;\n        }\n        if (this.#options === false) {\n            return (this.value).length;\n        }\n        return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n    static from(type, value) {\n        return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static uint8(v) { return n(v, 8); }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n    static uint16(v) { return n(v, 16); }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n    static uint24(v) { return n(v, 24); }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n    static uint32(v) { return n(v, 32); }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n    static uint40(v) { return n(v, 40); }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n    static uint48(v) { return n(v, 48); }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n    static uint56(v) { return n(v, 56); }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n    static uint64(v) { return n(v, 64); }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n    static uint72(v) { return n(v, 72); }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n    static uint80(v) { return n(v, 80); }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n    static uint88(v) { return n(v, 88); }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n    static uint96(v) { return n(v, 96); }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n    static uint104(v) { return n(v, 104); }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n    static uint112(v) { return n(v, 112); }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n    static uint120(v) { return n(v, 120); }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n    static uint128(v) { return n(v, 128); }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n    static uint136(v) { return n(v, 136); }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n    static uint144(v) { return n(v, 144); }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n    static uint152(v) { return n(v, 152); }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n    static uint160(v) { return n(v, 160); }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n    static uint168(v) { return n(v, 168); }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n    static uint176(v) { return n(v, 176); }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n    static uint184(v) { return n(v, 184); }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n    static uint192(v) { return n(v, 192); }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n    static uint200(v) { return n(v, 200); }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n    static uint208(v) { return n(v, 208); }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n    static uint216(v) { return n(v, 216); }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n    static uint224(v) { return n(v, 224); }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n    static uint232(v) { return n(v, 232); }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n    static uint240(v) { return n(v, 240); }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n    static uint248(v) { return n(v, 248); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint256(v) { return n(v, 256); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint(v) { return n(v, 256); }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n    static int8(v) { return n(v, -8); }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n    static int16(v) { return n(v, -16); }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n    static int24(v) { return n(v, -24); }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n    static int32(v) { return n(v, -32); }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n    static int40(v) { return n(v, -40); }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n    static int48(v) { return n(v, -48); }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n    static int56(v) { return n(v, -56); }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n    static int64(v) { return n(v, -64); }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n    static int72(v) { return n(v, -72); }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n    static int80(v) { return n(v, -80); }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n    static int88(v) { return n(v, -88); }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n    static int96(v) { return n(v, -96); }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n    static int104(v) { return n(v, -104); }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n    static int112(v) { return n(v, -112); }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n    static int120(v) { return n(v, -120); }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n    static int128(v) { return n(v, -128); }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n    static int136(v) { return n(v, -136); }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n    static int144(v) { return n(v, -144); }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n    static int152(v) { return n(v, -152); }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n    static int160(v) { return n(v, -160); }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n    static int168(v) { return n(v, -168); }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n    static int176(v) { return n(v, -176); }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n    static int184(v) { return n(v, -184); }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n    static int192(v) { return n(v, -192); }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n    static int200(v) { return n(v, -200); }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n    static int208(v) { return n(v, -208); }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n    static int216(v) { return n(v, -216); }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n    static int224(v) { return n(v, -224); }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n    static int232(v) { return n(v, -232); }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n    static int240(v) { return n(v, -240); }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n    static int248(v) { return n(v, -248); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int256(v) { return n(v, -256); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int(v) { return n(v, -256); }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n    static bytes1(v) { return b(v, 1); }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n    static bytes2(v) { return b(v, 2); }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n    static bytes3(v) { return b(v, 3); }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n    static bytes4(v) { return b(v, 4); }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n    static bytes5(v) { return b(v, 5); }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n    static bytes6(v) { return b(v, 6); }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n    static bytes7(v) { return b(v, 7); }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n    static bytes8(v) { return b(v, 8); }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n    static bytes9(v) { return b(v, 9); }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n    static bytes10(v) { return b(v, 10); }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n    static bytes11(v) { return b(v, 11); }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n    static bytes12(v) { return b(v, 12); }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n    static bytes13(v) { return b(v, 13); }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n    static bytes14(v) { return b(v, 14); }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n    static bytes15(v) { return b(v, 15); }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n    static bytes16(v) { return b(v, 16); }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n    static bytes17(v) { return b(v, 17); }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n    static bytes18(v) { return b(v, 18); }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n    static bytes19(v) { return b(v, 19); }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n    static bytes20(v) { return b(v, 20); }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n    static bytes21(v) { return b(v, 21); }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n    static bytes22(v) { return b(v, 22); }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n    static bytes23(v) { return b(v, 23); }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n    static bytes24(v) { return b(v, 24); }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n    static bytes25(v) { return b(v, 25); }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n    static bytes26(v) { return b(v, 26); }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n    static bytes27(v) { return b(v, 27); }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n    static bytes28(v) { return b(v, 28); }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n    static bytes29(v) { return b(v, 29); }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n    static bytes30(v) { return b(v, 30); }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n    static bytes31(v) { return b(v, 31); }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n    static bytes32(v) { return b(v, 32); }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n    static address(v) { return new Typed(_gaurd, \"address\", v); }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n    static bool(v) { return new Typed(_gaurd, \"bool\", !!v); }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n    static bytes(v) { return new Typed(_gaurd, \"bytes\", v); }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n    static string(v) { return new Typed(_gaurd, \"string\", v); }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n    static array(v, dynamic) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n    static tuple(v, name) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static overrides(v) {\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n    static isTyped(value) {\n        return (value\n            && typeof (value) === \"object\"\n            && \"_typedSymbol\" in value\n            && value._typedSymbol === _typedSymbol);\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n    static dereference(value, type) {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=typed.js.map","import { getAddress } from \"../../address/index.js\";\nimport { toBeHex } from \"../../utils/maths.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, _value) {\n        let value = Typed.dereference(_value, \"string\");\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(toBeHex(reader.readValue(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","import { Coder } from \"./abstract-coder.js\";\n/**\n *  Clones the functionality of an existing Coder, but without a localName\n *\n *  @_ignore\n */\nexport class AnonymousCoder extends Coder {\n    coder;\n    constructor(coder) {\n        super(coder.name, coder.type, \"_\", coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","import { defineProperties, isError, assert, assertArgument, assertArgumentCount } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, Result, WordSize, Writer } from \"./abstract-coder.js\";\nimport { AnonymousCoder } from \"./anonymous.js\";\n/**\n *  @_ignore\n */\nexport function pack(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            assert(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            assert(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        assertArgument(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    assertArgument(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new Writer();\n    let dynamicWriter = new Writer();\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n/**\n *  @_ignore\n */\nexport function unpack(reader, coders) {\n    let values = [];\n    let keys = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n    return Result.fromItems(values, keys);\n}\n/**\n *  @_ignore\n */\nexport class ArrayCoder extends Coder {\n    coder;\n    length;\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        defineProperties(this, { coder, length });\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"array\");\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        assertArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            assert(count * WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return unpack(reader, coders);\n    }\n}\n//# sourceMappingURL=array.js.map","import { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"bool\");\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return !!reader.readValue();\n    }\n}\n//# sourceMappingURL=boolean.js.map","import { getBytesCopy, hexlify } from \"../../utils/index.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = getBytesCopy(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readIndex(), true);\n    }\n}\n/**\n *  @_ignore\n */\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return hexlify(super.decode(reader));\n    }\n}\n//# sourceMappingURL=bytes.js.map","import { defineProperties, getBytesCopy, hexlify } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class FixedBytesCoder extends Coder {\n    size;\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        defineProperties(this, { size }, { size: \"number\" });\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, _value) {\n        let data = getBytesCopy(Typed.dereference(_value, this.type));\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", _value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return hexlify(reader.readBytes(this.size));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","import { Coder } from \"./abstract-coder.js\";\nconst Empty = new Uint8Array([]);\n/**\n *  @_ignore\n */\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes(Empty);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return null;\n    }\n}\n//# sourceMappingURL=null.js.map","import { defineProperties, fromTwos, getBigInt, mask, toTwos } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n    size;\n    signed;\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        defineProperties(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = getBigInt(Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n        if (this.signed) {\n            let bounds = mask(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n        }\n        else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = mask(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=number.js.map","import { toUtf8Bytes, toUtf8String } from \"../../utils/utf8.js\";\nimport { Typed } from \"../typed.js\";\nimport { DynamicBytesCoder } from \"./bytes.js\";\n/**\n *  @_ignore\n */\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, _value) {\n        return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, \"string\")));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","import { defineProperties } from \"../../utils/properties.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\nimport { pack, unpack } from \"./array.js\";\n/**\n *  @_ignore\n */\nexport class TupleCoder extends Coder {\n    coders;\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        defineProperties(this, { coders: Object.freeze(coders.slice()) });\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"tuple\");\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return unpack(reader, this.coders);\n    }\n}\n//# sourceMappingURL=tuple.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value) {\n    return keccak256(toUtf8Bytes(value));\n}\n//# sourceMappingURL=id.js.map","/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n    const result = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n    \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\n    \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\n    \",\": \"COMMA\", \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n    #offset;\n    #tokens;\n    get offset() { return this.#offset; }\n    get length() { return this.#tokens.length - this.#offset; }\n    constructor(tokens) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n    clone() { return new TokenString(this.#tokens); }\n    reset() { this.#offset = 0; }\n    #subTokenString(from = 0, to = 0) {\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({}, t, {\n                match: (t.match - from),\n                linkBack: (t.linkBack - from),\n                linkNext: (t.linkNext - from),\n            }));\n        }));\n    }\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed) {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type) {\n        if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = [];\n        while (this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Returns the top Token, throwing if out of tokens\n    peek() {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed) {\n        const top = this.peekType(\"KEYWORD\");\n        return (top != null && allowed.has(top)) ? top : null;\n    }\n    // Returns the value of the next token if it is `type`\n    peekType(type) {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return (top.type === type) ? top.text : null;\n    }\n    // Returns the next token; throws if out of tokens\n    pop() {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n    toString() {\n        const tokens = [];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n        }\n        return `<TokenString ${tokens.join(\" \")}>`;\n    }\n}\nfunction lex(text) {\n    const tokens = [];\n    const throwError = (message) => {\n        const token = (offset < text.length) ? JSON.stringify(text[offset]) : \"$EOI\";\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while (offset < text.length) {\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n        tokens.push(token);\n        let type = (SimpleTokens[cur[0]] || \"\");\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            }\n            else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) {\n                    throwError(\"no matching open bracket\");\n                }\n                token.match = brackets.pop();\n                (tokens[token.match]).match = tokens.length - 1;\n                token.depth--;\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n            }\n            else if (type === \"COMMA\") {\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            }\n            else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n            }\n            else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = tokens.pop().text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = tokens.pop().text;\n                    suffix = value + suffix;\n                    (tokens[tokens.length - 1]).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                (tokens[tokens.length - 1]).text += suffix;\n            }\n            continue;\n        }\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n            token.type = \"ID\";\n            continue;\n        }\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n    let included = [];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(`conflicting types: ${included.join(\", \")}`);\n    }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${type}, got ${keyword}`);\n        }\n    }\n    return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n    const keywords = new Set();\n    while (true) {\n        const keyword = tokens.peekType(\"KEYWORD\");\n        if (keyword == null || (allowed && !allowed.has(keyword))) {\n            break;\n        }\n        tokens.pop();\n        if (keywords.has(keyword)) {\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n        }\n        keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    // Process mutability states\n    if (modifiers.has(\"view\")) {\n        return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n        return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n        return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n        return \"nonpayable\";\n    }\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) {\n        return \"view\";\n    }\n    return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\nfunction consumeEoi(tokens) {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\n    }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n        return \"uint256\";\n    }\n    if (type === \"int\") {\n        return \"int256\";\n    }\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    }\n    else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3]);\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    name;\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    type;\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    baseType;\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    indexed;\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    components;\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayLength;\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayChildren;\n    /**\n     *  @private\n     */\n    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n        assertPrivate(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n        if (baseType === \"tuple\") {\n            if (components == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (components != null) {\n            throw new Error(\"\");\n        }\n        defineProperties(this, {\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\n        });\n    }\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n                return JSON.stringify(result);\n            }\n            const result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n        }\n        else {\n            if (this.isTuple()) {\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== \"sighash\") {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray() {\n        return (this.baseType === \"array\");\n    }\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple() {\n        return (this.baseType === \"tuple\");\n    }\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable() {\n        return (this.indexed != null);\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value, process) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\n        }\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\n        }\n        return process(this.type, value);\n    }\n    #walkAsync(promises, value, process, setValue) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        if (this.isTuple()) {\n            const components = this.components;\n            // Convert the object into an array\n            let result;\n            if (Array.isArray(value)) {\n                result = value.slice();\n            }\n            else {\n                if (value == null || typeof (value) !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n                result = components.map((param) => {\n                    if (!param.name) {\n                        throw new Error(\"cannot use object value with unnamed components\");\n                    }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${param.name}`);\n                    }\n                    return value[param.name];\n                });\n            }\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push((async function () { setValue(await result); })());\n        }\n        else {\n            setValue(result);\n        }\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS names by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value, process) {\n        const promises = [];\n        const result = [value];\n        this.#walkAsync(promises, value, process, (value) => {\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj, allowIndexed) {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            }\n            catch (error) {\n                assertArgument(false, \"invalid param type\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${comps.map((c) => c.format()).join(\",\")})`;\n            }\n            else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n            // Check for Array\n            let arrayChildren = null;\n            let arrayLength = null;\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n            let indexed = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) {\n                    throw new Error(\"\");\n                }\n                indexed = true;\n            }\n            const name = (obj.peekType(\"ID\") ? obj.pop().text : \"\");\n            if (obj.length) {\n                throw new Error(\"leftover tokens\");\n            }\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n        const name = obj.name;\n        assertArgument(!name || (typeof (name) === \"string\" && name.match(regexId)), \"invalid name\", \"obj.name\", name);\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n        let type = obj.type;\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n            const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n        type = verifyBasicType(obj.type);\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value) {\n        return (value && value[internal] === ParamTypeInternal);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    type;\n    /**\n     *  The inputs for the fragment.\n     */\n    inputs;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs) {\n        assertPrivate(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { type, inputs });\n    }\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            }\n            catch (e) { }\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n            const type = obj.peekKeyword(KwTypes);\n            switch (type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n        }\n        else if (typeof (obj) === \"object\") {\n            // JSON ABI\n            switch (obj.type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n            assert(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value) {\n        return ConstructorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value) {\n        return ErrorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value) {\n        return EventFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value) {\n        return FunctionFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value) {\n        return StructFragment.isFragment(value);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    name;\n    /**\n     *  @private\n     */\n    constructor(guard, type, name, inputs) {\n        super(guard, type, inputs);\n        assertArgument(typeof (name) === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { name });\n    }\n}\nfunction joinParams(format, params) {\n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n    /**\n     *  The Custom Error selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"error\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return ErrorFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new ErrorFragment(_guard, name, inputs);\n        }\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ErrorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    anonymous;\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs, anonymous) {\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties(this, { anonymous });\n    }\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash() {\n        return id(this.format(\"sighash\"));\n    }\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"event\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === EventFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    payable;\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs, payable, gas) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n        defineProperties(this, { payable, gas });\n    }\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format) {\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: (this.payable ? \"payable\" : \"undefined\"),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [`constructor${joinParams(format, this.inputs)}`];\n        if (this.payable) {\n            result.push(\"payable\");\n        }\n        if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\"constructor\"]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ConstructorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    constructor(guard, inputs, payable) {\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties(this, { payable });\n    }\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format) {\n        const type = ((this.inputs.length === 0) ? \"receive\" : \"fallback\");\n        if (format === \"json\") {\n            const stateMutability = (this.payable ? \"payable\" : \"nonpayable\");\n            return JSON.stringify({ type, stateMutability });\n        }\n        return `${type}()${this.payable ? \" payable\" : \"\"}`;\n    }\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([\"payable\"]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            else {\n                inputs = [ParamType.from(\"bytes\")];\n            }\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [], true);\n        }\n        if (obj.type === \"fallback\") {\n            const inputs = [ParamType.from(\"bytes\")];\n            const payable = (obj.stateMutability === \"payable\");\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FallbackFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    constant;\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    outputs;\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    stateMutability;\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, name, stateMutability, inputs, outputs, gas) {\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\n        const payable = (stateMutability === \"payable\");\n        defineProperties(this, { constant, gas, outputs, payable, stateMutability });\n    }\n    /**\n     *  The Function selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"function\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n                result.push(`@${this.gas.toString()}`);\n            }\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n        return fragment.selector;\n    }\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n        let stateMutability = obj.stateMutability;\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof (obj.constant) === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\";\n                    if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            }\n            else if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FunctionFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format() {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === StructFragmentInternal);\n    }\n}\n//# sourceMappingURL=fragments.js.map","/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nlet defaultMaxInflation = 1024;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n        message = \"execution reverted\";\n        const bytes = getBytes(data);\n        data = hexlify(data);\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n        }\n        else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [reason]\n                };\n                message += `: ${JSON.stringify(reason)}`;\n            }\n            catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [code]\n                };\n                reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n                message += `: ${reason}`;\n            }\n            catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        }\n        else {\n            message += \" (unknown custom error)\";\n        }\n    }\n    const transaction = {\n        to: (tx.to ? getAddress(tx.to) : null),\n        data: (tx.data || \"0x\")\n    };\n    if (tx.from) {\n        transaction.from = getAddress(tx.from);\n    }\n    return makeError(message, \"CALL_EXCEPTION\", {\n        action, data, reason, transaction, invocation, revert\n    });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nexport class AbiCoder {\n    #getCoder(param) {\n        if (param.isArray()) {\n            return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n        }\n        if (param.isTuple()) {\n            return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);\n        }\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new FixedBytesCoder(size, param.name);\n        }\n        assertArgument(false, \"invalid type\", \"type\", param.type);\n    }\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */\n    getDefaultValue(types) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */\n    encode(types, values) {\n        assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = new Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */\n    decode(types, data, loose) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(new Reader(data, loose, defaultMaxInflation));\n    }\n    static _setDefaultMaxInflation(value) {\n        assertArgument(typeof (value) === \"number\" && Number.isInteger(value), \"invalid defaultMaxInflation factor\", \"value\", value);\n        defaultMaxInflation = value;\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */\n    static defaultAbiCoder() {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */\n    static getBuiltinCallException(action, tx, data) {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n}\n//# sourceMappingURL=abi-coder.js.map","<script lang=\"ts\">\n  let {\n    count = 1,\n    text = \"more\",\n    lessText = \"less\",\n    expanded = false,\n    className = \"\",\n    onclick = null\n  } = $props();\n</script>\n\n<button\n  class={`flex items-center gap-1 text-xs text-blue-500 dark:text-blue-400 underline cursor-pointer select-none px-2 py-1 rounded hover:bg-blue-100 dark:hover:bg-zinc-700 transition ${className}`}\n  type=\"button\"\n  onclick={onclick}\n>\n  {#if !expanded}\n    <svg class=\"w-4 h-4 mr-1 fill-current text-blue-400 dark:text-blue-300\" viewBox=\"0 0 20 20\">\n      <path d=\"M7 5l5 5-5 5\" />\n    </svg>\n    + {count} {text}\n  {:else}\n    <svg class=\"w-4 h-4 mr-1 fill-current text-blue-400 dark:text-blue-300 transform -rotate-90\" viewBox=\"0 0 20 20\">\n      <path d=\"M7 5l5 5-5 5\" />\n    </svg>\n    {lessText}\n  {/if}\n</button>\n","import { BaseService } from './base.service';\nimport type { Preview2Transaction, ServiceResponse } from '../types';\nimport { ethers } from 'ethers';\nimport { get } from 'svelte/store';\nimport { currentAccount } from '../stores/account.store';\nimport { currentChain } from '../stores/chain.store';\n\ninterface SendTransactionParams {\n  to: string;\n  value: string;\n  tokenAddress?: string;\n  gasPrice?: string;\n  gasLimit?: string;\n}\n\nexport class TransactionService extends BaseService {\n  private static instance: TransactionService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): TransactionService {\n    if (!TransactionService.instance) {\n      TransactionService.instance = new TransactionService();\n    }\n    return TransactionService.instance;\n  }\n\n  async sendTransaction(params: SendTransactionParams): Promise<ServiceResponse<string>> {\n    try {\n      const account = get(currentAccount);\n      const chain = get(currentChain);\n      \n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      // Build transaction\n      const txParams: any = {\n        from: account.address,\n        to: params.to,\n        value: params.tokenAddress ? '0x0' : ethers.parseEther(params.value).toString(),\n        chainId: chain?.chainId\n      };\n\n      // If token transfer, encode the transfer function\n      if (params.tokenAddress) {\n        const transferData = this.encodeTokenTransfer(params.to, params.value);\n        txParams.to = params.tokenAddress;\n        txParams.data = transferData;\n      }\n\n      // Add gas parameters if provided\n      if (params.gasPrice) {\n        txParams.gasPrice = params.gasPrice;\n      }\n      if (params.gasLimit) {\n        txParams.gas = params.gasLimit;\n      }\n\n      // Send to background\n      const response = await this.sendMessage<string>({\n        method: 'eth_sendTransaction',\n        params: [txParams]\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getTransactionHistory(address: string, limit: number = 10): Promise<ServiceResponse<Preview2Transaction[]>> {\n    try {\n      // Request transaction history from background\n      const response = await this.sendMessage<any[]>({\n        method: 'yakkl_getTransactionHistory',\n        params: [address, limit]\n      });\n\n      if (response.success && response.data) {\n        const transactions: Preview2Transaction[] = response.data.map(tx => ({\n          hash: tx.hash,\n          from: tx.from,\n          to: tx.to,\n          value: tx.value,\n          timestamp: tx.timestamp || Date.now(),\n          status: this.mapTxStatus(tx.status),\n          type: this.determineTxType(tx, address),\n          gas: tx.gas,\n          gasPrice: tx.gasPrice\n        }));\n\n        return { success: true, data: transactions };\n      }\n\n      return response as ServiceResponse<Preview2Transaction[]>;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async estimateGas(params: SendTransactionParams): Promise<ServiceResponse<string>> {\n    try {\n      const account = get(currentAccount);\n      \n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const txParams: any = {\n        from: account.address,\n        to: params.to,\n        value: params.tokenAddress ? '0x0' : ethers.parseEther(params.value).toString()\n      };\n\n      if (params.tokenAddress) {\n        txParams.to = params.tokenAddress;\n        txParams.data = this.encodeTokenTransfer(params.to, params.value);\n      }\n\n      const response = await this.sendMessage<string>({\n        method: 'eth_estimateGas',\n        params: [txParams]\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getGasPrice(): Promise<ServiceResponse<string>> {\n    try {\n      const response = await this.sendMessage<string>({\n        method: 'eth_gasPrice'\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  private encodeTokenTransfer(to: string, amount: string): string {\n    // ERC20 transfer function signature\n    const transferFn = 'transfer(address,uint256)';\n    const transferSelector = ethers.id(transferFn).slice(0, 10);\n    \n    // Encode parameters\n    const encodedParams = ethers.AbiCoder.defaultAbiCoder().encode(\n      ['address', 'uint256'],\n      [to, ethers.parseUnits(amount, 18)] // Assuming 18 decimals, should be dynamic\n    );\n\n    return transferSelector + encodedParams.slice(2);\n  }\n\n  private mapTxStatus(status: any): 'pending' | 'confirmed' | 'failed' {\n    if (status === '0x0' || status === 0) return 'failed';\n    if (status === '0x1' || status === 1) return 'confirmed';\n    return 'pending';\n  }\n\n  private determineTxType(tx: any, userAddress: string): 'send' | 'receive' | 'swap' | 'contract' {\n    const from = tx.from?.toLowerCase();\n    const to = tx.to?.toLowerCase();\n    const user = userAddress.toLowerCase();\n\n    if (from === user && to !== user) return 'send';\n    if (from !== user && to === user) return 'receive';\n    if (tx.data && tx.data !== '0x') return 'contract';\n    return 'send';\n  }\n}","import { writable, derived } from 'svelte/store';\nimport type { Preview2Transaction, LoadingState, ErrorState } from '../types';\nimport { TransactionService } from '../services/transaction.service';\nimport { currentAccount } from './account.store';\nimport { get } from 'svelte/store';\n\ninterface TransactionState {\n  transactions: Preview2Transaction[];\n  pendingTx: string | null;\n  loading: LoadingState;\n  error: ErrorState;\n  gasPrice: string | null;\n}\n\nfunction createTransactionStore() {\n  const txService = TransactionService.getInstance();\n  \n  const { subscribe, set, update } = writable<TransactionState>({\n    transactions: [],\n    pendingTx: null,\n    loading: { isLoading: false },\n    error: { hasError: false },\n    gasPrice: null\n  });\n\n  // Auto-refresh when account changes\n  currentAccount.subscribe(async (account) => {\n    if (account) {\n      await loadTransactions(account.address);\n    }\n  });\n\n  async function loadTransactions(address: string) {\n    update(state => ({\n      ...state,\n      loading: { isLoading: true, message: 'Loading transactions...' }\n    }));\n\n    const response = await txService.getTransactionHistory(address);\n    \n    if (response.success && response.data) {\n      update(state => ({\n        ...state,\n        transactions: response.data!,\n        loading: { isLoading: false },\n        error: { hasError: false }\n      }));\n    } else {\n      update(state => ({\n        ...state,\n        loading: { isLoading: false },\n        error: response.error || { hasError: true, message: 'Failed to load transactions' }\n      }));\n    }\n  }\n\n  return {\n    subscribe,\n    \n    async sendTransaction(to: string, value: string, tokenAddress?: string) {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Sending transaction...' },\n        error: { hasError: false }\n      }));\n\n      const response = await txService.sendTransaction({\n        to,\n        value,\n        tokenAddress\n      });\n      \n      if (response.success && response.data) {\n        update(state => ({\n          ...state,\n          pendingTx: response.data!,\n          loading: { isLoading: false },\n          error: { hasError: false }\n        }));\n        \n        // Refresh transactions after a delay\n        setTimeout(() => {\n          const account = get(currentAccount);\n          if (account) {\n            loadTransactions(account.address);\n          }\n        }, 3000);\n        \n        return response.data;\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Transaction failed' }\n        }));\n        throw new Error(response.error?.message || 'Transaction failed');\n      }\n    },\n\n    async estimateGas(to: string, value: string, tokenAddress?: string) {\n      const response = await txService.estimateGas({\n        to,\n        value,\n        tokenAddress\n      });\n      \n      return response;\n    },\n\n    async updateGasPrice() {\n      const response = await txService.getGasPrice();\n      \n      if (response.success && response.data) {\n        update(state => ({\n          ...state,\n          gasPrice: response.data!\n        }));\n      }\n    },\n\n    clearError() {\n      update(state => ({\n        ...state,\n        error: { hasError: false }\n      }));\n    },\n\n    reset() {\n      set({\n        transactions: [],\n        pendingTx: null,\n        loading: { isLoading: false },\n        error: { hasError: false },\n        gasPrice: null\n      });\n    }\n  };\n}\n\nexport const transactionStore = createTransactionStore();\n\n// Derived stores\nexport const recentTransactions = derived(\n  transactionStore,\n  $store => $store.transactions.slice(0, 5)\n);\n\nexport const pendingTransaction = derived(\n  transactionStore,\n  $store => $store.pendingTx\n);\n\nexport const isLoadingTx = derived(\n  transactionStore,\n  $store => $store.loading.isLoading\n);\n\nexport const txError = derived(\n  transactionStore,\n  $store => $store.error\n);","<script lang=\"ts\">\n  import MoreLess from \"./MoreLess.svelte\";\n  import { recentTransactions, isLoadingTx } from '../stores/transaction.store';\n  import { currentAccount } from '../stores/account.store';\n  import type { Preview2Transaction } from '../types';\n\n  let { className = '', maxRows = 4 } = $props();\n\n  // Reactive values from stores\n  let transactions = $derived($recentTransactions);\n  let loading = $derived($isLoadingTx);\n  let account = $derived($currentAccount);\n\n  let expanded = $state(false);\n  let visible = $derived(expanded ? transactions : transactions.slice(0, maxRows));\n  let hidden = $derived(expanded ? [] : transactions.slice(maxRows));\n\n  function formatAmount(value: string): string {\n    try {\n      const num = parseFloat(value);\n      if (num < 0.0001) {\n        return num.toExponential(2);\n      }\n      return num.toFixed(4);\n    } catch {\n      return value;\n    }\n  }\n\n  function shortAddress(address: string): string {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  }\n\n  function formatTime(timestamp: number): string {\n    const now = Date.now();\n    const diff = now - timestamp;\n    \n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    \n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    return `${days}d ago`;\n  }\n\n  function getTransactionDirection(tx: Preview2Transaction): 'sent' | 'received' {\n    return tx.from.toLowerCase() === account?.address.toLowerCase() ? 'sent' : 'received';\n  }\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-green-200 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'failed':\n        return 'bg-red-200 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'pending':\n      default:\n        return 'bg-yellow-200 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n    }\n  }\n\n  function getTransactionIcon(type: string): string {\n    switch (type) {\n      case 'send':\n        return '↗️';\n      case 'receive':\n        return '↙️';\n      case 'swap':\n        return '🔄';\n      case 'contract':\n        return '📄';\n      default:\n        return '💸';\n    }\n  }\n</script>\n\n<div class={`bg-white/70 dark:bg-zinc-800 rounded-2xl shadow p-4 mt-3 relative z-10 ${className}`}>\n  <div class=\"text-sm font-semibold mb-2 text-zinc-700 dark:text-zinc-200\">Recent Activity</div>\n  \n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(3) as _}\n        <div class=\"flex items-center gap-2 py-2 animate-pulse\">\n          <div class=\"w-8 h-4 bg-zinc-300 dark:bg-zinc-600 rounded\"></div>\n          <div class=\"flex-1 h-3 bg-zinc-300 dark:bg-zinc-600 rounded\"></div>\n          <div class=\"w-16 h-3 bg-zinc-300 dark:bg-zinc-600 rounded\"></div>\n        </div>\n      {/each}\n    </div>\n  {:else if transactions.length === 0}\n    <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n      <p>No recent activity</p>\n      <p class=\"text-sm mt-2\">Your transactions will appear here</p>\n    </div>\n  {:else}\n    <ul class=\"space-y-1 max-h-44 overflow-y-auto\">\n      {#each visible as tx}\n        {@const direction = getTransactionDirection(tx)}\n        {@const isOutgoing = direction === 'sent'}\n        <li class=\"flex items-center gap-2 text-xs border-b border-zinc-100 dark:border-zinc-700 py-2 last:border-b-0\">\n          <!-- Transaction Icon -->\n          <span class=\"text-lg\" title={tx.type}>\n            {getTransactionIcon(tx.type)}\n          </span>\n          \n          <!-- Transaction Details -->\n          <div class=\"flex-1 min-w-0\">\n            {#if tx.type === 'send' || tx.type === 'receive'}\n              <div class=\"flex items-center gap-1\">\n                <span class=\"font-bold {isOutgoing ? 'text-red-500' : 'text-green-500'}\">\n                  {isOutgoing ? '−' : '+'}\n                  {formatAmount(tx.value)} ETH\n                </span>\n              </div>\n              <div class=\"text-gray-400 dark:text-gray-500 truncate\">\n                {isOutgoing ? 'to' : 'from'} {shortAddress(isOutgoing ? tx.to : tx.from)}\n              </div>\n            {:else if tx.type === 'swap'}\n              <div class=\"font-bold text-blue-500\">Swap</div>\n              <div class=\"text-gray-400 dark:text-gray-500 truncate\">\n                Contract interaction\n              </div>\n            {:else}\n              <div class=\"font-bold text-purple-500\">Contract</div>\n              <div class=\"text-gray-400 dark:text-gray-500 truncate\">\n                {shortAddress(tx.to)}\n              </div>\n            {/if}\n          </div>\n          \n          <!-- Status Badge -->\n          <span class=\"px-2 py-0.5 rounded-full text-xs {getStatusColor(tx.status)} whitespace-nowrap\">\n            {tx.status.charAt(0).toUpperCase() + tx.status.slice(1)}\n          </span>\n          \n          <!-- Timestamp -->\n          <span class=\"text-gray-400 dark:text-gray-500 whitespace-nowrap ml-2\">\n            {formatTime(tx.timestamp)}\n          </span>\n        </li>\n      {/each}\n    </ul>\n    \n    {#if hidden.length > 0}\n      <MoreLess\n        count={hidden.length}\n        text=\"more\"\n        lessText=\"less\"\n        expanded={expanded}\n        className=\"mt-2\"\n        onclick={() => expanded = !expanded}\n      />\n    {/if}\n  {/if}\n</div>","<script lang=\"ts\">\n  import { transactionStore, isLoadingTx, txError } from '../stores/transaction.store';\n  import { canUseFeature } from '../stores/plan.store';\n  import { ethers } from 'ethers';\n\n  let {\n    show = $bindable(false),\n    onClose = null,\n    onSend = null,\n    tokens = [],\n    chain = { icon: '/images/eth.svg', name: 'Ethereum' },\n    mode = 'send' // or 'swap'\n  } = $props();\n\n  let recipient = $state('');\n  let amount = $state('');\n  let selectedToken = $state(tokens[0] || { symbol: 'ETH', icon: '/images/eth.svg' });\n  let gasEstimate = $state('');\n  let estimatingGas = $state(false);\n  let validationError = $state('');\n\n  // Reactive values\n  let sending = $derived($isLoadingTx);\n  let error = $derived($txError);\n\n  // Update selected token when tokens change\n  $effect(() => {\n    if (tokens.length > 0 && !selectedToken) {\n      selectedToken = tokens[0];\n    }\n  });\n\n  // Validate address format\n  function validateAddress(address: string): boolean {\n    try {\n      return ethers.isAddress(address);\n    } catch {\n      return false;\n    }\n  }\n\n  // Validate amount\n  function validateAmount(amt: string): boolean {\n    const num = parseFloat(amt);\n    return !isNaN(num) && num > 0;\n  }\n\n  // Estimate gas when inputs change\n  $effect(() => {\n    if (recipient && amount && validateAddress(recipient) && validateAmount(amount)) {\n      estimateGas();\n    }\n  });\n\n  async function estimateGas() {\n    if (!canUseFeature('send_tokens')) return;\n    \n    estimatingGas = true;\n    try {\n      const isETH = selectedToken.symbol === 'ETH';\n      const response = await transactionStore.estimateGas(\n        recipient,\n        amount,\n        isETH ? undefined : selectedToken.address\n      );\n      \n      if (response.success && response.data) {\n        const gasInEth = ethers.formatEther(response.data);\n        gasEstimate = `~${parseFloat(gasInEth).toFixed(6)} ETH`;\n      }\n    } catch (error) {\n      gasEstimate = 'Unable to estimate';\n    } finally {\n      estimatingGas = false;\n    }\n  }\n\n  function validateInputs(): string | null {\n    if (!recipient) return 'Recipient address is required';\n    if (!validateAddress(recipient)) return 'Invalid recipient address';\n    if (!amount) return 'Amount is required';\n    if (!validateAmount(amount)) return 'Invalid amount';\n    if (parseFloat(amount) > selectedToken.qty) return 'Insufficient balance';\n    return null;\n  }\n\n  function closeModal() {\n    recipient = '';\n    amount = '';\n    gasEstimate = '';\n    validationError = '';\n    transactionStore.clearError();\n    if (onClose) onClose();\n  }\n\n  async function submitSend() {\n    // Validate inputs\n    const validation = validateInputs();\n    if (validation) {\n      validationError = validation;\n      return;\n    }\n\n    if (!canUseFeature('send_tokens')) {\n      validationError = 'Send feature requires Pro plan';\n      return;\n    }\n\n    try {\n      const isETH = selectedToken.symbol === 'ETH';\n      const txHash = await transactionStore.sendTransaction(\n        recipient,\n        amount,\n        isETH ? undefined : selectedToken.address\n      );\n      \n      // Call the parent callback if provided\n      if (onSend) {\n        await onSend({ \n          recipient, \n          amount, \n          token: selectedToken,\n          txHash \n        });\n      }\n      \n      closeModal();\n    } catch (error) {\n      validationError = error instanceof Error ? error.message : 'Transaction failed';\n    }\n  }\n\n  async function submitSwap() {\n    // TODO: Implement swap functionality\n    validationError = 'Swap functionality coming soon';\n  }\n\n  function handleSubmit() {\n    validationError = '';\n    if (mode === 'send') {\n      submitSend();\n    } else {\n      submitSwap();\n    }\n  }\n</script>\n\n{#if show}\n  <div class=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm animate-in fade-in\"\n    onclick={closeModal}\n    onkeydown={e => e.key === 'Escape' && closeModal()}\n    role=\"dialog\"\n    aria-modal=\"true\"\n    aria-label=\"Send tokens modal\">\n    <div class=\"relative bg-white dark:bg-zinc-900 rounded-2xl shadow-xl p-6 min-w-[320px] w-full max-w-xs flex flex-col gap-4 animate-in slide-in-from-bottom-10\"\n      onclick={e => e.stopPropagation()}\n      onkeydown={e => e.stopPropagation()}>\n      \n      <!-- Header -->\n      <div class=\"flex items-center justify-between mb-2\">\n        <div class=\"flex items-center gap-2\">\n          {#if chain?.icon}\n            {#if chain.icon.startsWith('/')}\n              <img src={chain.icon} alt={chain.name} class=\"w-6 h-6\" />\n            {:else}\n              <span class=\"text-xl\">{chain.icon}</span>\n            {/if}\n          {/if}\n          <span class=\"font-bold text-lg capitalize\">\n            {mode === 'send' ? 'Send Tokens' : 'Swap Tokens'}\n          </span>\n        </div>\n        <button \n          class=\"text-2xl text-gray-400 hover:text-red-500 transition-colors\" \n          onclick={closeModal}\n          aria-label=\"Close modal\"\n        >\n          ×\n        </button>\n      </div>\n\n      <!-- Token Selection for Swap -->\n      {#if mode === 'swap'}\n        <div>\n          <label for=\"from-token-select\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">From Token</label>\n          <select \n            id=\"from-token-select\"\n            bind:value={selectedToken} \n            class=\"w-full rounded bg-zinc-100 dark:bg-zinc-800 p-2 mb-1 text-zinc-900 dark:text-white\"\n          >\n            {#each tokens as token}\n              <option value={token}>{token.symbol} ({token.qty})</option>\n            {/each}\n          </select>\n        </div>\n      {:else}\n        <!-- Token selection for Send -->\n        <div>\n          <label for=\"send-token-select\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">Token</label>\n          <select \n            id=\"send-token-select\"\n            bind:value={selectedToken} \n            class=\"w-full rounded bg-zinc-100 dark:bg-zinc-800 p-2 mb-1 text-zinc-900 dark:text-white\"\n          >\n            {#each tokens as token}\n              <option value={token}>\n                {token.symbol} (Balance: {token.qty})\n              </option>\n            {/each}\n          </select>\n        </div>\n      {/if}\n\n      <!-- Recipient Address -->\n      <div>\n        <label for=\"recipient-input\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">\n          {mode === 'send' ? 'Recipient Address' : 'To Token'}\n        </label>\n        <input \n          id=\"recipient-input\"\n          type=\"text\" \n          bind:value={recipient} \n          placeholder=\"0x...\" \n          class=\"w-full p-2 bg-zinc-100 dark:bg-zinc-800 rounded text-zinc-900 dark:text-white border {!recipient || validateAddress(recipient) ? 'border-transparent' : 'border-red-400'}\"\n          aria-invalid={recipient && !validateAddress(recipient)}\n          aria-describedby={validationError ? \"validation-error\" : null}\n        />\n      </div>\n\n      <!-- Amount -->\n      <div>\n        <label for=\"amount-input\" class=\"block text-xs mb-1 text-gray-600 dark:text-gray-400\">Amount</label>\n        <div class=\"relative\">\n          <input \n            id=\"amount-input\"\n            type=\"number\" \n            min=\"0\" \n            step=\"any\" \n            bind:value={amount} \n            placeholder=\"0.00\" \n            class=\"w-full p-2 bg-zinc-100 dark:bg-zinc-800 rounded text-zinc-900 dark:text-white border {!amount || validateAmount(amount) ? 'border-transparent' : 'border-red-400'}\"\n            aria-invalid={amount && !validateAmount(amount)}\n            aria-describedby={validationError ? \"validation-error\" : null}\n          />\n          <button \n            class=\"absolute right-2 top-2 text-xs text-blue-500 hover:text-blue-600\"\n            onclick={() => amount = selectedToken.qty?.toString() || '0'}\n          >\n            MAX\n          </button>\n        </div>\n      </div>\n\n      <!-- Gas Estimate -->\n      {#if mode === 'send' && gasEstimate}\n        <div class=\"text-xs text-gray-500 dark:text-gray-400\">\n          {#if estimatingGas}\n            <span class=\"animate-pulse\">Estimating gas...</span>\n          {:else}\n            Estimated gas: {gasEstimate}\n          {/if}\n        </div>\n      {/if}\n\n      <!-- Error Display -->\n      {#if validationError}\n        <div id=\"validation-error\" class=\"text-xs text-red-500 bg-red-50 dark:bg-red-900/20 p-2 rounded\" role=\"alert\">\n          {validationError}\n        </div>\n      {/if}\n\n      {#if error.hasError}\n        <div class=\"text-xs text-red-500 bg-red-50 dark:bg-red-900/20 p-2 rounded\" role=\"alert\">\n          {error.message}\n        </div>\n      {/if}\n\n      <!-- Submit Button -->\n      <button \n        class=\"w-full p-3 rounded-xl font-semibold shadow transition-all disabled:opacity-60 disabled:cursor-not-allowed {mode === 'send' ? 'bg-green-600 hover:bg-green-700' : 'bg-purple-600 hover:bg-purple-700'} text-white\"\n        disabled={!recipient || !amount || sending || !canUseFeature(mode === 'send' ? 'send_tokens' : 'swap_tokens')}\n        onclick={handleSubmit}\n      >\n        {#if sending}\n          <div class=\"flex items-center justify-center gap-2\">\n            <div class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n            {mode === 'send' ? 'Sending...' : 'Swapping...'}\n          </div>\n        {:else if !canUseFeature(mode === 'send' ? 'send_tokens' : 'swap_tokens')}\n          Upgrade to Pro\n        {:else}\n          {mode === 'send' ? 'Send' : 'Swap'}\n        {/if}\n      </button>\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QRCode from 'easyqrcodejs';\n\n\tlet { qrText } = $props();\n\texport const width = 220;\n\texport const height = 220;\n\t// export const radius = 1;\n\tlet node: HTMLDivElement = $state();\n\n\tonMount(() => {\n\t\tconst options = {\n\t\t\ttext: qrText,\n\t\t\t// ... other options\n\t\t\twidth: 220,\n\t\t\theight: 220,\n\t\t\tquietZone: 20,\n\t\t\tlogo: '/images/logoBullFav48x48.png',\n\t\t\tlogoBackgroundTransparent: true\n\t\t};\n\t\tnew QRCode(node, options);\n\t});\n</script>\n\n<div class=\"flex mx-auto justify-center w-full h-full\" bind:this={node}></div>\n\n<style>\n\t/* make QR-wrapper squared */\n\t/* div {\n     width: 100%;\n     position: relative;\n     padding: 50%;\n     z-index: 1;\n   } */\n\n\t/* fit QR to wrapper */\n\tdiv :global(canvas) {\n\t\tborder-radius: 1rem;\n\t}\n</style>\n","<!-- Copy.svelte -->\n<script lang=\"ts\">\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { browser_ext } from '$lib/common/environment';\n\timport { timeoutClipboard } from '$lib/utilities';\n\timport { UnifiedTimerManager } from '$lib/managers/UnifiedTimerManager';\n\n\ttype CopyTarget = {\n\t\tid?: string;\n\t\tvalue?: string | number | null | undefined;\n\t\ttimeout?: number;\n\t\tredactText?: string;\n\t};\n\n\ttype CopyConfig = CopyTarget | CopyTarget[];\n\n\tconst {\n\t\ttarget,\n\t\tsize = 20,\n\t\tclassName = '',\n\t\tshowFeedback = true,\n\t\tfeedbackDuration = 2000,\n\t\tdefaultRedactText = '<redacted>',\n\t\tonClick = undefined\n\t} = $props<{\n\t\ttarget: CopyConfig;\n\t\tsize?: number;\n\t\tclassName?: string;\n\t\tshowFeedback?: boolean;\n\t\tfeedbackDuration?: number;\n\t\tdefaultRedactText?: string;\n\t\tonClick?: (copiedValue: string) => void;\n\t}>();\n\n\tlet isCopied = $state(false);\n\tlet timeoutIds: Map<string, string> = new Map(); // Now stores timer IDs instead of timeout numbers\n\tconst timerManager = UnifiedTimerManager.getInstance();\n\n\t// Add reactive tracking for the target value\n\t// $effect(() => {\n\t//   // This ensures we're tracking changes to the target value\n\t//   if (!Array.isArray(target) && target.value !== undefined) {\n\t//     log.debug('Current target value:', target.value);\n\t//   }\n\t// });\n\n\tfunction getValue(copyTarget: CopyTarget): string {\n\t\tif (copyTarget.id) {\n\t\t\tconst element = document.getElementById(copyTarget.id);\n\t\t\tif (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n\t\t\t\treturn element.value;\n\t\t\t} else if (element) {\n\t\t\t\treturn element.textContent || '';\n\t\t\t}\n\t\t\tlog.warn(`Element with id '${copyTarget.id}' not found`);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Improved value handling\n\t\tconst value = copyTarget.value;\n\t\tif (value === null || value === undefined) {\n\t\t\treturn '';\n\t\t}\n\t\treturn value.toString();\n\t}\n\n\t// Handle single copy target\n\tasync function handleSingleCopy(copyTarget: CopyTarget): Promise<void> {\n\t\tconst value = getValue(copyTarget);\n\t\tawait navigator.clipboard.writeText(value);\n\n\t\t// Call onClick handler if provided\n\t\tif (onClick) {\n\t\t\tonClick(value);\n\t\t}\n\n\t\t// Set redaction timeout if specified\n\t\tif (copyTarget.timeout) {\n\t\t\ttimeoutClipboard(copyTarget.timeout, copyTarget.redactText || defaultRedactText);\n\n\t\t\t// Get active tab for script injection\n\t\t\t// try {\n\t\t\t// const [tab] = await browser_ext.tabs.query({ active: true, currentWindow: true });\n\t\t\t// if (tab && tab.id) {\n\t\t\t//   browser_ext.runtime.sendMessage({ type: 'clipboard-timeout', tabId: tab.id, timeout: copyTarget.timeout, redactText: copyTarget.redactText || defaultRedactText });\n\t\t\t// } else {\n\t\t\t//   log.error('Failed to get active tab for clipboard timeout');\n\t\t\t// }\n\t\t\t// } catch (err) {\n\t\t\t//   log.error('Failed to set clipboard timeout:', err);\n\t\t\t// }\n\n\t\t\t// const timeoutId = setTimeout(async () => {\n\t\t\t//   const redactText = copyTarget.redactText || defaultRedactText;\n\t\t\t//   await navigator.clipboard.writeText(redactText);\n\t\t\t//   timeoutIds.delete(copyTarget.id || value);\n\t\t\t// }, copyTarget.timeout) as unknown as number;\n\n\t\t\t// timeoutIds.set(copyTarget.id || value, timeoutId);\n\t\t}\n\t}\n\n\t// Handle multiple copy targets\n\tasync function handleMultiCopy(copyTargets: CopyTarget[]): Promise<void> {\n\t\tconst values = copyTargets.map((target) => getValue(target));\n\t\tconst combinedValue = values.join('\\n');\n\t\tawait navigator.clipboard.writeText(combinedValue);\n\n\t\t// Call onClick handler if provided\n\t\tif (onClick) {\n\t\t\tonClick(combinedValue);\n\t\t}\n\n\t\t// Handle individual timeouts using UnifiedTimerManager\n\t\tcopyTargets.forEach((target, index) => {\n\t\t\tif (target.timeout) {\n\t\t\t\tconst timerId = `copy-timeout-${target.id || index}`;\n\t\t\t\ttimerManager.addTimeout(\n\t\t\t\t\ttimerId,\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tconst currentValues = [...values];\n\t\t\t\t\t\tconst redactText = target.redactText || defaultRedactText;\n\t\t\t\t\t\tcurrentValues[index] = redactText;\n\t\t\t\t\t\tawait navigator.clipboard.writeText(currentValues.join('\\n'));\n\t\t\t\t\t\ttimeoutIds.delete(target.id || values[index]);\n\t\t\t\t\t},\n\t\t\t\t\ttarget.timeout\n\t\t\t\t);\n\t\t\t\ttimerManager.startTimeout(timerId);\n\n\t\t\t\ttimeoutIds.set(target.id || values[index], timerId);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync function copyToClipboard() {\n\t\ttry {\n\t\t\tif (Array.isArray(target)) {\n\t\t\t\tawait handleMultiCopy(target);\n\t\t\t} else {\n\t\t\t\tawait handleSingleCopy(target);\n\t\t\t}\n\n\t\t\tif (showFeedback) {\n\t\t\t\tisCopied = true;\n\t\t\t\ttimerManager.addTimeout(\n\t\t\t\t\t'copy-feedback',\n\t\t\t\t\t() => {\n\t\t\t\t\t\tisCopied = false;\n\t\t\t\t\t},\n\t\t\t\t\tfeedbackDuration\n\t\t\t\t);\n\t\t\t\ttimerManager.startTimeout('copy-feedback');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// log.error('Failed to copy:', err);\n\t\t\tisCopied = false;\n\t\t}\n\t}\n\n\t// Cleanup timeouts\n\t$effect(() => {\n\t\treturn () => {\n\t\t\ttimeoutIds.forEach((timerId) => {\n\t\t\t\ttimerManager.stopTimeout(timerId);\n\t\t\t\ttimerManager.removeTimeout(timerId);\n\t\t\t});\n\t\t\ttimeoutIds.clear();\n\t\t};\n\t});\n</script>\n\n<button\n\ttype=\"button\"\n\tonclick={copyToClipboard}\n\tclass=\"\n    inline-flex\n    items-center\n    justify-center\n    transition-all\n    duration-200\n    ease-in-out\n    rounded-md\n    focus:outline-none\n    focus:ring-2\n    focus:ring-offset-2\n    focus:ring-blue-500\n    {className}\n  \"\n\ttitle=\"Copy to clipboard\"\n>\n\t{#if isCopied}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={size}\n\t\t\theight={size}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstroke-width=\"2\"\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\tclass=\"text-green-500\"\n\t\t\taria-hidden=\"true\"\n\t\t>\n\t\t\t<path d=\"M20 6L9 17l-5-5\" />\n\t\t</svg>\n\t\t<span class=\"sr-only\">Copied!</span>\n\t{:else}\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth={size}\n\t\t\theight={size}\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstroke-width=\"2\"\n\t\t\tstroke-linecap=\"round\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t\tclass=\"text-gray-500 hover:text-blue-500 transition-colors duration-200\"\n\t\t\taria-hidden=\"true\"\n\t\t>\n\t\t\t<rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\" />\n\t\t\t<path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\" />\n\t\t</svg>\n\t\t<span class=\"sr-only\">Copy to clipboard</span>\n\t{/if}\n</button>\n\n<!-- Example usage: -->\n<!-- Basic usage -->\n<!-- <Copy\n  target={{ value: \"Simple text to copy\" }}\n  className=\"hover:bg-gray-100 p-2\"\n/> -->\n\n<!-- With custom redaction -->\n<!-- <Copy\n  target={{\n    value: sensitiveData,\n    timeout: 30000,\n    redactText: \"Content removed for security\"\n  }}\n  className=\"text-gray-600 hover:text-blue-600\"\n/> -->\n\n<!-- Copy from input with custom styling -->\n<!-- <div class=\"flex items-center space-x-2\">\n  <input\n    id=\"walletAddress\"\n    value={address}\n    readonly\n    class=\"bg-gray-50 border rounded px-3 py-2\"\n  />\n  <Copy\n    target={{ id: \"walletAddress\" }}\n    className=\"p-1 hover:bg-gray-100 rounded-full\"\n    size={16}\n  />\n</div> -->\n\n<!-- Multiple values with different redaction settings -->\n<!-- <Copy\n  target={[\n    {\n      value: \"Public info\",\n    },\n    {\n      value: \"Sensitive info\",\n      timeout: 30000,\n      redactText: \"REDACTED-SENSITIVE\"\n    },\n    {\n      id: \"privateKey\",\n      timeout: 5000,\n      redactText: \"KEY-REMOVED\"\n    }\n  ]}\n  className=\"bg-blue-50 hover:bg-blue-100 p-2 rounded-lg\"\n/> -->\n\n<!-- Complex example with different styles -->\n<!-- <div class=\"space-y-4 p-4 bg-white rounded-lg shadow\">\n  <div class=\"flex items-center justify-between\">\n    <input\n      id=\"wallet\"\n      value={walletAddress}\n      readonly\n      class=\"flex-1 bg-gray-50 rounded border px-3 py-2\"\n    />\n    <Copy\n      target={{ id: \"wallet\" }}\n      className=\"ml-2 p-2 hover:bg-gray-100 rounded-full transition-all\"\n      size={16}\n    />\n  </div>\n\n  <div class=\"flex items-center justify-between\">\n    <input\n      id=\"privateKey\"\n      value={privateKey}\n      type=\"password\"\n      class=\"flex-1 bg-gray-50 rounded border px-3 py-2\"\n    />\n    <Copy\n      target={{\n        id: \"privateKey\",\n        timeout: 5000,\n        redactText: \"PRIVATE-KEY-REMOVED\"\n      }}\n      className=\"ml-2 p-2 hover:bg-gray-100 rounded-full transition-all\"\n      size={16}\n    />\n  </div>\n</div> -->\n","<!-- Receive.svelte -->\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport QR from './v1/QR.svelte';\n\timport { YAKKL_ZERO_ADDRESS } from '$lib/common/constants';\n\timport { yakklCurrentlySelectedStore } from '$lib/common/stores';\n\timport Modal from './v1/Modal.svelte';\n\timport Copy from './v1/Copy.svelte';\n\n\tinterface Props {\n\t\tshow?: boolean;\n\t\taddress?: string;\n\t\ttitle?: string;\n\t}\n\n\tlet { show = $bindable(false), address = $bindable(''), title = 'Receive' }: Props = $props();\n\n\tonMount(() => {\n\t\tif (\n\t\t\t$yakklCurrentlySelectedStore &&\n\t\t\t$yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS\n\t\t) {\n\t\t\taddress = $yakklCurrentlySelectedStore.shortcuts.address;\n\t\t}\n\t});\n\n\t// function copyAddress() {\n\t//   navigator.clipboard.writeText(address);\n\t// }\n</script>\n\n<Modal bind:show {title}>\n\t<div class=\"p-6\">\n\t\t{#if $yakklCurrentlySelectedStore && $yakklCurrentlySelectedStore.shortcuts.address !== YAKKL_ZERO_ADDRESS}\n\t\t\t<!-- Modern card layout with QR code -->\n\t\t\t<div class=\"bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl p-6 mb-6 text-center\">\n\t\t\t\t<div class=\"mb-6\">\n\t\t\t\t\t<QR qrText={address} />\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-800 mb-2\">Your Wallet Address</h3>\n\t\t\t\t<p class=\"text-sm text-gray-600 mb-4\">Share this address to receive payments</p>\n\t\t\t</div>\n\n\t\t\t<!-- Address display with copy button on same line -->\n\t\t\t<div class=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n\t\t\t\t<div class=\"flex items-center justify-between p-4\">\n\t\t\t\t\t<div class=\"flex-1 min-w-0 mr-3\">\n\t\t\t\t\t\t<div class=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-1\">\n\t\t\t\t\t\t\tEthereum Address\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p class=\"text-sm font-mono text-gray-900 truncate\" title={address} id=\"eth-address\">\n\t\t\t\t\t\t\t{address}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<Copy target={{ value: address }} className=\"p-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Info card -->\n\t\t\t<div class=\"mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t<div class=\"flex-shrink-0\">\n\t\t\t\t\t\t<svg class=\"w-5 h-5 text-blue-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n\t\t\t\t\t\t\t<path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"ml-3\">\n\t\t\t\t\t\t<p class=\"text-sm text-blue-800\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Scan the QR code</span> with your mobile wallet or \n\t\t\t\t\t\t\t<span class=\"font-medium\">copy the address</span> to receive payments\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<!-- Empty state -->\n\t\t\t<div class=\"text-center py-12\">\n\t\t\t\t<div class=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n\t\t\t\t\t<svg class=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t<h3 class=\"text-lg font-semibold text-gray-700 mb-2\">No Portfolio Accounts</h3>\n\t\t\t\t<p class=\"text-gray-500\">Create at least one Portfolio account to receive payments</p>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</Modal>","import { BaseService } from '../../../services/base.service';\nimport type { ServiceResponse } from '../../../types';\nimport { currentAccount } from '../../../stores/account.store';\nimport { get } from 'svelte/store';\n\ninterface BuyQuote {\n  amount: number;\n  currency: string;\n  cryptoAmount: number;\n  cryptoCurrency: string;\n  rate: number;\n  fees: {\n    network: number;\n    service: number;\n    total: number;\n  };\n  total: number;\n  estimatedTime: string;\n  provider: string;\n  validUntil: number;\n}\n\ninterface BuyOrder {\n  id: string;\n  amount: number;\n  currency: string;\n  cryptoAmount: number;\n  cryptoCurrency: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  paymentMethod: string;\n  provider: string;\n  createdAt: number;\n  completedAt?: number;\n  txHash?: string;\n}\n\ninterface PaymentMethod {\n  id: string;\n  type: 'card' | 'bank' | 'paypal' | 'apple_pay' | 'google_pay';\n  name: string;\n  last4?: string;\n  expiryMonth?: number;\n  expiryYear?: number;\n  isDefault: boolean;\n}\n\ninterface BuyLimits {\n  min: number;\n  max: number;\n  daily: number;\n  monthly: number;\n  currency: string;\n}\n\nexport class BuyService extends BaseService {\n  private static instance: BuyService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): BuyService {\n    if (!BuyService.instance) {\n      BuyService.instance = new BuyService();\n    }\n    return BuyService.instance;\n  }\n\n  async getBuyQuote(\n    amount: number, \n    currency: string = 'USD', \n    cryptoCurrency: string = 'ETH'\n  ): Promise<ServiceResponse<BuyQuote>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<any>({\n        method: 'yakkl_getBuyQuote',\n        params: [{\n          amount,\n          currency,\n          cryptoCurrency,\n          userAddress: account.address\n        }]\n      });\n\n      if (response.success && response.data) {\n        const quote: BuyQuote = {\n          amount,\n          currency,\n          cryptoAmount: response.data.cryptoAmount,\n          cryptoCurrency,\n          rate: response.data.rate,\n          fees: response.data.fees,\n          total: response.data.total,\n          estimatedTime: response.data.estimatedTime,\n          provider: response.data.provider || 'Stripe',\n          validUntil: Date.now() + (10 * 60 * 1000) // 10 minutes\n        };\n\n        return { success: true, data: quote };\n      }\n\n      // Fallback mock quote\n      return this.getMockBuyQuote(amount, currency, cryptoCurrency);\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async executeBuyOrder(\n    quote: BuyQuote, \n    paymentMethodId: string\n  ): Promise<ServiceResponse<BuyOrder>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      // Check if quote is still valid\n      if (Date.now() > quote.validUntil) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'Quote expired, please get a new quote' }\n        };\n      }\n\n      const response = await this.sendMessage<any>({\n        method: 'yakkl_executeBuyOrder',\n        params: [{\n          quote,\n          paymentMethodId,\n          userAddress: account.address\n        }]\n      });\n\n      if (response.success && response.data) {\n        const order: BuyOrder = {\n          id: response.data.orderId,\n          amount: quote.amount,\n          currency: quote.currency,\n          cryptoAmount: quote.cryptoAmount,\n          cryptoCurrency: quote.cryptoCurrency,\n          status: 'pending',\n          paymentMethod: paymentMethodId,\n          provider: quote.provider,\n          createdAt: Date.now()\n        };\n\n        return { success: true, data: order };\n      }\n\n      return response as ServiceResponse<BuyOrder>;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getPaymentMethods(): Promise<ServiceResponse<PaymentMethod[]>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<PaymentMethod[]>({\n        method: 'yakkl_getPaymentMethods',\n        params: [account.address]\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Return empty array if no payment methods\n      return { success: true, data: [] };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async addPaymentMethod(\n    type: string, \n    details: any\n  ): Promise<ServiceResponse<PaymentMethod>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<PaymentMethod>({\n        method: 'yakkl_addPaymentMethod',\n        params: [{\n          type,\n          details,\n          userAddress: account.address\n        }]\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getBuyLimits(): Promise<ServiceResponse<BuyLimits>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<BuyLimits>({\n        method: 'yakkl_getBuyLimits',\n        params: [account.address]\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Default limits for basic users\n      return {\n        success: true,\n        data: {\n          min: 10,\n          max: 1000,\n          daily: 1000,\n          monthly: 10000,\n          currency: 'USD'\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getBuyHistory(limit: number = 10): Promise<ServiceResponse<BuyOrder[]>> {\n    try {\n      const account = get(currentAccount);\n\n      if (!account) {\n        return {\n          success: false,\n          error: { hasError: true, message: 'No account selected' }\n        };\n      }\n\n      const response = await this.sendMessage<BuyOrder[]>({\n        method: 'yakkl_getBuyHistory',\n        params: [account.address, limit]\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      return { success: true, data: [] };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getSupportedCurrencies(): Promise<ServiceResponse<string[]>> {\n    try {\n      const response = await this.sendMessage<string[]>({\n        method: 'yakkl_getSupportedCurrencies'\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Default supported currencies\n      return {\n        success: true,\n        data: ['USD', 'EUR', 'GBP', 'CAD', 'AUD']\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getSupportedCryptoCurrencies(): Promise<ServiceResponse<string[]>> {\n    try {\n      const response = await this.sendMessage<string[]>({\n        method: 'yakkl_getSupportedCryptoCurrencies'\n      });\n\n      if (response.success && response.data) {\n        return response;\n      }\n\n      // Default supported crypto currencies\n      return {\n        success: true,\n        data: ['ETH', 'BTC', 'USDC', 'USDT', 'DAI']\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  private async getMockBuyQuote(\n    amount: number, \n    currency: string, \n    cryptoCurrency: string\n  ): Promise<ServiceResponse<BuyQuote>> {\n    // Mock exchange rates\n    const rates: Record<string, number> = {\n      'ETH': 2500,\n      'BTC': 45000,\n      'USDC': 1,\n      'USDT': 1,\n      'DAI': 1\n    };\n\n    const rate = rates[cryptoCurrency] || 2500;\n    const networkFee = 5;\n    const serviceFee = amount * 0.029; // 2.9% service fee\n    const totalFees = networkFee + serviceFee;\n    const total = amount + totalFees;\n    const cryptoAmount = amount / rate;\n\n    const quote: BuyQuote = {\n      amount,\n      currency,\n      cryptoAmount,\n      cryptoCurrency,\n      rate,\n      fees: {\n        network: networkFee,\n        service: serviceFee,\n        total: totalFees\n      },\n      total,\n      estimatedTime: '5-10 minutes',\n      provider: 'Mock Provider',\n      validUntil: Date.now() + (10 * 60 * 1000)\n    };\n\n    return { success: true, data: quote };\n  }\n}","<script lang=\"ts\">\n  import { BuyService } from '../features/payment/buy/buy.service';\n  import { canUseFeature } from '../stores/plan.store';\n  import { currentAccount } from '../stores/account.store';\n  import { uiStore } from '../stores/ui.store';\n\n  let {\n    show = $bindable(false),\n    onClose = null\n  } = $props();\n\n  const buyService = BuyService.getInstance();\n\n  // State\n  let step = $state('amount'); // 'amount' | 'payment' | 'review' | 'processing' | 'success'\n  let amount = $state('100');\n  let currency = $state('USD');\n  let cryptoCurrency = $state('ETH');\n  let selectedPaymentMethod = $state(null);\n  let quote = $state(null);\n  let order = $state(null);\n  let loading = $state(false);\n  let error = $state('');\n\n  // Data\n  let supportedCurrencies = $state(['USD', 'EUR', 'GBP', 'CAD']);\n  let supportedCryptoCurrencies = $state(['ETH', 'BTC', 'USDC', 'USDT']);\n  let paymentMethods = $state([]);\n  let limits = $state({ min: 10, max: 1000, daily: 1000, monthly: 10000, currency: 'USD' });\n\n  // Reactive values\n  let account = $derived($currentAccount);\n  let canBuy = $derived(canUseFeature('buy_crypto_card'));\n\n  // Load initial data\n  $effect(() => {\n    if (show && canBuy) {\n      loadInitialData();\n    }\n  });\n\n  async function loadInitialData() {\n    loading = true;\n    try {\n      const [currenciesRes, cryptosRes, paymentMethodsRes, limitsRes] = await Promise.all([\n        buyService.getSupportedCurrencies(),\n        buyService.getSupportedCryptoCurrencies(),\n        buyService.getPaymentMethods(),\n        buyService.getBuyLimits()\n      ]);\n\n      if (currenciesRes.success && currenciesRes.data) {\n        supportedCurrencies = currenciesRes.data;\n      }\n\n      if (cryptosRes.success && cryptosRes.data) {\n        supportedCryptoCurrencies = cryptosRes.data;\n      }\n\n      if (paymentMethodsRes.success && paymentMethodsRes.data) {\n        paymentMethods = paymentMethodsRes.data;\n      }\n\n      if (limitsRes.success && limitsRes.data) {\n        limits = limitsRes.data;\n      }\n    } catch (err) {\n      error = 'Failed to load buy options';\n    } finally {\n      loading = false;\n    }\n  }\n\n  async function getQuote() {\n    if (!validateAmount()) return;\n\n    loading = true;\n    error = '';\n\n    try {\n      const response = await buyService.getBuyQuote(\n        parseFloat(amount),\n        currency,\n        cryptoCurrency\n      );\n\n      if (response.success && response.data) {\n        quote = response.data;\n        step = 'payment';\n      } else {\n        error = response.error?.message || 'Failed to get quote';\n      }\n    } catch (err) {\n      error = 'Failed to get quote';\n    } finally {\n      loading = false;\n    }\n  }\n\n  async function executePurchase() {\n    if (!quote || !selectedPaymentMethod) return;\n\n    loading = true;\n    error = '';\n\n    try {\n      const response = await buyService.executeBuyOrder(quote, selectedPaymentMethod.id);\n\n      if (response.success && response.data) {\n        order = response.data;\n        step = 'success';\n        \n        // Show success notification\n        uiStore.showSuccess(\n          'Purchase Initiated',\n          `Your order for ${quote.cryptoAmount} ${quote.cryptoCurrency} has been placed.`\n        );\n      } else {\n        error = response.error?.message || 'Purchase failed';\n      }\n    } catch (err) {\n      error = 'Purchase failed';\n    } finally {\n      loading = false;\n    }\n  }\n\n  function validateAmount(): boolean {\n    const amt = parseFloat(amount);\n    if (isNaN(amt) || amt <= 0) {\n      error = 'Please enter a valid amount';\n      return false;\n    }\n    if (amt < limits.min) {\n      error = `Minimum amount is ${limits.min} ${limits.currency}`;\n      return false;\n    }\n    if (amt > limits.max) {\n      error = `Maximum amount is ${limits.max} ${limits.currency}`;\n      return false;\n    }\n    return true;\n  }\n\n  function closeModal() {\n    step = 'amount';\n    amount = '100';\n    selectedPaymentMethod = null;\n    quote = null;\n    order = null;\n    error = '';\n    if (onClose) onClose();\n  }\n\n  function goToStep(newStep: string) {\n    step = newStep;\n    error = '';\n  }\n\n  function formatCurrency(value: number, curr: string = 'USD'): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: curr\n    }).format(value);\n  }\n</script>\n\n{#if show}\n  <div class=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm animate-in fade-in\"\n    onclick={closeModal}\n    onkeydown={e => e.key === 'Escape' && closeModal()}\n    role=\"dialog\"\n    aria-modal=\"true\"\n    aria-label=\"Buy crypto modal\">\n    <div class=\"relative bg-white dark:bg-zinc-900 rounded-2xl shadow-xl p-6 min-w-[380px] w-full max-w-md flex flex-col gap-4 animate-in slide-in-from-bottom-10 max-h-[90vh] overflow-y-auto\"\n      onclick={e => e.stopPropagation()}\n      onkeydown={e => e.stopPropagation()}>\n      \n      <!-- Header -->\n      <div class=\"flex items-center justify-between mb-2\">\n        <div class=\"flex items-center gap-2\">\n          <span class=\"text-xl\">💳</span>\n          <span class=\"font-bold text-lg\">Buy Crypto</span>\n        </div>\n        <button \n          class=\"text-2xl text-gray-400 hover:text-red-500 transition-colors\" \n          onclick={closeModal}\n          aria-label=\"Close modal\"\n        >\n          ×\n        </button>\n      </div>\n\n      {#if !canBuy}\n        <!-- Upgrade Required -->\n        <div class=\"text-center py-8\">\n          <div class=\"text-4xl mb-4\">🔒</div>\n          <h3 class=\"text-lg font-semibold mb-2\">Pro Feature</h3>\n          <p class=\"text-gray-600 dark:text-gray-400 mb-4\">\n            Buying crypto with fiat requires a Pro subscription\n          </p>\n          <button class=\"yakkl-btn-primary\">\n            Upgrade to Pro\n          </button>\n        </div>\n      {:else if !account}\n        <!-- No Account -->\n        <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n          <p>No account selected</p>\n        </div>\n      {:else}\n        <!-- Step 1: Amount -->\n        {#if step === 'amount'}\n          <div class=\"space-y-4\">\n            <!-- Amount Input -->\n            <div>\n              <label for=\"buy-amount-input\" class=\"block text-sm font-medium mb-2\">Amount to Spend</label>\n              <div class=\"flex gap-2\">\n                <input \n                  id=\"buy-amount-input\"\n                  type=\"number\" \n                  bind:value={amount} \n                  placeholder=\"100\" \n                  class=\"flex-1 p-3 bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-900 dark:text-white border {error && !validateAmount() ? 'border-red-400' : 'border-transparent'}\"\n                  aria-invalid={error && !validateAmount()}\n                  aria-describedby=\"amount-limits\"\n                />\n                <select \n                  bind:value={currency}\n                  class=\"px-3 py-3 bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-900 dark:text-white\"\n                  aria-label=\"Select currency\"\n                >\n                  {#each supportedCurrencies as curr}\n                    <option value={curr}>{curr}</option>\n                  {/each}\n                </select>\n              </div>\n              <div id=\"amount-limits\" class=\"text-xs text-gray-500 mt-1\">\n                Limits: {formatCurrency(limits.min)} - {formatCurrency(limits.max)}\n              </div>\n            </div>\n\n            <!-- Crypto Selection -->\n            <div>\n              <label for=\"crypto-select\" class=\"block text-sm font-medium mb-2\">Cryptocurrency</label>\n              <select \n                id=\"crypto-select\"\n                bind:value={cryptoCurrency}\n                class=\"w-full p-3 bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-900 dark:text-white\"\n              >\n                {#each supportedCryptoCurrencies as crypto}\n                  <option value={crypto}>{crypto}</option>\n                {/each}\n              </select>\n            </div>\n\n            <!-- Continue Button -->\n            <button \n              class=\"w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors disabled:opacity-60\"\n              onclick={getQuote}\n              disabled={loading || !validateAmount()}\n            >\n              {#if loading}\n                <div class=\"flex items-center justify-center gap-2\">\n                  <div class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  Getting Quote...\n                </div>\n              {:else}\n                Get Quote\n              {/if}\n            </button>\n          </div>\n        {/if}\n\n        <!-- Step 2: Payment Method -->\n        {#if step === 'payment'}\n          <div class=\"space-y-4\">\n            <!-- Quote Display -->\n            {#if quote}\n              <div class=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-4\">\n                <h4 class=\"font-semibold mb-2\">Quote</h4>\n                <div class=\"space-y-1 text-sm\">\n                  <div class=\"flex justify-between\">\n                    <span>Amount:</span>\n                    <span>{formatCurrency(quote.amount, quote.currency)}</span>\n                  </div>\n                  <div class=\"flex justify-between\">\n                    <span>You'll receive:</span>\n                    <span class=\"font-semibold\">{quote.cryptoAmount.toFixed(6)} {quote.cryptoCurrency}</span>\n                  </div>\n                  <div class=\"flex justify-between\">\n                    <span>Rate:</span>\n                    <span>{formatCurrency(quote.rate)} per {quote.cryptoCurrency}</span>\n                  </div>\n                  <div class=\"flex justify-between\">\n                    <span>Fees:</span>\n                    <span>{formatCurrency(quote.fees.total)}</span>\n                  </div>\n                  <hr class=\"my-2\" />\n                  <div class=\"flex justify-between font-semibold\">\n                    <span>Total:</span>\n                    <span>{formatCurrency(quote.total)}</span>\n                  </div>\n                </div>\n              </div>\n            {/if}\n\n            <!-- Payment Methods -->\n            <div>\n              <label class=\"block text-sm font-medium mb-2\">Payment Method</label>\n              {#if paymentMethods.length === 0}\n                <div class=\"text-center py-4 text-gray-500\">\n                  <p class=\"mb-2\">No payment methods found</p>\n                  <button class=\"text-blue-500 hover:text-blue-600 text-sm\">\n                    Add Payment Method\n                  </button>\n                </div>\n              {:else}\n                <div class=\"space-y-2\">\n                  {#each paymentMethods as method}\n                    <button \n                      class=\"w-full p-3 border rounded-lg text-left hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors {selectedPaymentMethod?.id === method.id ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : 'border-gray-200 dark:border-gray-700'}\"\n                      onclick={() => selectedPaymentMethod = method}\n                      aria-pressed={selectedPaymentMethod?.id === method.id}\n                      aria-label=\"Select {method.name} payment method\"\n                    >\n                      <div class=\"flex items-center justify-between\">\n                        <div>\n                          <div class=\"font-medium\">{method.name}</div>\n                          {#if method.last4}\n                            <div class=\"text-sm text-gray-500\">•••• {method.last4}</div>\n                          {/if}\n                        </div>\n                        <div class=\"text-sm text-gray-500\">\n                          {method.type.toUpperCase()}\n                        </div>\n                      </div>\n                    </button>\n                  {/each}\n                </div>\n              {/if}\n            </div>\n\n            <!-- Action Buttons -->\n            <div class=\"flex gap-3\">\n              <button \n                class=\"flex-1 p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                onclick={() => goToStep('amount')}\n              >\n                Back\n              </button>\n              <button \n                class=\"flex-1 p-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold transition-colors disabled:opacity-60\"\n                onclick={executePurchase}\n                disabled={!selectedPaymentMethod || loading}\n              >\n                {#if loading}\n                  Processing...\n                {:else}\n                  Buy Now\n                {/if}\n              </button>\n            </div>\n          </div>\n        {/if}\n\n        <!-- Step 3: Success -->\n        {#if step === 'success'}\n          <div class=\"text-center py-8\">\n            <div class=\"text-6xl mb-4\">✅</div>\n            <h3 class=\"text-xl font-semibold mb-2\">Purchase Successful!</h3>\n            {#if order}\n              <p class=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Your order for {order.cryptoAmount} {order.cryptoCurrency} has been placed.\n              </p>\n              <div class=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-4\">\n                <div class=\"text-sm space-y-1\">\n                  <div><strong>Order ID:</strong> {order.id}</div>\n                  <div><strong>Status:</strong> {order.status}</div>\n                  <div><strong>Estimated Time:</strong> 5-10 minutes</div>\n                </div>\n              </div>\n            {/if}\n            <button \n              class=\"w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold\"\n              onclick={closeModal}\n            >\n              Done\n            </button>\n          </div>\n        {/if}\n\n        <!-- Error Display -->\n        {#if error}\n          <div class=\"text-sm text-red-500 bg-red-50 dark:bg-red-900/20 p-3 rounded-lg\">\n            {error}\n          </div>\n        {/if}\n\n        <!-- Info Footer -->\n        {#if step === 'amount'}\n          <div class=\"text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-3 rounded-lg\">\n            <strong>Secure Purchase:</strong><br />\n            • Powered by Stripe for secure payment processing<br />\n            • Crypto delivered directly to your wallet<br />\n            • Industry-standard encryption and security\n          </div>\n        {/if}\n      {/if}\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n  import SimpleTooltip from \"$lib/components/SimpleTooltip.svelte\";\n  import MoreLess from \"./MoreLess.svelte\";\n\n  let { tokens = [], className = '', maxRows = 4, loading = false } = $props();\n\n  let expanded = $state(false);\n  let visible = $state(tokens.slice(0, maxRows));\n  let hidden = $state(tokens.slice(maxRows));\n\n  $effect(() => {\n    visible = expanded ? tokens : tokens.slice(0, maxRows);\n    hidden = expanded ? [] : tokens.slice(maxRows);\n  });\n\n  // Helper for long values\n  function needsEllipsis(val: number | undefined) {\n    return String(val ?? '').length > 9;\n  }\n  \n  function formatValue(val: number | undefined): string {\n    if (!val) return '0.00';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(val);\n  }\n</script>\n\n<div class={`bg-white/70 dark:bg-zinc-800 p-4 rounded-2xl shadow space-y-2 relative z-10 ${className}`}>\n  <div class=\"text-sm font-semibold mb-2 text-zinc-700 dark:text-zinc-200\">Token Portfolio</div>\n  \n  {#if loading}\n    <div class=\"grid grid-cols-2 gap-3\">\n      {#each Array(4) as _, i}\n        <div class=\"rounded-xl shadow bg-zinc-100 dark:bg-zinc-700 p-3 animate-pulse\">\n          <div class=\"w-8 h-8 mb-1 rounded-full bg-zinc-300 dark:bg-zinc-600 mx-auto\"></div>\n          <div class=\"h-4 bg-zinc-300 dark:bg-zinc-600 rounded mt-2\"></div>\n          <div class=\"h-3 bg-zinc-300 dark:bg-zinc-600 rounded mt-1 w-3/4 mx-auto\"></div>\n          <div class=\"h-3 bg-zinc-300 dark:bg-zinc-600 rounded mt-1 w-1/2 mx-auto\"></div>\n        </div>\n      {/each}\n    </div>\n  {:else if tokens.length === 0}\n    <div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n      <p>No tokens found</p>\n      <p class=\"text-sm mt-2\">Add tokens to see them here</p>\n    </div>\n  {:else}\n    <div class=\"grid grid-cols-2 gap-3 overflow-auto\">\n      {#each visible as token}\n        <div class=\"rounded-xl shadow flex flex-col items-center justify-center bg-zinc-100 dark:bg-zinc-700 p-3 transition hover:ring-2 hover:ring-indigo-400 dark:hover:ring-indigo-300 min-w-0\">\n          {#if token.icon?.startsWith('/') || token.icon?.startsWith('http')}\n            <img src={token.icon} alt={token.symbol} class=\"w-8 h-8 mb-1 rounded-full\" />\n          {:else}\n            <div class={`w-8 h-8 mb-1 rounded-full flex items-center justify-center ${token.color || 'bg-gray-400'} text-white font-bold text-lg`}>\n              {token.icon || token.symbol[0]}\n            </div>\n          {/if}\n          <div class=\"font-bold text-base text-center mt-1\">{token.symbol}</div>\n          <SimpleTooltip content={`${token.qty || 0} ${token.symbol}`}>\n            <div class=\"text-xs text-zinc-400 dark:text-zinc-200 truncate max-w-[96px] text-center cursor-help mt-0.5\">\n              {needsEllipsis(token.qty) ? `${token.qty}`.slice(0, 9) + \"…\" : (token.qty || 0)}\n            </div>\n          </SimpleTooltip>\n          <SimpleTooltip content={formatValue(token.value)}>\n            <div class=\"text-sm text-zinc-600 dark:text-zinc-300 truncate max-w-[96px] text-center cursor-help\">\n              {formatValue(token.value)}\n            </div>\n          </SimpleTooltip>\n        </div>\n      {/each}\n    </div>\n    {#if hidden.length}\n      <MoreLess\n        count={hidden.length}\n        text=\"more\"\n        lessText=\"less\"\n        expanded={expanded}\n        className=\"mt-2\"\n        onclick={() => expanded = !expanded}\n      />\n    {/if}\n  {/if}\n</div>\n","import { BaseService } from './base.service';\nimport type { Preview2Token, ServiceResponse } from '../types';\n// Mock token store for Preview 2.0\nconst yakklCombinedTokenStore = {\n  subscribe: () => () => {},\n  get: (): any[] => []\n};\nimport { get } from 'svelte/store';\n\nexport class TokenService extends BaseService {\n  private static instance: TokenService;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance(): TokenService {\n    if (!TokenService.instance) {\n      TokenService.instance = new TokenService();\n    }\n    return TokenService.instance;\n  }\n\n  async getTokens(address?: string): Promise<ServiceResponse<Preview2Token[]>> {\n    try {\n      // Get tokens from store\n      const combinedTokens = yakklCombinedTokenStore.get();\n      \n      if (!combinedTokens || (combinedTokens as any[]).length === 0) {\n        return { success: true, data: [] };\n      }\n\n      // Transform to Preview2Token format\n      const preview2Tokens: Preview2Token[] = (combinedTokens as any[]).map((token: any) => ({\n        symbol: token.symbol,\n        name: token.name,\n        icon: token.logo || this.getDefaultIcon(token.symbol),\n        value: parseFloat(token.totalValue || '0'),\n        qty: parseFloat(token.totalQuantity || '0'),\n        price: parseFloat(token.price || '0'),\n        change24h: token.priceChange24h,\n        address: token.address,\n        decimals: token.decimals,\n        color: this.getTokenColor(token.symbol)\n      }));\n\n      // Sort by value descending\n      preview2Tokens.sort((a, b) => b.value - a.value);\n\n      return { success: true, data: preview2Tokens };\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async getTokenBalance(tokenAddress: string, walletAddress: string): Promise<ServiceResponse<string>> {\n    try {\n      const response = await this.sendMessage<string>({\n        method: 'eth_call',\n        params: [{\n          to: tokenAddress,\n          data: `0x70a08231000000000000000000000000${walletAddress.slice(2)}` // balanceOf(address)\n        }, 'latest']\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  async refreshTokenPrices(): Promise<ServiceResponse<boolean>> {\n    try {\n      // This would typically call an API to get latest prices\n      // For now, we'll just trigger a refresh of the token store\n      const response = await this.sendMessage<boolean>({\n        method: 'yakkl_refreshTokenPrices'\n      });\n\n      return response;\n    } catch (error) {\n      return {\n        success: false,\n        error: this.handleError(error)\n      };\n    }\n  }\n\n  private getDefaultIcon(symbol: string): string {\n    // Map common tokens to emojis or default icons\n    const iconMap: Record<string, string> = {\n      'ETH': '/images/eth.svg',\n      'BTC': '₿',\n      'USDT': '💵',\n      'USDC': '💰',\n      'DAI': '🏦',\n      'LINK': '🔗',\n      'UNI': '🦄',\n      'AAVE': '👻',\n      'COMP': '🏛️',\n      'MKR': '🏭',\n      'SUSHI': '🍣',\n      'YFI': '🌾',\n      'PEPE': '🐸'\n    };\n\n    return iconMap[symbol.toUpperCase()] || '🪙';\n  }\n\n  private getTokenColor(symbol: string): string {\n    // Map tokens to colors for visual distinction\n    const colorMap: Record<string, string> = {\n      'ETH': 'bg-blue-400',\n      'BTC': 'bg-orange-400',\n      'USDT': 'bg-green-400',\n      'USDC': 'bg-blue-500',\n      'DAI': 'bg-yellow-400',\n      'LINK': 'bg-indigo-400',\n      'UNI': 'bg-pink-400',\n      'AAVE': 'bg-purple-400',\n      'COMP': 'bg-teal-400',\n      'MKR': 'bg-cyan-400',\n      'SUSHI': 'bg-rose-400',\n      'YFI': 'bg-amber-400',\n      'PEPE': 'bg-green-500'\n    };\n\n    return colorMap[symbol.toUpperCase()] || 'bg-gray-400';\n  }\n}","import { writable, derived } from 'svelte/store';\nimport type { Preview2Token, LoadingState, ErrorState } from '../types';\nimport { TokenService } from '../services/token.service';\nimport { currentAccount } from './account.store';\nimport { get } from 'svelte/store';\n\ninterface TokenState {\n  tokens: Preview2Token[];\n  loading: LoadingState;\n  error: ErrorState;\n  lastUpdate: Date | null;\n}\n\nfunction createTokenStore() {\n  const tokenService = TokenService.getInstance();\n  \n  const { subscribe, set, update } = writable<TokenState>({\n    tokens: [],\n    loading: { isLoading: false },\n    error: { hasError: false },\n    lastUpdate: null\n  });\n\n  // Auto-refresh when account changes\n  currentAccount.subscribe(async (account) => {\n    if (account) {\n      await loadTokens(account.address);\n    }\n  });\n\n  async function loadTokens(address?: string) {\n    update(state => ({\n      ...state,\n      loading: { isLoading: true, message: 'Loading tokens...' }\n    }));\n\n    const response = await tokenService.getTokens(address);\n    \n    if (response.success && response.data) {\n      update(state => ({\n        ...state,\n        tokens: response.data!,\n        loading: { isLoading: false },\n        error: { hasError: false },\n        lastUpdate: new Date()\n      }));\n    } else {\n      update(state => ({\n        ...state,\n        loading: { isLoading: false },\n        error: response.error || { hasError: true, message: 'Failed to load tokens' }\n      }));\n    }\n  }\n\n  return {\n    subscribe,\n    \n    async refresh() {\n      const account = get(currentAccount);\n      if (account) {\n        await loadTokens(account.address);\n      }\n    },\n\n    async refreshPrices() {\n      update(state => ({\n        ...state,\n        loading: { isLoading: true, message: 'Updating prices...' }\n      }));\n\n      const response = await tokenService.refreshTokenPrices();\n      \n      if (response.success) {\n        // Reload tokens with new prices\n        const account = get(currentAccount);\n        if (account) {\n          await loadTokens(account.address);\n        }\n      } else {\n        update(state => ({\n          ...state,\n          loading: { isLoading: false },\n          error: response.error || { hasError: true, message: 'Failed to update prices' }\n        }));\n      }\n    },\n\n    reset() {\n      set({\n        tokens: [],\n        loading: { isLoading: false },\n        error: { hasError: false },\n        lastUpdate: null\n      });\n    }\n  };\n}\n\nexport const tokenStore = createTokenStore();\n\n// Derived stores\nexport const tokens = derived(\n  tokenStore,\n  $store => $store.tokens\n);\n\nexport const totalPortfolioValue = derived(\n  tokenStore,\n  $store => $store.tokens.reduce((sum, token) => sum + token.value, 0)\n);\n\nexport const isLoadingTokens = derived(\n  tokenStore,\n  $store => $store.loading.isLoading\n);\n\nexport const tokensByValue = derived(\n  tokenStore,\n  $store => [...$store.tokens].sort((a, b) => b.value - a.value)\n);\n\nexport const lastTokenUpdate = derived(\n  tokenStore,\n  $store => $store.lastUpdate\n);","<script lang=\"ts\">\n  /**\n   * Advanced Portfolio Analytics - Pro Feature\n   * This component will be moved to yakkl-wallet-pro repo\n   */\n  \n  import { canUseFeature } from '../../utils/features';\n  import { tokens, totalPortfolioValue } from '../../stores/token.store';\n  import { onMount } from 'svelte';\n\n  let { className = '' } = $props();\n\n  // Pro-only analytics data\n  let performanceData = $state({\n    dayChange: 0,\n    weekChange: 0,\n    monthChange: 0,\n    yearChange: 0,\n    volatility: 0,\n    sharpeRatio: 0\n  });\n\n  let diversificationScore = $state(0);\n  let riskProfile = $state('Conservative');\n  let topPerformers = $state([]);\n  let recommendations = $state([]);\n\n  // Reactive portfolio value\n  let portfolioValue = $derived($totalPortfolioValue);\n  let tokenList = $derived($tokens);\n\n  onMount(() => {\n    if (canUseFeature('advanced_analytics')) {\n      loadAdvancedAnalytics();\n    }\n  });\n\n  async function loadAdvancedAnalytics() {\n    try {\n      // Simulate advanced analytics calculations\n      // In production, this would call actual analytics APIs\n      performanceData = {\n        dayChange: 2.4,\n        weekChange: -1.2,\n        monthChange: 8.7,\n        yearChange: 34.2,\n        volatility: 15.8,\n        sharpeRatio: 1.23\n      };\n\n      diversificationScore = 72;\n      riskProfile = calculateRiskProfile();\n      topPerformers = getTopPerformers();\n      recommendations = generateRecommendations();\n    } catch (error) {\n      console.error('Failed to load advanced analytics:', error);\n    }\n  }\n\n  function calculateRiskProfile(): string {\n    // Risk calculation logic (would be more complex in production)\n    if (performanceData.volatility < 10) return 'Conservative';\n    if (performanceData.volatility < 20) return 'Moderate';\n    return 'Aggressive';\n  }\n\n  function getTopPerformers() {\n    // Mock top performers\n    return [\n      { symbol: 'ETH', change: '+12.4%', value: '$1,234' },\n      { symbol: 'BTC', change: '+8.2%', value: '$5,678' },\n      { symbol: 'SOL', change: '+15.1%', value: '$890' }\n    ];\n  }\n\n  function generateRecommendations() {\n    return [\n      'Consider rebalancing your portfolio - ETH allocation is above target',\n      'Low diversification detected - consider adding more asset classes',\n      'Your DeFi exposure could be optimized with yield farming strategies'\n    ];\n  }\n\n  function formatChange(change: number): string {\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(1)}%`;\n  }\n\n  function getChangeColor(change: number): string {\n    return change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';\n  }\n</script>\n\n{#if !canUseFeature('advanced_analytics')}\n  <!-- Upgrade prompt for non-Pro users -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6 text-center\">\n      <div class=\"mb-4\">\n        <svg class=\"w-12 h-12 mx-auto text-indigo-500 dark:text-indigo-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n      </div>\n      <h3 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-2\">Advanced Portfolio Analytics</h3>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        Get detailed performance insights, risk analysis, and personalized recommendations\n      </p>\n      <button class=\"yakkl-btn-primary bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700\">\n        Upgrade to Pro\n      </button>\n    </div>\n  </div>\n{:else}\n  <!-- Pro analytics dashboard -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6\">\n      <div class=\"flex items-center gap-2 mb-6\">\n        <svg class=\"w-6 h-6 text-indigo-600 dark:text-indigo-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <h3 class=\"text-xl font-bold text-zinc-900 dark:text-white\">Advanced Analytics</h3>\n        <span class=\"px-2 py-1 bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-xs rounded-full font-semibold\">PRO</span>\n      </div>\n\n      <!-- Performance Metrics -->\n      <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n        <div class=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-green-700 dark:text-green-300 mb-1\">24h Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.dayChange)}`}>\n            {formatChange(performanceData.dayChange)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-blue-700 dark:text-blue-300 mb-1\">7d Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.weekChange)}`}>\n            {formatChange(performanceData.weekChange)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-purple-700 dark:text-purple-300 mb-1\">30d Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.monthChange)}`}>\n            {formatChange(performanceData.monthChange)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 p-4 rounded-xl\">\n          <div class=\"text-xs font-medium text-amber-700 dark:text-amber-300 mb-1\">1y Change</div>\n          <div class={`text-lg font-bold ${getChangeColor(performanceData.yearChange)}`}>\n            {formatChange(performanceData.yearChange)}\n          </div>\n        </div>\n      </div>\n\n      <!-- Risk Metrics -->\n      <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <div class=\"bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">Risk Profile</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">{riskProfile}</div>\n        </div>\n        \n        <div class=\"bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">Diversification</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">{diversificationScore}/100</div>\n        </div>\n        \n        <div class=\"bg-zinc-50 dark:bg-zinc-800/50 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2\">Sharpe Ratio</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white\">{performanceData.sharpeRatio}</div>\n        </div>\n      </div>\n\n      <!-- Top Performers -->\n      <div class=\"mb-6\">\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">Top Performers</h4>\n        <div class=\"space-y-2\">\n          {#each topPerformers as performer}\n            <div class=\"flex items-center justify-between p-3 bg-zinc-50 dark:bg-zinc-800/50 rounded-lg\">\n              <div class=\"flex items-center gap-3\">\n                <div class=\"w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                  {performer.symbol.slice(0, 2)}\n                </div>\n                <div>\n                  <div class=\"font-medium text-zinc-900 dark:text-white\">{performer.symbol}</div>\n                  <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{performer.value}</div>\n                </div>\n              </div>\n              <div class=\"text-green-600 dark:text-green-400 font-bold\">{performer.change}</div>\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Recommendations -->\n      <div>\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">AI Recommendations</h4>\n        <div class=\"space-y-3\">\n          {#each recommendations as recommendation}\n            <div class=\"flex items-start gap-3 p-3 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/20 dark:to-purple-900/20 rounded-lg\">\n              <svg class=\"w-5 h-5 text-indigo-600 dark:text-indigo-400 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <p class=\"text-sm text-zinc-700 dark:text-zinc-300\">{recommendation}</p>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n  /**\n   * Secure Recovery System - Private Feature\n   * This component will be moved to yakkl-wallet-private repo\n   * Handles private key backup, recovery, and air-gapped operations\n   */\n  \n  import { canUseFeature } from '../../utils/features';\n  import { onMount } from 'svelte';\n\n  let { className = '' } = $props();\n\n  // Private-only security features\n  let backupStatus = $state({\n    hasSecureBackup: false,\n    lastBackupDate: null,\n    backupMethod: 'none', // 'shamir', 'hardware', 'air_gapped'\n    integrityCheck: false\n  });\n\n  let recoveryOptions = $state([]);\n  let hardwareDevices = $state([]);\n  let showSecurityWarning = $state(false);\n\n  onMount(() => {\n    if (canUseFeature('private_key_backup')) {\n      loadSecurityStatus();\n    }\n  });\n\n  async function loadSecurityStatus() {\n    try {\n      // Simulate loading security status\n      // In production, this would check actual backup systems\n      backupStatus = {\n        hasSecureBackup: true,\n        lastBackupDate: new Date('2024-01-15'),\n        backupMethod: 'shamir',\n        integrityCheck: true\n      };\n\n      recoveryOptions = [\n        { method: 'Shamir Secret Sharing', status: 'active', shards: 5, threshold: 3 },\n        { method: 'Hardware Backup', status: 'pending', device: 'Ledger Nano X' },\n        { method: 'Air-Gapped Storage', status: 'inactive', location: 'Not configured' }\n      ];\n\n      hardwareDevices = [\n        { name: 'Ledger Nano X', status: 'connected', backup: true },\n        { name: 'Trezor Model T', status: 'disconnected', backup: false }\n      ];\n    } catch (error) {\n      console.error('Failed to load security status:', error);\n    }\n  }\n\n  function createShamirBackup() {\n    showSecurityWarning = true;\n    // Would implement Shamir Secret Sharing\n    console.log('Creating Shamir backup...');\n  }\n\n  function setupHardwareBackup() {\n    // Would integrate with hardware wallets\n    console.log('Setting up hardware backup...');\n  }\n\n  function createAirGappedBackup() {\n    // Would create air-gapped backup process\n    console.log('Creating air-gapped backup...');\n  }\n\n  function testRecovery() {\n    // Would test recovery process without exposing keys\n    console.log('Testing recovery process...');\n  }\n\n  function formatDate(date: Date | null): string {\n    if (!date) return 'Never';\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  }\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'active': return 'text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/30';\n      case 'pending': return 'text-amber-600 dark:text-amber-400 bg-amber-100 dark:bg-amber-900/30';\n      case 'inactive': return 'text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/30';\n      default: return 'text-zinc-600 dark:text-zinc-400 bg-zinc-100 dark:bg-zinc-800';\n    }\n  }\n</script>\n\n{#if !canUseFeature('private_key_backup')}\n  <!-- Upgrade prompt for non-Private users -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6 text-center\">\n      <div class=\"mb-4\">\n        <svg class=\"w-12 h-12 mx-auto text-red-500 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n      </div>\n      <h3 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-2\">Secure Recovery System</h3>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        Military-grade private key backup, Shamir secret sharing, and air-gapped recovery\n      </p>\n      <button class=\"yakkl-btn-primary bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700\">\n        Upgrade to Private\n      </button>\n    </div>\n  </div>\n{:else}\n  <!-- Private security dashboard -->\n  <div class={`yakkl-card ${className}`}>\n    <div class=\"p-6\">\n      <div class=\"flex items-center gap-2 mb-6\">\n        <svg class=\"w-6 h-6 text-red-600 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n        <h3 class=\"text-xl font-bold text-zinc-900 dark:text-white\">Secure Recovery</h3>\n        <span class=\"px-2 py-1 bg-gradient-to-r from-red-500 to-rose-600 text-white text-xs rounded-full font-semibold\">PRIVATE</span>\n      </div>\n\n      <!-- Security Status Overview -->\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n        <div class=\"bg-gradient-to-br from-red-50 to-rose-50 dark:from-red-900/20 dark:to-rose-900/20 p-4 rounded-xl\">\n          <div class=\"flex items-center gap-2 mb-2\">\n            <div class={`w-3 h-3 rounded-full ${backupStatus.hasSecureBackup ? 'bg-green-500' : 'bg-red-500'}`}></div>\n            <div class=\"text-sm font-medium text-red-700 dark:text-red-300\">Backup Status</div>\n          </div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white mb-1\">\n            {backupStatus.hasSecureBackup ? 'Secured' : 'Not Secured'}\n          </div>\n          <div class=\"text-xs text-zinc-500 dark:text-zinc-400\">\n            Last backup: {formatDate(backupStatus.lastBackupDate)}\n          </div>\n        </div>\n        \n        <div class=\"bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 p-4 rounded-xl\">\n          <div class=\"text-sm font-medium text-amber-700 dark:text-amber-300 mb-2\">Backup Method</div>\n          <div class=\"text-lg font-bold text-zinc-900 dark:text-white mb-1\">\n            {backupStatus.backupMethod === 'shamir' ? 'Shamir Sharing' : \n             backupStatus.backupMethod === 'hardware' ? 'Hardware' : \n             backupStatus.backupMethod === 'air_gapped' ? 'Air-Gapped' : 'None'}\n          </div>\n          <div class=\"flex items-center gap-1\">\n            <div class={`w-2 h-2 rounded-full ${backupStatus.integrityCheck ? 'bg-green-500' : 'bg-red-500'}`}></div>\n            <div class=\"text-xs text-zinc-500 dark:text-zinc-400\">\n              Integrity {backupStatus.integrityCheck ? 'verified' : 'failed'}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Recovery Methods -->\n      <div class=\"mb-6\">\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">Recovery Methods</h4>\n        <div class=\"space-y-3\">\n          {#each recoveryOptions as option}\n            <div class=\"flex items-center justify-between p-4 bg-zinc-50 dark:bg-zinc-800/50 rounded-lg\">\n              <div class=\"flex items-center gap-3\">\n                <div class=\"w-10 h-10 bg-gradient-to-br from-red-500 to-rose-600 rounded-lg flex items-center justify-center text-white\">\n                  {#if option.method.includes('Shamir')}\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                    </svg>\n                  {:else if option.method.includes('Hardware')}\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z\" />\n                    </svg>\n                  {:else}\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 3v2.25m0 13.5V21m9-9h-2.25M4.5 12H3\" />\n                    </svg>\n                  {/if}\n                </div>\n                <div>\n                  <div class=\"font-medium text-zinc-900 dark:text-white\">{option.method}</div>\n                  {#if option.shards}\n                    <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">\n                      {option.shards} shards, {option.threshold} required\n                    </div>\n                  {:else if option.device}\n                    <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{option.device}</div>\n                  {:else if option.location}\n                    <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{option.location}</div>\n                  {/if}\n                </div>\n              </div>\n              <span class={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(option.status)}`}>\n                {option.status}\n              </span>\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Hardware Devices -->\n      <div class=\"mb-6\">\n        <h4 class=\"text-lg font-semibold text-zinc-900 dark:text-white mb-3\">Hardware Devices</h4>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          {#each hardwareDevices as device}\n            <div class=\"flex items-center justify-between p-3 bg-zinc-50 dark:bg-zinc-800/50 rounded-lg\">\n              <div class=\"flex items-center gap-3\">\n                <div class={`w-3 h-3 rounded-full ${device.status === 'connected' ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <div>\n                  <div class=\"font-medium text-zinc-900 dark:text-white\">{device.name}</div>\n                  <div class=\"text-sm text-zinc-500 dark:text-zinc-400\">{device.status}</div>\n                </div>\n              </div>\n              {#if device.backup}\n                <svg class=\"w-4 h-4 text-green-600 dark:text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\" />\n                </svg>\n              {/if}\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- Action Buttons -->\n      <div class=\"flex flex-wrap gap-3\">\n        <button \n          onclick={createShamirBackup}\n          class=\"yakkl-btn-primary bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-sm\"\n        >\n          Create Shamir Backup\n        </button>\n        \n        <button \n          onclick={setupHardwareBackup}\n          class=\"yakkl-btn-secondary text-sm\"\n        >\n          Setup Hardware Backup\n        </button>\n        \n        <button \n          onclick={createAirGappedBackup}\n          class=\"yakkl-btn-secondary text-sm\"\n        >\n          Air-Gapped Backup\n        </button>\n        \n        <button \n          onclick={testRecovery}\n          class=\"yakkl-btn-secondary text-sm\"\n        >\n          Test Recovery\n        </button>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<!-- Security Warning Modal -->\n{#if showSecurityWarning}\n  <div class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n    <div class=\"bg-white dark:bg-zinc-800 rounded-xl p-6 max-w-md mx-4\">\n      <div class=\"flex items-center gap-3 mb-4\">\n        <svg class=\"w-8 h-8 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.664-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n        </svg>\n        <h3 class=\"text-lg font-bold text-zinc-900 dark:text-white\">Security Warning</h3>\n      </div>\n      <p class=\"text-sm text-zinc-600 dark:text-zinc-400 mb-4\">\n        You are about to create a cryptographic backup of your private keys. Ensure you're in a secure environment and follow all security protocols.\n      </p>\n      <div class=\"flex gap-3\">\n        <button \n          onclick={() => showSecurityWarning = false}\n          class=\"flex-1 yakkl-btn-secondary text-sm\"\n        >\n          Cancel\n        </button>\n        <button \n          onclick={() => { showSecurityWarning = false; /* Proceed with backup */ }}\n          class=\"flex-1 yakkl-btn-primary bg-red-600 hover:bg-red-700 text-sm\"\n        >\n          I Understand\n        </button>\n      </div>\n    </div>\n  </div>\n{/if}","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import RecentActivity from \"./lib/components/RecentActivity.svelte\";\n  import SendModal from \"./lib/components/SendModal.svelte\";\n  import Receive from \"./lib/components/Receive.svelte\";\n  import BuyModal from \"./lib/components/BuyModal.svelte\";\n  import TokenPortfolio from \"./lib/components/TokenPortfolio.svelte\";\n  import AIHelpButton from \"./lib/components/AIHelpButton.svelte\";\n  import AdvancedAnalytics from \"./lib/components/pro/AdvancedAnalytics.svelte\";\n  import SecureRecovery from \"./lib/components/private/SecureRecovery.svelte\";\n  import ModDashboard from \"./lib/components/mods/ModDashboard.svelte\";\n  import ModRenderer from \"./lib/components/mods/ModRenderer.svelte\";\n  import Upgrade from \"./lib/components/Upgrade.svelte\";\n  import { modalStore, isModalOpen } from \"./lib/stores/modal.store\";\n  import { initializeCore } from \"./lib/core/integration\";\n  import MigrationBanner from \"./migration-banner.svelte\";\n  import { currentAccount, accounts } from './lib/stores/account.store';\n  import { currentChain } from './lib/stores/chain.store';\n  import { tokens, totalPortfolioValue, isLoadingTokens, lastTokenUpdate } from './lib/stores/token.store';\n  import { canUseFeature } from './lib/utils/features';\n  import { Preview2Migration, isMigrationNeeded, enablePreview2 } from './migrate';\n  import { uiStore } from './lib/stores/ui.store';\n\n  let showSendModal = $state(false);\n  let showSwapModal = $state(false);\n  let showReceiveModal = $state(false);\n  let showBuyModal = $state(false);\n  let showMigrationBanner = $state(false);\n  let showUpgradeModal = $state(false);\n  let modalOpen = $derived($isModalOpen);\n  \n  // Track modal state\n  $effect(() => {\n    if (showUpgradeModal) {\n      modalStore.openModal('upgrade');\n    } else {\n      modalStore.closeModal();\n    }\n  });\n\n  // Reactive values from stores\n  let account = $derived($currentAccount);\n  let chain = $derived($currentChain);\n  let tokenList = $derived($tokens);\n  let portfolioValue = $derived($totalPortfolioValue);\n  let loading = $derived($isLoadingTokens);\n  let lastUpdate = $derived($lastTokenUpdate);\n\n  // Migration functions\n  async function handleMigration() {\n    const migration = new Preview2Migration({\n      dryRun: false,\n      verbose: true,\n      backupData: true\n    });\n\n    const result = await migration.execute();\n\n    if (result.success) {\n      // Refresh stores after successful migration\n      await refreshAllData();\n    } else {\n      throw new Error('Migration failed: ' + result.report.details.errors.join(', '));\n    }\n  }\n\n  async function refreshAllData() {\n    // Refresh all store data after migration\n    const { accountStore } = await import('./lib/stores/account.store');\n    const { chainStore } = await import('./lib/stores/chain.store');\n    const { tokenStore } = await import('./lib/stores/token.store');\n    const { planStore } = await import('./lib/stores/plan.store');\n\n    await Promise.all([\n      accountStore.loadAccounts(),\n      chainStore.loadChains(),\n      tokenStore.refresh(),\n      planStore.loadPlan()\n    ]);\n  }\n\n  onMount(async () => {\n    // Show loading state\n    uiStore.setGlobalLoading(true, 'Initializing Preview 2.0...');\n\n    try {\n      // Check if user is authenticated first\n      const { getSettings, syncStorageToStore } = await import('$lib/common/stores');\n      const settings = await getSettings();\n      \n      console.log('Preview2 auth check:', {\n        settings: !!settings,\n        isLocked: settings?.isLocked,\n        init: settings?.init\n      });\n      \n      // Check if user is authenticated\n      const isAuthenticated = settings && \n                             settings.isLocked === false && \n                             settings.init;\n      \n      console.log('isAuthenticated:', isAuthenticated);\n      \n      // For version 2.0.0, also check if we're already in a preview2 authenticated session\n      const isPreview2Session = sessionStorage.getItem('preview2-authenticated') === 'true';\n      \n      // Special check: if we came from another preview2 page (not login), assume authenticated\n      const referrer = document.referrer;\n      const cameFromPreview2 = referrer && referrer.includes('/preview2/') && !referrer.includes('/preview2/login');\n      \n      if (!isAuthenticated && !isPreview2Session && !cameFromPreview2) {\n        // User is not authenticated, redirect to preview2 login\n        const { goto } = await import('$app/navigation');\n        console.log('Redirecting to login...');\n        return await goto('/preview2/login');\n      }\n      \n      // Mark session as authenticated for preview2\n      if (isAuthenticated || cameFromPreview2) {\n        sessionStorage.setItem('preview2-authenticated', 'true');\n      }\n      \n      console.log('User authenticated, ensuring stores are synchronized...');\n      \n      // Ensure all stores are loaded from persistent storage\n      await syncStorageToStore();\n      console.log('Preview2: Stores synchronized from persistent storage');\n\n      // Check if migration is needed\n      const migrationNeeded = await isMigrationNeeded();\n      showMigrationBanner = migrationNeeded;\n\n      // If no migration needed, just enable preview2 for development\n      if (!migrationNeeded) {\n        await enablePreview2();\n      }\n\n      // Initialize YAKKL Core (non-blocking)\n      initializeCore().catch(err => {\n        console.warn('YAKKL Core initialization failed:', err);\n      });\n\n      // Load initial data\n      await refreshAllData();\n\n      // Welcome message for first-time users\n      if (migrationNeeded) {\n        uiStore.showInfo(\n          'Welcome to Preview 2.0!',\n          'Complete migration to access the new wallet experience'\n        );\n      } else {\n        uiStore.showSuccess(\n          'Preview 2.0 Ready!',\n          'Welcome to the enhanced wallet experience'\n        );\n      }\n\n    } catch (error) {\n      console.error('Preview 2.0 initialization failed:', error);\n      uiStore.showError(\n        'Initialization Failed',\n        'Some features may not work properly. Please refresh the page.'\n      );\n      await enablePreview2(); // Fallback to enable preview2\n    } finally {\n      uiStore.setGlobalLoading(false);\n    }\n  });\n\n  function handleSend(tx: any) {\n    showSendModal = false;\n    console.log('Transaction sent:', tx);\n\n    // Show success feedback\n    uiStore.showTransactionPending(tx.hash);\n\n    // Refresh token data after send\n    setTimeout(() => {\n      refreshAllData();\n    }, 2000);\n  }\n\n  function handleSwap(tx: any) {\n    showSwapModal = false;\n    console.log('Swap requested:', tx);\n\n    // Show swap feedback\n    uiStore.showSuccess(\n      'Swap Initiated!',\n      'Your token swap is being processed'\n    );\n\n    // Refresh data after swap\n    setTimeout(() => {\n      refreshAllData();\n    }, 2000);\n  }\n\n  function handleReceive() {\n    showReceiveModal = true;\n  }\n\n  function handleBuySell() {\n    // Check if user has access to buy feature\n    if (!canUseFeature('buy_crypto')) {\n      uiStore.showInfo(\n        'Pro Feature Required',\n        'Upgrade to Pro to buy crypto with your credit card'\n      );\n      return;\n    }\n    showBuyModal = true;\n  }\n\n  function handleSwapClick() {\n    // Check if user has access to swap feature\n    if (!canUseFeature('swap_tokens')) {\n      uiStore.showInfo(\n        'Pro Feature Required',\n        'Upgrade to Pro to swap tokens with better rates'\n      );\n      return;\n    }\n    showSwapModal = true;\n  }\n\n  function shortAddr(addr: string): string {\n    if (!addr) return '';\n    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;\n  }\n\n  function formatCurrency(value: number): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value);\n  }\n\n  function formatTime(date: Date | null): string {\n    if (!date) return 'Never';\n    return new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    }).format(date);\n  }\n\n  function showUpgradePrompt(feature: string, requiredPlan: string) {\n    const featureNames = {\n      'swap_tokens': 'Token Swapping',\n      'buy_crypto': 'Buy/Sell Crypto',\n      'ai_assistant': 'AI Assistant',\n      'advanced_analytics': 'Advanced Analytics'\n    };\n    \n    const featureName = featureNames[feature as keyof typeof featureNames] || feature;\n    showUpgradeModal = true;\n  }\n</script>\n\n<!-- Migration Banner -->\n<!-- <MigrationBanner\n  bind:showBanner={showMigrationBanner}\n  onMigrate={handleMigration}\n  onDismiss={() => showMigrationBanner = false}\n/> -->\n\n<SendModal\n  show={showSendModal}\n  onClose={() => showSendModal = false}\n  onSend={handleSend}\n  tokens={tokenList}\n  chain={chain}\n  mode=\"send\"\n/>\n\n{#if canUseFeature('swap_tokens')}\n<SendModal\n  show={showSwapModal}\n  onClose={() => showSwapModal = false}\n  onSend={handleSwap}\n  tokens={tokenList}\n  chain={chain}\n  mode=\"swap\"\n/>\n{/if}\n\n<Receive\n  bind:show={showReceiveModal}\n/>\n\n<BuyModal\n  show={showBuyModal}\n  onClose={() => showBuyModal = false}\n/>\n\n<div class=\"max-w-[400px] mx-auto p-5 space-y-5 mt-1 pt-2 relative\">\n  <!-- Faint watermark (bull logo or 'Y') centered -->\n  <div class=\"absolute inset-0 flex items-center justify-center pointer-events-none select-none\">\n    <img src=\"/images/logoBullFav128x128.png\" class=\"w-44 h-44 opacity-10 dark:opacity-15\" alt=\"logo\" />\n  </div>\n\n  <!-- Account header -->\n  <div class=\"flex items-center justify-between relative z-10\">\n    <div>\n      <div class=\"text-xs text-gray-400 dark:text-gray-500\">Account</div>\n      {#if account}\n        <div class=\"text-lg font-semibold tracking-wide\">{account.ens || account.username || ''}</div>\n        <div class=\"text-xs text-gray-500 dark:text-gray-400\">{shortAddr(account.address)}</div>\n      {:else}\n        <div class=\"text-lg font-semibold tracking-wide\">No account</div>\n      {/if}\n      <a href=\"/preview2/accounts\" class=\"text-blue-500 dark:text-blue-400 text-xs hover:underline\">Switch Account</a>\n    </div>\n    <div class=\"flex flex-col items-end\">\n      {#if chain}\n        <div class=\"text-sm bg-green-100 dark:bg-green-900 dark:text-green-200 text-green-800 px-2 py-1 rounded font-bold\">\n          {chain.isTestnet ? 'TESTNET' : 'LIVE'}\n        </div>\n      {/if}\n    </div>\n  </div>\n\n  <!-- Portfolio Summary -->\n  <div class=\"rounded-2xl bg-gradient-to-br from-indigo-100 to-purple-100 dark:from-indigo-700 dark:to-purple-900 shadow-md flex flex-col items-center justify-center p-6 relative z-10 group hover:shadow-lg transition-all duration-300\">\n    <span class=\"uppercase text-xs text-gray-500 dark:text-gray-300 tracking-widest mb-1\">Total Portfolio</span>\n    {#if loading}\n      <div class=\"animate-pulse h-8 w-32 bg-white/20 rounded\"></div>\n    {:else}\n      <span class=\"text-3xl font-bold tracking-tight text-zinc-900 dark:text-white group-hover:scale-105 transition-transform duration-200\">{formatCurrency(portfolioValue)}</span>\n    {/if}\n    <div class=\"flex items-center gap-2 mt-2\">\n      <span class=\"text-xs text-gray-400\">Last updated: {formatTime(lastUpdate)}</span>\n      {#if !loading}\n        <!-- svelte-ignore a11y_consider_explicit_label -->\n        <button\n          onclick={() => refreshAllData()}\n          class=\"text-xs text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-200 transition-colors p-1 rounded\"\n          title=\"Refresh portfolio\"\n        >\n          <svg class=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n          </svg>\n        </button>\n      {/if}\n    </div>\n  </div>\n\n  <!-- Action Buttons -->\n  <div class=\"grid grid-cols-4 gap-3 relative z-10\">\n    <button\n      class=\"yakkl-btn-primary yakkl-btn-send text-sm\"\n      onclick={() => showSendModal = true}\n      disabled={!account || !canUseFeature('send_tokens')}\n    >\n      Send\n    </button>\n\n    <button\n      class=\"yakkl-btn-primary bg-blue-600 hover:bg-blue-700 text-sm\"\n      onclick={handleReceive}\n      disabled={!account || !canUseFeature('receive_tokens')}\n    >\n      Receive\n    </button>\n\n    <button\n      class=\"yakkl-btn-primary yakkl-swap text-sm {!canUseFeature('swap_tokens') ? 'opacity-75' : ''}\"\n      onclick={canUseFeature('swap_tokens') ? handleSwapClick : () => showUpgradePrompt('swap_tokens', 'Pro')}\n      disabled={!account}\n      title={!canUseFeature('swap_tokens') ? 'Upgrade to Pro to unlock token swapping' : 'Swap tokens'}\n    >\n      {canUseFeature('swap_tokens') ? 'Swap' : '🔒 Swap'}\n    </button>\n\n    <button\n      class=\"yakkl-btn-primary yakkl-btn-buy text-sm {!canUseFeature('buy_crypto') ? 'opacity-75' : ''}\"\n      onclick={canUseFeature('buy_crypto') ? handleBuySell : () => showUpgradePrompt('buy_crypto', 'Pro')}\n      disabled={!account}\n      title={!canUseFeature('buy_crypto') ? 'Upgrade to Pro to unlock buy/sell features' : 'Buy and sell crypto'}\n    >\n      {canUseFeature('buy_crypto') ? 'Buy/Sell' : '🔒 Buy/Sell'}\n    </button>\n  </div>\n\n  <!-- Recent Activity -->\n  <RecentActivity className=\"yakkl-card relative z-10\" />\n\n  <!-- Token Portfolio -->\n  <TokenPortfolio\n    tokens={tokenList}\n    loading={loading}\n    className=\"yakkl-card relative z-10\"\n  />\n\n  <!-- Pro Feature: Advanced Analytics -->\n  {#if canUseFeature('advanced_analytics')}\n    <AdvancedAnalytics className=\"relative z-10\" />\n  {:else}\n    <div class=\"yakkl-card relative z-10 p-6 text-center border-2 border-dashed border-gray-300 dark:border-gray-600\">\n      <div class=\"text-gray-400 dark:text-gray-500 mb-3\">\n        <svg class=\"w-12 h-12 mx-auto mb-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n        </svg>\n        <h3 class=\"text-lg font-medium mb-2\">Advanced Analytics</h3>\n        <p class=\"text-sm mb-4\">Get detailed portfolio insights, performance metrics, and market analysis.</p>\n        <button \n          onclick={() => showUpgradeModal = true}\n          class=\"bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n        >\n          Upgrade to Pro\n        </button>\n      </div>\n    </div>\n  {/if}\n\n  <!-- Private Feature: Secure Recovery -->\n  {#if canUseFeature('secure_recovery')}\n    <SecureRecovery className=\"relative z-10\" />\n  {:else if canUseFeature('advanced_analytics')}\n    <!-- Show for Pro+ users but locked -->\n    <div class=\"yakkl-card relative z-10 p-6 text-center border-2 border-dashed border-orange-300 dark:border-orange-600\">\n      <div class=\"text-orange-400 dark:text-orange-500 mb-3\">\n        <svg class=\"w-12 h-12 mx-auto mb-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n        </svg>\n        <h3 class=\"text-lg font-medium mb-2\">Secure Recovery</h3>\n        <p class=\"text-sm mb-4\">Maximum security features including air-gapped signing and zero-knowledge proofs.</p>\n        <button \n          onclick={() => showUpgradeModal = true}\n          class=\"bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n        >\n          Upgrade to Private\n        </button>\n      </div>\n    </div>\n  {/if}\n\n  <!-- Mod System -->\n  <ModDashboard className=\"yakkl-card relative z-10\" />\n\n  <!-- Preview 2.0 Badge -->\n  <div class=\"text-center pt-4 pb-2 relative z-10\">\n    <div class=\"inline-flex items-center gap-2 bg-gradient-to-r from-purple-500 to-indigo-600 text-white px-3 py-1 rounded-full text-xs font-medium shadow-md\">\n      <svg class=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n      </svg>\n      Preview 2.0\n    </div>\n  </div>\n</div>\n\n<!-- AI Help Button - Floating Action Button (hidden during modals) -->\n{#if !modalOpen}\n  {#if canUseFeature('ai_assistant')}\n    <AIHelpButton className=\"fixed bottom-12 right-4\" />\n  {:else}\n    <!-- Show locked AI button for non-Pro users -->\n    <div class=\"fixed bottom-12 right-4 z-50\">\n      <button\n        onclick={() => showUpgradeModal = true}\n        class=\"yakkl-circle-button text-xl opacity-60 hover:opacity-80 transition-opacity\"\n        title=\"AI Assistant (Pro Feature - Upgrade Required)\"\n      >\n        🤖\n      </button>\n    </div>\n  {/if}\n{/if}\n\n<!-- Upgrade Modal -->\n<Upgrade \n  bind:show={showUpgradeModal}\n  onComplete={() => {\n    showUpgradeModal = false;\n    // Refresh all data after upgrade\n    refreshAllData();\n  }}\n  onCancel={() => showUpgradeModal = false}\n/>\n"],"names":["version","checkType","value","type","name","types","split","map","t","trim","i","length","error","Error","code","argument","defineProperties","target","values","key","Object","defineProperty","enumerable","writable","stringify","seen","Set","has","add","Array","isArray","v","join","Uint8Array","HEX","result","toJSON","toString","BigInt","JSON","keys","sort","k","isError","makeError","message","info","shortMessage","details","push","TypeError","RangeError","assign","assert","check","assertArgument","assertArgumentCount","count","expectedCount","reduce","accum","form","normalize","String","fromCharCode","expected","assertPrivate","givenGuard","guard","className","method","operation","_getBytes","copy","match","offset","parseInt","substring","getBytes","getBytesCopy","HexCharacters","hexlify","data","bytes","concat","datas","d","BN_0","BN_1","maxValue","fromTwos","_value","_width","getUint","width","getNumber","fault","mask","toTwos","getBigInt","limit","_bits","bits","Number","isInteger","e","Nibbles","toBigInt","toNumber","toBeHex","toBeArray","hex","errorFunc","reason","output","badCodepoint","ignoreFunc","o","replaceFunc","Utf8ErrorFuncs","freeze","ignore","replace","getUtf8CodePoints","_bytes","onError","c","extraLength","overlongMask","res","j","nextChar","toUtf8Bytes","str","charCodeAt","c2","pair","_toUtf8String","codePoints","codePoint","toUtf8String","BN_N1","BN_5","_guard","Zeros","getTens","decimals","checkValue","val","format","safeOp","signed","getFormat","defaultValue","negative","index","FixedNumber","tens","constructor","this","checkFormat","other","addUnsafe","sub","subUnsafe","mul","mulUnsafe","mulSignal","div","divUnsafe","divSignal","cmp","a","b","delta","eq","lt","lte","gt","gte","floor","ceiling","round","bump","isZero","isNegative","toUnsafeFloat","parseFloat","toFormat","fromString","fromValue","_decimals","_format","whole","decimal","fromBytes","parseUnits","unit","parseEther","ether","WordSize","Padding","passProperties","resultNames","WeakMap","getNames","get","setNames","names","set","throwError","wrapped","toObject","items","deep","indexOf","item","Result","getValue","args","slice","wrap","super","forEach","nameCounts","Map","proxy","Proxy","prop","receiver","Reflect","Function","apply","toArray","start","end","_names","filter","callback","thisArg","call","fromItems","buffer","Coder","localName","dynamic","_throwError","Writer","dataLength","writeData","appendWriter","writer","writeBytes","paddingOffset","writeValue","writeUpdatableValue","Reader","allowLoose","bytesRead","parent","maxInflation","consumed","incrementBytesRead","peekBytes","loose","alignedLength","Math","ceil","subReader","reader","readBytes","readValue","readIndex","number","n","isSafeInteger","lengths","includes","exists","instance","checkFinished","destroyed","finished","out","min","outputLen","U32_MASK64","_32n","fromBig","le","h","l","lst","Ah","Uint32Array","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","u8a","u32","arr","byteOffset","byteLength","isLE","utf8ToBytes","TextEncoder","encode","toBytes","Hash","clone","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","blockLen","create","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","R","x","y","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Keccak","suffix","enableXOF","pos","posOut","state","state32","keccak","len","take","finish","writeInto","bufferOut","subarray","xofInto","xof","digestInto","destroy","to","gen","keccak_256","locked","_keccak256","__keccak256","keccak256","_data","_","lock","register","func","BN_36","getChecksumAddress","address","toLowerCase","chars","expanded","hashed","toUpperCase","ibanLookup","safeDigits","ibanChecksum","block","checksum","Base36","fromBase36","getAddress","startsWith","_gaurd","Typed","size","_typedSymbol","Symbol","for","options","gaurd","minValue","isBigInt","isData","isString","tupleName","arrayLength","from","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","uint","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","int","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","bool","string","array","tuple","overrides","isTyped","dereference","AddressCoder","decode","AnonymousCoder","coder","pack","coders","arrayValues","unique","staticWriter","dynamicWriter","updateFuncs","dynamicOffset","updateFunc","baseOffset","unpack","baseReader","offsetReader","baseType","ArrayCoder","defaultChild","BooleanCoder","DynamicBytesCoder","BytesCoder","FixedBytesCoder","Empty","NullCoder","BN_MAX_UINT256","NumberCoder","maxUintValue","bounds","StringCoder","TupleCoder","uniqueNames","id","setify","_kwVisibDeploy","_kwVisib","_kwTypes","_kwModifiers","KwModifiers","_kwOther","_keywords","Keywords","SimpleTokens","regexWhitespacePrefix","RegExp","regexNumberPrefix","regexIdPrefix","regexId","regexType","TokenString","tokens","reset","subTokenString","linkBack","linkNext","popKeyword","allowed","top","peek","text","pop","popType","popParen","popParams","link","peekKeyword","peekType","token","lex","brackets","commas","cur","depth","consumeKeywords","keywords","keyword","regexArrayType","verifyBasicType","internal","ParamTypeInternal","ParamType","indexed","components","arrayChildren","parse","isTuple","comp","isIndexable","walk","process","_this","walkAsync","promises","setValue","childType","param","then","async","Promise","all","obj","allowIndexed","isParamType","comps","bracket","arrayMatch","PanicReasons","paramTypeBytes","paramTypeNumber","defaultCoder","defaultMaxInflation","getBuiltinCallException","action","tx","abiCoder","invocation","revert","signature","transaction","AbiCoder","getCoder","getDefaultValue","_setDefaultMaxInflation","defaultAbiCoder","lessText","onclick","$$payload","$.escape","TransactionService","BaseService","static","getInstance","sendTransaction","params","account","currentAccount","chain","currentChain","success","hasError","txParams","tokenAddress","ethers.parseEther","chainId","transferData","encodeTokenTransfer","gasPrice","gasLimit","gas","response","sendMessage","handleError","getTransactionHistory","transactions","hash","timestamp","Date","now","status","mapTxStatus","determineTxType","estimateGas","getGasPrice","amount","transferFn","transferSelector","ethers.id","encodedParams","ethers.AbiCoder","ethers.parseUnits","userAddress","user","createTransactionStore","txService","subscribe","pendingTx","loading","isLoading","loadTransactions","setTimeout","updateGasPrice","clearError","transactionStore","recentTransactions","derived","$store","isLoadingTx","txError","maxRows","$$props","$.store_get","$$store_subs","visible","hidden","formatAmount","num","toExponential","toFixed","shortAddress","formatTime","diff","minutes","hours","days","getTransactionDirection","getStatusColor","getTransactionIcon","each_array","$.ensure_array_like","$$index","each_array_1","$$index_1","direction","isOutgoing","$.attr","charAt","show","onClose","onSend","icon","mode","recipient","selectedToken","symbol","sending","qty","$.attr_class","$.stringify","canUseFeature","qrText","height","showFeedback","feedbackDuration","defaultRedactText","onClick","UnifiedTimerManager","title","shortcuts","YAKKL_ZERO_ADDRESS","BuyService","getBuyQuote","currency","cryptoCurrency","quote","cryptoAmount","rate","fees","total","estimatedTime","provider","validUntil","getMockBuyQuote","executeBuyOrder","paymentMethodId","order","orderId","paymentMethod","createdAt","getPaymentMethods","addPaymentMethod","getBuyLimits","max","daily","monthly","getBuyHistory","getSupportedCurrencies","getSupportedCryptoCurrencies","rates","ETH","BTC","USDC","USDT","DAI","networkFee","serviceFee","totalFees","network","service","supportedCurrencies","supportedCryptoCurrencies","limits","canBuy","validateAmount","amt","isNaN","formatCurrency","curr","Intl","NumberFormat","style","crypto","needsEllipsis","formatValue","minimumFractionDigits","maximumFractionDigits","color","content","yakklCombinedTokenStore","TokenService","getTokens","combinedTokens","preview2Tokens","logo","getDefaultIcon","totalValue","totalQuantity","price","change24h","priceChange24h","getTokenColor","getTokenBalance","walletAddress","refreshTokenPrices","iconMap","LINK","UNI","AAVE","COMP","MKR","SUSHI","YFI","PEPE","colorMap","createTokenStore","tokenService","lastUpdate","loadTokens","refresh","refreshPrices","tokenStore","totalPortfolioValue","sum","isLoadingTokens","lastTokenUpdate","performanceData","dayChange","weekChange","monthChange","yearChange","sharpeRatio","diversificationScore","riskProfile","topPerformers","recommendations","formatChange","change","sign","getChangeColor","performer","recommendation","recoveryOptions","hardwareDevices","formatDate","date","option","shards","threshold","device","location","backup","showSendModal","showSwapModal","showReceiveModal","showBuyModal","showUpgradeModal","modalOpen","isModalOpen","tokenList","portfolioValue","refreshAllData","accountStore","import","f","chainStore","resolve","token_store","planStore","loadAccounts","loadChains","loadPlan","handleSend","console","log","uiStore","showTransactionPending","handleSwap","showSuccess","shortAddr","addr","DateTimeFormat","hour","minute","hour12","$$value","ens","username","isTestnet","onComplete","onCancel"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]}