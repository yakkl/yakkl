{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../../../src/routes/(dapp)/dapp/popups/transactions/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n\timport { browser_ext, browserSvelte } from '$lib/common/environment';\n\timport {\n\t\tgetYakklCurrentlySelected,\n\t\tgetMiscStore,\n\t\tyakklDappConnectRequestStore,\n\t\tgetYakklConnectedDomains,\n\t\tgetYakklAccounts,\n\t\tgetSettings\n\t} from '$lib/common/stores';\n\timport {\n\t\tDEFAULT_TITLE,\n\t\tYAKKL_DAPP,\n\t\tETH_BASE_SCA_GAS_UNITS,\n\t\tETH_BASE_EOA_GAS_UNITS\n\t} from '$lib/common/constants';\n\timport { onMount } from 'svelte';\n\timport { page } from '$app/state';\n\timport {\n\t\ttype AccountData,\n\t\ttype BigNumberish,\n\t\ttype TransactionRequest,\n\t\ttype TransactionResponse,\n\t\ttype YakklAccount,\n\t\ttype YakklCurrentlySelected,\n\t\ttype JsonRpcResponse,\n\t\ttype SessionInfo\n\t} from '$lib/common';\n\timport { decryptData } from '$lib/common/encryption';\n\timport { isEncryptedData } from '$lib/common/misc';\n\timport WalletManager from '$lib/managers/WalletManager';\n\timport type { Wallet } from '$lib/managers/Wallet';\n\timport { log } from '$lib/common/logger-wrapper';\n\timport { sessionToken, verifySessionToken } from '$lib/common/auth/session';\n\timport type { BackgroundPendingRequest } from '$lib/extensions/chrome/background';\n\timport Confirmation from '$lib/components/Confirmation.svelte';\n\timport Warning from '$lib/components/Warning.svelte';\n\timport Failed from '$lib/components/Failed.svelte';\n\timport {\n\t\tcreatePortManagerWithStream,\n\t\tPortManagerWithStream\n\t} from '$lib/managers/PortManagerWithStream';\n\timport type { PortDuplexStream } from '$lib/managers/PortStreamManager';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\timport { formatEther } from '$lib/utilities/utilities';\n\timport PincodeVerify from '$lib/components/PincodeVerify.svelte';\n\n\t// State management with Svelte 5 syntax\n\tlet currentlySelected: YakklCurrentlySelected;\n\tlet wallet: Wallet;\n\tlet yakklMiscStore: string;\n\n\tlet showConfirm = $state(false);\n\tlet showSuccess = $state(false);\n\tlet showFailure = $state(false);\n\tlet showSpinner = $state(false);\n\tlet showPincode = $state(false);\n\tlet errorValue = $state('No domain/site name was found. Access to YAKKL® is denied.');\n\n\tlet chainId: number;\n\tlet domain: string = $state('');\n\tlet domainLogo: string = $state('');\n\tlet domainTitle: string = $state('');\n\tlet title: string = $state(DEFAULT_TITLE);\n\tlet method: string;\n\tlet requestId: string | null;\n\tlet message: string = $state('');\n\tlet pinCode: string = $state('');\n\n\tlet transaction: TransactionRequest = $state({} as TransactionRequest);\n\tlet transactionDisplay: any = $state({});\n\tlet gasLimit: BigNumberish = $state(0n);\n\tlet addressApproved = $state(false);\n\tlet tx: TransactionResponse | null = $state(null);\n\n\tlet portManager: PortManagerWithStream | null = null;\n\tlet stream: PortDuplexStream | null = null;\n\n\t// Extract parameters from URL\n\tif (browserSvelte) {\n\t\ttry {\n\t\t\trequestId = page.url.searchParams.get('requestId');\n\t\t\tmethod = page.url.searchParams.get('method') || 'eth_sendTransaction';\n\t\t\t$yakklDappConnectRequestStore = requestId as string;\n\n\t\t\tif (!requestId) {\n\t\t\t\terrorValue = 'No request ID was found. Access to YAKKL® is denied.';\n\t\t\t\tshowFailure = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Error parsing URL parameters:', false, e);\n\t\t\terrorValue = 'Invalid request parameters. Access to YAKKL® is denied.';\n\t\t\tshowFailure = true;\n\t\t}\n\t}\n\n\t// Process incoming message from background\n\tasync function onMessageListener(event: any) {\n\t\ttry {\n\t\t\tif (event.method === 'get_params') {\n\t\t\t\tconst request = event.result as BackgroundPendingRequest;\n\n\t\t\t\tif (!request?.data?.metaData) {\n\t\t\t\t\tawait handleReject('Invalid request data. Access to YAKKL® is denied.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst requestData = request.data;\n\t\t\t\tconst metaData = requestData.metaData.metaData;\n\n\t\t\t\t// Extract domain information\n\t\t\t\tdomainTitle = metaData.title || '';\n\t\t\t\tdomain = metaData.domain || '';\n\t\t\t\tdomainLogo = metaData.icon || '/images/failIcon48x48.png';\n\t\t\t\tmessage = metaData.message || 'Transaction request from ' + domain;\n\t\t\t\ttitle = domainTitle || domain || DEFAULT_TITLE;\n\n\t\t\t\t// Process transaction data\n\t\t\t\tif (requestData.params && requestData.params.length > 0) {\n\t\t\t\t\ttransaction = requestData.params[0] as TransactionRequest;\n\n\t\t\t\t\t// Format transaction for display\n\t\t\t\t\tawait formatTransactionForDisplay();\n\n\t\t\t\t\t// Verify the address is connected\n\t\t\t\t\tawait verifyAddressConnection();\n\t\t\t\t} else {\n\t\t\t\t\tawait handleReject('No transaction data found. Access to YAKKL® is denied.');\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Error processing message:', false, e);\n\t\t\tawait handleReject('An error occurred while processing the request.');\n\t\t}\n\t}\n\n\t// Format transaction for user-friendly display\n\tasync function formatTransactionForDisplay() {\n\t\ttransactionDisplay = {\n\t\t\tfrom: transaction.from,\n\t\t\tto: transaction.to,\n\t\t\tvalue: transaction.quantity ? formatEther(transaction.quantity.toString()) + ' ETH' : '0 ETH',\n\t\t\tdata: transaction.data ? `Data: ${(transaction.data as string).slice(0, 10)}...` : 'No data',\n\t\t\tgasLimit: 'Will be calculated',\n\t\t\testimatedFee: 'Calculating...'\n\t\t};\n\n\t\t// Estimate gas if not provided\n\t\tif (!transaction.gasLimit) {\n\t\t\tconst blockchain = wallet?.getBlockchain();\n\t\t\tif (blockchain?.isSmartContractSupported()) {\n\t\t\t\tconst isSmartContract = await blockchain.isSmartContract(transaction.to as string);\n\t\t\t\tgasLimit = isSmartContract ? ETH_BASE_SCA_GAS_UNITS : ETH_BASE_EOA_GAS_UNITS;\n\n\t\t\t\t// Add extra gas for data\n\t\t\t\tif (transaction.data) {\n\t\t\t\t\tconst dataLength = (transaction.data as string).length - 2; // Remove '0x'\n\t\t\t\t\tgasLimit = BigInt(gasLimit) + BigInt(dataLength * 68);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgasLimit = ETH_BASE_EOA_GAS_UNITS;\n\t\t\t}\n\n\t\t\t// Check for user override\n\t\t\tif (currentlySelected?.shortcuts?.gasLimit) {\n\t\t\t\tgasLimit = currentlySelected.shortcuts.gasLimit;\n\t\t\t}\n\n\t\t\ttransactionDisplay.gasLimit = gasLimit.toString();\n\t\t}\n\t}\n\n\t// Verify the sending address is connected to this domain\n\tasync function verifyAddressConnection() {\n\t\tconst addressToCheck = transaction.from as string;\n\t\tconst connectedDomains = await getYakklConnectedDomains();\n\n\t\tfor (const domainInfo of connectedDomains) {\n\t\t\tif (domainInfo.domain === domain) {\n\t\t\t\tconst connectedAddress = domainInfo.addresses.find(\n\t\t\t\t\t(addr) => addr.address.toLowerCase() === addressToCheck.toLowerCase()\n\t\t\t\t);\n\n\t\t\t\tif (connectedAddress) {\n\t\t\t\t\taddressApproved = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!addressApproved) {\n\t\t\terrorValue = `The address ${addressToCheck} is not connected to ${domain}. Please connect the address first.`;\n\t\t\tshowFailure = true;\n\t\t}\n\t}\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tconst settings = await getSettings();\n\t\t\t\tif (!settings.init || !settings.legal.termsAgreed) {\n\t\t\t\t\terrorValue =\n\t\t\t\t\t\t\"You must register and agree to the terms of service before using YAKKL®. Click on 'Open Wallet' to register.\";\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcurrentlySelected = await getYakklCurrentlySelected();\n\t\t\t\tyakklMiscStore = getMiscStore();\n\t\t\t\tchainId = currentlySelected.shortcuts.chainId as number;\n\n\t\t\t\t// Initialize wallet\n\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t['Ethereum'],\n\t\t\t\t\tchainId,\n\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t);\n\n\t\t\t\t// Request session port\n\t\t\t\tconst sessionInfo = (await browser_ext.runtime.sendMessage({\n\t\t\t\t\ttype: 'REQUEST_SESSION_PORT',\n\t\t\t\t\trequestId\n\t\t\t\t})) as SessionInfo;\n\n\t\t\t\tif (!sessionInfo?.success) {\n\t\t\t\t\tlog.warn('Failed to verify session port. No response received. Using YAKKL_DAPP.');\n\t\t\t\t}\n\n\t\t\t\t// Create port connection\n\t\t\t\tportManager = createPortManagerWithStream(sessionInfo.portName || YAKKL_DAPP);\n\t\t\t\tportManager.setRequestId(requestId);\n\n\t\t\t\tconst success = await portManager.createPort();\n\t\t\t\tif (!success) {\n\t\t\t\t\terrorValue = 'Failed to connect to background service.';\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tstream = portManager.getStream();\n\t\t\t\tif (!stream) {\n\t\t\t\t\terrorValue = 'Communication stream unavailable.';\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set up message listener and request params\n\t\t\t\tstream.on('data', onMessageListener);\n\t\t\t\tstream.write({ method: 'get_params', id: requestId });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Initialization error:', false, e);\n\t\t\terrorValue = 'Failed to initialize transaction approval.';\n\t\t\tshowFailure = true;\n\t\t}\n\t});\n\n\t// Handle user rejection\n\tasync function handleReject(message: string = 'User rejected the request.') {\n\t\ttry {\n\t\t\tshowConfirm = false;\n\t\t\tshowFailure = false;\n\t\t\tshowSuccess = false;\n\n\t\t\tif (stream) {\n\t\t\t\tstream.write({\n\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: requestId,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 4001,\n\t\t\t\t\t\tmessage\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Error sending rejection:', false, e);\n\t\t} finally {\n\t\t\tawait close();\n\t\t}\n\t}\n\n\t// Handle transaction approval\n\tasync function handleApprove() {\n\t\ttry {\n\t\t\tshowConfirm = false;\n\n\t\t\t// Verify session token\n\t\t\tif (!verifySessionToken($sessionToken)) {\n\t\t\t\tawait handleReject('Session expired. Please log in again.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// // Verify credentials\n\t\t\t// if (!pinCode) {\n\t\t\t//   await handleReject(\"Please provide your pin code.\");\n\t\t\t//   return;\n\t\t\t// }\n\n\t\t\t// const profile = await verify(userName.toLowerCase().trim().replace('.nfs.id', '') + '.nfs.id' + password);\n\t\t\t// if (!profile) {\n\t\t\t//   await handleReject(\"Invalid credentials.\");\n\t\t\t//   return;\n\t\t\t// }\n\n\t\t\tshowSpinner = true;\n\n\t\t\t// Get the account's private key\n\t\t\tconst accounts = await getYakklAccounts();\n\t\t\tconst account = accounts.find(\n\t\t\t\t(acc) => acc.address.toLowerCase() === transaction.from?.toLowerCase()\n\t\t\t) as YakklAccount;\n\n\t\t\tif (!account) {\n\t\t\t\tawait handleReject('Account not found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Decrypt account data if needed\n\t\t\tif (isEncryptedData(account.data)) {\n\t\t\t\taccount.data = (await decryptData(account.data, yakklMiscStore)) as AccountData;\n\t\t\t}\n\n\t\t\tif (!(account.data as AccountData).privateKey) {\n\t\t\t\tawait handleReject('Account key not available.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare transaction\n\t\t\ttransaction.gasLimit = gasLimit;\n\t\t\ttransaction.nonce = -1; // Let provider set the nonce\n\t\t\ttransaction.type = 2; // EIP-1559\n\t\t\ttransaction.chainId = chainId;\n\n\t\t\t// Send transaction\n\t\t\ttx = await wallet.sendTransaction(transaction);\n\n\t\t\tif (tx?.hash) {\n\t\t\t\t// Send successful response\n\t\t\t\tif (stream) {\n\t\t\t\t\tconst response: JsonRpcResponse = {\n\t\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\tid: requestId,\n\t\t\t\t\t\tresult: tx.hash\n\t\t\t\t\t};\n\t\t\t\t\tstream.write(response);\n\t\t\t\t}\n\n\t\t\t\t// Wait for confirmation\n\t\t\t\ttx.wait()\n\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\tshowSuccess = true;\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tawait close();\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error: any) => {\n\t\t\t\t\t\terrorValue = `Transaction failed: ${error.message}`;\n\t\t\t\t\t\tshowFailure = true;\n\t\t\t\t\t\tshowSpinner = false;\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthrow new Error('No transaction hash received');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Transaction error:', false, e);\n\t\t\terrorValue = e instanceof Error ? e.message : 'Transaction failed';\n\t\t\tshowFailure = true;\n\t\t\tshowSpinner = false;\n\t\t}\n\t}\n\n\t// Close the window\n\tasync function close() {\n\t\tif (browserSvelte) {\n\t\t\tif (portManager) {\n\t\t\t\ttry {\n\t\t\t\t\tawait portManager.waitForIdle(1500);\n\t\t\t\t\tportManager.disconnect();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlog.warn('Port did not go idle in time', false, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tshowSpinner = false;\n\t\t\tsafeLogout();\n\t\t}\n\t}\n\n\tfunction handleConfirm() {\n\t\tshowConfirm = true;\n\t}\n</script>\n\n<svelte:head>\n\t<title>{title}</title>\n</svelte:head>\n\n<!-- <Warning bind:show={showFailure} title=\"Error\" value={errorValue} /> -->\n<Failed bind:show={showFailure} title=\"Failed!\" content={errorValue} onReject={handleReject} />\n<Confirmation\n\tbind:show={showConfirm}\n\ttitle=\"Approve Transaction\"\n\tmessage=\"Are you sure you want to send this transaction? This action cannot be undone.\"\n\tonConfirm={handleApprove}\n/>\n<PincodeVerify bind:show={showPincode} onVerified={handleApprove} />\n\n<!-- <div class=\"modal\" class:modal-open={showConfirm}>\n  <div class=\"modal-box relative\">\n    <div class=\"border border-base-content rounded-md m-2 text-center p-1\">\n      <h1 class=\"font-bold\">Transaction Approval</h1>\n      <p class=\"pt-4\">Please enter your pin code to approve this transaction to <span class=\"font-bold underline\">{domain}</span>.</p>\n    </div>\n    <div class=\"form-control w-full\">\n      <input\n        type=\"password\"\n        placeholder=\"Pin code\"\n        class=\"input input-bordered input-primary w-full\"\n        bind:value={pinCode}\n        autocomplete=\"off\"\n        required\n      />\n    </div>\n    <div class=\"modal-action\">\n      <button class=\"btn\" onclick={() => { showConfirm = false; }}>Reject</button>\n      <button class=\"btn btn-primary\" onclick={handleApprove}>Approve</button>\n    </div>\n  </div>\n</div> -->\n\n<div class=\"modal\" class:modal-open={showSuccess}>\n\t<div class=\"modal-box relative\">\n\t\t<h3 class=\"text-lg font-bold\">Transaction Submitted!</h3>\n\t\t<p class=\"py-4\">Your transaction has been submitted to the blockchain.</p>\n\t\t<p class=\"text-sm\">Transaction Hash: {tx?.hash}</p>\n\t\t<div class=\"modal-action\">\n\t\t\t<button class=\"btn\" onclick={close}>Close</button>\n\t\t</div>\n\t</div>\n</div>\n\n{#if !showConfirm && !showSuccess && !showFailure}\n\t<div class=\"flex flex-col h-full max-h-screen overflow-hidden\">\n\t\t<!-- Header -->\n\t\t<div class=\"p-4 border-b border-base-300 flex-shrink-0\">\n\t\t\t<div class=\"flex items-center justify-between\">\n\t\t\t\t<div class=\"flex items-center gap-2 min-w-0\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tcrossorigin=\"anonymous\"\n\t\t\t\t\t\tsrc={domainLogo}\n\t\t\t\t\t\talt=\"Dapp logo\"\n\t\t\t\t\t\tclass=\"w-8 h-8 rounded-full flex-shrink-0\"\n\t\t\t\t\t/>\n\t\t\t\t\t<span class=\"font-semibold truncate\">{domainTitle || domain}</span>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tonclick={() => handleReject()}\n\t\t\t\t\tclass=\"btn btn-ghost btn-sm flex-shrink-0\"\n\t\t\t\t\taria-label=\"Close\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tclass=\"h-5 w-5\"\n\t\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\t\td=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n\t\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Content -->\n\t\t<div class=\"flex-1 p-6 overflow-hidden flex flex-col\">\n\t\t\t<div class=\"text-center mb-4 flex-shrink-0\">\n\t\t\t\t<h2 class=\"text-xl font-bold mb-2\">Transaction Request</h2>\n\t\t\t\t<p class=\"text-base-content/80\">{message}</p>\n\t\t\t</div>\n\n\t\t\t<div class=\"overflow-y-auto flex-1 min-h-0 mb-4\">\n\t\t\t\t<div class=\"bg-base-200 rounded-lg p-4 space-y-3\">\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">From:</span>\n\t\t\t\t\t\t<span class=\"font-mono text-sm\">{transactionDisplay.from}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">To:</span>\n\t\t\t\t\t\t<span class=\"font-mono text-sm\">{transactionDisplay.to}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">Value:</span>\n\t\t\t\t\t\t<span class=\"font-bold text-primary\">{transactionDisplay.value}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">Gas Limit:</span>\n\t\t\t\t\t\t<span>{transactionDisplay.gasLimit}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{#if transaction.data}\n\t\t\t\t\t\t<div class=\"flex justify-between items-center\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Data:</span>\n\t\t\t\t\t\t\t<span class=\"text-sm truncate max-w-[200px]\">{transactionDisplay.data}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\n\t\t\t\t{#if !addressApproved}\n\t\t\t\t\t<div class=\"alert alert-error mt-4\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\tclass=\"stroke-current shrink-0 h-6 w-6\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t><path\n\t\t\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\t\t\t\td=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n\t\t\t\t\t\t\t/></svg\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<span>Address not connected to this domain</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t{#if showSpinner}\n\t\t\t\t<div class=\"flex flex-col items-center justify-center p-4\">\n\t\t\t\t\t<div class=\"loading loading-spinner loading-lg\"></div>\n\t\t\t\t\t<p class=\"mt-2 font-bold animate-pulse\">Processing transaction...</p>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Footer -->\n\t\t<div class=\"p-4 border-t border-base-300 flex-shrink-0\">\n\t\t\t<div class=\"flex gap-4 justify-end\">\n\t\t\t\t<button onclick={() => handleReject()} class=\"btn btn-outline\"> Reject </button>\n\t\t\t\t<button\n\t\t\t\t\tonclick={handleConfirm}\n\t\t\t\t\tclass=\"btn btn-primary\"\n\t\t\t\t\tdisabled={!addressApproved || showSpinner}\n\t\t\t\t>\n\t\t\t\t\tApprove\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{/if}\n\n<style>\n\t/* Smooth transitions */\n\t.btn {\n\t\ttransition: all 0.2s ease;\n\t}\n\n\t.btn:hover:not(:disabled) {\n\t\ttransform: translateY(-1px);\n\t}\n\n\t/* Modal backdrop */\n\t.modal-open .modal-box {\n\t\tanimation: modal-pop 0.3s ease-out;\n\t}\n\n\t@keyframes modal-pop {\n\t\t0% {\n\t\t\ttransform: scale(0.9);\n\t\t\topacity: 0;\n\t\t}\n\t\t100% {\n\t\t\ttransform: scale(1);\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t/* Loading animation */\n\t.loading {\n\t\tdisplay: inline-block;\n\t\twidth: 2rem;\n\t\theight: 2rem;\n\t\tborder: 3px solid rgba(0, 0, 0, 0.1);\n\t\tborder-radius: 50%;\n\t\tborder-top-color: currentColor;\n\t\tanimation: spin 1s ease-in-out infinite;\n\t}\n\n\t@keyframes spin {\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n</style>\n"],"names":["wallet","yakklMiscStore","showConfirm","showSuccess","showFailure","showSpinner","showPincode","errorValue","chainId","domain","domainLogo","title","DEFAULT_TITLE","method","requestId","message","transaction","transactionDisplay","gasLimit","tx","stream","browserSvelte","page","url","searchParams","get","$.store_set","yakklDappConnectRequestStore","e","log","error","async","handleReject","close","handleApprove","verifySessionToken","$.store_get","$$store_subs","sessionToken","accounts","getYakklAccounts","account","find","acc","address","toLowerCase","from","isEncryptedData","data","decryptData","privateKey","nonce","type","sendTransaction","hash","wait","then","setTimeout","catch","Error","safeLogout","$$value","$$payload","out","$.escape","to","value","$.attr"],"mappings":"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"}