{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../../src/lib/stores/eip6963.ts","../../../../../../../../src/lib/components/EIP6963Provider.svelte"],"sourcesContent":["import { get, writable } from 'svelte/store';\nimport type { EIP6963ProviderDetail } from '$lib/managers/providers/network/ethereum_provider/eip-types';\n\n// Store for available EIP-6963 providers\nexport const eip6963Providers = writable<EIP6963ProviderDetail[]>([]);\n\n// Store for the currently selected provider\nexport const selectedEIP6963Provider = writable<EIP6963ProviderDetail | null>(null);\n\n// Function to request providers\nexport function requestEIP6963Providers() {\n\twindow.dispatchEvent(new Event('eip6963:requestProvider'));\n}\n\n// Function to select a provider\nexport function selectEIP6963Provider(provider: EIP6963ProviderDetail) {\n\tselectedEIP6963Provider.set(provider);\n}\n\n// Function to get accounts from the selected provider\nexport async function getEIP6963Accounts() {\n\tconst provider = get(selectedEIP6963Provider);\n\tif (!provider) {\n\t\tthrow new Error('No provider selected');\n\t}\n\treturn await provider.provider.request({ method: 'eth_accounts' });\n}\n\n// Function to get chain ID from the selected provider\nexport async function getEIP6963ChainId() {\n\tconst provider = get(selectedEIP6963Provider);\n\tif (!provider) {\n\t\tthrow new Error('No provider selected');\n\t}\n\treturn await provider.provider.request({ method: 'eth_chainId' });\n}\n\n// Function to request accounts from the selected provider\nexport async function requestEIP6963Accounts() {\n\tconst provider = get(selectedEIP6963Provider);\n\tif (!provider) {\n\t\tthrow new Error('No provider selected');\n\t}\n\treturn await provider.provider.request({ method: 'eth_requestAccounts' });\n}\n","<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport {\n\t\teip6963Providers,\n\t\tselectedEIP6963Provider,\n\t\trequestEIP6963Providers,\n\t\tselectEIP6963Provider\n\t} from '$lib/stores/eip6963';\n\timport type { EIP6963ProviderDetail } from '$lib/managers/providers/network/ethereum_provider/eip-types';\n\timport { log } from '$lib/managers/Logger';\n\n\tlet accounts: string[] = [];\n\tlet chainId: string | null = null;\n\tlet networkVersion: string | null = null;\n\tlet error: string | null = null;\n\n\t// Helper function to format chainId for display\n\tfunction formatChainId(chainIdHex: string): string {\n\t\ttry {\n\t\t\t// If it's already a decimal string, return as is\n\t\t\tif (!chainIdHex.startsWith('0x')) return chainIdHex;\n\n\t\t\t// Convert hex to decimal\n\t\t\tconst decimal = parseInt(chainIdHex, 16);\n\t\t\treturn `${chainIdHex} (${decimal})`;\n\t\t} catch (e) {\n\t\t\tlog.error('Error formatting chainId', true, e);\n\t\t\treturn chainIdHex;\n\t\t}\n\t}\n\n\tasync function updateProviderState(provider: EIP6963ProviderDetail) {\n\t\ttry {\n\t\t\t// Get initial state\n\t\t\tconst [initialAccounts, initialChainId, initialNetVersion] = await Promise.all([\n\t\t\t\tprovider.provider.request({ method: 'eth_accounts' }),\n\t\t\t\tprovider.provider.request({ method: 'eth_chainId' }),\n\t\t\t\tprovider.provider.request({ method: 'net_version' })\n\t\t\t]);\n\n\t\t\tlog.debug('Initial provider state', true, {\n\t\t\t\taccounts: initialAccounts,\n\t\t\t\tchainId: initialChainId,\n\t\t\t\tnetworkVersion: initialNetVersion\n\t\t\t});\n\n\t\t\taccounts = initialAccounts as string[];\n\t\t\tchainId = initialChainId as string;\n\t\t\tnetworkVersion = initialNetVersion as string;\n\t\t} catch (e) {\n\t\t\tlog.error('Error getting initial provider state', true, e);\n\t\t}\n\t}\n\n\tasync function handleSelectProvider(provider: EIP6963ProviderDetail) {\n\t\ttry {\n\t\t\tlog.debug('Selecting provider', true, { provider: provider.info.name });\n\t\t\tselectEIP6963Provider(provider);\n\n\t\t\t// Update initial state\n\t\t\tawait updateProviderState(provider);\n\n\t\t\t// Request accounts (this will trigger permission request)\n\t\t\ttry {\n\t\t\t\tconst requestedAccounts = (await provider.provider.request({\n\t\t\t\t\tmethod: 'eth_requestAccounts'\n\t\t\t\t})) as string[];\n\t\t\t\tlog.debug('Requested accounts received', true, { accounts: requestedAccounts });\n\t\t\t\taccounts = requestedAccounts;\n\t\t\t} catch (e) {\n\t\t\t\tlog.error('Error requesting accounts', true, e);\n\t\t\t\t// Don't throw here - we still want to show the read-only state\n\t\t\t}\n\n\t\t\t// Listen for chain changes\n\t\t\tprovider.provider.on('chainChanged', (newChainId: string) => {\n\t\t\t\tlog.debug('Chain changed', true, { newChainId });\n\t\t\t\tchainId = newChainId;\n\t\t\t});\n\n\t\t\t// Listen for account changes\n\t\t\tprovider.provider.on('accountsChanged', (newAccounts: string[]) => {\n\t\t\t\tlog.debug('Accounts changed', true, { newAccounts });\n\t\t\t\taccounts = newAccounts;\n\t\t\t});\n\t\t} catch (e) {\n\t\t\terror = e instanceof Error ? e.message : 'Failed to connect to provider';\n\t\t\tlog.error('Error selecting provider', true, e);\n\t\t}\n\t}\n\n\tonMount(() => {\n\t\t// Listen for provider announcements\n\t\tconst handleAnnounce = (event: CustomEvent<EIP6963ProviderDetail>) => {\n\t\t\tconst provider = event.detail;\n\t\t\tlog.debug('Provider announced', true, { provider: provider.info.name });\n\t\t\teip6963Providers.update((providers) => {\n\t\t\t\t// Update existing provider or add new one\n\t\t\t\tconst existingIndex = providers.findIndex((p) => p.info.uuid === provider.info.uuid);\n\t\t\t\tif (existingIndex >= 0) {\n\t\t\t\t\tproviders[existingIndex] = provider;\n\t\t\t\t} else {\n\t\t\t\t\tproviders = [...providers, provider];\n\t\t\t\t}\n\t\t\t\treturn providers;\n\t\t\t});\n\n\t\t\t// If this is the selected provider, update its state\n\t\t\tif ($selectedEIP6963Provider?.info.uuid === provider.info.uuid) {\n\t\t\t\tupdateProviderState(provider);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener('eip6963:announceProvider', handleAnnounce as EventListener);\n\t\trequestEIP6963Providers();\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('eip6963:announceProvider', handleAnnounce as EventListener);\n\t\t};\n\t});\n</script>\n\n<div class=\"p-4 max-w-3xl mx-auto\">\n\t<h2 class=\"text-2xl font-semibold mb-4\">Available Wallets</h2>\n\n\t{#if $eip6963Providers.length === 0}\n\t\t<p class=\"text-gray-600\">No wallets available. Please install a compatible wallet.</p>\n\t{:else}\n\t\t<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 my-4\">\n\t\t\t{#each $eip6963Providers as provider}\n\t\t\t\t<div class=\"flex items-center p-4 border border-gray-200 rounded-lg bg-white shadow-sm\">\n\t\t\t\t\t<img src={provider.info.icon} alt={provider.info.name} class=\"w-8 h-8\" />\n\t\t\t\t\t<div class=\"ml-4 flex-grow\">\n\t\t\t\t\t\t<h3 class=\"text-base font-medium\">{provider.info.name}</h3>\n\t\t\t\t\t\t<p class=\"text-sm text-gray-500 mt-1\">ID: {provider.info.uuid}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ton:click={() => handleSelectProvider(provider)}\n\t\t\t\t\t\tclass=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors\"\n\t\t\t\t\t>\n\t\t\t\t\t\tSelect\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t{/if}\n\n\t{#if $selectedEIP6963Provider}\n\t\t<div class=\"mt-8 p-4 border border-gray-200 rounded-lg bg-gray-50\">\n\t\t\t<h3 class=\"text-lg font-medium mb-2\">Connected Provider</h3>\n\t\t\t<p class=\"text-gray-700\">Name: {$selectedEIP6963Provider.info.name}</p>\n\t\t\t{#if accounts.length > 0}\n\t\t\t\t<p class=\"text-gray-700 mt-1\">Accounts: {accounts.join(', ')}</p>\n\t\t\t{/if}\n\t\t\t{#if chainId}\n\t\t\t\t<p class=\"text-gray-700 mt-1\">Chain ID: {formatChainId(chainId)}</p>\n\t\t\t{/if}\n\t\t\t{#if networkVersion}\n\t\t\t\t<p class=\"text-gray-700 mt-1\">Network Version: {networkVersion}</p>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n\n\t{#if error}\n\t\t<div class=\"mt-4 p-4 bg-red-50 text-red-700 rounded\">\n\t\t\t{error}\n\t\t</div>\n\t{/if}\n</div>\n"],"names":["eip6963Providers","writable","selectedEIP6963Provider","accounts","$.store_get","$$store_subs","length","provider","each_array","$$index","info","icon","name","uuid","$$payload","out","$.escape","join"],"mappings":"qWAIa,MAAAA,iBAAmBC,SAAkC,IAGrD,MAAAC,wBAA0BD,SAAuC,+JCIzE,IAAAE,SAAA,gQAkHmBC,GAAAA,UAAAC,eAAA,CAAA,EAAA,oBAAAL,kBAAAM,SAAW,EAAC,4jBAIL,IAAAC,SAAQC,WAAAC,wLAExBF,SAASG,KAAKC,mBAAWJ,SAASG,KAAKE,oRAEbL,SAASG,KAAKE,wJACNL,SAASG,KAAKG,+0BAgBHC,UAAAC,KAAA,SAAAC,YAAAZ,UAAAC,eAAA,GAAA,2BAAAH,yBAAAQ,KAAKE,6CACzD,GAAAT,SAASG,OAAS,EAAC,2JACkBH,SAASc,KAAK"}