{"version":3,"file":"_page.svelte.js","sources":["../../../../../../../../../src/lib/extensions/chrome/signingClient.ts","../../../../../../../../../src/routes/(dapp)/dapp/popups/sign/+page.svelte"],"sourcesContent":["import type { SigningRequest } from './signingHandler';\nimport { log } from '$lib/managers/Logger';\nimport { browser_ext, browserSvelte } from '$lib/common/environment';\nimport { sessionToken } from '$lib/common/auth/session';\nimport { get } from 'svelte/store';\nimport type { YakklResponse } from '$lib/common/interfaces';\n\n// interface SigningResponse {\n//   result?: any;\n//   error?: {\n//     message: string;\n//   };\n// }\n\nexport async function requestSigning(\n\trequestId: string,\n\ttype: string,\n\tparams: any[],\n\ttoken: string\n): Promise<YakklResponse> {\n\tif (typeof window === 'undefined') {\n\t\tthrow new Error('This function can only be called in a browser environment');\n\t}\n\n\tif (!requestId || !type || !params || !token) {\n\t\tthrow new Error('Missing required parameters for signing request');\n\t}\n\n\tlog.info('requestSigning - Sending request to background', false, {\n\t\trequestId,\n\t\ttype,\n\t\tparams,\n\t\ttoken\n\t});\n\n\ttry {\n\t\tconst response = (await browser_ext.runtime.sendMessage({\n\t\t\ttype,\n\t\t\trequestId,\n\t\t\tparams,\n\t\t\ttoken\n\t\t})) as YakklResponse;\n\n\t\tlog.info('requestSigning - Received response from background', false, { response });\n\n\t\tif (!response) {\n\t\t\tthrow new Error('No response received from background script');\n\t\t}\n\n\t\tif (response.error) {\n\t\t\tthrow new Error(response.error.message || 'Unknown error occurred');\n\t\t}\n\n\t\treturn response;\n\t} catch (error) {\n\t\tlog.error('requestSigning - Error sending request to background', false, error);\n\t\tthrow error;\n\t}\n}\n","<script lang=\"ts\">\n\timport { browser_ext, browserSvelte } from '$lib/common/environment';\n\timport { page } from '$app/state';\n\timport {\n\t\tgetYakklCurrentlySelected,\n\t\tgetMiscStore,\n\t\tyakklDappConnectRequestStore,\n\t\tgetYakklAccounts,\n\t\tgetSettings\n\t} from '$lib/common/stores';\n\timport {\n\t\ttype YakklCurrentlySelected,\n\t\ttype AccountData,\n\t\ttype TransactionRequest,\n\t\ttype YakklAccount\n\t} from '$lib/common';\n\timport {\n\t\tDEFAULT_TITLE,\n\t\tYAKKL_DAPP,\n\t\tETH_BASE_SCA_GAS_UNITS,\n\t\tETH_BASE_EOA_GAS_UNITS\n\t} from '$lib/common/constants';\n\timport { onMount } from 'svelte';\n\timport { log } from '$lib/common/logger-wrapper';\n\timport type { Runtime } from 'webextension-polyfill';\n\timport type { JsonRpcResponse, SessionInfo } from '$lib/common/interfaces';\n\timport type { BackgroundPendingRequest } from '$lib/extensions/chrome/background';\n\timport Confirmation from '$lib/components/Confirmation.svelte';\n\timport { requestSigning } from '$lib/extensions/chrome/signingClient';\n\timport Copyright from '$lib/components/Copyright.svelte';\n\timport Warning from '$lib/components/Warning.svelte';\n\timport Failed from '$lib/components/Failed.svelte';\n\timport {\n\t\tcreatePortManagerWithStream,\n\t\tPortManagerWithStream\n\t} from '$lib/managers/PortManagerWithStream';\n\timport type { PortDuplexStream } from '$lib/managers/PortStreamManager';\n\timport { sessionToken, verifySessionToken } from '$lib/common/auth/session';\n\timport { safeLogout } from '$lib/common/safeNavigate';\n\timport { decryptData } from '$lib/common/encryption';\n\timport { isEncryptedData } from '$lib/common/misc';\n\timport WalletManager from '$lib/managers/WalletManager';\n\timport type { Wallet } from '$lib/managers/Wallet';\n\timport { formatEther } from '$lib/utilities/utilities';\n\n\ttype RuntimePort = Runtime.Port | undefined;\n\n\tlet currentlySelected: YakklCurrentlySelected;\n\tlet yakklMiscStore: string;\n\tlet wallet: Wallet;\n\n\tlet showConfirm = $state(false);\n\tlet showSuccess = $state(false);\n\tlet showFailure = $state(false);\n\tlet errorValue = $state('No domain/site name was found. Access to YAKKL® is denied.');\n\n\tlet domain: string = $state('');\n\tlet domainLogo: string = $state('');\n\tlet domainTitle: string = $state('');\n\tlet title: string = $state(DEFAULT_TITLE);\n\tlet request: BackgroundPendingRequest;\n\tlet method: string = $state('');\n\tlet requestId: string | null;\n\tlet message: any = $state('');\n\tlet address: string = $state('');\n\tlet signedData: any;\n\tlet chainId: number;\n\n\tlet params: any[] = $state([]);\n\n\tlet personal_sign = {\n\t\tdataToSign: '',\n\t\taddress: '',\n\t\tdescription: ''\n\t};\n\n\tinterface SignTypedData {\n\t\taddress: string;\n\t\tdataToSign: string | Record<string, any>;\n\t}\n\n\tlet signTypedData_v3v4: SignTypedData = {\n\t\taddress: '',\n\t\tdataToSign: ''\n\t};\n\n\t// For eth_signTransaction\n\tlet transaction: TransactionRequest = $state({} as TransactionRequest);\n\tlet transactionDisplay: any = $state({});\n\tlet gasLimit: bigint = $state(0n);\n\n\tlet messageValue;\n\tlet pass = false;\n\n\tlet portManager: PortManagerWithStream | null = null;\n\tlet stream: PortDuplexStream | null = null;\n\n\tif (browserSvelte) {\n\t\ttry {\n\t\t\trequestId = page.url.searchParams.get('requestId');\n\t\t\tmethod = (page.url.searchParams.get('method') as string) ?? '';\n\t\t\t$yakklDappConnectRequestStore = requestId as string;\n\n\t\t\tif (requestId) {\n\t\t\t\tpass = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\thandleReject('No requestId or method was found. Access to YAKKL® is denied.');\n\t\t}\n\t}\n\n\t// Format transaction for user-friendly display\n\tasync function formatTransactionForDisplay() {\n\t\ttransactionDisplay = {\n\t\t\tfrom: transaction.from,\n\t\t\tto: transaction.to,\n\t\t\tvalue: transaction.quantity ? formatEther(transaction.quantity.toString()) + ' ETH' : '0 ETH',\n\t\t\tdata: transaction.data ? `Data: ${(transaction.data as string).slice(0, 10)}...` : 'No data',\n\t\t\tgasLimit: 'Will be calculated',\n\t\t\testimatedFee: 'Calculating...'\n\t\t};\n\n\t\t// Estimate gas if not provided\n\t\tif (!transaction.gasLimit) {\n\t\t\tconst blockchain = wallet?.getBlockchain();\n\t\t\tif (blockchain?.isSmartContractSupported()) {\n\t\t\t\tconst isSmartContract = await blockchain.isSmartContract(transaction.to as string);\n\t\t\t\tgasLimit = isSmartContract\n\t\t\t\t\t? BigInt(ETH_BASE_SCA_GAS_UNITS)\n\t\t\t\t\t: BigInt(ETH_BASE_EOA_GAS_UNITS);\n\n\t\t\t\t// Add extra gas for data\n\t\t\t\tif (transaction.data) {\n\t\t\t\t\tconst dataLength = (transaction.data as string).length - 2;\n\t\t\t\t\tgasLimit = BigInt(gasLimit) + BigInt(dataLength * 68);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgasLimit = BigInt(ETH_BASE_EOA_GAS_UNITS);\n\t\t\t}\n\n\t\t\t// Check for user override\n\t\t\tif (currentlySelected?.shortcuts?.gasLimit) {\n\t\t\t\tgasLimit = BigInt(currentlySelected.shortcuts.gasLimit);\n\t\t\t}\n\n\t\t\ttransactionDisplay.gasLimit = gasLimit.toString();\n\t\t}\n\t}\n\n\tasync function onMessageListener(event: any) {\n\t\ttry {\n\t\t\tif (!domainLogo) domainLogo = '/images/failIcon48x48.png';\n\n\t\t\tif (event.method === 'get_params') {\n\t\t\t\trequest = event.result;\n\t\t\t\tif (!request || !request.data) {\n\t\t\t\t\treturn await handleReject('No request was found. Access to YAKKL® is denied.');\n\t\t\t\t}\n\n\t\t\t\tconst requestData = request.data;\n\t\t\t\tif (\n\t\t\t\t\t!requestData ||\n\t\t\t\t\t!requestData.params ||\n\t\t\t\t\t!requestData.params[0] ||\n\t\t\t\t\t!requestData.metaData\n\t\t\t\t) {\n\t\t\t\t\treturn await handleReject('Invalid request data. Access to YAKKL® is denied.');\n\t\t\t\t}\n\n\t\t\t\tif (!requestData.metaData.metaData.isConnected) {\n\t\t\t\t\treturn await handleReject(\n\t\t\t\t\t\t'Domain is not connected. Connect to {domain} first via requestAccounts. Access to YAKKL® is denied.'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdomainTitle = requestData.metaData.metaData.title;\n\t\t\t\tdomain = requestData.metaData.metaData.domain;\n\t\t\t\tdomainLogo = requestData.metaData.metaData.icon;\n\t\t\t\tmessage =\n\t\t\t\t\trequestData.metaData.metaData.message ??\n\t\t\t\t\t'Nothing was passed to explain the intent of this approval. Be mindful of this request!';\n\t\t\t\tparams = requestData.params ?? [];\n\n\t\t\t\tif (!Array.isArray(params)) {\n\t\t\t\t\tparams = [params];\n\t\t\t\t}\n\n\t\t\t\tif (!requestId) requestId = requestData?.id ?? null;\n\t\t\t\tif (!requestId) {\n\t\t\t\t\treturn await handleReject('No request ID was found. Access to YAKKL® is denied.');\n\t\t\t\t}\n\n\t\t\t\ttitle = domainTitle || domain || DEFAULT_TITLE;\n\n\t\t\t\tlet data;\n\t\t\t\tswitch (method) {\n\t\t\t\t\tcase 'personal_sign':\n\t\t\t\t\t\tpersonal_sign.dataToSign = params[0];\n\t\t\t\t\t\tpersonal_sign.address = address = params[1];\n\t\t\t\t\t\tpersonal_sign.description = message;\n\t\t\t\t\t\tlog.info('Sign: personal_sign:', false, personal_sign);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'eth_signTypedData_v4':\n\t\t\t\t\t\tlog.info('Sign: eth_signTypedData_v4:', false, params);\n\t\t\t\t\t\tsignTypedData_v3v4.address = address = params[0];\n\t\t\t\t\t\tsignTypedData_v3v4.dataToSign = params[1];\n\t\t\t\t\t\tif (typeof signTypedData_v3v4.dataToSign === 'string') {\n\t\t\t\t\t\t\tdata = JSON.parse(signTypedData_v3v4.dataToSign);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdata = signTypedData_v3v4.dataToSign;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmessage = data?.message?.contents || data;\n\t\t\t\t\t\tlog.info('Sign: eth_signTypedData_v4:', false, { data, message });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'eth_signTransaction':\n\t\t\t\t\t\t// Handle transaction signing\n\t\t\t\t\t\ttransaction = params[0] as TransactionRequest;\n\t\t\t\t\t\taddress = transaction.from as string;\n\n\t\t\t\t\t\tif (!wallet) {\n\t\t\t\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t\t\t\t['Ethereum'],\n\t\t\t\t\t\t\t\tchainId,\n\t\t\t\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait formatTransactionForDisplay();\n\t\t\t\t\t\tmessage = `Sign transaction from ${transaction.from} to ${transaction.to}`;\n\t\t\t\t\t\tlog.info('Sign: eth_signTransaction:', false, transaction);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmessageValue = 'No message request was passed in. Error.';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\tawait handleReject(\n\t\t\t\t'An error occurred while processing the request. Access to YAKKL® is denied.'\n\t\t\t);\n\t\t}\n\t}\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tlog.info('Dapp - sign page mounted:', false);\n\n\t\t\t\tconst settings = await getSettings();\n\t\t\t\tif (!settings.init || !settings.legal.termsAgreed) {\n\t\t\t\t\terrorValue =\n\t\t\t\t\t\t\"You must register and agree to the terms of service before using YAKKL®. Click on 'Open Wallet' to register.\";\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcurrentlySelected = await getYakklCurrentlySelected();\n\t\t\t\tyakklMiscStore = getMiscStore();\n\t\t\t\tchainId = currentlySelected.shortcuts.chainId as number;\n\n\t\t\t\t// Initialize wallet for eth_signTransaction\n\t\t\t\tif (method === 'eth_signTransaction') {\n\t\t\t\t\twallet = WalletManager.getInstance(\n\t\t\t\t\t\t['Alchemy'],\n\t\t\t\t\t\t['Ethereum'],\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\timport.meta.env.VITE_ALCHEMY_API_KEY_PROD\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst sessionInfo = (await browser_ext.runtime.sendMessage({\n\t\t\t\t\ttype: 'REQUEST_SESSION_PORT',\n\t\t\t\t\trequestId\n\t\t\t\t})) as SessionInfo;\n\n\t\t\t\tlog.info('Received session info:', false, sessionInfo);\n\n\t\t\t\tif (!sessionInfo || !sessionInfo.success) {\n\t\t\t\t\tlog.warn('Failed to verify session port. No response received. Using YAKKL_DAPP.');\n\t\t\t\t}\n\n\t\t\t\tportManager = createPortManagerWithStream(sessionInfo?.portName ?? YAKKL_DAPP);\n\t\t\t\tportManager.setRequestId(requestId);\n\n\t\t\t\tconst success = await portManager.createPort();\n\t\t\t\tif (!success) {\n\t\t\t\t\terrorValue = 'Failed to connect to session port.';\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tstream = portManager.getStream();\n\t\t\t\tif (!stream) {\n\t\t\t\t\terrorValue = 'Stream is not available.';\n\t\t\t\t\tshowFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstream.on('data', onMessageListener);\n\t\t\t\tstream.write({ method: 'get_params', id: requestId });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\terrorValue =\n\t\t\t\t'Port setup error occurred while processing the request. Access to YAKKL® is denied.';\n\t\t\tshowFailure = true;\n\t\t}\n\t});\n\n\tasync function handleReject(message: string = 'User rejected the request.') {\n\t\ttry {\n\t\t\tif (browserSvelte) {\n\t\t\t\tshowConfirm = false;\n\t\t\t\tshowFailure = false;\n\t\t\t\tshowSuccess = false;\n\t\t\t\tif (stream) {\n\t\t\t\t\tstream.write({\n\t\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\tid: requestId,\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: 4001,\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t} finally {\n\t\t\tclose();\n\t\t}\n\t}\n\n\tasync function handleProcess() {\n\t\ttry {\n\t\t\tif (!browserSvelte) {\n\t\t\t\tawait handleReject();\n\t\t\t}\n\n\t\t\tif (!verifySessionToken($sessionToken)) {\n\t\t\t\tawait handleReject('Session token is invalid. Login again.');\n\t\t\t}\n\n\t\t\t// Handle eth_signTransaction differently\n\t\t\tif (method === 'eth_signTransaction') {\n\t\t\t\tawait handleSignTransaction();\n\t\t\t} else {\n\t\t\t\t// Use existing signingClient for other methods\n\t\t\t\tconst response = await requestSigning(requestId, method, params, $sessionToken);\n\t\t\t\tif (!response) {\n\t\t\t\t\tawait handleReject('Request failed due to no response from the signing request.');\n\t\t\t\t}\n\n\t\t\t\tif (response.error) {\n\t\t\t\t\tawait handleReject(response.error.message || 'Signing request failed');\n\t\t\t\t}\n\n\t\t\t\tif (stream) {\n\t\t\t\t\tconst jsonRpcResponse: JsonRpcResponse = {\n\t\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\tid: requestId,\n\t\t\t\t\t\tresult: response.result\n\t\t\t\t\t};\n\t\t\t\t\tstream.write(jsonRpcResponse);\n\t\t\t\t\tlog.info('Sign: handleProcess - response:', false, { jsonRpcResponse });\n\t\t\t\t} else {\n\t\t\t\t\tawait handleReject('Request failed to send to dapp due to connection port not found.');\n\t\t\t\t}\n\t\t\t}\n\t\t\tclose();\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\terrorValue = e instanceof Error ? e.message : 'Unknown error occurred';\n\t\t\tshowFailure = true;\n\t\t}\n\t}\n\n\tasync function handleSignTransaction() {\n\t\ttry {\n\t\t\t// Get the account's private key\n\t\t\tconst accounts = await getYakklAccounts();\n\t\t\tconst account = accounts.find(\n\t\t\t\t(acc) => acc.address.toLowerCase() === transaction.from?.toLowerCase()\n\t\t\t) as YakklAccount;\n\n\t\t\tif (!account) {\n\t\t\t\tawait handleReject('Account not found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Decrypt account data if needed\n\t\t\tif (isEncryptedData(account.data)) {\n\t\t\t\taccount.data = (await decryptData(account.data, yakklMiscStore)) as AccountData;\n\t\t\t}\n\n\t\t\tif (!(account.data as AccountData).privateKey) {\n\t\t\t\tawait handleReject('Account key not available.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare transaction\n\t\t\ttransaction.gasLimit = gasLimit;\n\t\t\ttransaction.nonce = transaction.nonce ?? -1; // Let provider set if not provided\n\t\t\ttransaction.type = transaction.type ?? 2; // Default to EIP-1559\n\t\t\ttransaction.chainId = chainId;\n\n\t\t\t// Create a signer with the private key\n\t\t\tawait wallet.setSigner((account.data as AccountData).privateKey);\n\n\t\t\t// Get the blockchain provider from wallet\n\t\t\tconst blockchain = wallet.getBlockchain();\n\t\t\tconst provider = blockchain.getProvider();\n\t\t\tconst signer = provider.getSigner();\n\n\t\t\t// Sign the transaction (but don't send it)\n\t\t\tconst signedTx = await signer.signTransaction(transaction);\n\n\t\t\t// Send the signed transaction back\n\t\t\tif (stream) {\n\t\t\t\tconst jsonRpcResponse: JsonRpcResponse = {\n\t\t\t\t\ttype: 'YAKKL_RESPONSE:EIP6963',\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: requestId,\n\t\t\t\t\tresult: signedTx\n\t\t\t\t};\n\t\t\t\tstream.write(jsonRpcResponse);\n\t\t\t\tlog.info('Sign: eth_signTransaction - response:', false, { jsonRpcResponse });\n\t\t\t} else {\n\t\t\t\tawait handleReject('Request failed to send to dapp due to connection port not found.');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog.error('Transaction signing error:', false, e);\n\t\t\terrorValue = e instanceof Error ? e.message : 'Transaction signing failed';\n\t\t\tshowFailure = true;\n\t\t}\n\t}\n\n\tasync function close() {\n\t\tif (browserSvelte) {\n\t\t\ttry {\n\t\t\t\tif (portManager) {\n\t\t\t\t\tawait portManager.waitForIdle(1500);\n\t\t\t\t\tportManager.disconnect();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlog.warn('Port did not go idle in time', false, e);\n\t\t\t}\n\t\t\tsafeLogout();\n\t\t}\n\t}\n\n\tfunction handleConfirm() {\n\t\tshowConfirm = true;\n\t}\n</script>\n\n<svelte:head>\n\t<title>{title}</title>\n</svelte:head>\n\n<!-- <Warning bind:show={showFailure} title=\"Error\" value={errorValue} /> -->\n<Failed bind:show={showFailure} title=\"Failed!\" content={errorValue} onReject={handleReject} />\n<Confirmation\n\tbind:show={showConfirm}\n\ttitle=\"Connect to {domain}\"\n\tmessage=\"This will connect {domain} to {address} and sign the transaction or message! Do you wish to continue?\"\n\tonConfirm={handleProcess}\n/>\n\n<div class=\"flex flex-col h-full max-h-screen overflow-hidden\">\n\t<!-- Header -->\n\t<div class=\"p-4 border-b border-base-300 flex-shrink-0\">\n\t\t<div class=\"flex items-center justify-between\">\n\t\t\t<div class=\"flex items-center gap-2 min-w-0\">\n\t\t\t\t<img\n\t\t\t\t\tid=\"dappImageId\"\n\t\t\t\t\tcrossorigin=\"anonymous\"\n\t\t\t\t\tsrc={domainLogo}\n\t\t\t\t\talt=\"Dapp logo\"\n\t\t\t\t\tclass=\"w-8 h-8 rounded-full flex-shrink-0\"\n\t\t\t\t/>\n\t\t\t\t<span class=\"font-semibold truncate\" title={domainTitle || domain}\n\t\t\t\t\t>{domainTitle || domain}</span\n\t\t\t\t>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\tonclick={() => handleReject()}\n\t\t\t\tclass=\"btn btn-ghost btn-sm flex-shrink-0\"\n\t\t\t\taria-label=\"Close\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tclass=\"h-5 w-5\"\n\t\t\t\t\tviewBox=\"0 0 20 20\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\tfill-rule=\"evenodd\"\n\t\t\t\t\t\td=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n\t\t\t\t\t\tclip-rule=\"evenodd\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\n\t<!-- Content-->\n\t<div class=\"flex-1 p-6 flex flex-col max-w-[428px]\">\n\t\t<div class=\"text-center mb-4 flex-shrink-0 border-2 border-red-500 rounded-md p-2\">\n\t\t\t<p class=\"text-md font-extrabold animate-pulse mb-2\">Important!:</p>\n\t\t\t<span class=\"text-sm font-bold mb-2\"\n\t\t\t\t>Signing of Message requesting permission to execute: PLEASE be mindful and know what you\n\t\t\t\tare doing.</span\n\t\t\t>\n\t\t\t<span class=\"text-sm font-bold mb-2\"\n\t\t\t\t>There is no cancel or return option! Be 100% sure or REJECT this transaction and research\n\t\t\t\tmore before trying again.</span\n\t\t\t>\n\t\t</div>\n\n\t\t<div class=\"overflow-auto flex-1 min-h-0 mb-4\">\n\t\t\t{#if method === 'eth_signTransaction'}\n\t\t\t\t<span class=\"text-sm\">Transaction Details:</span>\n\t\t\t\t<div class=\"bg-base-200 rounded-lg p-4 space-y-3 mt-2\">\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">From:</span>\n\t\t\t\t\t\t<span class=\"font-mono text-sm\">{transactionDisplay.from}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">To:</span>\n\t\t\t\t\t\t<span class=\"font-mono text-sm\">{transactionDisplay.to}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">Value:</span>\n\t\t\t\t\t\t<span class=\"font-bold text-primary\">{transactionDisplay.value}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"flex justify-between items-center border-b border-base-300 pb-2\">\n\t\t\t\t\t\t<span class=\"font-medium\">Gas Limit:</span>\n\t\t\t\t\t\t<span>{transactionDisplay.gasLimit}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{#if transaction.data}\n\t\t\t\t\t\t<div class=\"flex justify-between items-center\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Data:</span>\n\t\t\t\t\t\t\t<span class=\"text-sm truncate max-w-[200px]\">{transactionDisplay.data}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t<span class=\"text-sm\">Data to sign:</span>\n\t\t\t\t<pre class=\"text-md border-2 border-blue-500 rounded-md p-2 bg-opacity-25\">{message}</pre>\n\t\t\t{/if}\n\t\t</div>\n\t</div>\n\n\t<!-- Footer -->\n\t<div class=\"p-4 border-t border-base-300 flex-shrink-0\">\n\t\t<div class=\"flex gap-4 justify-end\">\n\t\t\t<button onclick={() => handleReject()} class=\"btn btn-outline\"> Reject </button>\n\t\t\t<button onclick={handleConfirm} class=\"btn btn-primary\"> Approve </button>\n\t\t</div>\n\t</div>\n</div>\n\n<Copyright />\n\n<style>\n\t/* Smooth transitions */\n\t.btn {\n\t\ttransition: all 0.2s ease;\n\t}\n\n\t.btn:hover {\n\t\ttransform: translateY(-1px);\n\t}\n\n\t/* Custom scrollbar styles */\n\t.overflow-auto {\n\t\tscrollbar-width: thin;\n\t\tscrollbar-color: hsl(var(--p)) transparent;\n\t}\n\n\t.overflow-auto::-webkit-scrollbar {\n\t\twidth: 6px;\n\t}\n\n\t.overflow-auto::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.overflow-auto::-webkit-scrollbar-thumb {\n\t\tbackground-color: hsl(var(--p));\n\t\tborder-radius: 3px;\n\t}\n</style>\n"],"names":["async","requestSigning","requestId","type","params","token","window","Error","log","info","response","browser_ext","runtime","sendMessage","error","message","yakklMiscStore","wallet","showConfirm","showSuccess","showFailure","errorValue","domain","domainLogo","title","DEFAULT_TITLE","method","address","chainId","transaction","transactionDisplay","gasLimit","pass","portManager","stream","browserSvelte","page","url","searchParams","get","$.store_set","yakklDappConnectRequestStore","e","handleReject","close","handleProcess","verifySessionToken","$.store_get","$$store_subs","sessionToken","handleSignTransaction","accounts","getYakklAccounts","account","find","acc","toLowerCase","from","isEncryptedData","data","decryptData","privateKey","nonce","setSigner","blockchain","getBlockchain","provider","getProvider","signer","getSigner","signedTx","signTransaction","log$1","warn","safeLogout","$$value","$.stringify","$$payload","out","$.attr","$.escape","to","value"],"mappings":"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"}