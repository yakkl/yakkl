import{v as getObjectFromLocalStorage,S as STORAGE_YAKKL_SETTINGS,w as dateString,x as setObjectInLocalStorage,m as yakklCurrentlySelectedStore,l as log$1,ai as YAKKL_INTERNAL}from"../../chunks/encryption.js";import{i as isServerSide,w as wait}from"../../chunks/utils2.js";import{setIconLock}from"../../chunks/utilities.js";import{a as browser_ext,i as isBrowserEnv}from"../../chunks/environment.js";import{l as log}from"../../chunks/Logger.js";import"../../chunks/utils.js";import{g as getTimerManager}from"../../chunks/TimerManager.js";import"../../chunks/gas.js";import"ethereum-blockies-base64";import{g as get}from"../../chunks/index.js";import{i as initializeBrowserAPI}from"../../chunks/browser-polyfill-wrapper.js";async function stopLockIconTimer(){try{await setIconLock();const yakklSettings=await getObjectFromLocalStorage(STORAGE_YAKKL_SETTINGS);if(yakklSettings){getTimerManager().removeTimer("iconTimer_lockIcon");if(browser_ext){await browser_ext.runtime.sendMessage({type:"lockdown"})}}}catch(error){log.error("Error stopping lock icon timer:",false,error,error?.stack)}}async function handleLockDown(){try{if(isBrowserEnv()){log.info("handleLockDown: Setting icon lock...",false);await setIconLock();const yakklSettings=await getObjectFromLocalStorage("settings");if(yakklSettings&&!yakklSettings.isLocked){yakklSettings.isLocked=true;yakklSettings.isLockedHow="window_exit";yakklSettings.updateDate=dateString();await setObjectInLocalStorage("settings",yakklSettings);const yakklCurrentlySelected=get(yakklCurrentlySelectedStore);yakklCurrentlySelected.shortcuts.isLocked=true;yakklCurrentlySelectedStore.set(yakklCurrentlySelected);stopLockIconTimer()}}else{log.info("handleLockDown: Does not believe to be in a browser environment.")}}catch(error){log.error("Error in lock down handler:",false,error)}}const prerender=true;let port;async function connectPort(){if(!browser_ext){return false}try{port=browser_ext.runtime.connect({name:YAKKL_INTERNAL});if(port){port.onDisconnect.addListener(async event=>{handleLockDown();port=void 0;if(event?.error){log$1.error("Port disconnect:",false,event.error?.message)}});return true}}catch(error){log$1.error("Port connection failed:",false,error)}return false}async function initializeExtension(){try{let connected=await connectPort();if(!connected){log$1.info("Port connection failed, retrying in 1 second...");await wait(1e3);connected=await connectPort()}}catch(error){log$1.error("Extension initialization failed:",false,error)}}const load=async()=>{if(isServerSide()){return{}}try{const browser=initializeBrowserAPI();if(browser){await initializeExtension()}}catch(error){log$1.error("Error initializing extension:",false,error)}return{}};export{load,prerender};
//# sourceMappingURL=_layout.ts.js.map
