const webpack = require('webpack');
const path = require('path');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const NodePolyfillPlugin = require('node-polyfill-webpack-plugin');

module.exports = (argv) => {
  const isProduction = argv.mode === 'production';
  const outputPath = path.resolve(__dirname, 'build/extension');

  return {
    mode: isProduction ? 'production' : 'development',
    devtool: isProduction ? 'source-map' : 'cheap-module-source-map',
    
    entry: {
      // Extension scripts
      background: path.resolve(__dirname, '{{paths.background_script}}'),
      content: path.resolve(__dirname, '{{paths.content_script}}'),
      inpage: path.resolve(__dirname, '{{paths.inpage_script}}'),
      
      // Polyfills
      'browser-polyfill': path.resolve(__dirname, './node_modules/webextension-polyfill/dist/browser-polyfill.js'),
    },
    
    output: {
      filename: '[name].js',
      path: outputPath,
      clean: true,
    },
    
    resolve: {
      extensions: ['.ts', '.js', '.json'],
      alias: {
        '@extension': path.resolve(__dirname, '{{paths.extension_root}}'),
        '@lib': path.resolve(__dirname, './src/lib'),
        '@common': path.resolve(__dirname, './src/lib/common'),
        '$lib': path.resolve(__dirname, './src/lib'),
      },
      fallback: {
        "crypto": require.resolve("crypto-browserify"),
        "stream": require.resolve("stream-browserify"),
        "assert": require.resolve("assert"),
        "http": require.resolve("stream-http"),
        "https": require.resolve("https-browserify"),
        "os": require.resolve("os-browserify"),
        "url": require.resolve("url"),
        "util": require.resolve("util"),
        "path": require.resolve("path-browserify"),
        "fs": false,
        "net": false,
        "tls": false,
      }
    },
    
    module: {
      rules: [
        {
          test: /\.ts$/,
          use: 'ts-loader',
          exclude: /node_modules/,
        },
        {
          test: /\.css$/,
          use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader'],
        },
        {
          test: /\.(png|jpg|jpeg|gif|svg)$/,
          type: 'asset/resource',
          generator: {
            filename: 'images/[name][ext]',
          },
        },
      ],
    },
    
    plugins: [
      new CleanWebpackPlugin(),
      
      new webpack.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify('{{env.node_env}}'),
        'process.env.VERSION': JSON.stringify('{{version}}'),
        'process.env.PRODUCT_NAME': JSON.stringify('{{product_name}}'),
        'process.env.DEV_MODE': JSON.stringify({{env.dev_mode}}),
        'process.env.POPUP_WIDTH': JSON.stringify({{ui.popup_width}}),
        'process.env.POPUP_HEIGHT': JSON.stringify({{ui.popup_height}}),
        'process.env.INITIAL_ROUTE': JSON.stringify('{{paths.initial_route}}'),
      }),
      
      new webpack.ProvidePlugin({
        Buffer: ['buffer', 'Buffer'],
        process: 'process/browser',
      }),
      
      new MiniCssExtractPlugin({
        filename: 'styles/[name].css',
      }),
      
      new CopyWebpackPlugin({
        patterns: [
          {
            from: '{{paths.manifest_template}}',
            to: 'manifest.json',
            transform(content) {
              const mustache = require('mustache');
              const config = {
                version: '{{version}}',
                product_name: '{{product_name}}',
                product_short: '{{product_short}}',
                popup_width: {{ui.popup_width}},
                popup_height: {{ui.popup_height}},
              };
              return mustache.render(content.toString(), config);
            },
          },
          {
            from: path.resolve(__dirname, 'static/images'),
            to: 'images',
          },
          {
            from: path.resolve(__dirname, 'static/fonts'),
            to: 'fonts',
          },
        ],
      }),
      
      new NodePolyfillPlugin(),
    ],
    
    optimization: {
      minimize: isProduction,
      minimizer: [
        new TerserPlugin({
          terserOptions: {
            compress: {
              drop_console: isProduction,
              drop_debugger: isProduction,
            },
            format: {
              comments: false,
            },
          },
          extractComments: false,
        }),
      ],
      splitChunks: {
        chunks: 'all',
        cacheGroups: {
          vendor: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendor',
            priority: 10,
          },
          common: {
            minChunks: 2,
            priority: 5,
            reuseExistingChunk: true,
          },
        },
      },
    },
    
    performance: {
      hints: false,
      maxEntrypointSize: 512000,
      maxAssetSize: 512000,
    },
  };
};