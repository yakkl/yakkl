<script lang="ts">
  import Login from '$lib/components/Login.svelte';
  import { syncStorageToStore, yakklUserNameStore } from '$lib/common/stores';
  import { safeLogout } from '$lib/common/safeNavigate';
  import { startActivityTracking } from '$lib/common/messaging';
  import { log } from '$lib/common/logger-wrapper';
  import type { Profile, YakklSettings } from '$lib/common/interfaces';
  import { getNormalizedSettings, PlanType } from '$lib/common';
  import { setLocks } from '$lib/common/locks';
  import ErrorNoAction from '$lib/components/ErrorNoAction.svelte';
  import { onMount } from 'svelte';
  import { protectedContexts } from '$lib/common/globals';
	import { goto } from '$app/navigation';
	import { initNetworkSpeedMonitoring } from '$lib/common/networkSpeed';
	import { loadCacheManagers } from '$lib/common/cacheManagers';

  // State
  let showError = $state(false);
  let errorValue = $state('');
  let planType = $state(PlanType.EXPLORER_MEMBER);
  let yakklSettings: YakklSettings | null = $state(null);
  let isInitializing = $state(false); // Start with false - only show spinner if actually loading
  let initError = $state<string | null>(null);

  // Format plan type for display (remove underscores and capitalize)
  function formatPlanType(plan: string): string {
    if (!plan) return '';
    return plan
      .replace(/_/g, ' ')
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  }

  onMount(async () => {
    console.log('[Login] Starting login page initialization...');

    // Check if already authenticated (browser refresh case)
    if (sessionStorage.getItem('wallet-authenticated') === 'true') {
      console.log('[Login] Already authenticated, redirecting to home');
      await goto('/home');
      return;
    }

    // Show login form IMMEDIATELY - no spinner, no delay
    isInitializing = false;
    planType = PlanType.EXPLORER_MEMBER;

    // Load settings in background (non-blocking)
    getNormalizedSettings().then(settings => {
      if (settings) {
        yakklSettings = settings;
        planType = settings?.plan?.type ?? PlanType.EXPLORER_MEMBER;
        
        // Check legal agreement (but don't block login form)
        if (!settings.init || !settings.legal?.termsAgreed) {
          console.log('[Login] User needs to complete legal agreement');
          // Could show a banner but don't redirect
        }
      }
    }).catch(error => {
      console.log('[Login] Settings load failed (non-critical):', error);
      // Login still works without settings
    });
  });

  // Handle successful login
  async function onSuccess(profile: Profile, digest: string, isMinimal: boolean, jwtToken?: string) {
    log.debug('[LOGIN onSuccess] Called with:', false, {
      profile,
      hasDigest: !!digest,
      digestLength: digest?.length,
      isMinimal,
      hasJWT: !!jwtToken
    });

    try {
      // Set the username in the global store
      $yakklUserNameStore = profile.username || '';

      // Mark as authenticated for instant navigation
      sessionStorage.setItem('wallet-authenticated', 'true');
      sessionStorage.setItem('wallet-username', profile.username || '');

      // Navigate IMMEDIATELY - no waiting
      await goto('/home');

      // Everything else happens in background AFTER navigation
      // This ensures < 1 second login experience
      setTimeout(async () => {
        try {
          // Unlock wallet in background
          await setLocks(false, yakklSettings?.plan?.type || PlanType.EXPLORER_MEMBER);
          
          // Start activity tracking if needed
          const contextType = 'popup-wallet';
          if (protectedContexts.includes(contextType)) {
            startActivityTracking(contextType);
          }
        } catch (e) {
          console.log('Background task error:', e);
      }

      try {
        await navigationPromise;
      } catch (error) {
        console.error('[LOGIN] Navigation failed:', error);
        // Fallback to login page on navigation error
        errorValue = 'Failed to navigate to home page';
        showError = true;
      }

    } catch (e: any) {
      console.error('Error during post-login initialization', e);
      errorValue = e;
      showError = true;
    }
  }

  // Handle login errors
  function onError(value: string) {
    errorValue = value;
    showError = true;
  }

  // Handle login cancel
  function onCancel() {
    // In extension popup context, close the window instead of navigating
    if (typeof window !== 'undefined' && window.close) {
      window.close();
    } else {
      // Fallback to logout for other contexts
      safeLogout();
    }
  }

  // Handle close
  function onClose() {
    showError = false;
    errorValue = '';
  }
</script>

<ErrorNoAction bind:show={showError} title="ERROR!" value={errorValue} {onClose} />

<div class="min-h-screen flex items-center justify-center px-4">
  <div class="max-w-sm w-full">
    <div class="yakkl-card text-center p-6">
      <!-- Logo -->
      <div class="mb-6">
        <img src="/images/logoBullFav128x128.png" alt="YAKKL" class="w-20 h-20 mx-auto" />
        <h1 class="text-2xl font-bold text-zinc-900 dark:text-white mt-4">YAKKL Smart Wallet</h1>
        <p class="text-sm text-zinc-600 dark:text-zinc-400 mt-2">Preview 2.0</p>
      </div>

      {#if isInitializing}
        <!-- Loading state while extension initializes -->
        <div class="py-8">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p class="text-zinc-600 dark:text-zinc-400">Connecting to extension...</p>
          <p class="text-xs text-zinc-500 dark:text-zinc-500 mt-2">Please wait while we initialize the wallet</p>
        </div>
      {:else if initError}
        <!-- Error state if initialization fails -->
        <div class="py-8">
          <div class="text-red-600 dark:text-red-400 mb-4">
            <svg class="w-12 h-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <p class="text-red-600 dark:text-red-400 font-medium">Initialization Failed</p>
          <p class="text-sm text-zinc-600 dark:text-zinc-400 mt-2">{initError}</p>
          <button
            onclick={() => window.location.reload()}
            class="btn btn-primary btn-sm mt-4"
          >
            Reload Wallet
          </button>
        </div>
      {:else}
        <!-- Login Form - only shown when fully initialized -->
        <Login
          {onSuccess}
          {onError}
          {onCancel}
          loginButtonText="Unlock Wallet"
          cancelButtonText="Exit"
          inputTextClass="text-zinc-900 dark:text-white"
          inputBgClass="bg-white dark:bg-zinc-800"
          useAuthStore={true}
          generateJWT={true}
        />
      {/if}

      <!-- Plan Info - only show when not initializing -->
      {#if !isInitializing && !initError}
        <div class="mt-8 p-4 bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-indigo-900 dark:to-purple-900 rounded-xl">
        {#if planType.toLowerCase() === PlanType.YAKKL_PRO.toLowerCase()}
          <h3 class="font-semibold text-indigo-900 dark:text-indigo-100">{formatPlanType(PlanType.YAKKL_PRO)}</h3>
          <p class="text-sm text-indigo-700 dark:text-indigo-200 mt-1">
            Access to all premium features and advanced tools
          </p>
        {:else if planType.toLowerCase() === PlanType.FOUNDING_MEMBER.toLowerCase()}
          <h3 class="font-semibold text-purple-900 dark:text-purple-100">{formatPlanType(PlanType.FOUNDING_MEMBER)}</h3>
          <p class="text-sm text-purple-700 dark:text-purple-200 mt-1">
            Exclusive access to all features and early releases
          </p>
        {:else if planType.toLowerCase() === PlanType.EARLY_ADOPTER.toLowerCase()}
          <h3 class="font-semibold text-blue-900 dark:text-blue-100">{formatPlanType(PlanType.EARLY_ADOPTER)}</h3>
          <p class="text-sm text-blue-700 dark:text-blue-200 mt-1">
            Enhanced features and priority support
          </p>
        {:else}
          <h3 class="font-semibold text-zinc-900 dark:text-zinc-100">{formatPlanType(planType)}</h3>
          <p class="text-sm text-zinc-700 dark:text-zinc-300 mt-1">
            Core wallet features with option to upgrade
          </p>
        {/if}
        </div>
      {/if}

    </div>
  </div>
</div>
