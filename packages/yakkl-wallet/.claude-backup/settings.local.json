{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(/dev/null -name \"*.ts\")",
      "Bash(pnpm run:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run check:*)",
      "Bash(timeout 10s npm run check)",
      "Bash(npx tsc:*)",
      "Bash(ls:*)",
      "Bash(pnpm add:*)",
      "Bash(rg:*)",
      "Bash(pnpm -w run check:wallet)",
      "Bash(NODE_ENV=development webpack -c webpack.config.cjs)",
      "Bash(NODE_ENV=development npm run build:constants)",
      "Bash(NODE_ENV=development npx webpack -c webpack.config.cjs)",
      "Bash(pnpm -w run build:wallet)",
      "Bash(NODE_ENV=production webpack -c webpack.config.cjs)",
      "Bash(NODE_ENV=production npx webpack -c webpack.config.cjs)",
      "mcp__ide__getDiagnostics",
      "Bash(pnpm -w run dev:wallet)",
      "Bash(npm run test:*)",
      "Bash(rm:*)",
      "Bash(NODE_ENV=production vite build)",
      "Bash(NODE_ENV=production npx vite build)",
      "Bash(pnpm tsc:*)",
      "Bash(pnpm check:*)",
      "Bash(pnpm -w run format:wallet)",
      "Bash(pnpm -w run build:wallet --silent)",
      "Bash(NODE_ENV=production pnpm vite build)",
      "Bash(NODE_ENV=production pnpm vite build --mode production 2 >& 1)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(pnpm install:*)",
      "Bash(npx svelte-check:*)",
      "Bash(timeout:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(sed:*)",
      "Bash(git checkout:*)",
      "Bash(cp:*)",
      "Bash(npm run build:constants:*)",
      "Bash(npm run dev2:core:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(pnpm link:*)",
      "Bash(tsc)",
      "Bash(NODE_ENV=development DEV_MODE=true vite build --debug)",
      "Bash(NODE_ENV=development DEV_MODE=true npx vite build)",
      "Bash(NODE_ENV=development DEV_MODE=true npx vite build --mode development)",
      "Bash(node:*)",
      "Bash(# Count files in each top-level v1 lib directory\nv1_lib=\"/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/lib\"\n\necho \"V1 Directory File Counts:\"\necho \"========================\"\n\nfor dir in \"$v1_lib\"/*; do\n    if [ -d \"$dir\" ]; then\n        dirname=$(basename \"$dir\")\n        count=$(find \"$dir\" -type f | wc -l)\n        echo \"$dirname: $count files\"\n    fi\ndone)",
      "Bash(# Get v1 top-level directories\nv1_lib=\"/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/lib\"\nv2_lib=\"/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/routes/preview2/lib\"\n\necho \"V1 Top-Level Directories:\"\nls -d \"$v1_lib\"/*/ | xargs -n1 basename | sort\n\necho -e \"\\n\\nV2 Top-Level Directories:\"\nls -d \"$v2_lib\"/*/ 2>/dev/null | xargs -n1 basename | sort\n\necho -e \"\\n\\n========================\"\necho \"Analysis Summary:\"\necho \"========================\")",
      "Bash(# Create comprehensive comparison\nv1_lib=\"/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/lib\"\nv2_lib=\"/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/routes/preview2/lib\"\n\necho \"DIRECTORY MIGRATION ANALYSIS\"\necho \"============================\"\necho \"\"\necho \"V1 DIRECTORIES THAT DON'T EXIST IN V2 (Can be copied directly):\"\necho \"---------------------------------------------------------------\"\ntotal_files_to_copy=0\n\nfor dir in api common data hooks imports managers models new_format permissions plugins streams themes tokens upgrades; do\n    if [ -d \"$v1_lib/$dir\" ]; then\n        count=$(find \"$v1_lib/$dir\" -type f | wc -l)\n        echo \"- $dir: $count files\"\n        total_files_to_copy=$((total_files_to_copy + count))\n    fi\ndone\n\necho \"\"\necho \"V1 DIRECTORIES THAT ALREADY EXIST IN V2 (Need conflict handling):\"\necho \"-----------------------------------------------------------------\"\nconflict_files=0\n\nfor dir in components services stores utilities; do\n    if [ -d \"$v1_lib/$dir\" ] && [ -d \"$v2_lib/${dir}\" ]; then\n        v1_count=$(find \"$v1_lib/$dir\" -type f | wc -l)\n        v2_count=$(find \"$v2_lib/${dir}\" -type f 2>/dev/null | wc -l)\n        echo \"- $dir: $v1_count files in v1, $v2_count files in v2\"\n        conflict_files=$((conflict_files + v1_count))\n    fi\ndone\n\n# Check utilities vs utils\nif [ -d \"$v1_lib/utilities\" ] && [ -d \"$v2_lib/utils\" ]; then\n    v1_count=$(find \"$v1_lib/utilities\" -type f | wc -l)\n    v2_count=$(find \"$v2_lib/utils\" -type f 2>/dev/null | wc -l)\n    echo \"- utilities (v1) → utils (v2): $v1_count files in v1, $v2_count files in v2\"\nfi\n\n# Check extensions vs ext\nif [ -d \"$v1_lib/extensions\" ] && [ -d \"$v2_lib/ext\" ]; then\n    v1_count=$(find \"$v1_lib/extensions\" -type f | wc -l)\n    v2_count=$(find \"$v2_lib/ext\" -type f 2>/dev/null | wc -l)\n    echo \"- extensions (v1) → ext (v2): $v1_count files in v1, $v2_count files in v2\"\nfi\n\necho \"\"\necho \"SUMMARY:\"\necho \"--------\"\necho \"Total files that can be copied directly: $total_files_to_copy\"\necho \"Total files needing conflict resolution: $conflict_files\"\necho \"Total files in v1 lib: $(find \"$v1_lib\" -type f | wc -l)\")",
      "Bash(# Check common directory structure in v1\necho \"V1 COMMON DIRECTORY STRUCTURE:\"\necho \"==============================\"\nfind /Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/lib/common -type d | sed 's|.*/lib/common|common|' | sort\n\necho -e \"\\n\\nKEY V1 MANAGERS SUBDIRECTORIES:\"\necho \"================================\"\nls -d /Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/lib/managers/*/ | xargs -n1 basename | sort)",
      "Bash(# Check UI components in v1\necho \"V1 UI COMPONENTS:\"\necho \"=================\"\nls /Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/lib/components/ui/ | head -20\n\necho -e \"\\n\\nV2 COMPONENTS:\"\necho \"==============\"\nls /Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/src/routes/preview2/lib/components/ 2>/dev/null || echo \"No basic components in v2 lib/components/\")",
      "Bash(if [ -d \"src/lib/new_format\" ])",
      "Bash(then cp -r src/lib/new_format src/routes/preview2/lib/)",
      "Bash(fi)",
      "Bash(for file in src/lib/stores/*.ts)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then cp \"$file\" \"src/routes/preview2/lib/stores/v1_$(basename \"$file\")\")",
      "Bash(done)",
      "Bash(for file in src/lib/utilities/*.ts)",
      "Bash(then cp \"$file\" \"src/routes/preview2/lib/utils/v1_$(basename \"$file\")\")",
      "Bash(chmod:*)",
      "Bash(/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/packages/yakkl-wallet/fix-chrome-imports.sh)",
      "Bash(pnpm webpack:*)",
      "Bash(touch:*)",
      "Bash(NODE_ENV=development webpack -c webpack.config.cjs --stats-error-details 2 >& 1)",
      "Bash(NODE_ENV=development DEV_MODE=true vite build 2 >& 1)",
      "Bash(NODE_ENV=development DEV_MODE=true pnpm vite build 2 >& 1)",
      "Bash(NODE_ENV=development vite build)",
      "Bash(for comp in BookmarkedArticles DynamicRSSNewsFeed ErrorNoAction EthUnitConverter ExtensionRSSNewsFeed GenericFooter LockedSectionCard Placeholder PlanBadge RotatingBanner ScrollIndicator SectionCard Sponsorship TokenComponentList TokenFiatConverter Upgrade UpgradeFooter Welcome)",
      "Bash(do)",
      "Bash(if [ ! -f \"src/lib/components/$comp.svelte\" ])",
      "Bash(then)",
      "Bash(echo:*)",
      "Bash(if [ -f \"src/lib/components/v1/$comp.svelte\" ])",
      "Bash(else)",
      "Bash(for icon in CalcIcon FiatIcon NewsIcon SponsorIcon TokenIcon ToolIcon WalletIcon)",
      "Bash(if [ -f \"src/lib/components/v1/icons/$icon.svelte\" ])",
      "Bash(NODE_ENV=development DEV_MODE=true VITE_PREVIEW2=true npx vite build)",
      "Bash(NODE_ENV=development node ./buildSveltekitForCSP.mjs 2 >& 1)",
      "Bash(NODE_ENV=development node ./buildSveltekitForCSP.mjs)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(pnpm stop:*)",
      "Bash(npm run:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(tail:*)",
      "Bash(awk:*)",
      "Bash(head:*)",
      "Bash(cat:*)",
      "Bash(pnpm ls:*)",
      "Bash(pnpm why:*)",
      "Bash(pnpm list:*)",
      "Bash(pgrep:*)",
      "Bash(pnpm vite:*)",
      "Bash(./.claude/checkpoint-setup.sh:*)",
      "Bash(osascript:*)",
      "Bash(afplay:*)",
      "Bash(/Users/hansjones/projects/lambdastack/yakkl/crypto/yakkl/.claude/test-sounds.sh:*)",
      "Bash(pnpm compile:*)",
      "Bash(git stash:*)",
      "WebFetch(domain:docs.anthropic.com)"
    ],
    "deny": []
  }
}