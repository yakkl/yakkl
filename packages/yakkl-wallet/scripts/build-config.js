#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const mustache = require('mustache');
const { execSync } = require('child_process');

// Get build version from environment or command line
const buildVersion = process.argv[2] || process.env.BUILD_VERSION || 'v2';
const configFile = path.resolve(__dirname, `../config/${buildVersion}.yaml`);

if (!fs.existsSync(configFile)) {
  console.error(`Configuration file not found: ${configFile}`);
  process.exit(1);
}

console.log(`üîß Building YAKKL Wallet with ${buildVersion} configuration...`);

// Load configuration
const config = yaml.load(fs.readFileSync(configFile, 'utf8'));
console.log(`üìã Loaded configuration for ${config.product_name} v${config.version}`);

// Create build directories if they don't exist
const buildDirs = [
  'build',
  'build/extension',
  'build/temp',
];

buildDirs.forEach(dir => {
  const fullPath = path.resolve(__dirname, '..', dir);
  if (!fs.existsSync(fullPath)) {
    fs.mkdirSync(fullPath, { recursive: true });
    console.log(`üìÅ Created directory: ${dir}`);
  }
});

// Process webpack configuration
console.log('üì¶ Processing webpack configuration...');
const webpackTemplate = fs.readFileSync(
  path.resolve(__dirname, '../webpack.config.mustache'),
  'utf8'
);
const webpackOutput = mustache.render(webpackTemplate, config);
fs.writeFileSync(
  path.resolve(__dirname, '../webpack.config.js'),
  webpackOutput
);
console.log('‚úÖ webpack.config.js generated');

// Copy version-specific hooks.client.ts if it exists
if (config.build.hooks_client && fs.existsSync(path.resolve(__dirname, '..', config.build.hooks_client))) {
  console.log('üìã Copying version-specific hooks.client.ts...');
  fs.copyFileSync(
    path.resolve(__dirname, '..', config.build.hooks_client),
    path.resolve(__dirname, '../src/hooks.client.ts')
  );
  console.log('‚úÖ hooks.client.ts copied');
} else {
  console.log('‚ö†Ô∏è  No version-specific hooks.client.ts found, using default');
}

// Copy version-specific app.html if it exists
if (config.build.app_html && fs.existsSync(path.resolve(__dirname, '..', config.build.app_html))) {
  console.log('üìã Copying version-specific app.html...');
  fs.copyFileSync(
    path.resolve(__dirname, '..', config.build.app_html),
    path.resolve(__dirname, '../src/app.html')
  );
  console.log('‚úÖ app.html copied');
} else {
  console.log('‚ö†Ô∏è  No version-specific app.html found, using default');
}

// Create version-specific constants file
console.log('üìù Creating version constants...');
const constantsContent = `// Auto-generated by build-config.js
// DO NOT EDIT MANUALLY

export const BUILD_CONFIG = ${JSON.stringify(config, null, 2)};

export const VERSION = '${config.version}';
export const PRODUCT_NAME = '${config.product_name}';
export const PRODUCT_SHORT = '${config.product_short}';
export const INITIAL_ROUTE = '${config.paths.initial_route}';
export const POPUP_WIDTH = ${config.ui.popup_width};
export const POPUP_HEIGHT = ${config.ui.popup_height};
export const IS_PREVIEW = ${config.features.preview_mode};
`;

fs.writeFileSync(
  path.resolve(__dirname, '../src/lib/common/build-constants.ts'),
  constantsContent
);
console.log('‚úÖ build-constants.ts generated');

// Update package.json scripts with version info
console.log('üìù Updating package.json version...');
const packageJsonPath = path.resolve(__dirname, '../package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
packageJson.version = config.version;
fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
console.log('‚úÖ package.json version updated');

// Create build info file
const buildInfo = {
  version: config.version,
  buildVersion: buildVersion,
  buildTime: new Date().toISOString(),
  productName: config.product_name,
  git: {
    branch: execSync('git rev-parse --abbrev-ref HEAD').toString().trim(),
    commit: execSync('git rev-parse --short HEAD').toString().trim(),
  }
};

fs.writeFileSync(
  path.resolve(__dirname, '../build/build-info.json'),
  JSON.stringify(buildInfo, null, 2)
);
console.log('‚úÖ build-info.json created');

console.log('\nüéâ Build configuration completed successfully!');
console.log(`   Version: ${config.version}`);
console.log(`   Product: ${config.product_name}`);
console.log(`   Mode: ${buildVersion}`);
console.log('\nNext steps:');
console.log('  1. Run "npm run build:extension" to build the extension');
console.log('  2. Run "npm run build" to build the SvelteKit app\n');