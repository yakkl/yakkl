{"version":3,"file":"index.mjs","sources":["../src/embedded/EmbeddedWallet.ts","../src/embedded/EmbeddedProvider.ts","../src/embedded/factory.ts","../src/mod/ModBuilder.ts","../src/mod/ModTemplate.ts","../src/mod/factory.ts","../src/white-label/BrandingManager.ts","../src/white-label/WhiteLabelWallet.ts","../src/white-label/factory.ts","../src/integration/YakklProvider.ts","../src/integration/WalletConnector.ts","../src/integration/EventBridge.ts"],"sourcesContent":["/**\n * EmbeddedWallet - For integrating YAKKL into other applications\n * \n * This allows companies to embed a full YAKKL wallet into their apps\n * with complete control over branding, features, and restrictions\n */\n\nimport { WalletEngine } from '@yakkl/core';\nimport type { WalletConfig, Account, Transaction } from '@yakkl/core';\nimport { EventEmitter } from 'eventemitter3';\nimport type { EmbeddedWalletConfig } from '../types';\n\nexport interface EmbeddedWalletEvents {\n  'wallet:ready': () => void;\n  'wallet:error': (error: Error) => void;\n  'account:created': (account: Account) => void;\n  'account:selected': (account: Account) => void;\n  'transaction:signed': (tx: Transaction) => void;\n  'transaction:sent': (hash: string) => void;\n}\n\nexport class EmbeddedWallet extends EventEmitter<EmbeddedWalletEvents> {\n  private engine: WalletEngine;\n  private config: EmbeddedWalletConfig;\n  private container: HTMLElement | null = null;\n  private initialized = false;\n\n  constructor(config: EmbeddedWalletConfig) {\n    super();\n    this.config = config;\n    \n    // Create wallet engine with embedded configuration\n    const engineConfig: Partial<WalletConfig> = {\n      name: config.branding?.name || 'Embedded YAKKL',\n      version: '1.0.0',\n      embedded: true,\n      restrictions: config.restrictions || [],\n      modDiscovery: config.enableMods !== false,\n      branding: config.branding\n    };\n\n    this.engine = new WalletEngine(engineConfig);\n    this.setupEventListeners();\n  }\n\n  /**\n   * Mount the embedded wallet to a DOM element\n   */\n  async mount(container: string | HTMLElement): Promise<void> {\n    if (typeof container === 'string') {\n      this.container = document.querySelector(container);\n    } else {\n      this.container = container;\n    }\n\n    if (!this.container) {\n      throw new Error('Container element not found');\n    }\n\n    try {\n      // Initialize the wallet engine\n      await this.engine.initialize();\n      \n      // Render the wallet UI\n      await this.renderUI();\n      \n      this.initialized = true;\n      this.emit('wallet:ready');\n    } catch (error) {\n      this.emit('wallet:error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Unmount the embedded wallet\n   */\n  async unmount(): Promise<void> {\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.container = null;\n    }\n\n    if (this.initialized) {\n      await this.engine.destroy();\n      this.initialized = false;\n    }\n  }\n\n  /**\n   * Get the wallet engine for advanced operations\n   */\n  getEngine(): WalletEngine {\n    return this.engine;\n  }\n\n  /**\n   * Create a new account\n   */\n  async createAccount(name?: string): Promise<Account> {\n    this.ensureInitialized();\n    return this.engine.createAccount(name);\n  }\n\n  /**\n   * Get all accounts\n   */\n  async getAccounts(): Promise<Account[]> {\n    this.ensureInitialized();\n    return this.engine.getAccounts();\n  }\n\n  /**\n   * Select an account\n   */\n  async selectAccount(accountId: string): Promise<void> {\n    this.ensureInitialized();\n    await this.engine.selectAccount(accountId);\n  }\n\n  /**\n   * Sign a transaction\n   */\n  async signTransaction(transaction: Transaction): Promise<string> {\n    this.ensureInitialized();\n    \n    // Check restrictions\n    if (this.config.restrictions?.includes('read-only')) {\n      throw new Error('Wallet is in read-only mode');\n    }\n\n    const signedTx = await this.engine.signTransaction(transaction);\n    return signedTx.hash;\n  }\n\n  /**\n   * Send a transaction\n   */\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    this.ensureInitialized();\n    \n    // Check restrictions\n    if (this.config.restrictions?.includes('no-external-connections')) {\n      throw new Error('External connections are disabled');\n    }\n\n    return this.engine.sendTransaction(transaction);\n  }\n\n  /**\n   * Get current balance\n   */\n  async getBalance(address?: string): Promise<any> {\n    this.ensureInitialized();\n    return this.engine.getBalance(address);\n  }\n\n  /**\n   * Load a mod\n   */\n  async loadMod(modId: string): Promise<any> {\n    this.ensureInitialized();\n    \n    if (!this.config.enableMods) {\n      throw new Error('Mods are disabled');\n    }\n\n    return this.engine.loadMod(modId);\n  }\n\n  /**\n   * Get configuration\n   */\n  getConfig(): EmbeddedWalletConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update branding\n   */\n  updateBranding(branding: Partial<typeof this.config.branding>): void {\n    this.config.branding = { ...this.config.branding, ...branding };\n    \n    if (this.initialized) {\n      this.renderUI(); // Re-render with new branding\n    }\n  }\n\n  /**\n   * Check if wallet is initialized\n   */\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n\n  /**\n   * Setup event listeners for the wallet engine\n   */\n  private setupEventListeners(): void {\n    this.engine.on('account:created', (account) => {\n      this.emit('account:created', account);\n    });\n\n    this.engine.on('account:selected', (account) => {\n      this.emit('account:selected', account);\n    });\n\n    this.engine.on('transaction:signed', (tx) => {\n      this.emit('transaction:signed', tx.transaction);\n    });\n  }\n\n  /**\n   * Render the wallet UI\n   */\n  private async renderUI(): Promise<void> {\n    if (!this.container) return;\n\n    // Create a simple embedded wallet UI\n    const walletHTML = `\n      <div class=\"yakkl-embedded-wallet\" style=\"\n        font-family: ${this.config.branding?.theme?.fonts?.body || 'system-ui, sans-serif'};\n        background: ${this.config.branding?.theme?.colors?.background || '#ffffff'};\n        border: 1px solid ${this.config.branding?.theme?.colors?.border || '#e5e7eb'};\n        border-radius: 12px;\n        padding: 20px;\n        max-width: 400px;\n        margin: 0 auto;\n      \">\n        <div class=\"wallet-header\" style=\"\n          display: flex;\n          align-items: center;\n          gap: 12px;\n          margin-bottom: 20px;\n          border-bottom: 1px solid ${this.config.branding?.theme?.colors?.border || '#e5e7eb'};\n          padding-bottom: 16px;\n        \">\n          ${this.config.branding?.logo ? \n            `<img src=\"${this.config.branding.logo}\" alt=\"Logo\" style=\"width: 32px; height: 32px;\">` : \n            '<div style=\"width: 32px; height: 32px; background: linear-gradient(135deg, #6366f1, #8b5cf6); border-radius: 8px;\"></div>'\n          }\n          <div>\n            <h2 style=\"margin: 0; font-size: 18px; font-weight: 600; color: ${this.config.branding?.theme?.colors?.text || '#1f2937'};\">\n              ${this.config.branding?.name || 'YAKKL Wallet'}\n            </h2>\n            <p style=\"margin: 0; font-size: 14px; color: ${this.config.branding?.theme?.colors?.textSecondary || '#6b7280'};\">\n              Embedded Wallet\n            </p>\n          </div>\n        </div>\n        \n        <div class=\"wallet-content\">\n          <div class=\"account-section\" style=\"margin-bottom: 16px;\">\n            <div style=\"font-size: 14px; color: ${this.config.branding?.theme?.colors?.textSecondary || '#6b7280'}; margin-bottom: 8px;\">\n              Account\n            </div>\n            <div style=\"\n              background: ${this.config.branding?.theme?.colors?.surface || '#f9fafb'};\n              padding: 12px;\n              border-radius: 8px;\n              font-family: monospace;\n              font-size: 14px;\n              color: ${this.config.branding?.theme?.colors?.text || '#1f2937'};\n            \">\n              No account selected\n            </div>\n          </div>\n          \n          <div class=\"actions\" style=\"display: flex; gap: 8px;\">\n            <button class=\"create-account-btn\" style=\"\n              flex: 1;\n              padding: 10px 16px;\n              background: ${this.config.branding?.theme?.colors?.primary || '#6366f1'};\n              color: white;\n              border: none;\n              border-radius: 8px;\n              font-size: 14px;\n              font-weight: 500;\n              cursor: pointer;\n              transition: opacity 0.2s;\n            \" onmouseover=\"this.style.opacity='0.9'\" onmouseout=\"this.style.opacity='1'\">\n              Create Account\n            </button>\n            \n            ${this.config.enableMods !== false ? `\n              <button class=\"mods-btn\" style=\"\n                padding: 10px 16px;\n                background: transparent;\n                color: ${this.config.branding?.theme?.colors?.primary || '#6366f1'};\n                border: 1px solid ${this.config.branding?.theme?.colors?.primary || '#6366f1'};\n                border-radius: 8px;\n                font-size: 14px;\n                font-weight: 500;\n                cursor: pointer;\n              \">\n                Mods\n              </button>\n            ` : ''}\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.container.innerHTML = walletHTML;\n\n    // Add event listeners\n    const createBtn = this.container.querySelector('.create-account-btn');\n    createBtn?.addEventListener('click', () => {\n      this.createAccount('Embedded Account');\n    });\n\n    const modsBtn = this.container.querySelector('.mods-btn');\n    modsBtn?.addEventListener('click', () => {\n      // Open mods dashboard\n      console.log('Opening mods dashboard...');\n    });\n  }\n\n  /**\n   * Ensure wallet is initialized\n   */\n  private ensureInitialized(): void {\n    if (!this.initialized) {\n      throw new Error('Embedded wallet not initialized. Call mount() first.');\n    }\n  }\n}","/**\n * EmbeddedProvider - Web3 provider interface for embedded wallets\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport type { WalletEngine } from '@yakkl/core';\n\nexport interface EthereumRequest {\n  method: string;\n  params?: any[];\n}\n\nexport interface EthereumResponse {\n  id: number;\n  jsonrpc: string;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\nexport interface ProviderRpcError extends Error {\n  code: number;\n  data?: any;\n}\n\nexport interface ProviderEvents {\n  'connect': (connectInfo: { chainId: string }) => void;\n  'disconnect': (error: ProviderRpcError) => void;\n  'accountsChanged': (accounts: string[]) => void;\n  'chainChanged': (chainId: string) => void;\n  'message': (message: { type: string; data: any }) => void;\n}\n\nexport class EmbeddedProvider extends EventEmitter<ProviderEvents> {\n  private engine: WalletEngine;\n  private _chainId: string = '0x1';\n  private _accounts: string[] = [];\n  private _isConnected = false;\n\n  constructor(engine: WalletEngine) {\n    super();\n    this.engine = engine;\n    this.initialize();\n  }\n\n  private async initialize() {\n    try {\n      // Get current network and accounts\n      const currentNetwork = this.engine.networks.getCurrent();\n      if (currentNetwork) {\n        this._chainId = `0x${currentNetwork.chainId.toString(16)}`;\n      }\n\n      const currentAccount = this.engine.getCurrentAccount();\n      if (currentAccount) {\n        this._accounts = [currentAccount.address];\n      }\n\n      this._isConnected = true;\n      this.emit('connect', { chainId: this._chainId });\n\n      // Listen to engine events\n      this.engine.on('account:selected', (account) => {\n        this._accounts = [account.address];\n        this.emit('accountsChanged', this._accounts);\n      });\n\n      this.engine.on('network:changed', (network) => {\n        this._chainId = `0x${network.chainId.toString(16)}`;\n        this.emit('chainChanged', this._chainId);\n      });\n    } catch (error) {\n      console.error('Failed to initialize embedded provider:', error);\n    }\n  }\n\n  /**\n   * Standard EIP-1193 request method\n   */\n  async request(args: EthereumRequest): Promise<any> {\n    const { method, params = [] } = args;\n\n    switch (method) {\n      case 'eth_requestAccounts':\n      case 'eth_accounts':\n        return this._accounts;\n\n      case 'eth_chainId':\n        return this._chainId;\n\n      case 'net_version':\n        return parseInt(this._chainId, 16).toString();\n\n      case 'eth_getBalance':\n        if (params[0] && this._accounts.includes(params[0])) {\n          const balance = await this.engine.transactions.getBalance(params[0]);\n          return `0x${BigInt(balance.native.balance).toString(16)}`;\n        }\n        throw new Error('Address not found');\n\n      case 'eth_sendTransaction':\n        if (params[0]) {\n          const txHash = await this.engine.transactions.send(params[0]);\n          return txHash;\n        }\n        throw new Error('Transaction parameters required');\n\n      case 'eth_signTransaction':\n        if (params[0]) {\n          const signedTx = await this.engine.transactions.sign(params[0]);\n          return signedTx.serialized;\n        }\n        throw new Error('Transaction parameters required');\n\n      case 'personal_sign':\n      case 'eth_sign':\n        if (params[0] && params[1]) {\n          const currentAccount = this.engine.getCurrentAccount();\n          if (currentAccount && this._accounts.includes(params[1])) {\n            return await this.engine.accounts.signMessage(currentAccount.id, params[0]);\n          }\n        }\n        throw new Error('Sign parameters required');\n\n      case 'wallet_switchEthereumChain':\n        if (params[0]?.chainId) {\n          const chainId = parseInt(params[0].chainId, 16);\n          const networks = this.engine.networks.getSupported();\n          const network = networks.find(n => n.chainId === chainId);\n          if (network) {\n            await this.engine.networks.switch(network.id);\n            return null;\n          }\n          throw new Error('Chain not supported');\n        }\n        throw new Error('Chain ID required');\n\n      case 'wallet_addEthereumChain':\n        if (params[0]) {\n          const chainConfig = params[0];\n          await this.engine.networks.add({\n            name: chainConfig.chainName,\n            chainId: parseInt(chainConfig.chainId, 16),\n            symbol: chainConfig.nativeCurrency?.symbol || 'ETH',\n            rpcUrl: chainConfig.rpcUrls[0],\n            blockExplorerUrl: chainConfig.blockExplorerUrls?.[0],\n            isTestnet: false,\n            isMainnet: false,\n            iconUrl: chainConfig.iconUrls?.[0],\n            gasToken: {\n              address: '0x0000000000000000000000000000000000000000',\n              symbol: chainConfig.nativeCurrency?.symbol || 'ETH',\n              name: chainConfig.nativeCurrency?.name || 'Ethereum',\n              decimals: chainConfig.nativeCurrency?.decimals || 18,\n              chainId: parseInt(chainConfig.chainId, 16),\n              isNative: true,\n              isStable: false\n            },\n            supportedFeatures: ['contracts', 'tokens']\n          });\n          return null;\n        }\n        throw new Error('Chain configuration required');\n\n      case 'wallet_getPermissions':\n        return [\n          {\n            id: 'accounts',\n            parentCapability: 'eth_accounts',\n            invoker: window.location.origin,\n            caveats: [\n              {\n                type: 'restrictReturnedAccounts',\n                value: this._accounts\n              }\n            ]\n          }\n        ];\n\n      case 'wallet_requestPermissions':\n        // For embedded wallets, permissions are automatically granted\n        return [\n          {\n            id: 'accounts',\n            parentCapability: 'eth_accounts',\n            invoker: window.location.origin,\n            caveats: [\n              {\n                type: 'restrictReturnedAccounts',\n                value: this._accounts\n              }\n            ]\n          }\n        ];\n\n      default:\n        throw new Error(`Method ${method} not supported`);\n    }\n  }\n\n  /**\n   * Legacy send method for backward compatibility\n   */\n  send(methodOrPayload: string | any, paramsOrCallback?: any[] | ((error: any, response: any) => void)): any {\n    if (typeof methodOrPayload === 'string') {\n      // Legacy method(string, params) format\n      return this.request({ method: methodOrPayload, params: paramsOrCallback as any[] });\n    } else {\n      // Legacy payload format\n      const callback = paramsOrCallback as (error: any, response: any) => void;\n      this.request(methodOrPayload)\n        .then(result => {\n          callback(null, { id: methodOrPayload.id, jsonrpc: '2.0', result });\n        })\n        .catch(error => {\n          callback(error, null);\n        });\n    }\n  }\n\n  /**\n   * Legacy sendAsync method for backward compatibility\n   */\n  sendAsync(payload: any, callback: (error: any, response: any) => void): void {\n    this.request(payload)\n      .then(result => {\n        callback(null, { id: payload.id, jsonrpc: '2.0', result });\n      })\n      .catch(error => {\n        callback(error, null);\n      });\n  }\n\n  /**\n   * Check if provider is connected\n   */\n  isConnected(): boolean {\n    return this._isConnected;\n  }\n\n  /**\n   * Get current chain ID\n   */\n  get chainId(): string {\n    return this._chainId;\n  }\n\n  /**\n   * Get selected accounts\n   */\n  get selectedAddress(): string | null {\n    return this._accounts[0] || null;\n  }\n\n  /**\n   * Enable the provider (for legacy compatibility)\n   */\n  async enable(): Promise<string[]> {\n    return this.request({ method: 'eth_requestAccounts' });\n  }\n}","/**\n * Factory function for creating embedded wallets\n */\n\nimport { EmbeddedWallet } from './EmbeddedWallet';\nimport type { EmbeddedWalletConfig } from '../types';\n\nexport function createEmbeddedWallet(config: EmbeddedWalletConfig): EmbeddedWallet {\n  return new EmbeddedWallet(config);\n}","/**\n * ModBuilder - Helper class for building YAKKL mods\n */\n\nimport type { ModManifest, ModCapabilities, ModComponent } from '@yakkl/core';\n\nexport interface ModBuilderConfig {\n  id: string;\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license?: string;\n  tier?: 'community' | 'verified' | 'pro' | 'private' | 'enterprise';\n  category?: string;\n  tags?: string[];\n}\n\nexport class ModBuilder {\n  private manifest: Partial<ModManifest> = {};\n  private components: ModComponent[] = [];\n  private capabilities: Partial<ModCapabilities> = {};\n\n  constructor(config: ModBuilderConfig) {\n    this.manifest = {\n      id: config.id,\n      name: config.name,\n      version: config.version,\n      description: config.description,\n      author: config.author,\n      license: config.license || 'MIT',\n      tier: config.tier || 'community',\n      category: config.category || 'utility',\n      tags: config.tags || [],\n      permissions: [],\n      minimumWalletVersion: '1.0.0',\n      supportedPlatforms: ['web', 'extension'],\n      discoverable: true,\n      enhances: [],\n      conflicts: [],\n      iconUrl: '',\n      screenshotUrls: [],\n      capabilities: {\n        ui: false,\n        background: false,\n        api: false,\n        storage: false,\n        network: false\n      }\n    };\n  }\n\n  /**\n   * Add UI capabilities to the mod\n   */\n  withUI(components: ModComponent[]): ModBuilder {\n    this.components.push(...components);\n    this.capabilities.ui = true;\n    return this;\n  }\n\n  /**\n   * Add background processing capabilities\n   */\n  withBackground(scripts: string[]): ModBuilder {\n    this.capabilities.background = true;\n    return this;\n  }\n\n  /**\n   * Add API capabilities\n   */\n  withAPI(endpoints: string[]): ModBuilder {\n    this.capabilities.api = true;\n    return this;\n  }\n\n  /**\n   * Add storage capabilities\n   */\n  withStorage(maxSize: number = 1024 * 1024): ModBuilder {\n    this.capabilities.storage = true;\n    return this;\n  }\n\n  /**\n   * Add network access capabilities\n   */\n  withNetwork(allowedHosts: string[]): ModBuilder {\n    this.capabilities.network = true;\n    return this;\n  }\n\n  /**\n   * Add permissions required by the mod\n   */\n  withPermissions(permissions: string[]): ModBuilder {\n    this.manifest.permissions = [...(this.manifest.permissions || []), ...permissions];\n    return this;\n  }\n\n  /**\n   * Set mods that this mod enhances\n   */\n  enhances(modIds: string[]): ModBuilder {\n    this.manifest.enhances = modIds;\n    return this;\n  }\n\n  /**\n   * Set mods that conflict with this mod\n   */\n  conflicts(modIds: string[]): ModBuilder {\n    this.manifest.conflicts = modIds;\n    return this;\n  }\n\n  /**\n   * Set mod metadata\n   */\n  withMetadata(metadata: {\n    iconUrl?: string;\n    screenshotUrls?: string[];\n    website?: string;\n    repository?: string;\n    documentation?: string;\n  }): ModBuilder {\n    Object.assign(this.manifest, metadata);\n    return this;\n  }\n\n  /**\n   * Build the mod manifest\n   */\n  buildManifest(): ModManifest {\n    // Update capabilities in manifest\n    this.manifest.capabilities = this.capabilities as ModCapabilities;\n\n    // Validate required fields\n    if (!this.manifest.id || !this.manifest.name || !this.manifest.version) {\n      throw new Error('Mod manifest missing required fields: id, name, version');\n    }\n\n    return this.manifest as ModManifest;\n  }\n\n  /**\n   * Generate mod template code\n   */\n  generateTemplate(): string {\n    const manifest = this.buildManifest();\n    \n    return `/**\n * ${manifest.name} - ${manifest.description}\n * Generated by YAKKL ModBuilder\n */\n\nimport type { Mod, WalletEngine } from '@yakkl/core';\n\nexport class ${this.toPascalCase(manifest.id)}Mod implements Mod {\n  manifest = ${JSON.stringify(manifest, null, 2)};\n  \n  private engine: WalletEngine | null = null;\n  private loaded = false;\n  private active = false;\n\n  async initialize(engine: WalletEngine): Promise<void> {\n    this.engine = engine;\n    this.loaded = true;\n    this.active = true;\n    \n    // TODO: Add your initialization logic here\n    console.log('${manifest.name} mod initialized');\n  }\n\n  async destroy(): Promise<void> {\n    this.loaded = false;\n    this.active = false;\n    this.engine = null;\n    \n    // TODO: Add your cleanup logic here\n    console.log('${manifest.name} mod destroyed');\n  }\n\n  isLoaded(): boolean {\n    return this.loaded;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  getComponent(id: string): any {\n    // TODO: Return your UI components\n    return null;\n  }\n\n  getWidget(id: string): any {\n    // TODO: Return your widgets\n    return null;\n  }\n\n  getBackgroundScript(id: string): any {\n    // TODO: Return your background scripts\n    return null;\n  }\n\n  async handleAPICall(endpoint: string, data: any): Promise<any> {\n    // TODO: Handle API calls\n    throw new Error('API endpoint not implemented: ' + endpoint);\n  }\n\n  emit(event: string, data: any): void {\n    // TODO: Emit events\n  }\n\n  on(event: string, handler: (data: any) => void): void {\n    // TODO: Listen to events\n  }\n\n  off(event: string, handler: (data: any) => void): void {\n    // TODO: Remove event listeners\n  }\n\n  async enhance(otherMod: Mod): Promise<boolean> {\n    // TODO: Enhance other mods\n    return false;\n  }\n\n  getEnhancements(): any[] {\n    // TODO: Return available enhancements\n    return [];\n  }\n}\n\nexport default ${this.toPascalCase(manifest.id)}Mod;\n`;\n  }\n\n  /**\n   * Convert string to PascalCase\n   */\n  private toPascalCase(str: string): string {\n    return str\n      .split(/[-_\\s]/)\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join('');\n  }\n}","/**\n * ModTemplate - Pre-built mod templates for common use cases\n */\n\nimport { ModBuilder } from './ModBuilder';\nimport type { ModManifest } from '@yakkl/core';\n\nexport type TemplateType = \n  | 'portfolio-tracker'\n  | 'trading-bot'\n  | 'defi-dashboard'\n  | 'nft-gallery'\n  | 'price-alerts'\n  | 'transaction-analyzer'\n  | 'security-scanner'\n  | 'backup-manager';\n\nexport interface TemplateConfig {\n  id: string;\n  name: string;\n  author: string;\n  description?: string;\n}\n\nexport class ModTemplate {\n  static portfolioTracker(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Track and analyze your crypto portfolio',\n      category: 'finance',\n      tags: ['portfolio', 'tracking', 'analytics'],\n      tier: 'community'\n    })\n    .withUI([\n      {\n        id: 'portfolio-widget',\n        name: 'Portfolio Widget',\n        type: 'widget',\n        mountPoint: 'dashboard',\n        props: {},\n        conditions: []\n      }\n    ])\n    .withStorage(5 * 1024 * 1024) // 5MB\n    .withPermissions(['storage', 'network'])\n    .withNetwork(['api.coingecko.com', 'api.coinmarketcap.com']);\n  }\n\n  static tradingBot(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Automated trading strategies',\n      category: 'trading',\n      tags: ['trading', 'automation', 'bot'],\n      tier: 'pro'\n    })\n    .withBackground(['trading-engine.js'])\n    .withAPI(['execute-trade', 'get-strategies'])\n    .withStorage(10 * 1024 * 1024) // 10MB\n    .withPermissions(['storage', 'network', 'transactions'])\n    .withNetwork(['api.binance.com', 'api.coinbase.com']);\n  }\n\n  static defiDashboard(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Monitor DeFi positions and yields',\n      category: 'defi',\n      tags: ['defi', 'yield', 'dashboard'],\n      tier: 'community'\n    })\n    .withUI([\n      {\n        id: 'defi-dashboard',\n        name: 'DeFi Dashboard',\n        type: 'page',\n        mountPoint: 'dashboard',\n        props: {},\n        conditions: []\n      }\n    ])\n    .withNetwork(['api.defipulse.com', 'api.yearn.finance'])\n    .withPermissions(['storage', 'network']);\n  }\n\n  static nftGallery(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Display and manage NFT collections',\n      category: 'nft',\n      tags: ['nft', 'gallery', 'collectibles'],\n      tier: 'community'\n    })\n    .withUI([\n      {\n        id: 'nft-gallery',\n        name: 'NFT Gallery',\n        type: 'page',\n        mountPoint: 'portfolio',\n        props: {},\n        conditions: []\n      }\n    ])\n    .withStorage(50 * 1024 * 1024) // 50MB for images\n    .withNetwork(['api.opensea.io', 'api.rarible.org'])\n    .withPermissions(['storage', 'network']);\n  }\n\n  static priceAlerts(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Set price alerts for cryptocurrencies',\n      category: 'alerts',\n      tags: ['alerts', 'notifications', 'price'],\n      tier: 'community'\n    })\n    .withBackground(['price-monitor.js'])\n    .withUI([\n      {\n        id: 'alert-settings',\n        name: 'Alert Settings',\n        type: 'modal',\n        mountPoint: 'settings',\n        props: {},\n        conditions: []\n      }\n    ])\n    .withStorage(1 * 1024 * 1024) // 1MB\n    .withNetwork(['api.coingecko.com'])\n    .withPermissions(['storage', 'network', 'notifications']);\n  }\n\n  static transactionAnalyzer(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Analyze transaction patterns and costs',\n      category: 'analytics',\n      tags: ['analytics', 'transactions', 'gas'],\n      tier: 'pro'\n    })\n    .withUI([\n      {\n        id: 'tx-analyzer',\n        name: 'Transaction Analyzer',\n        type: 'page',\n        mountPoint: 'transaction',\n        props: {},\n        conditions: []\n      }\n    ])\n    .withStorage(20 * 1024 * 1024) // 20MB\n    .withNetwork(['api.etherscan.io', 'api.polygonscan.com'])\n    .withPermissions(['storage', 'network', 'transactions']);\n  }\n\n  static securityScanner(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Scan transactions and contracts for security issues',\n      category: 'security',\n      tags: ['security', 'scanner', 'audit'],\n      tier: 'private'\n    })\n    .withBackground(['security-scanner.js'])\n    .withAPI(['scan-transaction', 'scan-contract'])\n    .withStorage(5 * 1024 * 1024) // 5MB\n    .withNetwork(['api.slither.io', 'api.mythx.io'])\n    .withPermissions(['storage', 'network', 'transactions']);\n  }\n\n  static backupManager(config: TemplateConfig): ModBuilder {\n    return new ModBuilder({\n      ...config,\n      description: config.description || 'Secure backup and recovery management',\n      category: 'security',\n      tags: ['backup', 'recovery', 'security'],\n      tier: 'enterprise'\n    })\n    .withUI([\n      {\n        id: 'backup-settings',\n        name: 'Backup Settings',\n        type: 'page',\n        mountPoint: 'settings',\n        props: {},\n        conditions: []\n      }\n    ])\n    .withBackground(['backup-scheduler.js'])\n    .withStorage(100 * 1024 * 1024) // 100MB\n    .withPermissions(['storage', 'network', 'accounts']);\n  }\n\n  /**\n   * Create a mod from a template\n   */\n  static create(type: TemplateType, config: TemplateConfig): ModBuilder {\n    switch (type) {\n      case 'portfolio-tracker':\n        return this.portfolioTracker(config);\n      case 'trading-bot':\n        return this.tradingBot(config);\n      case 'defi-dashboard':\n        return this.defiDashboard(config);\n      case 'nft-gallery':\n        return this.nftGallery(config);\n      case 'price-alerts':\n        return this.priceAlerts(config);\n      case 'transaction-analyzer':\n        return this.transactionAnalyzer(config);\n      case 'security-scanner':\n        return this.securityScanner(config);\n      case 'backup-manager':\n        return this.backupManager(config);\n      default:\n        throw new Error(`Unknown template type: ${type}`);\n    }\n  }\n\n  /**\n   * Get available template types\n   */\n  static getAvailableTemplates(): TemplateType[] {\n    return [\n      'portfolio-tracker',\n      'trading-bot',\n      'defi-dashboard',\n      'nft-gallery',\n      'price-alerts',\n      'transaction-analyzer',\n      'security-scanner',\n      'backup-manager'\n    ];\n  }\n\n  /**\n   * Get template description\n   */\n  static getTemplateDescription(type: TemplateType): string {\n    const descriptions: Record<TemplateType, string> = {\n      'portfolio-tracker': 'Track and analyze your crypto portfolio with real-time data',\n      'trading-bot': 'Automated trading strategies with risk management',\n      'defi-dashboard': 'Monitor DeFi positions, yields, and opportunities',\n      'nft-gallery': 'Display and manage NFT collections with metadata',\n      'price-alerts': 'Set customizable price alerts with notifications',\n      'transaction-analyzer': 'Analyze transaction patterns, costs, and optimization',\n      'security-scanner': 'Scan transactions and contracts for security vulnerabilities',\n      'backup-manager': 'Secure backup and recovery management system'\n    };\n\n    return descriptions[type];\n  }\n}","/**\n * Factory functions for mod development\n */\n\nimport { ModBuilder } from './ModBuilder';\nimport { ModTemplate, type TemplateType, type TemplateConfig } from './ModTemplate';\nimport type { ModBuilderConfig } from './ModBuilder';\n\n/**\n * Create a new mod from scratch\n */\nexport function createMod(config: ModBuilderConfig): ModBuilder {\n  return new ModBuilder(config);\n}\n\n/**\n * Create a mod from a template\n */\nexport function createModFromTemplate(type: TemplateType, config: TemplateConfig): ModBuilder {\n  return ModTemplate.create(type, config);\n}\n\n/**\n * Quick create functions for common mod types\n */\nexport const modTemplates = {\n  portfolioTracker: (config: TemplateConfig) => ModTemplate.portfolioTracker(config),\n  tradingBot: (config: TemplateConfig) => ModTemplate.tradingBot(config),\n  defiDashboard: (config: TemplateConfig) => ModTemplate.defiDashboard(config),\n  nftGallery: (config: TemplateConfig) => ModTemplate.nftGallery(config),\n  priceAlerts: (config: TemplateConfig) => ModTemplate.priceAlerts(config),\n  transactionAnalyzer: (config: TemplateConfig) => ModTemplate.transactionAnalyzer(config),\n  securityScanner: (config: TemplateConfig) => ModTemplate.securityScanner(config),\n  backupManager: (config: TemplateConfig) => ModTemplate.backupManager(config),\n};\n\n/**\n * Generate a complete mod package with files\n */\nexport function generateModPackage(builder: ModBuilder): {\n  manifest: string;\n  index: string;\n  packageJson: string;\n  readme: string;\n} {\n  const manifest = builder.buildManifest();\n  const modClass = builder.generateTemplate();\n\n  const packageJson = JSON.stringify({\n    name: `@yakkl/mod-${manifest.id}`,\n    version: manifest.version,\n    description: manifest.description,\n    main: 'dist/index.js',\n    types: 'dist/index.d.ts',\n    files: ['dist', 'README.md'],\n    scripts: {\n      build: 'tsc',\n      dev: 'tsc --watch',\n      prepublishOnly: 'npm run build'\n    },\n    dependencies: {\n      '@yakkl/core': 'workspace:*'\n    },\n    devDependencies: {\n      'typescript': '^5.0.0'\n    },\n    keywords: ['yakkl', 'wallet', 'mod', 'plugin', ...manifest.tags],\n    author: manifest.author,\n    license: manifest.license,\n    repository: manifest.repository,\n    homepage: manifest.website\n  }, null, 2);\n\n  const readme = `# ${manifest.name}\n\n${manifest.description}\n\n## Installation\n\n\\`\\`\\`bash\nnpm install @yakkl/mod-${manifest.id}\n\\`\\`\\`\n\n## Usage\n\nThis mod is automatically loaded by YAKKL Wallet when installed.\n\n## Features\n\n${manifest.tags.map(tag => `- ${tag.charAt(0).toUpperCase() + tag.slice(1)}`).join('\\n')}\n\n## Permissions\n\n${manifest.permissions?.map(permission => `- ${permission}`).join('\\n') || 'None'}\n\n## Author\n\n${manifest.author}\n\n## License\n\n${manifest.license}\n`;\n\n  return {\n    manifest: JSON.stringify(manifest, null, 2),\n    index: modClass,\n    packageJson,\n    readme\n  };\n}","/**\n * BrandingManager - Manages white label branding and theming\n */\n\nexport interface BrandingConfig {\n  name: string;\n  logo: string;\n  colors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n    background: string;\n    surface: string;\n    text: string;\n  };\n  fonts?: {\n    primary: string;\n    secondary: string;\n  };\n  theme?: 'light' | 'dark' | 'auto';\n}\n\nexport class BrandingManager {\n  private config: BrandingConfig;\n  private styleElement: HTMLStyleElement | null = null;\n  private applied = false;\n\n  constructor(config: BrandingConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Apply branding to the current page\n   */\n  async apply(): Promise<void> {\n    if (this.applied) return;\n\n    try {\n      // Apply CSS custom properties\n      this.applyCSSVariables();\n      \n      // Apply custom fonts if specified\n      if (this.config.fonts) {\n        await this.loadFonts();\n      }\n      \n      // Update page title and favicon\n      this.updatePageMetadata();\n      \n      this.applied = true;\n    } catch (error) {\n      console.error('Failed to apply branding:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update branding configuration\n   */\n  updateConfig(config: Partial<BrandingConfig>): void {\n    this.config = { ...this.config, ...config };\n    \n    if (this.applied) {\n      // Re-apply with new config\n      this.cleanup();\n      this.apply();\n    }\n  }\n\n  /**\n   * Get current branding configuration\n   */\n  getConfig(): BrandingConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Generate CSS for the branding\n   */\n  generateCSS(): string {\n    const { colors, theme } = this.config;\n    \n    return `\n      :root {\n        --yakkl-brand-primary: ${colors.primary};\n        --yakkl-brand-secondary: ${colors.secondary};\n        --yakkl-brand-accent: ${colors.accent};\n        --yakkl-brand-background: ${colors.background};\n        --yakkl-brand-surface: ${colors.surface};\n        --yakkl-brand-text: ${colors.text};\n        --yakkl-brand-theme: ${theme || 'auto'};\n      }\n      \n      .yakkl-branded {\n        --primary: var(--yakkl-brand-primary);\n        --secondary: var(--yakkl-brand-secondary);\n        --accent: var(--yakkl-brand-accent);\n        background-color: var(--yakkl-brand-background);\n        color: var(--yakkl-brand-text);\n      }\n      \n      .yakkl-branded .btn-primary {\n        background-color: var(--yakkl-brand-primary);\n        border-color: var(--yakkl-brand-primary);\n      }\n      \n      .yakkl-branded .btn-secondary {\n        background-color: var(--yakkl-brand-secondary);\n        border-color: var(--yakkl-brand-secondary);\n      }\n      \n      .yakkl-branded .text-primary {\n        color: var(--yakkl-brand-primary);\n      }\n      \n      .yakkl-branded .bg-primary {\n        background-color: var(--yakkl-brand-primary);\n      }\n    `;\n  }\n\n  /**\n   * Create branded component wrapper\n   */\n  createBrandedWrapper(element: HTMLElement): HTMLElement {\n    const wrapper = document.createElement('div');\n    wrapper.className = 'yakkl-branded';\n    wrapper.style.cssText = `\n      --primary: ${this.config.colors.primary};\n      --secondary: ${this.config.colors.secondary};\n      --accent: ${this.config.colors.accent};\n      background-color: ${this.config.colors.background};\n      color: ${this.config.colors.text};\n    `;\n    \n    if (this.config.fonts?.primary) {\n      wrapper.style.fontFamily = this.config.fonts.primary;\n    }\n    \n    wrapper.appendChild(element);\n    return wrapper;\n  }\n\n  /**\n   * Get logo URL\n   */\n  getLogoUrl(): string {\n    return this.config.logo;\n  }\n\n  /**\n   * Get brand name\n   */\n  getBrandName(): string {\n    return this.config.name;\n  }\n\n  /**\n   * Check if dark theme should be used\n   */\n  isDarkTheme(): boolean {\n    if (this.config.theme === 'dark') return true;\n    if (this.config.theme === 'light') return false;\n    \n    // Auto-detect based on system preference\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  }\n\n  /**\n   * Cleanup applied branding\n   */\n  async cleanup(): Promise<void> {\n    if (this.styleElement && this.styleElement.parentNode) {\n      this.styleElement.parentNode.removeChild(this.styleElement);\n      this.styleElement = null;\n    }\n    \n    // Remove CSS variables\n    const root = document.documentElement;\n    root.style.removeProperty('--yakkl-brand-primary');\n    root.style.removeProperty('--yakkl-brand-secondary');\n    root.style.removeProperty('--yakkl-brand-accent');\n    root.style.removeProperty('--yakkl-brand-background');\n    root.style.removeProperty('--yakkl-brand-surface');\n    root.style.removeProperty('--yakkl-brand-text');\n    root.style.removeProperty('--yakkl-brand-theme');\n    \n    this.applied = false;\n  }\n\n  /**\n   * Private methods\n   */\n  private applyCSSVariables(): void {\n    const css = this.generateCSS();\n    \n    this.styleElement = document.createElement('style');\n    this.styleElement.textContent = css;\n    this.styleElement.setAttribute('data-yakkl-branding', 'true');\n    \n    document.head.appendChild(this.styleElement);\n    \n    // Apply CSS custom properties to :root\n    const root = document.documentElement;\n    Object.entries(this.config.colors).forEach(([key, value]) => {\n      root.style.setProperty(`--yakkl-brand-${key}`, value);\n    });\n  }\n\n  private async loadFonts(): Promise<void> {\n    const { fonts } = this.config;\n    if (!fonts) return;\n\n    const fontPromises: Promise<void>[] = [];\n\n    if (fonts.primary) {\n      fontPromises.push(this.loadFont(fonts.primary));\n    }\n\n    if (fonts.secondary) {\n      fontPromises.push(this.loadFont(fonts.secondary));\n    }\n\n    await Promise.all(fontPromises);\n  }\n\n  private async loadFont(fontFamily: string): Promise<void> {\n    // Check if font is a web font (contains 'http' or is a Google Font format)\n    if (fontFamily.includes('http') || fontFamily.includes('fonts.googleapis.com')) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = fontFamily;\n      document.head.appendChild(link);\n      \n      return new Promise((resolve) => {\n        link.onload = () => resolve();\n        link.onerror = () => resolve(); // Continue even if font fails to load\n      });\n    }\n    \n    // For system fonts, just apply directly\n    return Promise.resolve();\n  }\n\n  private updatePageMetadata(): void {\n    // Update title if it's the default YAKKL title\n    if (document.title.includes('YAKKL')) {\n      document.title = document.title.replace('YAKKL', this.config.name);\n    }\n    \n    // Update favicon if logo is provided and is an icon format\n    if (this.config.logo && (this.config.logo.endsWith('.ico') || \n        this.config.logo.endsWith('.png') || this.config.logo.endsWith('.svg'))) {\n      let favicon = document.querySelector('link[rel=\"icon\"]') as HTMLLinkElement;\n      if (!favicon) {\n        favicon = document.createElement('link');\n        favicon.rel = 'icon';\n        document.head.appendChild(favicon);\n      }\n      favicon.href = this.config.logo;\n    }\n  }\n}","/**\n * WhiteLabelWallet - Customizable wallet solution for businesses\n */\n\nimport type { WalletEngine } from '@yakkl/core';\nimport { BrandingManager } from './BrandingManager';\n\nexport interface WhiteLabelConfig {\n  apiKey: string;\n  appName: string;\n  appVersion: string;\n  branding: {\n    name: string;\n    logo: string;\n    colors: {\n      primary: string;\n      secondary: string;\n      accent: string;\n      background: string;\n      surface: string;\n      text: string;\n    };\n    fonts?: {\n      primary: string;\n      secondary: string;\n    };\n    theme?: 'light' | 'dark' | 'auto';\n  };\n  features?: {\n    enableSwap?: boolean;\n    enableBuy?: boolean;\n    enableStaking?: boolean;\n    enableNFTs?: boolean;\n    enableDeFi?: boolean;\n    customNetworks?: boolean;\n  };\n  restrictions?: {\n    allowedNetworks?: string[];\n    blockedTokens?: string[];\n    maxTransactionAmount?: string;\n    requireKYC?: boolean;\n  };\n  callbacks?: {\n    onTransactionSigned?: (txHash: string) => void;\n    onUserAction?: (action: string, data: any) => void;\n    onError?: (error: Error) => void;\n  };\n}\n\nexport class WhiteLabelWallet {\n  private engine: WalletEngine | null = null;\n  private config: WhiteLabelConfig;\n  private branding: BrandingManager;\n  private initialized = false;\n\n  constructor(config: WhiteLabelConfig) {\n    this.config = config;\n    this.branding = new BrandingManager(config.branding);\n  }\n\n  /**\n   * Initialize the white label wallet\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Create wallet engine with white label configuration\n      const { createWallet } = await import('@yakkl/core');\n      \n      this.engine = await createWallet({\n        name: this.config.appName,\n        version: this.config.appVersion,\n        embedded: true,\n        restrictions: this.mapRestrictions(),\n        enableMods: false, // Disable mods for white label\n        enableDiscovery: false,\n        storagePrefix: `whitelabel:${this.config.appName}`,\n        logLevel: 'warn',\n        branding: {\n          name: this.config.branding.name,\n          logo: this.config.branding.logo,\n          theme: this.config.branding.colors,\n          whiteLabel: true\n        }\n      });\n\n      // Apply branding\n      await this.branding.apply();\n\n      // Setup callbacks\n      this.setupCallbacks();\n\n      this.initialized = true;\n    } catch (error) {\n      this.config.callbacks?.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the wallet engine\n   */\n  getEngine(): WalletEngine {\n    if (!this.engine) {\n      throw new Error('White label wallet not initialized');\n    }\n    return this.engine;\n  }\n\n  /**\n   * Get branding manager\n   */\n  getBrandingManager(): BrandingManager {\n    return this.branding;\n  }\n\n  /**\n   * Check if feature is enabled\n   */\n  isFeatureEnabled(feature: keyof WhiteLabelConfig['features']): boolean {\n    return this.config.features?.[feature] ?? false;\n  }\n\n  /**\n   * Get wallet configuration\n   */\n  getConfig(): WhiteLabelConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update branding at runtime\n   */\n  async updateBranding(branding: Partial<WhiteLabelConfig['branding']>): Promise<void> {\n    this.config.branding = { ...this.config.branding, ...branding };\n    this.branding.updateConfig(this.config.branding);\n    await this.branding.apply();\n  }\n\n  /**\n   * Create embedded wallet UI\n   */\n  createEmbeddedUI(container: HTMLElement, options?: {\n    width?: string;\n    height?: string;\n    mode?: 'popup' | 'inline' | 'modal';\n  }): HTMLElement {\n    const iframe = document.createElement('iframe');\n    iframe.style.width = options?.width || '400px';\n    iframe.style.height = options?.height || '600px';\n    iframe.style.border = 'none';\n    iframe.style.borderRadius = '12px';\n    iframe.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';\n    \n    // Set up iframe source with white label configuration\n    const params = new URLSearchParams({\n      appName: this.config.appName,\n      theme: JSON.stringify(this.config.branding.colors),\n      mode: options?.mode || 'inline'\n    });\n    \n    iframe.src = `/wallet-embed?${params.toString()}`;\n    container.appendChild(iframe);\n    \n    return iframe;\n  }\n\n  /**\n   * Destroy the white label wallet\n   */\n  async destroy(): Promise<void> {\n    if (this.engine) {\n      await this.engine.destroy();\n      this.engine = null;\n    }\n    \n    await this.branding.cleanup();\n    this.initialized = false;\n  }\n\n  /**\n   * Private methods\n   */\n  private mapRestrictions(): string[] {\n    const restrictions: string[] = [];\n    \n    if (this.config.restrictions?.requireKYC) {\n      restrictions.push('enterprise-only');\n    }\n    \n    if (this.config.restrictions?.allowedNetworks?.length) {\n      restrictions.push('no-external-connections');\n    }\n    \n    return restrictions;\n  }\n\n  private setupCallbacks(): void {\n    if (!this.engine) return;\n\n    this.engine.on('transaction:signed', (signedTx) => {\n      this.config.callbacks?.onTransactionSigned?.(signedTx.hash);\n      this.config.callbacks?.onUserAction?.('transaction:signed', { hash: signedTx.hash });\n    });\n\n    this.engine.on('account:selected', (account) => {\n      this.config.callbacks?.onUserAction?.('account:selected', { address: account.address });\n    });\n\n    this.engine.on('network:changed', (network) => {\n      this.config.callbacks?.onUserAction?.('network:changed', { chainId: network.chainId });\n    });\n  }\n}","/**\n * Factory functions for white label wallet creation\n */\n\nimport { WhiteLabelWallet, type WhiteLabelConfig } from './WhiteLabelWallet';\nimport { BrandingManager, type BrandingConfig } from './BrandingManager';\n\n/**\n * Create a new white label wallet instance\n */\nexport function createWhiteLabelWallet(config: WhiteLabelConfig): WhiteLabelWallet {\n  return new WhiteLabelWallet(config);\n}\n\n/**\n * Create a branding manager instance\n */\nexport function createBrandingManager(config: BrandingConfig): BrandingManager {\n  return new BrandingManager(config);\n}\n\n/**\n * Quick setup function for common white label configurations\n */\nexport function createQuickWhiteLabelWallet(options: {\n  apiKey: string;\n  appName: string;\n  primaryColor: string;\n  logo?: string;\n  features?: string[];\n}): WhiteLabelWallet {\n  const config: WhiteLabelConfig = {\n    apiKey: options.apiKey,\n    appName: options.appName,\n    appVersion: '1.0.0',\n    branding: {\n      name: options.appName,\n      logo: options.logo || '',\n      colors: {\n        primary: options.primaryColor,\n        secondary: adjustColor(options.primaryColor, -20),\n        accent: adjustColor(options.primaryColor, 20),\n        background: '#ffffff',\n        surface: '#f8f9fa',\n        text: '#212529'\n      },\n      theme: 'auto'\n    },\n    features: {\n      enableSwap: options.features?.includes('swap') ?? true,\n      enableBuy: options.features?.includes('buy') ?? true,\n      enableStaking: options.features?.includes('staking') ?? false,\n      enableNFTs: options.features?.includes('nfts') ?? true,\n      enableDeFi: options.features?.includes('defi') ?? false,\n      customNetworks: options.features?.includes('custom-networks') ?? false\n    }\n  };\n\n  return new WhiteLabelWallet(config);\n}\n\n/**\n * Create a white label wallet with enterprise features\n */\nexport function createEnterpriseWhiteLabelWallet(options: {\n  apiKey: string;\n  appName: string;\n  branding: BrandingConfig;\n  allowedNetworks?: string[];\n  maxTransactionAmount?: string;\n  requireKYC?: boolean;\n}): WhiteLabelWallet {\n  const config: WhiteLabelConfig = {\n    apiKey: options.apiKey,\n    appName: options.appName,\n    appVersion: '1.0.0',\n    branding: options.branding,\n    features: {\n      enableSwap: true,\n      enableBuy: true,\n      enableStaking: true,\n      enableNFTs: true,\n      enableDeFi: true,\n      customNetworks: true\n    },\n    restrictions: {\n      allowedNetworks: options.allowedNetworks,\n      maxTransactionAmount: options.maxTransactionAmount,\n      requireKYC: options.requireKYC ?? false\n    }\n  };\n\n  return new WhiteLabelWallet(config);\n}\n\n/**\n * Pre-configured white label wallet templates\n */\nexport const whitelabelTemplates = {\n  /**\n   * Simple trading wallet\n   */\n  trading: (apiKey: string, appName: string, primaryColor: string) => \n    createQuickWhiteLabelWallet({\n      apiKey,\n      appName,\n      primaryColor,\n      features: ['swap', 'buy']\n    }),\n\n  /**\n   * Full-featured DeFi wallet\n   */\n  defi: (apiKey: string, appName: string, primaryColor: string) =>\n    createQuickWhiteLabelWallet({\n      apiKey,\n      appName,\n      primaryColor,\n      features: ['swap', 'buy', 'staking', 'defi', 'custom-networks']\n    }),\n\n  /**\n   * NFT-focused wallet\n   */\n  nft: (apiKey: string, appName: string, primaryColor: string) =>\n    createQuickWhiteLabelWallet({\n      apiKey,\n      appName,\n      primaryColor,\n      features: ['nfts', 'buy']\n    }),\n\n  /**\n   * Enterprise custody wallet\n   */\n  custody: (apiKey: string, appName: string, branding: BrandingConfig) =>\n    createEnterpriseWhiteLabelWallet({\n      apiKey,\n      appName,\n      branding,\n      requireKYC: true,\n      allowedNetworks: ['ethereum', 'polygon']\n    })\n};\n\n/**\n * Utility function to adjust color brightness\n */\nfunction adjustColor(hex: string, percent: number): string {\n  const num = parseInt(hex.replace('#', ''), 16);\n  const amt = Math.round(2.55 * percent);\n  const R = (num >> 16) + amt;\n  const G = (num >> 8 & 0x00FF) + amt;\n  const B = (num & 0x0000FF) + amt;\n  \n  return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n    (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n    (B < 255 ? B < 1 ? 0 : B : 255))\n    .toString(16)\n    .slice(1);\n}","/**\n * YakklProvider - Main provider for YAKKL wallet integration\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport type { WalletEngine } from '@yakkl/core';\n\nexport interface YakklProviderConfig {\n  apiKey?: string;\n  network?: string;\n  autoConnect?: boolean;\n  enableMods?: boolean;\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface ProviderEvents {\n  'connect': (accounts: string[]) => void;\n  'disconnect': () => void;\n  'accountsChanged': (accounts: string[]) => void;\n  'chainChanged': (chainId: string) => void;\n  'message': (message: any) => void;\n}\n\nexport interface EthereumRequest {\n  method: string;\n  params?: any[];\n}\n\nexport class YakklProvider extends EventEmitter<ProviderEvents> {\n  public readonly isYakkl = true;\n  public readonly isMetaMask = false; // For compatibility\n  \n  private engine: WalletEngine | null = null;\n  private config: YakklProviderConfig;\n  private _accounts: string[] = [];\n  private _chainId: string = '0x1';\n  private _connected = false;\n  private _initialized = false;\n\n  constructor(config: YakklProviderConfig = {}) {\n    super();\n    this.config = {\n      network: 'ethereum',\n      autoConnect: false,\n      enableMods: true,\n      logLevel: 'warn',\n      ...config\n    };\n  }\n\n  /**\n   * Initialize the provider\n   */\n  async initialize(): Promise<void> {\n    if (this._initialized) return;\n\n    try {\n      // Import and create wallet engine\n      const { createWallet } = await import('@yakkl/core');\n      \n      this.engine = await createWallet({\n        name: 'YAKKL Provider',\n        version: '1.0.0',\n        embedded: true,\n        enableMods: this.config.enableMods,\n        logLevel: this.config.logLevel || 'warn',\n        provider: true\n      });\n\n      // Setup event listeners\n      this.setupEventListeners();\n\n      this._initialized = true;\n\n      // Auto-connect if enabled\n      if (this.config.autoConnect) {\n        await this.connect();\n      }\n    } catch (error) {\n      console.error('Failed to initialize YAKKL provider:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Connect to the wallet\n   */\n  async connect(): Promise<string[]> {\n    if (!this.engine) {\n      throw new Error('Provider not initialized');\n    }\n\n    try {\n      // Get accounts from engine\n      const accounts = await this.engine.accounts.getAll();\n      this._accounts = accounts.map(account => account.address);\n      \n      if (this._accounts.length === 0) {\n        // Create a new account if none exist\n        const newAccount = await this.engine.accounts.create();\n        this._accounts = [newAccount.address];\n      }\n\n      // Get current network\n      const currentNetwork = await this.engine.networks.getCurrent();\n      this._chainId = `0x${currentNetwork.chainId.toString(16)}`;\n\n      this._connected = true;\n      this.emit('connect', this._accounts);\n      this.emit('accountsChanged', this._accounts);\n\n      return this._accounts;\n    } catch (error) {\n      console.error('Failed to connect:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from the wallet\n   */\n  async disconnect(): Promise<void> {\n    this._connected = false;\n    this._accounts = [];\n    this.emit('disconnect');\n    this.emit('accountsChanged', []);\n  }\n\n  /**\n   * Send an RPC request\n   */\n  async request(args: EthereumRequest): Promise<any> {\n    if (!this.engine) {\n      throw new Error('Provider not initialized');\n    }\n\n    const { method, params = [] } = args;\n\n    switch (method) {\n      case 'eth_requestAccounts':\n        return await this.connect();\n\n      case 'eth_accounts':\n        return this._accounts;\n\n      case 'eth_chainId':\n        return this._chainId;\n\n      case 'net_version':\n        return parseInt(this._chainId, 16).toString();\n\n      case 'eth_getBalance':\n        if (!params[0]) throw new Error('Address required');\n        return await this.engine.accounts.getBalance(params[0]);\n\n      case 'eth_sendTransaction':\n        if (!params[0]) throw new Error('Transaction object required');\n        const transaction = await this.engine.transactions.send(params[0]);\n        return transaction.hash;\n\n      case 'eth_signTransaction':\n        if (!params[0]) throw new Error('Transaction object required');\n        const signedTx = await this.engine.transactions.sign(params[0]);\n        return signedTx.serialized;\n\n      case 'personal_sign':\n      case 'eth_sign':\n        if (!params[0] || !params[1]) throw new Error('Message and address required');\n        // TODO: Implement message signing\n        throw new Error('Message signing not yet implemented');\n\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4':\n        if (!params[0] || !params[1]) throw new Error('Address and typed data required');\n        // TODO: Implement typed data signing\n        throw new Error('Typed data signing not yet implemented');\n\n      case 'wallet_switchEthereumChain':\n        if (!params[0]?.chainId) throw new Error('Chain ID required');\n        return await this.switchChain(params[0].chainId);\n\n      case 'wallet_addEthereumChain':\n        if (!params[0]) throw new Error('Chain parameters required');\n        return await this.addChain(params[0]);\n\n      case 'wallet_getPermissions':\n        return [{ parentCapability: 'eth_accounts' }];\n\n      case 'wallet_requestPermissions':\n        return [{ parentCapability: 'eth_accounts' }];\n\n      default:\n        throw new Error(`Unsupported method: ${method}`);\n    }\n  }\n\n  /**\n   * Check if the provider is connected\n   */\n  isConnected(): boolean {\n    return this._connected;\n  }\n\n  /**\n   * Get current accounts\n   */\n  get accounts(): string[] {\n    return [...this._accounts];\n  }\n\n  /**\n   * Get current chain ID\n   */\n  get chainId(): string {\n    return this._chainId;\n  }\n\n  /**\n   * Get the wallet engine instance\n   */\n  getEngine(): WalletEngine | null {\n    return this.engine;\n  }\n\n  /**\n   * Private methods\n   */\n  private async switchChain(chainId: string): Promise<void> {\n    if (!this.engine) throw new Error('Provider not initialized');\n\n    const numericChainId = parseInt(chainId, 16);\n    \n    try {\n      await this.engine.networks.switchTo(numericChainId.toString());\n      this._chainId = chainId;\n      this.emit('chainChanged', chainId);\n    } catch (error) {\n      throw new Error(`Failed to switch to chain ${chainId}: ${error}`);\n    }\n  }\n\n  private async addChain(chainParams: any): Promise<void> {\n    if (!this.engine) throw new Error('Provider not initialized');\n\n    const { chainId, chainName, rpcUrls, nativeCurrency, blockExplorerUrls } = chainParams;\n    \n    try {\n      await this.engine.networks.add({\n        id: chainName.toLowerCase().replace(/\\s+/g, '-'),\n        chainId: parseInt(chainId, 16),\n        name: chainName,\n        rpcUrl: rpcUrls[0],\n        currency: nativeCurrency,\n        explorerUrl: blockExplorerUrls?.[0]\n      });\n    } catch (error) {\n      throw new Error(`Failed to add chain: ${error}`);\n    }\n  }\n\n  private setupEventListeners(): void {\n    if (!this.engine) return;\n\n    this.engine.on('account:selected', (account) => {\n      this._accounts = [account.address];\n      this.emit('accountsChanged', this._accounts);\n    });\n\n    this.engine.on('network:changed', (network) => {\n      this._chainId = `0x${network.chainId.toString(16)}`;\n      this.emit('chainChanged', this._chainId);\n    });\n\n    this.engine.on('transaction:sent', (transaction) => {\n      this.emit('message', {\n        type: 'transaction:sent',\n        data: { hash: transaction.hash }\n      });\n    });\n  }\n}\n\n/**\n * Create a YAKKL provider instance\n */\nexport function createYakklProvider(config?: YakklProviderConfig): YakklProvider {\n  return new YakklProvider(config);\n}","/**\n * WalletConnector - Universal wallet connection interface\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { YakklProvider } from './YakklProvider';\nimport type { EthereumRequest } from './YakklProvider';\n\nexport interface WalletInfo {\n  name: string;\n  icon: string;\n  description: string;\n  installed: boolean;\n  provider?: any;\n}\n\nexport interface ConnectorEvents {\n  'walletConnected': (wallet: WalletInfo, accounts: string[]) => void;\n  'walletDisconnected': (wallet: WalletInfo) => void;\n  'accountsChanged': (accounts: string[]) => void;\n  'chainChanged': (chainId: string) => void;\n  'error': (error: Error) => void;\n}\n\nexport class WalletConnector extends EventEmitter<ConnectorEvents> {\n  private connectedWallet: WalletInfo | null = null;\n  private provider: any = null;\n  private yakklProvider: YakklProvider | null = null;\n\n  constructor() {\n    super();\n    this.setupYakklProvider();\n  }\n\n  /**\n   * Get available wallets\n   */\n  getAvailableWallets(): WalletInfo[] {\n    const wallets: WalletInfo[] = [\n      {\n        name: 'YAKKL Wallet',\n        icon: '/yakkl-icon.svg',\n        description: 'Connect with YAKKL Wallet',\n        installed: true,\n        provider: this.yakklProvider\n      }\n    ];\n\n    // Check for MetaMask\n    if (typeof window !== 'undefined' && (window as any).ethereum?.isMetaMask) {\n      wallets.push({\n        name: 'MetaMask',\n        icon: '/metamask-icon.svg',\n        description: 'Connect with MetaMask',\n        installed: true,\n        provider: (window as any).ethereum\n      });\n    }\n\n    // Check for Coinbase Wallet\n    if (typeof window !== 'undefined' && (window as any).ethereum?.isCoinbaseWallet) {\n      wallets.push({\n        name: 'Coinbase Wallet',\n        icon: '/coinbase-icon.svg',\n        description: 'Connect with Coinbase Wallet',\n        installed: true,\n        provider: (window as any).ethereum\n      });\n    }\n\n    // Check for WalletConnect\n    if (typeof window !== 'undefined' && (window as any).WalletConnect) {\n      wallets.push({\n        name: 'WalletConnect',\n        icon: '/walletconnect-icon.svg',\n        description: 'Connect with WalletConnect',\n        installed: true,\n        provider: null // WalletConnect requires special handling\n      });\n    }\n\n    return wallets;\n  }\n\n  /**\n   * Connect to a specific wallet\n   */\n  async connect(walletName: string): Promise<string[]> {\n    const wallet = this.getAvailableWallets().find(w => w.name === walletName);\n    \n    if (!wallet) {\n      throw new Error(`Wallet ${walletName} not found`);\n    }\n\n    if (!wallet.installed) {\n      throw new Error(`Wallet ${walletName} is not installed`);\n    }\n\n    try {\n      let accounts: string[] = [];\n\n      if (wallet.name === 'YAKKL Wallet') {\n        if (!this.yakklProvider) {\n          throw new Error('YAKKL provider not initialized');\n        }\n        await this.yakklProvider.initialize();\n        accounts = await this.yakklProvider.connect();\n        this.provider = this.yakklProvider;\n      } else {\n        // Handle other wallets\n        if (!wallet.provider) {\n          throw new Error(`Provider not available for ${walletName}`);\n        }\n        \n        this.provider = wallet.provider;\n        accounts = await this.provider.request({ method: 'eth_requestAccounts' });\n      }\n\n      this.connectedWallet = wallet;\n      this.setupProviderListeners();\n      \n      this.emit('walletConnected', wallet, accounts);\n      return accounts;\n    } catch (error) {\n      this.emit('error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from current wallet\n   */\n  async disconnect(): Promise<void> {\n    if (!this.connectedWallet) return;\n\n    try {\n      if (this.connectedWallet.name === 'YAKKL Wallet' && this.yakklProvider) {\n        await this.yakklProvider.disconnect();\n      }\n\n      const wallet = this.connectedWallet;\n      this.connectedWallet = null;\n      this.provider = null;\n      \n      this.emit('walletDisconnected', wallet);\n    } catch (error) {\n      this.emit('error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a request to the connected wallet\n   */\n  async request(args: EthereumRequest): Promise<any> {\n    if (!this.provider) {\n      throw new Error('No wallet connected');\n    }\n\n    try {\n      return await this.provider.request(args);\n    } catch (error) {\n      this.emit('error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if a wallet is connected\n   */\n  isConnected(): boolean {\n    return this.connectedWallet !== null;\n  }\n\n  /**\n   * Get currently connected wallet\n   */\n  getConnectedWallet(): WalletInfo | null {\n    return this.connectedWallet;\n  }\n\n  /**\n   * Get the current provider\n   */\n  getProvider(): any {\n    return this.provider;\n  }\n\n  /**\n   * Get current accounts\n   */\n  async getAccounts(): Promise<string[]> {\n    if (!this.provider) return [];\n    \n    try {\n      return await this.provider.request({ method: 'eth_accounts' });\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * Get current chain ID\n   */\n  async getChainId(): Promise<string> {\n    if (!this.provider) return '0x1';\n    \n    try {\n      return await this.provider.request({ method: 'eth_chainId' });\n    } catch (error) {\n      return '0x1';\n    }\n  }\n\n  /**\n   * Switch to a different network\n   */\n  async switchNetwork(chainId: string): Promise<void> {\n    if (!this.provider) {\n      throw new Error('No wallet connected');\n    }\n\n    try {\n      await this.provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId }]\n      });\n    } catch (error) {\n      this.emit('error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add a new network to the wallet\n   */\n  async addNetwork(networkParams: {\n    chainId: string;\n    chainName: string;\n    rpcUrls: string[];\n    nativeCurrency: {\n      name: string;\n      symbol: string;\n      decimals: number;\n    };\n    blockExplorerUrls?: string[];\n  }): Promise<void> {\n    if (!this.provider) {\n      throw new Error('No wallet connected');\n    }\n\n    try {\n      await this.provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [networkParams]\n      });\n    } catch (error) {\n      this.emit('error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sign a message\n   */\n  async signMessage(address: string, message: string): Promise<string> {\n    if (!this.provider) {\n      throw new Error('No wallet connected');\n    }\n\n    try {\n      return await this.provider.request({\n        method: 'personal_sign',\n        params: [message, address]\n      });\n    } catch (error) {\n      this.emit('error', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Private methods\n   */\n  private setupYakklProvider(): void {\n    this.yakklProvider = new YakklProvider({\n      autoConnect: false,\n      enableMods: true\n    });\n  }\n\n  private setupProviderListeners(): void {\n    if (!this.provider) return;\n\n    // Remove existing listeners\n    this.removeAllListeners();\n\n    // Setup new listeners\n    if (this.provider.on) {\n      this.provider.on('accountsChanged', (accounts: string[]) => {\n        this.emit('accountsChanged', accounts);\n      });\n\n      this.provider.on('chainChanged', (chainId: string) => {\n        this.emit('chainChanged', chainId);\n      });\n\n      this.provider.on('disconnect', () => {\n        if (this.connectedWallet) {\n          const wallet = this.connectedWallet;\n          this.connectedWallet = null;\n          this.provider = null;\n          this.emit('walletDisconnected', wallet);\n        }\n      });\n    }\n  }\n}\n\n/**\n * Create a wallet connector instance\n */\nexport function createWalletConnector(): WalletConnector {\n  return new WalletConnector();\n}","/**\n * EventBridge - Cross-frame communication and event management\n */\n\nimport { EventEmitter } from 'eventemitter3';\n\nexport interface BridgeMessage {\n  id: string;\n  type: string;\n  source: string;\n  target: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface BridgeEvents {\n  'message': (message: BridgeMessage) => void;\n  'request': (message: BridgeMessage) => void;\n  'response': (message: BridgeMessage) => void;\n  'error': (error: Error) => void;\n}\n\nexport class EventBridge extends EventEmitter<BridgeEvents> {\n  private instanceId: string;\n  private allowedOrigins: string[];\n  private pendingRequests = new Map<string, {\n    resolve: (value: any) => void;\n    reject: (error: Error) => void;\n    timeout: NodeJS.Timeout;\n  }>();\n  private requestTimeout = 30000; // 30 seconds\n\n  constructor(options: {\n    instanceId?: string;\n    allowedOrigins?: string[];\n    requestTimeout?: number;\n  } = {}) {\n    super();\n    \n    this.instanceId = options.instanceId || this.generateId();\n    this.allowedOrigins = options.allowedOrigins || ['*'];\n    this.requestTimeout = options.requestTimeout || 30000;\n    \n    this.setupMessageListener();\n  }\n\n  /**\n   * Send a message to a target\n   */\n  send(target: string, type: string, data: any = {}): void {\n    const message: BridgeMessage = {\n      id: this.generateId(),\n      type,\n      source: this.instanceId,\n      target,\n      data,\n      timestamp: Date.now()\n    };\n\n    this.postMessage(message);\n  }\n\n  /**\n   * Send a request and wait for response\n   */\n  async request(target: string, type: string, data: any = {}): Promise<any> {\n    const message: BridgeMessage = {\n      id: this.generateId(),\n      type,\n      source: this.instanceId,\n      target,\n      data,\n      timestamp: Date.now()\n    };\n\n    return new Promise((resolve, reject) => {\n      // Set up timeout\n      const timeout = setTimeout(() => {\n        this.pendingRequests.delete(message.id);\n        reject(new Error(`Request timeout: ${type}`));\n      }, this.requestTimeout);\n\n      // Store pending request\n      this.pendingRequests.set(message.id, {\n        resolve,\n        reject,\n        timeout\n      });\n\n      // Send message\n      this.postMessage(message);\n    });\n  }\n\n  /**\n   * Respond to a request\n   */\n  respond(originalMessage: BridgeMessage, data: any): void {\n    const response: BridgeMessage = {\n      id: this.generateId(),\n      type: `${originalMessage.type}:response`,\n      source: this.instanceId,\n      target: originalMessage.source,\n      data: {\n        requestId: originalMessage.id,\n        ...data\n      },\n      timestamp: Date.now()\n    };\n\n    this.postMessage(response);\n  }\n\n  /**\n   * Register a handler for a specific message type\n   */\n  onMessage(type: string, handler: (data: any, message: BridgeMessage) => void): void {\n    this.on('message', (message) => {\n      if (message.type === type) {\n        handler(message.data, message);\n      }\n    });\n  }\n\n  /**\n   * Register a handler for a specific request type\n   */\n  onRequest(type: string, handler: (data: any, message: BridgeMessage) => Promise<any> | any): void {\n    this.on('request', async (message) => {\n      if (message.type === type) {\n        try {\n          const result = await handler(message.data, message);\n          this.respond(message, { success: true, result });\n        } catch (error) {\n          this.respond(message, { \n            success: false, \n            error: error instanceof Error ? error.message : 'Unknown error' \n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Set allowed origins for security\n   */\n  setAllowedOrigins(origins: string[]): void {\n    this.allowedOrigins = origins;\n  }\n\n  /**\n   * Connect to a specific window/frame\n   */\n  connectToWindow(targetWindow: Window, targetOrigin: string = '*'): void {\n    this.postMessage = (message: BridgeMessage) => {\n      targetWindow.postMessage(message, targetOrigin);\n    };\n  }\n\n  /**\n   * Connect to parent window (for iframes)\n   */\n  connectToParent(): void {\n    if (window.parent && window.parent !== window) {\n      this.connectToWindow(window.parent);\n    }\n  }\n\n  /**\n   * Connect to opener window (for popups)\n   */\n  connectToOpener(): void {\n    if (window.opener) {\n      this.connectToWindow(window.opener);\n    }\n  }\n\n  /**\n   * Broadcast to all connected windows\n   */\n  broadcast(type: string, data: any = {}): void {\n    const message: BridgeMessage = {\n      id: this.generateId(),\n      type,\n      source: this.instanceId,\n      target: '*',\n      data,\n      timestamp: Date.now()\n    };\n\n    // Send to parent\n    if (window.parent && window.parent !== window) {\n      window.parent.postMessage(message, '*');\n    }\n\n    // Send to opener\n    if (window.opener) {\n      window.opener.postMessage(message, '*');\n    }\n  }\n\n  /**\n   * Create a secure channel between two instances\n   */\n  createSecureChannel(target: string, sharedSecret?: string): SecureChannel {\n    return new SecureChannel(this, target, sharedSecret);\n  }\n\n  /**\n   * Destroy the bridge and clean up\n   */\n  destroy(): void {\n    // Clear pending requests\n    for (const [id, request] of this.pendingRequests) {\n      clearTimeout(request.timeout);\n      request.reject(new Error('Bridge destroyed'));\n    }\n    this.pendingRequests.clear();\n\n    // Remove event listeners\n    this.removeAllListeners();\n\n    // Remove message listener\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('message', this.messageHandler);\n    }\n  }\n\n  /**\n   * Private methods\n   */\n  private messageHandler = (event: MessageEvent) => {\n    // Check origin security\n    if (this.allowedOrigins.length > 0 && \n        !this.allowedOrigins.includes('*') && \n        !this.allowedOrigins.includes(event.origin)) {\n      return;\n    }\n\n    const message = event.data as BridgeMessage;\n    \n    // Validate message format\n    if (!this.isValidMessage(message)) {\n      return;\n    }\n\n    // Skip messages not for this instance (unless broadcast)\n    if (message.target !== this.instanceId && message.target !== '*') {\n      return;\n    }\n\n    // Handle response messages\n    if (message.type.endsWith(':response')) {\n      this.handleResponse(message);\n      return;\n    }\n\n    // Emit appropriate events\n    this.emit('message', message);\n    \n    // Check if this is a request (expecting response)\n    if (message.data && typeof message.data === 'object' && !message.type.endsWith(':response')) {\n      this.emit('request', message);\n    }\n  };\n\n  private setupMessageListener(): void {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('message', this.messageHandler);\n    }\n  }\n\n  private handleResponse(message: BridgeMessage): void {\n    const requestId = message.data?.requestId;\n    if (!requestId || !this.pendingRequests.has(requestId)) {\n      return;\n    }\n\n    const request = this.pendingRequests.get(requestId)!;\n    this.pendingRequests.delete(requestId);\n    \n    clearTimeout(request.timeout);\n\n    if (message.data.success) {\n      request.resolve(message.data.result);\n    } else {\n      request.reject(new Error(message.data.error || 'Request failed'));\n    }\n  }\n\n  private isValidMessage(message: any): message is BridgeMessage {\n    return message &&\n           typeof message === 'object' &&\n           typeof message.id === 'string' &&\n           typeof message.type === 'string' &&\n           typeof message.source === 'string' &&\n           typeof message.target === 'string' &&\n           typeof message.timestamp === 'number';\n  }\n\n  private postMessage(message: BridgeMessage): void {\n    if (typeof window !== 'undefined') {\n      window.postMessage(message, '*');\n    }\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2, 15) + \n           Math.random().toString(36).substring(2, 15);\n  }\n}\n\n/**\n * SecureChannel - Encrypted communication channel\n */\nexport class SecureChannel {\n  private bridge: EventBridge;\n  private target: string;\n  private secret: string;\n\n  constructor(bridge: EventBridge, target: string, sharedSecret?: string) {\n    this.bridge = bridge;\n    this.target = target;\n    this.secret = sharedSecret || this.generateSecret();\n  }\n\n  /**\n   * Send encrypted message\n   */\n  async send(type: string, data: any): Promise<void> {\n    const encryptedData = await this.encrypt(data);\n    this.bridge.send(this.target, `secure:${type}`, {\n      encrypted: true,\n      data: encryptedData\n    });\n  }\n\n  /**\n   * Send encrypted request\n   */\n  async request(type: string, data: any): Promise<any> {\n    const encryptedData = await this.encrypt(data);\n    const response = await this.bridge.request(this.target, `secure:${type}`, {\n      encrypted: true,\n      data: encryptedData\n    });\n    \n    if (response.encrypted) {\n      return await this.decrypt(response.data);\n    }\n    \n    return response;\n  }\n\n  /**\n   * Listen for encrypted messages\n   */\n  onMessage(type: string, handler: (data: any) => void): void {\n    this.bridge.onMessage(`secure:${type}`, async (messageData) => {\n      if (messageData.encrypted) {\n        const decryptedData = await this.decrypt(messageData.data);\n        handler(decryptedData);\n      }\n    });\n  }\n\n  private async encrypt(data: any): Promise<string> {\n    // Simple XOR encryption for demo - use proper encryption in production\n    const json = JSON.stringify(data);\n    const encrypted = Array.from(json).map((char, i) => \n      String.fromCharCode(char.charCodeAt(0) ^ this.secret.charCodeAt(i % this.secret.length))\n    ).join('');\n    \n    return btoa(encrypted);\n  }\n\n  private async decrypt(encryptedData: string): Promise<any> {\n    const encrypted = atob(encryptedData);\n    const decrypted = Array.from(encrypted).map((char, i) => \n      String.fromCharCode(char.charCodeAt(0) ^ this.secret.charCodeAt(i % this.secret.length))\n    ).join('');\n    \n    return JSON.parse(decrypted);\n  }\n\n  private generateSecret(): string {\n    return Math.random().toString(36).substring(2, 15) + Date.now().toString(36);\n  }\n}\n\n/**\n * Create an event bridge instance\n */\nexport function createEventBridge(options?: {\n  instanceId?: string;\n  allowedOrigins?: string[];\n  requestTimeout?: number;\n}): EventBridge {\n  return new EventBridge(options);\n}"],"names":[],"mappings":"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"}